<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>槐月初叁的个人博客</title>
  
  <subtitle>欢迎来到我的博客</subtitle>
  <link href="https://huaiyuechusan.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://huaiyuechusan.gitee.io/"/>
  <updated>2025-02-09T06:45:22.117Z</updated>
  <id>https://huaiyuechusan.gitee.io/</id>
  
  <author>
    <name>槐月初叁</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://huaiyuechusan.gitee.io/archives/0.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/0.html</id>
    <published>2025-02-09T06:46:28.256Z</published>
    <updated>2025-02-09T06:45:22.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SanShui-API-使用教程"><a href="#SanShui-API-使用教程" class="headerlink" title="SanShui API 使用教程"></a>SanShui API 使用教程</h1><h2 id="SanShui-介绍"><a href="#SanShui-介绍" class="headerlink" title="SanShui 介绍"></a>SanShui 介绍</h2><p>SanShui API 是一个低价的 gpt 中转 API，支持 gpt3.5 gpt4 Claude3 DeepSeek 全系列模型。</p><p>价格优惠，仅需 <strong>1.5 元</strong>即可购买 1 美刀额度，只要官方价格的 <strong>五分之一</strong></p><p>官方同等计费方式，不限时间，按量计费，明细可查，每一笔消耗都公开透明。</p><p>官网地址：<a href="https://api.aigpt4.top/">SanShui API</a></p><p>支持模型</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202502091443591.png" alt="image-20250209140940808"></p><h2 id="如何充值"><a href="#如何充值" class="headerlink" title="如何充值"></a>如何充值</h2><p>添加<strong>微信：sanshuibiancheng</strong> 联系管理员进行充值</p><h2 id="计费规则"><a href="#计费规则" class="headerlink" title="计费规则"></a>计费规则</h2><p><strong>总的来讲，就是我们后台用美元计费，与 open AI 的模型价格保持一致，折扣体现在充值的时候。目前是1 美元只需要 1.5 人民币，详细以<a href="https://api.aigpt4.top/topup">充值</a>页面价格为准。</strong></p><h3 id="请求明细查看"><a href="#请求明细查看" class="headerlink" title="请求明细查看"></a>请求明细查看</h3><p>在本网站的<a href="https://api.aigpt4.top/log">日志</a>界面可以查看到每一次调用的明细</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202502091443592.png" alt="image-20250209141459807"></p><p>提示是用户使用时输入到模型的所有信息消耗的 token 数，补全是模型输出的所有信息消耗的 token 数 ，提示和补全都是要扣费的。</p><p>所有模型的计费方式，就是基于消耗的多少 token 来计算价格。 大部分情况下，你都可以使用 1 汉字 = 2 token 来近似估算中文聊天的中文所需 token 数。但这并不是绝对的，因为不同的字实际 token 不一样，官方只按 token 计算。</p><h3 id="关于倍率"><a href="#关于倍率" class="headerlink" title="关于倍率"></a>关于倍率</h3><p>倍率是用来计算模型价格的，从而计算额度消耗</p><p>额度消耗 = 分组倍率 <em> 基准价格 </em> 模型倍率 <em> （提示 token 数 + 补全 token 数 </em> 补全倍率）</p><p>基准价格是 1 美元 50w token</p><p>正常来说用户可以不用管倍率问题，因为在<a href="https://api.aigpt4.top/pricing">模型价格</a>页面已经详细列出了每个模型提示和补全的价格</p><p>额度消耗 = 提示 token 数 <em> 提示价格 + 补全 token 数 </em> 补全价格</p><p>将鼠标移到日志界面详情上，也可以查看计算过程</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202502091443593.png" alt="image-20250209141611942"></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>使用与官方类似，首先需要获取 api key，即令牌，前往<a href="https://api.aigpt4.top/token">令牌</a>页面，点击添加令牌。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202502091443594.png" alt="image-20250209141714103"></p><p>设置好令牌名称、过期时间、令牌额度，点击提交即可。</p><p>:warning:注意：令牌额度决定了你这个令牌能使用多少额度，但会受到你的余额限制。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202502091443595.png" alt="image-20250209141902855"></p><p>创建令牌后，点击复制按钮，即可复制令牌的值，也就是 api key，令牌形如 sk-xxxxxx。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202502091443596.png" alt="image-20250209141939595"></p><p>在需要使用 API 的平台，将 <code>BASE_URL</code> 改为中转 API 调用地址 <a href="https://api.aigpt4.top/">https://api.aigpt4.top/</a> ，不同的客户端可能需要填写不同的 BASE_URL，请尝试如下地址：</p><ul><li><a href="https://api.aigpt4.top/">https://api.aigpt4.top/</a>            (最常用的openai格式)</li><li><a href="https://api.aigpt4.top/v1/">https://api.aigpt4.top/v1/</a></li><li><a href="https://api.aigpt4.top/v1/chat/completions">https://api.aigpt4.top/v1/chat/completions</a></li></ul><h3 id="在-chatbox-中使用"><a href="#在-chatbox-中使用" class="headerlink" title="在 chatbox 中使用"></a>在 chatbox 中使用</h3><p>访问 <a href="https://web.chatboxai.app/（国内稳定访问）或点击侧边栏">https://web.chatboxai.app/（国内稳定访问）或点击侧边栏</a> 聊天</p><p>进入页面后在设置页面勾选自定义接口，模型服务商选择 openai，并将接口地址更改为 <a href="https://api.aigpt4.top/">https://api.aigpt4.top/</a>, API Key 填写上述创建的 API Key。</p><p>:warning:注意：本站所有模型都使用 openai 标准接口，即使是使用 claude3 系列模型，模型服务商也要选择 openai</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202502091443597.png" alt="image-20250209142234746"></p><p>如果有需要使用的模型，但是 chatbox 提供的下拉列表里面没有的话，请自定义模型，不同模型之间用英文逗号隔开，如 gpt-4-turbo-2024-04-09,gpt-4o,claude-3-sonnet-20240229,claude-3-opus-20240229,claude-3-haiku-20240307</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202502091443598.png" alt="image-20250209142322000"></p><p>然后点击新的聊天之间使用即可，模型可点击输入框上方切换。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202502091443599.png" alt="image-20250209142434965"></p><h3 id="在沉浸式翻译中使用"><a href="#在沉浸式翻译中使用" class="headerlink" title="在沉浸式翻译中使用"></a>在沉浸式翻译中使用</h3><p>沉浸式翻译 <a href="https://immersivetranslate.com/">https://immersivetranslate.com/</a></p><p>一款免费的，好用的，没有废话的，革命性的，饱受赞誉的，AI 驱动的双语网页翻译扩展，你可以完全免费地使用它来实时翻译外语网页，PDF 文档，ePub 电子书，字幕文件等。</p><p>在基本设置中翻译服务选择 openai，勾选自定义 API Key，API Key 填写创建的令牌，模型建议选择 gpt-3.5 系列，自定义 API 地址填写 <a href="https://api.aigpt4.top/v1/chat/completions">https://api.aigpt4.top/v1/chat/completions</a></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202502091443600.png" alt="image-20250209142632916"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202502091443601.png" alt="image-20250209142649269"></p><h3 id="在-LangChain-中使用"><a href="#在-LangChain-中使用" class="headerlink" title="在 LangChain 中使用"></a>在 LangChain 中使用</h3><p>最简单的就是：直接设置环境变量代码如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">API_SECRET_KEY = &quot;sk-pvMtoVO******66249058b93C766F2D70167&quot; # 你创建的令牌</span><br><span class="line">BASE_URL = &quot;https://api.aigpt4.top/v1&quot;; </span><br><span class="line"></span><br><span class="line">os.environ[&quot;OPENAI_API_KEY&quot;] = API_SECRET_KEY</span><br><span class="line">os.environ[&quot;OPENAI_BASE_URL&quot;] = BASE_URL</span><br></pre></td></tr></table></figure><p>注意：openai_api_base 的末尾要加上 /v1，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">llm = ChatOpenAI(</span><br><span class="line">    openai_api_base=<span class="string">&quot;https://api.aigpt4.top/v1&quot;</span>, <span class="comment"># 注意，末尾要加 /v1</span></span><br><span class="line">    openai_api_key=<span class="string">&quot;sk-3133f******fee269b71d&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">res = llm.predict(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>示例代码，使用 LLM 进行预测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.llms <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">API_SECRET_KEY = <span class="string">&quot;创建的令牌&quot;</span>;</span><br><span class="line">BASE_URL = <span class="string">&quot;https://api.aigpt4.top/v1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>():</span><br><span class="line">    llm = OpenAI(temperature=<span class="number">0.9</span>)</span><br><span class="line">    text = <span class="string">&quot;What would be a good company name for a company that makes colorful socks?&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(llm(text))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    text();</span><br></pre></td></tr></table></figure><h3 id="在官方-openai-库中使用"><a href="#在官方-openai-库中使用" class="headerlink" title="在官方 openai 库中使用"></a>在官方 openai 库中使用</h3><p>其他的方式和官方是一样的，只是改一个 URL 和 key 用我们的；具体 API 调用方法请查看官方文档即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from openai import OpenAI</span><br><span class="line"></span><br><span class="line">client = OpenAI(</span><br><span class="line">    # 将这里换成你创建的令牌</span><br><span class="line">    api_key=&quot;sk-xxx&quot;,</span><br><span class="line">    # 这里将官方的接口访问地址，替换成我们 api的接口地址</span><br><span class="line">    base_url=&quot;https://api.aigpt4.top/v1&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">chat_completion = client.chat.completions.create(</span><br><span class="line">    messages=[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot;: &quot;user&quot;,</span><br><span class="line">            &quot;content&quot;: &quot;Say this is a test&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    model=&quot;gpt-3.5-turbo&quot;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(chat_completion)</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="为什么-gpt-4-额度消耗这么快"><a href="#为什么-gpt-4-额度消耗这么快" class="headerlink" title="为什么 gpt-4 额度消耗这么快"></a>为什么 gpt-4 额度消耗这么快</h3><p>gpt-4 的消耗速度是 gpt-3.5-turbo 的 20 到 40 倍，假设购买了 9w token，我们用 15 倍作为平均倍率，也就是 90000 / 15 = 6000 字左右，加上每次要附带上历史消息，能发的消息数将会进一步减半，在最极限的情况下，一条消息就能把 9w token 消耗完。</p><h3 id="为什么-GPT4-不知道它自己是谁？"><a href="#为什么-GPT4-不知道它自己是谁？" class="headerlink" title="为什么 GPT4 不知道它自己是谁？"></a>为什么 GPT4 不知道它自己是谁？</h3><p>直接问 GPT4：” 你是谁？““你是什么模型？” 诸如此类问题，一般情况下 GPT4 的 API 也会回答自己是 GPT3，估计是官方预置的原因。GPT4 和 3.5 用的都是 2021 年之前的数据，那时候还没有 GPT4。<br>       官网和某些套壳不回答是 GPT3，是因为他们提前预设了提示词，让 GPT 认为自己是别的模型了，这个可以通过问答所消耗的总 token 看出来，预设提示词是会消耗 token 的。<br>如果说你对比官网和 API 的回答，发现有所不一，那也很正常。一是因为，GPT4 对同一个问题的每次回答都是不同的；二是，官网对 GPT4 的参数进行了一定的优化。</p><h3 id="为什么-GPT4-会给出这么弱智的回答，我还是觉得你们是假的-GPT4？"><a href="#为什么-GPT4-会给出这么弱智的回答，我还是觉得你们是假的-GPT4？" class="headerlink" title="为什么 GPT4 会给出这么弱智的回答，我还是觉得你们是假的 GPT4？"></a>为什么 GPT4 会给出这么弱智的回答，我还是觉得你们是假的 GPT4？</h3><p>GPT4 也不是万能的，训练参数并不比 GPT3 大多少，不用因为营销号的宣传神话 GPT4。而且由于中文语料在训练中的占比很小，在回答中文问题时，不排除在某些问题上表现不佳，同样的问题用英文问可能结果完全不一样，您可以试着用英文提问试试。<br>        GPT4 强在推理能力，从目前大家的使用体验中来看，写代码方面会比 gpt3.5 强很多，但仍然会给出胡编的答案。</p><h3 id="如何检验-GPT3-5-还是-GPT4？"><a href="#如何检验-GPT3-5-还是-GPT4？" class="headerlink" title="如何检验 GPT3.5 还是 GPT4？"></a>如何检验 GPT3.5 还是 GPT4？</h3><p>我们提供了一个简单的方法来验证您使用的是 GPT3.5 还是 GPT4。以下是一些测试问题及 其不同模型的预期回答，您可以使用这些问题来测试。 测试问题：</p><ul><li>昨天的当天的明天是哪天？GPT-3.5 应答 “昨天”，而 GPT-4 应答 “今天”。</li><li>树上有 9 只鸟，猎人射杀了一只，还剩下多少只？GPT-3.5 可能说 “8 只”，GPT-4 会告诉你 “0 只，其他的鸟都飞走了”。</li><li>为什么周树人要打鲁迅？GPT-3.5 可能给出一个编造的答案，而 GPT-4 会指出 “鲁迅” 和” 周树人 “是同一个人。</li></ul><h3 id="为什么后台创建的令牌没有显示已用额度"><a href="#为什么后台创建的令牌没有显示已用额度" class="headerlink" title="为什么后台创建的令牌没有显示已用额度"></a>为什么后台创建的令牌没有显示已用额度</h3><p>当设置成无限额度后，不会更新已用额度，修改无限额度为有限额度即可</p><h3 id="无法登录"><a href="#无法登录" class="headerlink" title="无法登录"></a>无法登录</h3><p>请确保用户名填写正确，不要填写邮箱地址，是填写你注册时候的用户名，如遇到登录问题无法自行解决，请联系客服（vx：sanshuibiancheng），第一时间为您处理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SanShui-API-使用教程&quot;&gt;&lt;a href=&quot;#SanShui-API-使用教程&quot; class=&quot;headerlink&quot; title=&quot;SanShui API 使用教程&quot;&gt;&lt;/a&gt;SanShui API 使用教程&lt;/h1&gt;&lt;h2 id=&quot;SanShui-介</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>读论文框架</title>
    <link href="https://huaiyuechusan.gitee.io/archives/f049facd.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/f049facd.html</id>
    <published>2024-10-17T11:33:22.000Z</published>
    <updated>2024-10-17T11:52:09.521Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="读论文框架"><a href="#读论文框架" class="headerlink" title="读论文框架"></a>读论文框架</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><ol><li>研究现状</li><li>==现有领域存在的问题==      :warning:重点关注</li><li>针对现有问题，你的解决方案   （宏观的描述）  we propose …. introduce   :warning:重点关注</li><li>具体解决方案是什么…  （具体的细节）</li><li>实验 结果，超过SoTA多少</li></ol><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>对abstract每点的扩充</p><p>contribution</p><ul><li>哪些贡献</li><li>…..</li></ul><h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><p>对当前研究的领域典型进行归类。扫；题目；年份；会议（A/B）</p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>使用的方法理论描述</p><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><p>具体实验，设计实验，实验结果，SoTA对比</p>]]></content>
    
    
    <summary type="html">读论文框架</summary>
    
    
    
    <category term="学习总结" scheme="https://huaiyuechusan.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="学习总结" scheme="https://huaiyuechusan.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统框架</title>
    <link href="https://huaiyuechusan.gitee.io/archives/65941a46.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/65941a46.html</id>
    <published>2024-10-17T02:41:56.000Z</published>
    <updated>2024-10-17T11:52:09.520Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="推荐系统框架"><a href="#推荐系统框架" class="headerlink" title="推荐系统框架"></a>推荐系统框架</h1><p>理论——&gt;应用  fellow前沿的理论，应用到推荐系统</p><p>SoTA（state of the art）：意思是“最先进的”或“当前技术的最高水平”。通常用于描述某个领域中最新、最优或最具前沿性的技术、方法或成果。在研究和开发中，SoTA技术代表了当前最优的解决方案或技术水平，常常作为其他技术进步的参照。</p><h2 id="基于GNN推荐"><a href="#基于GNN推荐" class="headerlink" title="基于GNN推荐"></a>基于GNN推荐</h2><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202410161513805.png" alt="image-20241015225747637"></p><h3 id="1、单序列推荐"><a href="#1、单序列推荐" class="headerlink" title="1、单序列推荐"></a>1、单序列推荐</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202410161513807.png" alt="image-20241015222428936"></p><p>sequential</p><p>RNN、LSTM、Transformer、Bert、Mamba（目前）</p><h3 id="2、用户-商品推荐"><a href="#2、用户-商品推荐" class="headerlink" title="2、用户-商品推荐"></a>2、用户-商品推荐</h3><p>Graph Neural Network（GNN）</p><p>GNN变体 —-&gt; GCN、GAT、GraphSAGE</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202410161513808.png" alt="image-20241015225552246"></p><p>GCN</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202410171935751.png" alt="image-20241017191943026"></p><h3 id="3、用户-用户推荐（social-network）"><a href="#3、用户-用户推荐（social-network）" class="headerlink" title="3、用户-用户推荐（social network）"></a>3、用户-用户推荐（social network）</h3><p>collaborate filtering（CF）协同过滤</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202410161513809.png" alt="image-20241015225601014"></p><h3 id="4、商品-商品推荐（知识图谱）"><a href="#4、商品-商品推荐（知识图谱）" class="headerlink" title="4、商品-商品推荐（知识图谱）"></a>4、商品-商品推荐（知识图谱）</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202410161513810.png" alt="image-20241015225616515"></p><h2 id="基于对比学习推荐"><a href="#基于对比学习推荐" class="headerlink" title="基于对比学习推荐"></a>基于对比学习推荐</h2><p>contrastive learning（CL）</p><p>Self-supervised learning 自监督学习</p><p><strong>对比学习是一种特殊的无监督学习方法</strong>，旨在通过最大化相关样本之间的相似性并最小化不相关样本之间的相似性来学习数据表示。通常使用一种高自由度、自定义的规则生成正负样本。</p><h2 id="基于多模态推荐"><a href="#基于多模态推荐" class="headerlink" title="基于多模态推荐"></a>基于多模态推荐</h2><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202410161513811.png" alt="image-20241016151312150"></p><p>多模态特征融合</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202410161513812.png" alt="image-20241016151034962"></p><p>M×N的矩阵中取top-k（k经常取5,==10,20==）</p><h2 id="fellow团队"><a href="#fellow团队" class="headerlink" title="fellow团队"></a>fellow团队</h2><ol><li><p>中科大 何向南老师</p></li><li><p>中国人大 赵鑫老师</p><p><a href="https://www.recbole.io/">RecBole系列 —- RecBole</a></p><p><a href="https://github.com/RUCAIBox/RecBole">RUCAIBox/RecBole: A unified, comprehensive and efficient recommendation library (github.com)</a></p><p>快速baseline：</p><p>RecBole 是一个基于 PyTorch 实现的，面向研究者的，易于开发与复现的，统一、全面、高效的推荐系统代码库。 实现了91个推荐系统模型</p></li><li><p>港大 黄超老师  ——-==fellow==</p><p>论文代码开源可复现，方便快速code</p><p>SoTA参考</p></li><li><p>澳 殷老师  2021 AAAI论文</p></li></ol><h2 id="推荐系统发展历史"><a href="#推荐系统发展历史" class="headerlink" title="推荐系统发展历史"></a>推荐系统发展历史</h2><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202410161513813.png" alt="image-20241015232716906"></p>]]></content>
    
    
    <summary type="html">推荐系统框架</summary>
    
    
    
    <category term="多模态推荐系统" scheme="https://huaiyuechusan.gitee.io/categories/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="深度学习" scheme="https://huaiyuechusan.gitee.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="多模态推荐系统" scheme="https://huaiyuechusan.gitee.io/tags/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>深度学习回归任务训练代码模版</title>
    <link href="https://huaiyuechusan.gitee.io/archives/638889b7.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/638889b7.html</id>
    <published>2024-09-05T05:07:22.000Z</published>
    <updated>2024-10-17T12:04:09.066Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="深度学习回归任务训练代码模版"><a href="#深度学习回归任务训练代码模版" class="headerlink" title="深度学习回归任务训练代码模版"></a>深度学习回归任务训练代码模版</h1><p>[TOC]</p><h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><p>超参设置：<code>config</code> 包含所有训练需要的超参数（便于后续的调参），以及模型需要存储的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">device = <span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;seed&#x27;</span>: <span class="number">5201314</span>,       <span class="comment"># 随机种子，可以自己填写. :)</span></span><br><span class="line">    <span class="string">&#x27;select_all&#x27;</span>: <span class="literal">False</span>,   <span class="comment"># 是否选择全部的特征</span></span><br><span class="line">    <span class="string">&#x27;valid_ratio&#x27;</span>: <span class="number">0.2</span>,    <span class="comment"># 验证集大小(validation_size) = 训练集大小(train_size) * 验证数据占比(valid_ratio)</span></span><br><span class="line">    <span class="string">&#x27;n_epochs&#x27;</span>: <span class="number">3000</span>,       <span class="comment"># 数据遍历训练次数           </span></span><br><span class="line">    <span class="string">&#x27;batch_size&#x27;</span>: <span class="number">256</span>, </span><br><span class="line">    <span class="string">&#x27;learning_rate&#x27;</span>: <span class="number">1e-5</span>,              </span><br><span class="line">    <span class="string">&#x27;early_stop&#x27;</span>: <span class="number">400</span>,     <span class="comment"># 如果early_stop轮损失没有下降就停止训练.     </span></span><br><span class="line">    <span class="string">&#x27;save_path&#x27;</span>: <span class="string">&#x27;./models/model.ckpt&#x27;</span>  <span class="comment"># 模型存储的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="功能函数"><a href="#功能函数" class="headerlink" title="功能函数"></a>功能函数</h2><p>导入需要的Python包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数值、矩阵操作</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据读取与写入</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进度条</span></span><br><span class="line"><span class="comment"># from tqdm import tqdm</span></span><br><span class="line"><span class="comment"># 如果是使用notebook 推荐使用以下（颜值更高 : ) ）</span></span><br><span class="line"><span class="keyword">from</span> tqdm.notebook <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pytorch 深度学习张量操作框架</span></span><br><span class="line"><span class="keyword">import</span> torch </span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader, random_split</span><br><span class="line"><span class="comment"># 绘制pytorch的网络</span></span><br><span class="line"><span class="keyword">from</span> torchviz <span class="keyword">import</span> make_dot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 学习曲线绘制</span></span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br></pre></td></tr></table></figure><p>一些重要的方法（随机种子设置、数据拆分、模型预测） </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数来设置随机种子，以确保实验的可复现性</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">same_seed</span>(<span class="params">seed</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    设置随机种子(便于复现)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 设置CUDA的确定性，确保每次运行的结果是确定的</span></span><br><span class="line">    torch.backends.cudnn.deterministic = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 关闭CUDA的benchmark模式，因为这与确定性运行模式冲突</span></span><br><span class="line">    torch.backends.cudnn.benchmark = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 设置NumPy的随机种子</span></span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    <span class="comment"># 设置PyTorch的随机种子</span></span><br><span class="line">    torch.manual_seed(seed)</span><br><span class="line">    <span class="comment"># 如果CUDA可用，则为GPU设置随机种子</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        torch.cuda.manual_seed_all(seed)</span><br><span class="line">    <span class="comment"># 打印设置的种子值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Set Seed = <span class="subst">&#123;seed&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数来将数据集随机拆分为训练集和验证集</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_valid_split</span>(<span class="params">data_set, valid_ratio, seed</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    数据集拆分成训练集（training set）和 验证集（validation set）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 计算验证集的大小</span></span><br><span class="line">    valid_set_size = <span class="built_in">int</span>(valid_ratio * <span class="built_in">len</span>(data_set)) </span><br><span class="line">    <span class="comment"># 训练集的大小是数据集总大小减去验证集大小</span></span><br><span class="line">    train_set_size = <span class="built_in">len</span>(data_set) - valid_set_size</span><br><span class="line">    <span class="comment"># 使用PyTorch的random_split函数来拆分数据集，传入随机种子以确保可复现性</span></span><br><span class="line">    train_set, valid_set = random_split(data_set, [train_set_size, valid_set_size], generator=torch.Generator().manual_seed(seed))</span><br><span class="line">    <span class="comment"># 将拆分得到的数据集转换为NumPy数组格式并返回</span></span><br><span class="line">    <span class="keyword">return</span> np.array(train_set), np.array(valid_set)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数来进行模型的预测</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">test_loader, model, device</span>):</span><br><span class="line">    <span class="comment"># 将模型设置为评估模式</span></span><br><span class="line">    model.<span class="built_in">eval</span>() </span><br><span class="line">    <span class="comment"># 初始化一个列表来存储预测结果</span></span><br><span class="line">    preds = []</span><br><span class="line">    <span class="comment"># 遍历测试数据集</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> tqdm(test_loader):</span><br><span class="line">        <span class="comment"># 将数据移动到指定的设备上（CPU或GPU）</span></span><br><span class="line">        x = x.to(device)                        </span><br><span class="line">        <span class="comment"># 使用with torch.no_grad()来禁止计算梯度，因为在预测模式下不需要计算梯度</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="comment"># 进行前向传播以获得预测结果</span></span><br><span class="line">            pred = model(x)         </span><br><span class="line">            <span class="comment"># 将预测结果从GPU移回CPU，并将其从计算图中分离出来</span></span><br><span class="line">            preds.append(pred.detach().cpu())   </span><br><span class="line">    <span class="comment"># 将所有批次的预测结果拼接成一个NumPy数组，并返回</span></span><br><span class="line">    preds = torch.cat(preds, dim=<span class="number">0</span>).numpy()  </span><br><span class="line">    <span class="keyword">return</span> preds</span><br></pre></td></tr></table></figure><h2 id="数据加载"><a href="#数据加载" class="headerlink" title="数据加载"></a>数据加载</h2><h3 id="自定义数据集加载类"><a href="#自定义数据集加载类" class="headerlink" title="自定义数据集加载类"></a>自定义数据集加载类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个COVID19数据集类，继承自PyTorch的Dataset类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">COVID19Dataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    x: np.ndarray  特征矩阵.</span></span><br><span class="line"><span class="string">    y: np.ndarray  目标标签, 如果为None,则是预测的数据集</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 如果y不是None，则将y转换为PyTorch的FloatTensor类型，否则y保持为None</span></span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.y = y</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.y = torch.FloatTensor(y)</span><br><span class="line">        <span class="comment"># 将x转换为PyTorch的FloatTensor类型</span></span><br><span class="line">        self.x = torch.FloatTensor(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        <span class="comment"># 根据索引idx获取数据项</span></span><br><span class="line">        <span class="comment"># 如果y是None，表示这是一个预测数据集，只返回x</span></span><br><span class="line">        <span class="keyword">if</span> self.y <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self.x[idx]</span><br><span class="line">        <span class="comment"># 否则，返回一个包含x和y的元组</span></span><br><span class="line">        <span class="keyword">return</span> self.x[idx], self.y[idx]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回数据集中x的数量，即数据集的大小</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.x)</span><br></pre></td></tr></table></figure><h3 id="特征选择（可选）"><a href="#特征选择（可选）" class="headerlink" title="特征选择（可选）"></a>特征选择（可选）</h3><p>观察数据，选择更有效的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&#x27;./covid.train.csv&#x27;</span>)</span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021705622.png" alt="image-20240902164056398"></p><p>利用Pearson相关系数分析不同feature与label的相关性强弱。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.corr()[<span class="string">&#x27;tested_positive&#x27;</span>].sort_values(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021705623.png" alt="image-20240902164159811"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数来选择特征，用于拟合回归模型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_feat</span>(<span class="params">train_data, valid_data, test_data, select_all=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    特征选择</span></span><br><span class="line"><span class="string">    选择较好的特征用来拟合回归模型</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 从训练数据中分离出目标变量y</span></span><br><span class="line">    y_train, y_valid = train_data[:, -<span class="number">1</span>], valid_data[:, -<span class="number">1</span>]</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    [:, -1]：这是一个NumPy的切片操作，用于选择数组中的特定行和列。</span></span><br><span class="line"><span class="string">    :表示选择所有行，即选择整个数据集。</span></span><br><span class="line"><span class="string">    -1表示选择最后一列。在Python中，使用负数索引可以从数组的末尾开始计数，-1就是数组中的最后一个元素，对于二维数组来说，就是最后一列。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 从训练数据、验证数据和测试数据中分离出特征矩阵x</span></span><br><span class="line">    raw_x_train, raw_x_valid, raw_x_test = train_data[:, :-<span class="number">1</span>], valid_data[:, :-<span class="number">1</span>], test_data</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    [:, :-1]：这是一个NumPy的切片操作，用于选择数组中的特定行和列。</span></span><br><span class="line"><span class="string">    :表示选择所有行，即选择整个数据集。</span></span><br><span class="line"><span class="string">    :-1表示选择从第一列开始直到倒数第二列的所有列。在Python中，使用负数索引可以从数组的末尾开始计数，-1就是数组中的最后一个元素之前的所有元素，对于二维数组来说，就是除了最后一列之外的所有列。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果select_all为True，则选择所有特征</span></span><br><span class="line">    <span class="keyword">if</span> select_all:</span><br><span class="line">        feat_idx = <span class="built_in">list</span>(<span class="built_in">range</span>(raw_x_train.shape[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 否则，根据某些标准（需要自行调研特征选择方法）选择特征</span></span><br><span class="line">        <span class="comment"># 根据Pearson系数降序排列的结果，我们重新选择特征。</span></span><br><span class="line">        <span class="comment"># 去掉第一列 id 列</span></span><br><span class="line">        feat_idx = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">38</span>)) + [<span class="number">53</span>, <span class="number">69</span>, <span class="number">85</span>, <span class="number">101</span>] </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回选定的特征矩阵和目标变量</span></span><br><span class="line">    <span class="keyword">return</span> raw_x_train[:, feat_idx], raw_x_valid[:, feat_idx], raw_x_test[:, feat_idx], y_train, y_valid</span><br></pre></td></tr></table></figure><h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3><ol><li>从文件中读取数据<code>pd.read_csv</code></li><li>数据拆分成三份 训练（training）、验证（validation）、测试（testing）<ul><li><code>train_valid_split</code>：  分成训练、验证</li><li><code>select_feat</code>：拆分特征和label，并进行特征选择</li><li><code>COVID19Dataset</code>: 分别将训练、验证、测试集的特征和label组合成可以用于快速迭代训练的数据集<code>train_dataset, valid_dataset, test_dataset</code></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置随机种子便于复现</span></span><br><span class="line">same_seed(config[<span class="string">&#x27;seed&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练集大小(train_data size) : 2699 x 118 (id + 37 states + 16 features x 5 days) </span></span><br><span class="line"><span class="comment"># 测试集大小(test_data size）: 1078 x 117 (没有label (last day&#x27;s positive rate))</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_column&#x27;</span>, <span class="number">200</span>) <span class="comment"># 设置显示数据的列数</span></span><br><span class="line">train_df, test_df = pd.read_csv(<span class="string">&#x27;./covid.train.csv&#x27;</span>), pd.read_csv(<span class="string">&#x27;./covid.test.csv&#x27;</span>)</span><br><span class="line">display(train_df.head(<span class="number">3</span>)) <span class="comment"># 显示前三行的样本</span></span><br><span class="line">train_data, test_data = train_df.values, test_df.values</span><br><span class="line"><span class="keyword">del</span> train_df, test_df <span class="comment"># 删除数据减少内存占用</span></span><br><span class="line">train_data, valid_data = train_valid_split(train_data, config[<span class="string">&#x27;valid_ratio&#x27;</span>], config[<span class="string">&#x27;seed&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印数据的大小</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;train_data size: <span class="subst">&#123;train_data.shape&#125;</span> </span></span><br><span class="line"><span class="string">valid_data size: <span class="subst">&#123;valid_data.shape&#125;</span> </span></span><br><span class="line"><span class="string">test_data size: <span class="subst">&#123;test_data.shape&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征选择</span></span><br><span class="line">x_train, x_valid, x_test, y_train, y_valid = select_feat(train_data, valid_data, test_data, config[<span class="string">&#x27;select_all&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出特征数量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;number of features: <span class="subst">&#123;x_train.shape[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">train_dataset, valid_dataset, test_dataset = COVID19Dataset(x_train, y_train), \</span><br><span class="line">                                             COVID19Dataset(x_valid, y_valid), \</span><br><span class="line">                                             COVID19Dataset(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Pytorch中Dataloader类按照Batch将数据集加载</span></span><br><span class="line">train_loader = DataLoader(train_dataset, batch_size=config[<span class="string">&#x27;batch_size&#x27;</span>], shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>)</span><br><span class="line">valid_loader = DataLoader(valid_dataset, batch_size=config[<span class="string">&#x27;batch_size&#x27;</span>], shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(test_dataset, batch_size=config[<span class="string">&#x27;batch_size&#x27;</span>], shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个自定义的模型类My_Model，继承自nn.Module</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">My_Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_dim</span>):</span><br><span class="line">        <span class="built_in">super</span>(My_Model, self).__init__()</span><br><span class="line">        <span class="comment"># 定义模型的结构为一个顺序模型（Sequential），包含线性层（Linear）和激活函数（ReLU）</span></span><br><span class="line">        self.layers = nn.Sequential(</span><br><span class="line">            <span class="comment"># 第一层线性层，输入维度为input_dim，输出维度为16</span></span><br><span class="line">            nn.Linear(input_dim, <span class="number">16</span>),</span><br><span class="line">            <span class="comment"># ReLU激活函数</span></span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            <span class="comment"># 第二层线性层，输入维度为16，输出维度为8</span></span><br><span class="line">            nn.Linear(<span class="number">16</span>, <span class="number">8</span>),</span><br><span class="line">            <span class="comment"># ReLU激活函数</span></span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            <span class="comment"># 第三层线性层，输入维度为8，输出维度为1</span></span><br><span class="line">            nn.Linear(<span class="number">8</span>, <span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># 在前向传播中，输入x通过定义的层（layers）</span></span><br><span class="line">        x = self.layers(x)</span><br><span class="line">        <span class="comment"># 使用squeeze函数移除输出张量的一个维度，使其从形状(B, 1)变为(B)</span></span><br><span class="line">        x = x.squeeze(<span class="number">1</span>) </span><br><span class="line">        <span class="comment"># 返回模型的输出</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><h3 id="训练迭代＋验证迭代"><a href="#训练迭代＋验证迭代" class="headerlink" title="训练迭代＋验证迭代"></a>训练迭代＋验证迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">trainer</span>(<span class="params">train_loader, valid_loader, model, config, device</span>):</span><br><span class="line"></span><br><span class="line">    criterion = nn.MSELoss(reduction=<span class="string">&#x27;mean&#x27;</span>) <span class="comment"># 损失函数的定义</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义优化器</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> 可以查看学习更多的优化器 https://pytorch.org/docs/stable/optim.html </span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> L2 正则( 可以使用optimizer(weight decay...) )或者 自己实现L2正则.</span></span><br><span class="line">    optimizer = torch.optim.SGD(model.parameters(), lr=config[<span class="string">&#x27;learning_rate&#x27;</span>], momentum=<span class="number">0.9</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># tensorboard 的记录器</span></span><br><span class="line">    writer = SummaryWriter()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">&#x27;./models&#x27;</span>):</span><br><span class="line">        <span class="comment"># 创建文件夹-用于存储模型</span></span><br><span class="line">        os.mkdir(<span class="string">&#x27;./models&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    n_epochs, best_loss, step, early_stop_count = config[<span class="string">&#x27;n_epochs&#x27;</span>], math.inf, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(n_epochs):</span><br><span class="line">        model.train() <span class="comment"># 训练模式</span></span><br><span class="line">        loss_record = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># tqdm可以帮助我们显示训练的进度  </span></span><br><span class="line">        train_pbar = tqdm(train_loader, position=<span class="number">0</span>, leave=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 设置进度条的左边 ： 显示第几个Epoch了</span></span><br><span class="line">        train_pbar.set_description(<span class="string">f&#x27;Epoch [<span class="subst">&#123;epoch+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;n_epochs&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> train_pbar:</span><br><span class="line">            optimizer.zero_grad()               <span class="comment"># 将梯度置0.</span></span><br><span class="line">            x, y = x.to(device), y.to(device)   <span class="comment"># 将数据一到相应的存储位置(CPU/GPU)</span></span><br><span class="line">            pred = model(x)                     <span class="comment"># 前向传播          </span></span><br><span class="line">            loss = criterion(pred, y)           <span class="comment"># 计算损失</span></span><br><span class="line">            loss.backward()                     <span class="comment"># 反向传播 计算梯度.</span></span><br><span class="line">            optimizer.step()                    <span class="comment"># 更新网络参数</span></span><br><span class="line">            step += <span class="number">1</span></span><br><span class="line">            loss_record.append(loss.detach().item())</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 训练完一个batch的数据，将loss 显示在进度条的右边</span></span><br><span class="line">            train_pbar.set_postfix(&#123;<span class="string">&#x27;loss&#x27;</span>: loss.detach().item()&#125;)</span><br><span class="line"></span><br><span class="line">        mean_train_loss = <span class="built_in">sum</span>(loss_record)/<span class="built_in">len</span>(loss_record)</span><br><span class="line">        <span class="comment"># 每个epoch,在tensorboard 中记录训练的损失（后面可以展示出来）</span></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;Loss/train&#x27;</span>, mean_train_loss, step)</span><br><span class="line"></span><br><span class="line">        model.<span class="built_in">eval</span>() <span class="comment"># 将模型设置成 evaluation 模式.</span></span><br><span class="line">        loss_record = []</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> valid_loader:</span><br><span class="line">            x, y = x.to(device), y.to(device)</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                pred = model(x)</span><br><span class="line">                loss = criterion(pred, y)</span><br><span class="line"></span><br><span class="line">            loss_record.append(loss.item())</span><br><span class="line">            </span><br><span class="line">        mean_valid_loss = <span class="built_in">sum</span>(loss_record)/<span class="built_in">len</span>(loss_record)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Epoch [<span class="subst">&#123;epoch+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;n_epochs&#125;</span>]: Train loss: <span class="subst">&#123;mean_train_loss:<span class="number">.4</span>f&#125;</span>, Valid loss: <span class="subst">&#123;mean_valid_loss:<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="comment"># 每个epoch,在tensorboard 中记录验证的损失（后面可以展示出来）</span></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;Loss/valid&#x27;</span>, mean_valid_loss, step)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果当前验证损失优于最佳损失，则保存模型</span></span><br><span class="line">        <span class="keyword">if</span> mean_valid_loss &lt; best_loss:</span><br><span class="line">            best_loss = mean_valid_loss</span><br><span class="line">            torch.save(model.state_dict(), config[<span class="string">&#x27;save_path&#x27;</span>]) <span class="comment"># 模型保存</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Saving model with loss &#123;:.3f&#125;...&#x27;</span>.<span class="built_in">format</span>(best_loss))</span><br><span class="line">            early_stop_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            early_stop_count += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 如果连续多次验证损失没有改善，则停止训练</span></span><br><span class="line">        <span class="keyword">if</span> early_stop_count &gt;= config[<span class="string">&#x27;early_stop&#x27;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\nModel is not improving, so we halt the training session.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>开始训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = My_Model(input_dim=x_train.shape[<span class="number">1</span>]).to(device) <span class="comment"># 将模型和训练数据放在相同的存储位置(CPU/GPU)</span></span><br><span class="line">trainer(train_loader, valid_loader, model, config, device)</span><br></pre></td></tr></table></figure><h3 id="使用-tensorboard-输出模型训练过程和指标可视化-可选"><a href="#使用-tensorboard-输出模型训练过程和指标可视化-可选" class="headerlink" title="使用 tensorboard 输出模型训练过程和指标可视化(可选)"></a>使用 <code>tensorboard</code> 输出模型训练过程和指标可视化(可选)</h3><p><code>tensorboard</code> 可视化工具：可以记录并展现模型的训练过程中的各种指标，这里我们是记录模型的损失</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%reload_ext tensorboard</span><br><span class="line">%tensorboard --logdir=./runs/ --port=<span class="number">6007</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021705624.png" alt="image-20240902161850507"></p><h2 id="结果预测"><a href="#结果预测" class="headerlink" title="结果预测"></a>结果预测</h2><p>测试集的预测结果保存到<code>pred.csv</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_pred</span>(<span class="params">preds, file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 将模型保存到指定位置 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> fp:     <span class="comment"># 添加 newline=&#x27;&#x27; 防止在Windows上出现额外的空行</span></span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;tested_positive&#x27;</span>])</span><br><span class="line">        <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(preds):</span><br><span class="line">            writer.writerow([i, p])</span><br><span class="line"></span><br><span class="line">model = My_Model(input_dim=x_train.shape[<span class="number">1</span>]).to(device)</span><br><span class="line">model.load_state_dict(torch.load(config[<span class="string">&#x27;save_path&#x27;</span>]))</span><br><span class="line">preds = predict(test_loader, model, device) </span><br><span class="line">save_pred(preds, <span class="string">&#x27;pred.csv&#x27;</span>)         </span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>完整代码见：<a href="https://github.com/huaiyuechusan/Hongyi_Lee_dl_homeworks/tree/master/HW1_Regression">Hongyi_Lee_dl_homeworks/HW1_Regression at master · huaiyuechusan/Hongyi_Lee_dl_homeworks (github.com)</a></p><p>参考文章：</p><p><a href="https://blog.csdn.net/qq_41502322/article/details/123922649">【李宏毅《机器学习》2022】作业1：COVID 19 Cases Prediction (Regression)_李宏毅2022作业-CSDN博客</a></p><p><a href="https://github.com/huaiyuechusan/Hongyi_Lee_dl_homeworks/blob/master/Warmup/Pytorch_Tutorial_2.pdf">Hongyi_Lee_dl_homeworks/Warmup/Pytorch_Tutorial_2.pdf at master · huaiyuechusan/Hongyi_Lee_dl_homeworks (github.com)</a></p>]]></content>
    
    
    <summary type="html">深度学习回归任务训练代码模版</summary>
    
    
    
    <category term="深度学习" scheme="https://huaiyuechusan.gitee.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://huaiyuechusan.gitee.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PyTorch" scheme="https://huaiyuechusan.gitee.io/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>如何阅读PyTorch文档及常见PyTorch错误</title>
    <link href="https://huaiyuechusan.gitee.io/archives/a86ba09b.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/a86ba09b.html</id>
    <published>2024-09-04T04:44:49.000Z</published>
    <updated>2024-10-17T12:00:43.304Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="如何阅读PyTorch文档及常见PyTorch错误"><a href="#如何阅读PyTorch文档及常见PyTorch错误" class="headerlink" title="如何阅读PyTorch文档及常见PyTorch错误"></a>如何阅读PyTorch文档及常见PyTorch错误</h1><p>[TOC]</p><p>PyTorch文档查看<a href="https://pytorch.org/docs/stable/">https://pytorch.org/docs/stable/</a></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409042217685.png" alt="image-20240904161104184"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409042217687.png" alt="image-20240904161329441"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">torch.nn -&gt; 定义神经网络</span><br><span class="line">torch.optim -&gt; 优化算法</span><br><span class="line">torch.utils.data -&gt; 数据加载 dataset, dataloader类</span><br></pre></td></tr></table></figure><h2 id="阅读PyTorch文档示例"><a href="#阅读PyTorch文档示例" class="headerlink" title="阅读PyTorch文档示例"></a>阅读PyTorch文档示例</h2><p>以<code>torch.max</code>为例</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409042217688.png" alt="image-20240904161651956"></p><p>有些函数对不同的输入有不同的行为</p><p>Parameters（位置参数）：不需要指定参数的名称</p><p>Keyword Arguments（关键字参数）：必须指定参数的名称</p><p>他们通过 <code>*</code> 隔开</p><p>带默认值的参数：有些参数有默认值(keepdim=False)，所以传递这个参数的值是可选的</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409042217689.png" alt="image-20240904161820050"></p><p>三种<code>torch.max</code>的不同输入</p><ol><li><p>返回整个张量的最大值(<code>torch.max(input) → Tensor</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. max of entire tensor (torch.max(input) → Tensor)</span></span><br><span class="line">m = torch.<span class="built_in">max</span>(x)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure></li></ol><p>   <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409042217690.png" alt="image-20240904214513806"></p><ol><li><p>沿一个维度的最大值 (<code>torch.max(input, dim, keepdim=False, *, out=None) → (Tensor, LongTensor)</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. max along a dimension (torch.max(input, dim, keepdim=False, *, out=None) → (Tensor, LongTensor))</span></span><br><span class="line">m, idx = torch.<span class="built_in">max</span>(x,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(idx)</span><br></pre></td></tr></table></figure><p>​    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409042217691.png" alt="image-20240904214724819"></p><p>位置参数可以不指定参数的名字，关键字参数必须指定参数名字。以 <code>*</code> 隔开，（位置参数 * 关键字参数）</p></li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2-2 位置参数可以不指定参数的名字，关键字参数必须指定参数名字。以 * 隔开，（位置参数 * 关键字参数）</span></span><br><span class="line">m, idx = torch.<span class="built_in">max</span>(<span class="built_in">input</span>=x,dim=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(idx)</span><br></pre></td></tr></table></figure><p>   ​    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409042217692.png" alt="image-20240904214845204"></p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2-3</span></span><br><span class="line">m, idx = torch.<span class="built_in">max</span>(x,<span class="number">0</span>,<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(idx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2-4</span></span><br><span class="line">m, idx = torch.<span class="built_in">max</span>(x,dim=<span class="number">0</span>,keepdim=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(idx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2-5</span></span><br><span class="line">p = (m,idx)</span><br><span class="line">torch.<span class="built_in">max</span>(x,<span class="number">0</span>,<span class="literal">False</span>,out=p)</span><br><span class="line"><span class="built_in">print</span>(p[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(p[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>   位置参数可以不指定参数的名字，关键字参数必须指定参数名字。</p><p>   ​    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409042217693.png" alt="image-20240904215101006"></p><ol><li>两个张量上的选择最大的(<code>torch.max(input, other, *, out=None) → Tensor</code>)</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. max(choose max) operators on two tensors (torch.max(input, other, *, out=None) → Tensor)</span></span><br><span class="line">t = torch.<span class="built_in">max</span>(x,y)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p>   ​    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409042217694.png" alt="image-20240904215223304"></p><h2 id="常见Pytorch错误"><a href="#常见Pytorch错误" class="headerlink" title="常见Pytorch错误"></a>常见Pytorch错误</h2><h3 id="Tensor在不同设备上"><a href="#Tensor在不同设备上" class="headerlink" title="Tensor在不同设备上"></a>Tensor在不同设备上</h3><p>报错信息：RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument mat2 in method wrapper_mm)</p><p>解决方案：将张量移动到GPU</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409042217695.png" alt="image-20240904215745830"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. different device error (fixed)</span></span><br><span class="line">x = torch.randn(<span class="number">5</span>).to(<span class="string">&quot;cuda:0&quot;</span>)</span><br><span class="line">y = model(x)</span><br><span class="line"><span class="built_in">print</span>(y.shape)</span><br></pre></td></tr></table></figure><h3 id="维度不匹配"><a href="#维度不匹配" class="headerlink" title="维度不匹配"></a>维度不匹配</h3><p>报错信息：RuntimeError: The size of tensor a (5) must match the size of tensor b (4) at non-singleton dimension 1</p><p>解决办法：张量的形状不正确，使用<code>transpose,squeeze, unsqueeze</code>来对齐尺寸</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409042217696.png" alt="image-20240904220743294"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. mismatched dimensions error 1 (fixed by transpose)</span></span><br><span class="line">y = y.transpose(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">z = x + y</span><br><span class="line"><span class="built_in">print</span>(z.shape)</span><br></pre></td></tr></table></figure><h3 id="cuda内存不足"><a href="#cuda内存不足" class="headerlink" title="cuda内存不足"></a>cuda内存不足</h3><p>报错信息：RuntimeError: CUDA out of memory. Tried to allocate 7.27 GiB (GPU 0; 4.00 GiB total capacity; 8.67 GiB already allocated; 0 bytes free; 8.69 GiB reserved in total by PyTorch) If reserved memory is &gt;&gt; allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF</p><p>解决方法：数据的批量大小太大，无法装入GPU。减小批量大小。如果对数据进行迭代(<code>batch size = 1</code>)，问题就会得到解决。你也可以使用DataLoader</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409042217697.png" alt="image-20240904221307600"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. cuda out of memory error (fixed, but it might take some time to execute)</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">out = resnet18(d.to(<span class="string">&quot;cuda:0&quot;</span>).unsqueeze(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(out.shape)</span><br></pre></td></tr></table></figure><h3 id="张量类型不匹配"><a href="#张量类型不匹配" class="headerlink" title="张量类型不匹配"></a>张量类型不匹配</h3><p>报错信息：RuntimeError: expected scalar type Long but found Float</p><p>解决方法：标签张量类型必须是Long，将其转换为“long”以解决此问题</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409042217698.png" alt="image-20240904221529335"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. mismatched tensor type (fixed)</span></span><br><span class="line">labels = labels.long()</span><br><span class="line">lossval = L(outs,labels)</span><br><span class="line"><span class="built_in">print</span>(lossval)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://pytorch.org/docs/stable/generated/torch.max.html#torch.max">torch.max — PyTorch 2.4 documentation</a></p><p><a href="https://github.com/huaiyuechusan/Hongyi_Lee_dl_homeworks/blob/master/Warmup/Pytorch_Tutorial_2.pdf">Hongyi_Lee_dl_homeworks/Warmup/Pytorch_Tutorial_2.pdf at master · huaiyuechusan/Hongyi_Lee_dl_homeworks (github.com)</a></p>]]></content>
    
    
    <summary type="html">如何阅读PyTorch文档及常见PyTorch错误</summary>
    
    
    
    <category term="PyTorch" scheme="https://huaiyuechusan.gitee.io/categories/PyTorch/"/>
    
    
    <category term="深度学习" scheme="https://huaiyuechusan.gitee.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PyTorch" scheme="https://huaiyuechusan.gitee.io/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch入门实践：COVID-19 病例预测 (回归)</title>
    <link href="https://huaiyuechusan.gitee.io/archives/ab7c3439.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/ab7c3439.html</id>
    <published>2024-09-03T02:39:30.000Z</published>
    <updated>2024-10-17T12:01:19.579Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="PyTorch入门实践：COVID-19-病例预测-回归"><a href="#PyTorch入门实践：COVID-19-病例预测-回归" class="headerlink" title="PyTorch入门实践：COVID-19 病例预测 (回归)"></a>PyTorch入门实践：COVID-19 病例预测 (回归)</h1><p>[TOC]</p><p>更多Pytorch内容欢迎查看<a href="https://blog.csdn.net/manongtuzi/article/details/141855102">快速入门Pytorch-CSDN博客</a></p><h2 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h2><p>根据美国特定州过去5天的调查结果，预测第5天新检测阳性病例的百分比。</p><p>数据简介：</p><ul><li>在这种情况下，数据包含在<code>.csv</code>文件中</li><li>每行代表一个数据样本，包含118个特征(id + 37个州+ 16个特征  * 5天)</li><li>一行的最后一个元素是它的标签</li></ul><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021705620.png" alt="image-20240902155912289"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021705621.png" alt="image-20240902155930495"></p><h2 id="功能函数"><a href="#功能函数" class="headerlink" title="功能函数"></a>功能函数</h2><p>导入需要的Python包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数值、矩阵操作</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据读取与写入</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进度条</span></span><br><span class="line"><span class="comment"># from tqdm import tqdm</span></span><br><span class="line"><span class="comment"># 如果是使用notebook 推荐使用以下（颜值更高 : ) ）</span></span><br><span class="line"><span class="keyword">from</span> tqdm.notebook <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pytorch 深度学习张量操作框架</span></span><br><span class="line"><span class="keyword">import</span> torch </span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader, random_split</span><br><span class="line"><span class="comment"># 绘制pytorch的网络</span></span><br><span class="line"><span class="keyword">from</span> torchviz <span class="keyword">import</span> make_dot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 学习曲线绘制</span></span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br></pre></td></tr></table></figure><p>一些重要的方法（随机种子设置、数据拆分、模型预测） </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数来设置随机种子，以确保实验的可复现性</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">same_seed</span>(<span class="params">seed</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    设置随机种子(便于复现)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 设置CUDA的确定性，确保每次运行的结果是确定的</span></span><br><span class="line">    torch.backends.cudnn.deterministic = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 关闭CUDA的benchmark模式，因为这与确定性运行模式冲突</span></span><br><span class="line">    torch.backends.cudnn.benchmark = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 设置NumPy的随机种子</span></span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    <span class="comment"># 设置PyTorch的随机种子</span></span><br><span class="line">    torch.manual_seed(seed)</span><br><span class="line">    <span class="comment"># 如果CUDA可用，则为GPU设置随机种子</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        torch.cuda.manual_seed_all(seed)</span><br><span class="line">    <span class="comment"># 打印设置的种子值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Set Seed = <span class="subst">&#123;seed&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数来将数据集随机拆分为训练集和验证集</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_valid_split</span>(<span class="params">data_set, valid_ratio, seed</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    数据集拆分成训练集（training set）和 验证集（validation set）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 计算验证集的大小</span></span><br><span class="line">    valid_set_size = <span class="built_in">int</span>(valid_ratio * <span class="built_in">len</span>(data_set)) </span><br><span class="line">    <span class="comment"># 训练集的大小是数据集总大小减去验证集大小</span></span><br><span class="line">    train_set_size = <span class="built_in">len</span>(data_set) - valid_set_size</span><br><span class="line">    <span class="comment"># 使用PyTorch的random_split函数来拆分数据集，传入随机种子以确保可复现性</span></span><br><span class="line">    train_set, valid_set = random_split(data_set, [train_set_size, valid_set_size], generator=torch.Generator().manual_seed(seed))</span><br><span class="line">    <span class="comment"># 将拆分得到的数据集转换为NumPy数组格式并返回</span></span><br><span class="line">    <span class="keyword">return</span> np.array(train_set), np.array(valid_set)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数来进行模型的预测</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">test_loader, model, device</span>):</span><br><span class="line">    <span class="comment"># 将模型设置为评估模式</span></span><br><span class="line">    model.<span class="built_in">eval</span>() </span><br><span class="line">    <span class="comment"># 初始化一个列表来存储预测结果</span></span><br><span class="line">    preds = []</span><br><span class="line">    <span class="comment"># 遍历测试数据集</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> tqdm(test_loader):</span><br><span class="line">        <span class="comment"># 将数据移动到指定的设备上（CPU或GPU）</span></span><br><span class="line">        x = x.to(device)                        </span><br><span class="line">        <span class="comment"># 使用with torch.no_grad()来禁止计算梯度，因为在预测模式下不需要计算梯度</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="comment"># 进行前向传播以获得预测结果</span></span><br><span class="line">            pred = model(x)         </span><br><span class="line">            <span class="comment"># 将预测结果从GPU移回CPU，并将其从计算图中分离出来</span></span><br><span class="line">            preds.append(pred.detach().cpu())   </span><br><span class="line">    <span class="comment"># 将所有批次的预测结果拼接成一个NumPy数组，并返回</span></span><br><span class="line">    preds = torch.cat(preds, dim=<span class="number">0</span>).numpy()  </span><br><span class="line">    <span class="keyword">return</span> preds</span><br></pre></td></tr></table></figure><h2 id="数据加载"><a href="#数据加载" class="headerlink" title="数据加载"></a>数据加载</h2><h3 id="自定义数据集加载类"><a href="#自定义数据集加载类" class="headerlink" title="自定义数据集加载类"></a>自定义数据集加载类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个COVID19数据集类，继承自PyTorch的Dataset类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">COVID19Dataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    x: np.ndarray  特征矩阵.</span></span><br><span class="line"><span class="string">    y: np.ndarray  目标标签, 如果为None,则是预测的数据集</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 如果y不是None，则将y转换为PyTorch的FloatTensor类型，否则y保持为None</span></span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.y = y</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.y = torch.FloatTensor(y)</span><br><span class="line">        <span class="comment"># 将x转换为PyTorch的FloatTensor类型</span></span><br><span class="line">        self.x = torch.FloatTensor(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        <span class="comment"># 根据索引idx获取数据项</span></span><br><span class="line">        <span class="comment"># 如果y是None，表示这是一个预测数据集，只返回x</span></span><br><span class="line">        <span class="keyword">if</span> self.y <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self.x[idx]</span><br><span class="line">        <span class="comment"># 否则，返回一个包含x和y的元组</span></span><br><span class="line">        <span class="keyword">return</span> self.x[idx], self.y[idx]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回数据集中x的数量，即数据集的大小</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.x)</span><br></pre></td></tr></table></figure><h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h3><p>观察数据，选择更有效的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&#x27;./covid.train.csv&#x27;</span>)</span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021705622.png" alt="image-20240902164056398"></p><p>利用Pearson相关系数分析不同feature与label的相关性强弱。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.corr()[<span class="string">&#x27;tested_positive&#x27;</span>].sort_values(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021705623.png" alt="image-20240902164159811"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数来选择特征，用于拟合回归模型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_feat</span>(<span class="params">train_data, valid_data, test_data, select_all=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    特征选择</span></span><br><span class="line"><span class="string">    选择较好的特征用来拟合回归模型</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 从训练数据中分离出目标变量y</span></span><br><span class="line">    y_train, y_valid = train_data[:, -<span class="number">1</span>], valid_data[:, -<span class="number">1</span>]</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    [:, -1]：这是一个NumPy的切片操作，用于选择数组中的特定行和列。</span></span><br><span class="line"><span class="string">    :表示选择所有行，即选择整个数据集。</span></span><br><span class="line"><span class="string">    -1表示选择最后一列。在Python中，使用负数索引可以从数组的末尾开始计数，-1就是数组中的最后一个元素，对于二维数组来说，就是最后一列。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 从训练数据、验证数据和测试数据中分离出特征矩阵x</span></span><br><span class="line">    raw_x_train, raw_x_valid, raw_x_test = train_data[:, :-<span class="number">1</span>], valid_data[:, :-<span class="number">1</span>], test_data</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    [:, :-1]：这是一个NumPy的切片操作，用于选择数组中的特定行和列。</span></span><br><span class="line"><span class="string">    :表示选择所有行，即选择整个数据集。</span></span><br><span class="line"><span class="string">    :-1表示选择从第一列开始直到倒数第二列的所有列。在Python中，使用负数索引可以从数组的末尾开始计数，-1就是数组中的最后一个元素之前的所有元素，对于二维数组来说，就是除了最后一列之外的所有列。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果select_all为True，则选择所有特征</span></span><br><span class="line">    <span class="keyword">if</span> select_all:</span><br><span class="line">        feat_idx = <span class="built_in">list</span>(<span class="built_in">range</span>(raw_x_train.shape[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 否则，根据某些标准（需要自行调研特征选择方法）选择特征</span></span><br><span class="line">        <span class="comment"># 根据Pearson系数降序排列的结果，我们重新选择特征。</span></span><br><span class="line">        <span class="comment"># 去掉第一列 id 列</span></span><br><span class="line">        feat_idx = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">38</span>)) + [<span class="number">53</span>, <span class="number">69</span>, <span class="number">85</span>, <span class="number">101</span>] </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回选定的特征矩阵和目标变量</span></span><br><span class="line">    <span class="keyword">return</span> raw_x_train[:, feat_idx], raw_x_valid[:, feat_idx], raw_x_test[:, feat_idx], y_train, y_valid</span><br></pre></td></tr></table></figure><h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3><ol><li>从文件中读取数据<code>pd.read_csv</code></li><li>数据拆分成三份 训练（training）、验证（validation）、测试（testing）<ul><li><code>train_valid_split</code>：  分成训练、验证</li><li><code>select_feat</code>：拆分特征和label，并进行特征选择</li><li><code>COVID19Dataset</code>: 分别将训练、验证、测试集的特征和label组合成可以用于快速迭代训练的数据集<code>train_dataset, valid_dataset, test_dataset</code></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置随机种子便于复现</span></span><br><span class="line">same_seed(config[<span class="string">&#x27;seed&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练集大小(train_data size) : 2699 x 118 (id + 37 states + 16 features x 5 days) </span></span><br><span class="line"><span class="comment"># 测试集大小(test_data size）: 1078 x 117 (没有label (last day&#x27;s positive rate))</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_column&#x27;</span>, <span class="number">200</span>) <span class="comment"># 设置显示数据的列数</span></span><br><span class="line">train_df, test_df = pd.read_csv(<span class="string">&#x27;./covid.train.csv&#x27;</span>), pd.read_csv(<span class="string">&#x27;./covid.test.csv&#x27;</span>)</span><br><span class="line">display(train_df.head(<span class="number">3</span>)) <span class="comment"># 显示前三行的样本</span></span><br><span class="line">train_data, test_data = train_df.values, test_df.values</span><br><span class="line"><span class="keyword">del</span> train_df, test_df <span class="comment"># 删除数据减少内存占用</span></span><br><span class="line">train_data, valid_data = train_valid_split(train_data, config[<span class="string">&#x27;valid_ratio&#x27;</span>], config[<span class="string">&#x27;seed&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印数据的大小</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;train_data size: <span class="subst">&#123;train_data.shape&#125;</span> </span></span><br><span class="line"><span class="string">valid_data size: <span class="subst">&#123;valid_data.shape&#125;</span> </span></span><br><span class="line"><span class="string">test_data size: <span class="subst">&#123;test_data.shape&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征选择</span></span><br><span class="line">x_train, x_valid, x_test, y_train, y_valid = select_feat(train_data, valid_data, test_data, config[<span class="string">&#x27;select_all&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出特征数量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;number of features: <span class="subst">&#123;x_train.shape[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">train_dataset, valid_dataset, test_dataset = COVID19Dataset(x_train, y_train), \</span><br><span class="line">                                             COVID19Dataset(x_valid, y_valid), \</span><br><span class="line">                                             COVID19Dataset(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Pytorch中Dataloader类按照Batch将数据集加载</span></span><br><span class="line">train_loader = DataLoader(train_dataset, batch_size=config[<span class="string">&#x27;batch_size&#x27;</span>], shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>)</span><br><span class="line">valid_loader = DataLoader(valid_dataset, batch_size=config[<span class="string">&#x27;batch_size&#x27;</span>], shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(test_dataset, batch_size=config[<span class="string">&#x27;batch_size&#x27;</span>], shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><p>超参设置：<code>config</code> 包含所有训练需要的超参数（便于后续的调参），以及模型需要存储的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">device = <span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;seed&#x27;</span>: <span class="number">5201314</span>,       <span class="comment"># 随机种子，可以自己填写. :)</span></span><br><span class="line">    <span class="string">&#x27;select_all&#x27;</span>: <span class="literal">False</span>,   <span class="comment"># 是否选择全部的特征</span></span><br><span class="line">    <span class="string">&#x27;valid_ratio&#x27;</span>: <span class="number">0.2</span>,    <span class="comment"># 验证集大小(validation_size) = 训练集大小(train_size) * 验证数据占比(valid_ratio)</span></span><br><span class="line">    <span class="string">&#x27;n_epochs&#x27;</span>: <span class="number">3000</span>,       <span class="comment"># 数据遍历训练次数           </span></span><br><span class="line">    <span class="string">&#x27;batch_size&#x27;</span>: <span class="number">256</span>, </span><br><span class="line">    <span class="string">&#x27;learning_rate&#x27;</span>: <span class="number">1e-5</span>,              </span><br><span class="line">    <span class="string">&#x27;early_stop&#x27;</span>: <span class="number">400</span>,     <span class="comment"># 如果early_stop轮损失没有下降就停止训练.     </span></span><br><span class="line">    <span class="string">&#x27;save_path&#x27;</span>: <span class="string">&#x27;./models/model.ckpt&#x27;</span>  <span class="comment"># 模型存储的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><h3 id="定义神经网络模型"><a href="#定义神经网络模型" class="headerlink" title="定义神经网络模型"></a>定义神经网络模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个自定义的模型类My_Model，继承自nn.Module</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">My_Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_dim</span>):</span><br><span class="line">        <span class="built_in">super</span>(My_Model, self).__init__()</span><br><span class="line">        <span class="comment"># 定义模型的结构为一个顺序模型（Sequential），包含线性层（Linear）和激活函数（ReLU）</span></span><br><span class="line">        self.layers = nn.Sequential(</span><br><span class="line">            <span class="comment"># 第一层线性层，输入维度为input_dim，输出维度为16</span></span><br><span class="line">            nn.Linear(input_dim, <span class="number">16</span>),</span><br><span class="line">            <span class="comment"># ReLU激活函数</span></span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            <span class="comment"># 第二层线性层，输入维度为16，输出维度为8</span></span><br><span class="line">            nn.Linear(<span class="number">16</span>, <span class="number">8</span>),</span><br><span class="line">            <span class="comment"># ReLU激活函数</span></span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            <span class="comment"># 第三层线性层，输入维度为8，输出维度为1</span></span><br><span class="line">            nn.Linear(<span class="number">8</span>, <span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># 在前向传播中，输入x通过定义的层（layers）</span></span><br><span class="line">        x = self.layers(x)</span><br><span class="line">        <span class="comment"># 使用squeeze函数移除输出张量的一个维度，使其从形状(B, 1)变为(B)</span></span><br><span class="line">        x = x.squeeze(<span class="number">1</span>) </span><br><span class="line">        <span class="comment"># 返回模型的输出</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><p>训练迭代＋验证迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">trainer</span>(<span class="params">train_loader, valid_loader, model, config, device</span>):</span><br><span class="line"></span><br><span class="line">    criterion = nn.MSELoss(reduction=<span class="string">&#x27;mean&#x27;</span>) <span class="comment"># 损失函数的定义</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义优化器</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> 可以查看学习更多的优化器 https://pytorch.org/docs/stable/optim.html </span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> L2 正则( 可以使用optimizer(weight decay...) )或者 自己实现L2正则.</span></span><br><span class="line">    optimizer = torch.optim.SGD(model.parameters(), lr=config[<span class="string">&#x27;learning_rate&#x27;</span>], momentum=<span class="number">0.9</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># tensorboard 的记录器</span></span><br><span class="line">    writer = SummaryWriter()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">&#x27;./models&#x27;</span>):</span><br><span class="line">        <span class="comment"># 创建文件夹-用于存储模型</span></span><br><span class="line">        os.mkdir(<span class="string">&#x27;./models&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    n_epochs, best_loss, step, early_stop_count = config[<span class="string">&#x27;n_epochs&#x27;</span>], math.inf, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(n_epochs):</span><br><span class="line">        model.train() <span class="comment"># 训练模式</span></span><br><span class="line">        loss_record = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># tqdm可以帮助我们显示训练的进度  </span></span><br><span class="line">        train_pbar = tqdm(train_loader, position=<span class="number">0</span>, leave=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 设置进度条的左边 ： 显示第几个Epoch了</span></span><br><span class="line">        train_pbar.set_description(<span class="string">f&#x27;Epoch [<span class="subst">&#123;epoch+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;n_epochs&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> train_pbar:</span><br><span class="line">            optimizer.zero_grad()               <span class="comment"># 将梯度置0.</span></span><br><span class="line">            x, y = x.to(device), y.to(device)   <span class="comment"># 将数据一到相应的存储位置(CPU/GPU)</span></span><br><span class="line">            pred = model(x)                     <span class="comment"># 前向传播          </span></span><br><span class="line">            loss = criterion(pred, y)           <span class="comment"># 计算损失</span></span><br><span class="line">            loss.backward()                     <span class="comment"># 反向传播 计算梯度.</span></span><br><span class="line">            optimizer.step()                    <span class="comment"># 更新网络参数</span></span><br><span class="line">            step += <span class="number">1</span></span><br><span class="line">            loss_record.append(loss.detach().item())</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 训练完一个batch的数据，将loss 显示在进度条的右边</span></span><br><span class="line">            train_pbar.set_postfix(&#123;<span class="string">&#x27;loss&#x27;</span>: loss.detach().item()&#125;)</span><br><span class="line"></span><br><span class="line">        mean_train_loss = <span class="built_in">sum</span>(loss_record)/<span class="built_in">len</span>(loss_record)</span><br><span class="line">        <span class="comment"># 每个epoch,在tensorboard 中记录训练的损失（后面可以展示出来）</span></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;Loss/train&#x27;</span>, mean_train_loss, step)</span><br><span class="line"></span><br><span class="line">        model.<span class="built_in">eval</span>() <span class="comment"># 将模型设置成 evaluation 模式.</span></span><br><span class="line">        loss_record = []</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> valid_loader:</span><br><span class="line">            x, y = x.to(device), y.to(device)</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                pred = model(x)</span><br><span class="line">                loss = criterion(pred, y)</span><br><span class="line"></span><br><span class="line">            loss_record.append(loss.item())</span><br><span class="line">            </span><br><span class="line">        mean_valid_loss = <span class="built_in">sum</span>(loss_record)/<span class="built_in">len</span>(loss_record)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Epoch [<span class="subst">&#123;epoch+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;n_epochs&#125;</span>]: Train loss: <span class="subst">&#123;mean_train_loss:<span class="number">.4</span>f&#125;</span>, Valid loss: <span class="subst">&#123;mean_valid_loss:<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="comment"># 每个epoch,在tensorboard 中记录验证的损失（后面可以展示出来）</span></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;Loss/valid&#x27;</span>, mean_valid_loss, step)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果当前验证损失优于最佳损失，则保存模型</span></span><br><span class="line">        <span class="keyword">if</span> mean_valid_loss &lt; best_loss:</span><br><span class="line">            best_loss = mean_valid_loss</span><br><span class="line">            torch.save(model.state_dict(), config[<span class="string">&#x27;save_path&#x27;</span>]) <span class="comment"># 模型保存</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Saving model with loss &#123;:.3f&#125;...&#x27;</span>.<span class="built_in">format</span>(best_loss))</span><br><span class="line">            early_stop_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            early_stop_count += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 如果连续多次验证损失没有改善，则停止训练</span></span><br><span class="line">        <span class="keyword">if</span> early_stop_count &gt;= config[<span class="string">&#x27;early_stop&#x27;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\nModel is not improving, so we halt the training session.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>开始训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = My_Model(input_dim=x_train.shape[<span class="number">1</span>]).to(device) <span class="comment"># 将模型和训练数据放在相同的存储位置(CPU/GPU)</span></span><br><span class="line">trainer(train_loader, valid_loader, model, config, device)</span><br></pre></td></tr></table></figure><h3 id="使用-tensorboard-输出模型训练过程和指标可视化-可选"><a href="#使用-tensorboard-输出模型训练过程和指标可视化-可选" class="headerlink" title="使用 tensorboard 输出模型训练过程和指标可视化(可选)"></a>使用 <code>tensorboard</code> 输出模型训练过程和指标可视化(可选)</h3><p><code>tensorboard</code> 可视化工具：可以记录并展现模型的训练过程中的各种指标，这里我们是记录模型的损失</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%reload_ext tensorboard</span><br><span class="line">%tensorboard --logdir=./runs/ --port=<span class="number">6007</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021705624.png" alt="image-20240902161850507"></p><h2 id="模型加载并预测"><a href="#模型加载并预测" class="headerlink" title="模型加载并预测"></a>模型加载并预测</h2><p>测试集的预测结果保存到<code>pred.csv</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_pred</span>(<span class="params">preds, file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 将模型保存到指定位置 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> fp:     <span class="comment"># 添加 newline=&#x27;&#x27; 防止在Windows上出现额外的空行</span></span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;tested_positive&#x27;</span>])</span><br><span class="line">        <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(preds):</span><br><span class="line">            writer.writerow([i, p])</span><br><span class="line"></span><br><span class="line">model = My_Model(input_dim=x_train.shape[<span class="number">1</span>]).to(device)</span><br><span class="line">model.load_state_dict(torch.load(config[<span class="string">&#x27;save_path&#x27;</span>]))</span><br><span class="line">preds = predict(test_loader, model, device) </span><br><span class="line">save_pred(preds, <span class="string">&#x27;pred.csv&#x27;</span>)         </span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>完整代码见：<a href="https://github.com/huaiyuechusan/Hongyi_Lee_dl_homeworks/tree/master/HW1_Regression">Hongyi_Lee_dl_homeworks/HW1_Regression at master · huaiyuechusan/Hongyi_Lee_dl_homeworks (github.com)</a></p><p>参考文章：</p><p><a href="https://blog.csdn.net/qq_41502322/article/details/123922649">【李宏毅《机器学习》2022】作业1：COVID 19 Cases Prediction (Regression)_李宏毅2022作业-CSDN博客</a></p><p><a href="https://github.com/huaiyuechusan/Hongyi_Lee_dl_homeworks/blob/master/Warmup/Pytorch_Tutorial_2.pdf">Hongyi_Lee_dl_homeworks/Warmup/Pytorch_Tutorial_2.pdf at master · huaiyuechusan/Hongyi_Lee_dl_homeworks (github.com)</a></p>]]></content>
    
    
    <summary type="html">PyTorch入门实践：COVID-19 病例预测 (回归)</summary>
    
    
    
    <category term="PyTorch" scheme="https://huaiyuechusan.gitee.io/categories/PyTorch/"/>
    
    
    <category term="深度学习" scheme="https://huaiyuechusan.gitee.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PyTorch" scheme="https://huaiyuechusan.gitee.io/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>快速入门PyTorch</title>
    <link href="https://huaiyuechusan.gitee.io/archives/76ef551b.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/76ef551b.html</id>
    <published>2024-09-02T02:36:30.000Z</published>
    <updated>2024-10-17T12:00:29.426Z</updated>
    
    <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="快速入门PyTorch"><a href="#快速入门PyTorch" class="headerlink" title="快速入门PyTorch"></a>快速入门PyTorch</h1><p>[TOC]</p><h2 id="什么是PyTorch"><a href="#什么是PyTorch" class="headerlink" title="什么是PyTorch"></a>什么是PyTorch</h2><ol><li>一个基于Python的机器学习框架</li><li>两个主要特点:<ul><li>在GPUs上进行N维张量计算(如NumPy)</li><li>用于训练深度神经网络的自动微分</li></ul></li></ol><h2 id="前置知识—-tensors的基本使用"><a href="#前置知识—-tensors的基本使用" class="headerlink" title="前置知识—-tensors的基本使用"></a>前置知识—-tensors的基本使用</h2><p><code>tensor</code>是pytorch的基本数据结构，他是一个高维矩阵，类似数组（<code>arrays</code>）。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706967.png" alt="image-20240901125711927"></p><h3 id="查看Tensors的维度"><a href="#查看Tensors的维度" class="headerlink" title="查看Tensors的维度"></a>查看Tensors的维度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.shape()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706968.png" alt="image-20240901130342727"></p><blockquote><p>:warning: PyTorch的dim（维度）等价于 NumPy中的axis（轴）</p></blockquote><h3 id="创建Tensors"><a href="#创建Tensors" class="headerlink" title="创建Tensors"></a>创建Tensors</h3><p>直接从数据中获取（比如：list 或者 numpy.ndarray）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([[<span class="number">1</span>, -<span class="number">1</span>], [-<span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line">x = torch.from_numpy(np.array([[<span class="number">1</span>, -<span class="number">1</span>], [-<span class="number">1</span>, <span class="number">1</span>]]))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706969.png" alt="image-20240901154208367"></p><p>创建全是0或全是1的常数张量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.zeros([<span class="number">2</span>, <span class="number">2</span>])    <span class="comment"># [2, 2]指shape    第0维2列，第1维2列</span></span><br><span class="line">x = torch.ones([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>])    <span class="comment"># [1, 2, 5]指shape    第0维1列，第1维2列，第2维5列</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706970.png" alt="image-20240901154521790"></p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="支持常用的算术函数："><a href="#支持常用的算术函数：" class="headerlink" title="支持常用的算术函数："></a>支持常用的算术函数：</h4><ol><li>加法：<code>z = x + y</code></li><li>减法：<code>z = x - y</code></li><li>幂运算：<code>y = x.pow(2)</code></li><li>求和：<code>y = x.sum()</code></li><li>平均：<code>y = x.mean()</code></li></ol><h4 id="Transpose：将指定的两个维度转置："><a href="#Transpose：将指定的两个维度转置：" class="headerlink" title="Transpose：将指定的两个维度转置："></a>Transpose：将指定的两个维度转置：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.zeros([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">x.shape</span><br><span class="line"></span><br><span class="line">x = x.transpose(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">x.shape</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706971.png" alt="image-20240901155701729"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706972.png" alt="image-20240901155714425"></p><h4 id="Squeeze：删除length-1的指定维度"><a href="#Squeeze：删除length-1的指定维度" class="headerlink" title="Squeeze：删除length = 1的指定维度"></a>Squeeze：删除length = 1的指定维度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.zeros([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">x.shape</span><br><span class="line"></span><br><span class="line">x = x.squeeze(<span class="number">0</span>)  <span class="comment"># dim = 0</span></span><br><span class="line">x.shape</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706973.png" alt="image-20240901160526740"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706974.png" alt="image-20240901160818038"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.zeros([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">x.shape</span><br><span class="line"></span><br><span class="line">x = x.squeeze(<span class="number">1</span>)  <span class="comment"># dim = 1</span></span><br><span class="line">x.shape</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706975.png" alt="image-20240901160549874"></p><h4 id="Unsqueeze：扩展一个维度"><a href="#Unsqueeze：扩展一个维度" class="headerlink" title="Unsqueeze：扩展一个维度"></a>Unsqueeze：扩展一个维度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.zeros([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">x.shape</span><br><span class="line"></span><br><span class="line">x = x.unsqueeze(<span class="number">1</span>)  <span class="comment"># dim = 1</span></span><br><span class="line">x.shape</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706976.png" alt="image-20240901161101257"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706977.png" alt="image-20240901161148478"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.zeros([<span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">x.shape</span><br><span class="line"></span><br><span class="line">x = x.unsqueeze(<span class="number">2</span>)  <span class="comment"># dim = 2</span></span><br><span class="line">x.shape</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706978.png" alt="image-20240901161224217"></p><h4 id="Cat：连接多个张量"><a href="#Cat：连接多个张量" class="headerlink" title="Cat：连接多个张量"></a>Cat：连接多个张量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.zeros([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">y = torch.zeros([<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">z = torch.zeros([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">w = torch.cat([x, y, z], dim=<span class="number">1</span>)  <span class="comment"># 维度1上相加</span></span><br><span class="line">w.shape</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706979.png" alt="image-20240901161522072"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.zeros([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">y = torch.zeros([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">z = torch.zeros([<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">w = torch.cat([x, y, z], dim=<span class="number">0</span>)   <span class="comment"># 维度0上相加</span></span><br><span class="line">w.shape</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706980.png" alt="image-20240901161534795"></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>对模型和数据使用不同的数据类型会导致错误。</p><div class="table-container"><table><thead><tr><th>Data type</th><th>dtype</th><th>tensor</th></tr></thead><tbody><tr><td>32-bit floating point</td><td>torch.float</td><td>torch.FloatTensor</td></tr><tr><td>64-bit integer (signed)</td><td>torch.long</td><td>torch.LongTensor</td></tr></tbody></table></div><h3 id="PyTorch和NumPy对比"><a href="#PyTorch和NumPy对比" class="headerlink" title="PyTorch和NumPy对比"></a>PyTorch和NumPy对比</h3><p>类似的属性</p><div class="table-container"><table><thead><tr><th>PyTorch</th><th>NumPy</th></tr></thead><tbody><tr><td>x.shape</td><td>x.shape</td></tr><tr><td>x.dtype</td><td>x.dtype</td></tr></tbody></table></div><p>许多函数也有相同的名称</p><div class="table-container"><table><thead><tr><th>PyTorch</th><th>NumPy</th></tr></thead><tbody><tr><td>x.reshape / x.view</td><td>x.reshape</td></tr><tr><td>x.squeeze()</td><td>x.squeeze()</td></tr><tr><td>x.unsqueeze(1)</td><td>np.expand_dims(x, 1)</td></tr></tbody></table></div><h3 id="计算设备"><a href="#计算设备" class="headerlink" title="计算设备"></a>计算设备</h3><p>张量和模块将默认使用CPU计算。</p><h4 id="使用-to-将张量移动到适当的设备。"><a href="#使用-to-将张量移动到适当的设备。" class="headerlink" title="使用.to()将张量移动到适当的设备。"></a>使用<code>.to()</code>将张量移动到适当的设备。</h4><p>CPU：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = x.to(<span class="string">&#x27;cpu&#x27;</span>)</span><br></pre></td></tr></table></figure><p>GPU：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = x.to(<span class="string">&#x27;cuda&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="检查您的计算机是否有NVIDIA-GPU"><a href="#检查您的计算机是否有NVIDIA-GPU" class="headerlink" title="检查您的计算机是否有NVIDIA GPU"></a>检查您的计算机是否有NVIDIA GPU</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure><h4 id="多个GPUs-指定-‘cuda-0’-‘cuda-1-‘-‘cuda-2-‘-…"><a href="#多个GPUs-指定-‘cuda-0’-‘cuda-1-‘-‘cuda-2-‘-…" class="headerlink" title="多个GPUs: 指定 ‘cuda:0’,  ‘cuda:1 ‘,   ‘cuda:2 ‘, …"></a>多个GPUs: 指定 ‘cuda:0’,  ‘cuda:1 ‘,   ‘cuda:2 ‘, …</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = x.to(<span class="string">&#x27;cuda:0&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="为什么使用-GPUs"><a href="#为什么使用-GPUs" class="headerlink" title="为什么使用 GPUs?"></a>为什么使用 GPUs?</h4><ul><li>以更多核心进行算术计算的并行计算</li><li><a href="https://towardsdatascience.com/what-is-a-gpu-and-do-you-need-one-in-deep-learning-718b9597aa0d">What is a GPU and do you need one in Deep Learning? | by Jason Dsouza | Towards Data Science</a></li></ul><h3 id="梯度计算"><a href="#梯度计算" class="headerlink" title="梯度计算"></a>梯度计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([[<span class="number">1.</span>, <span class="number">0.</span>], [-<span class="number">1.</span>, <span class="number">1.</span>]], requires_grad=<span class="literal">True</span>) <span class="comment"># ①</span></span><br><span class="line">z = x.<span class="built_in">pow</span>(<span class="number">2</span>).<span class="built_in">sum</span>()     <span class="comment"># ②</span></span><br><span class="line">z.backward()    <span class="comment"># ③</span></span><br><span class="line">x.grad   <span class="comment"># ④</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706981.png" alt="image-20240902094407353"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706982.png" alt="image-20240902094424938"></p><h2 id="神经网络的训练和测试"><a href="#神经网络的训练和测试" class="headerlink" title="神经网络的训练和测试"></a>神经网络的训练和测试</h2><p>如何训练一个神经网络分为三步：定义神经、定义损失函数、定义优化算法。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706983.png" alt="image-20240901123348781"></p><p>一个神经网络完整的训练和测试过程包括：神经网络训练、神经网络验证、神经网络测试。神经网络训练和神经网络验证两部分不断迭代，训练好模型。使用训练好的网络进行测试。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706984.png" alt="image-20240901123754052"></p><p>下面具体介绍每个部分具体如何使用<code>pytorch</code>编写代码。</p><h2 id="第一步-数据加载"><a href="#第一步-数据加载" class="headerlink" title="第一步-数据加载"></a>第一步-数据加载</h2><p>使用<code>pytorch</code>的<code>dataset</code>和<code>dataloader</code>类处理和加载数据。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706985.png" alt="image-20240901123922410"></p><p><code>Dataset</code>：存储数据样本和需要值</p><p><code>Dataloader</code>：批量分组数据，支持多处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;使用示例&quot;&quot;&quot;</span></span><br><span class="line">dataset = MyDataset(file)</span><br><span class="line">dataloader = DataLoader(dataset, batch_size, shuffle=<span class="literal">True</span>)    <span class="comment"># 训练时设置为 True  测试时设置为 False</span></span><br></pre></td></tr></table></figure><p>自定义数据加载，根据需要将数据从磁盘中获取，如：类别，图像，路径等信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file</span>): </span><br><span class="line">    self.data = ...               <span class="comment"># 数据读取和处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line"><span class="keyword">return</span> self.data[index] <span class="comment"># 每次返回一个样本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(self.data)         <span class="comment"># 返回数据集的大小</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义好的Dataset</span></span><br><span class="line">dataset = MyDataset(file)</span><br><span class="line"><span class="comment"># 在DataLoader中加载数据</span></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">5</span>, shuffle=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706986.png" alt="image-20240901125508649"></p><h2 id="第二步-定义神经网络"><a href="#第二步-定义神经网络" class="headerlink" title="第二步-定义神经网络"></a>第二步-定义神经网络</h2><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706988.png" alt="image-20240902094809971"></p><h3 id="线性层（全连接层）"><a href="#线性层（全连接层）" class="headerlink" title="线性层（全连接层）"></a>线性层（全连接层）</h3><p>Linear Layer (Fully-connected Layer)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line">nn.Linear(in_features, out_features)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706989.png" alt="image-20240902095258317"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706990.png" alt="image-20240902095334516"></p><p>左边输入维度为32，输出维度为64。<code>Wx + b = y</code></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706991.png" alt="image-20240902095518722"></p><p>查看全连接层的权重和偏置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">layer = torch.nn.Linear(<span class="number">32</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">layer.weight.shape    <span class="comment"># W</span></span><br><span class="line"></span><br><span class="line">layer.bias.shape      <span class="comment"># b</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706992.png" alt="image-20240902095807468"></p><h3 id="非线性激活函数"><a href="#非线性激活函数" class="headerlink" title="非线性激活函数"></a>非线性激活函数</h3><ol><li><p>Sigmoid激活函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nn.Sigmoid()</span><br></pre></td></tr></table></figure></li></ol><p>   <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706993.png" alt="image-20240902100022861"></p><ol><li><p>ReLU激活函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nn.ReLU()</span><br></pre></td></tr></table></figure></li></ol><p>   <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706994.png" alt="image-20240902100116229"></p><h3 id="构建自己的神经网络"><a href="#构建自己的神经网络" class="headerlink" title="构建自己的神经网络"></a>构建自己的神经网络</h3><p><code>__init__()</code>：初始化模型和定义层</p><p><code>forward()</code>：计算神经网络的输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModel, self).__init__()</span><br><span class="line">        self.net = nn.Sequential(</span><br><span class="line">                   nn.Linear(<span class="number">10</span>, <span class="number">32</span>),</span><br><span class="line">                   nn.Sigmoid(),</span><br><span class="line">                   nn.Linear(<span class="number">32</span>, <span class="number">1</span>)</span><br><span class="line">                   )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.net(x)</span><br></pre></td></tr></table></figure><p>使用Sequential等价于下面代码，Sequential将各个层串联起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModel, self).__init__()</span><br><span class="line">        self.layer1 = nn.Linear(<span class="number">10</span>, <span class="number">32</span>)</span><br><span class="line">        self.layer2 = nn.Sigmoid(),</span><br><span class="line">        self.layer3 = nn.Linear(<span class="number">32</span>,<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = self.layer1(x)</span><br><span class="line">        out = self.layer2(out)</span><br><span class="line">        out = self.layer3(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><h2 id="第三步-定义损失函数"><a href="#第三步-定义损失函数" class="headerlink" title="第三步-定义损失函数"></a>第三步-定义损失函数</h2><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706995.png" alt="image-20240902102441041"></p><ol><li><p>均方差损失函数（Mean Squared Error）：常用于回归任务（regression）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">criterion = nn.MSELoss()</span><br><span class="line">loss = criterion(model_output, expected_value)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>交叉熵损失函数（Cross Entropy）：常用于分类任务（classification）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">loss = criterion(model_output, expected_value)</span><br></pre></td></tr></table></figure></li></ol><h2 id="第四步-定义优化算法"><a href="#第四步-定义优化算法" class="headerlink" title="第四步-定义优化算法"></a>第四步-定义优化算法</h2><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706996.png" alt="image-20240902102841785"></p><p>基于梯度的优化算法，调整网络参数以减少误差。</p><p>例如，随机梯度下降（Stochastic Gradient Descent, SGD）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr, momentum = <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>对于每批数据:</p><ol><li>调用<code>optimizer.zero_grad()</code>重置模型参数的梯度。</li><li>调用<code>loss.backward()</code>反向传播预测损失的梯度。</li><li>调用<code>optimizer.step()</code>来调整模型参数。</li></ol><h2 id="第五步-模型训练验证测试全过程"><a href="#第五步-模型训练验证测试全过程" class="headerlink" title="第五步-模型训练验证测试全过程"></a>第五步-模型训练验证测试全过程</h2><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202409021706997.png" alt="image-20240902105136467"></p><h3 id="神经网络训练设置"><a href="#神经网络训练设置" class="headerlink" title="神经网络训练设置"></a>神经网络训练设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dataset = MyDataset(file)                               <span class="comment"># 通过MyDataset读取数据</span></span><br><span class="line">tr_set = DataLoader(dataset, <span class="number">16</span>, shuffle=<span class="literal">True</span>)          <span class="comment"># 将数据放入Dataloader</span></span><br><span class="line">model = MyModel().to(device)                            <span class="comment"># 构建模型并迁移到设备(cpu/cuda)</span></span><br><span class="line">criterion = nn.MSELoss()                                <span class="comment"># 设置损失函数</span></span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), <span class="number">0.1</span>)    <span class="comment"># 设置优化器</span></span><br></pre></td></tr></table></figure><h3 id="神经网络训练循环迭代"><a href="#神经网络训练循环迭代" class="headerlink" title="神经网络训练循环迭代"></a>神经网络训练循环迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(n_epochs):                  <span class="comment"># 遍历批次</span></span><br><span class="line">    model.train()                              <span class="comment"># 设置模型为训练模式</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> trian_loader:                  <span class="comment"># 遍历训练集</span></span><br><span class="line">        optimizer.zero_grad()                  <span class="comment"># 设置梯度为0</span></span><br><span class="line">        x, y = x.to(device), y.to(device)      <span class="comment"># 移动数据到设备（GPU、CPU）</span></span><br><span class="line">        pred = model(x)                        <span class="comment"># 前向传播，计算输出</span></span><br><span class="line">        loss = criterion(pred, y)              <span class="comment"># 计算损失</span></span><br><span class="line">        loss.backward()                        <span class="comment"># 反向传播，计算梯度</span></span><br><span class="line">        optimizer.step()                       <span class="comment"># 使用优化器更新模型</span></span><br></pre></td></tr></table></figure><h3 id="神经网络验证循环迭代"><a href="#神经网络验证循环迭代" class="headerlink" title="神经网络验证循环迭代"></a>神经网络验证循环迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">eval</span>()                                            <span class="comment"># 设置模型为验证模式</span></span><br><span class="line">total_loss = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> valid_loader:                               <span class="comment"># 遍历验证集</span></span><br><span class="line">    x, y = x.to(device), y.to(device)                   <span class="comment"># 移动数据到设备（GPU、CPU）</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():                               <span class="comment"># 禁用梯度计算</span></span><br><span class="line">        pred = model(x)                                 <span class="comment"># 前向传播，计算输出</span></span><br><span class="line">        loss = criterion(pred, y)                       <span class="comment"># 计算损失    </span></span><br><span class="line">    total_loss += loss.cpu().item() * <span class="built_in">len</span>(x)            <span class="comment"># 累计损失</span></span><br><span class="line">    avg_loss = total_loss / <span class="built_in">len</span>(valid_loader.dataset)   <span class="comment"># 计算平均损失    </span></span><br></pre></td></tr></table></figure><h3 id="神经网络测试（预测）循环迭代"><a href="#神经网络测试（预测）循环迭代" class="headerlink" title="神经网络测试（预测）循环迭代"></a>神经网络测试（预测）循环迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">eval</span>()                           <span class="comment"># 设置模型为验证模式</span></span><br><span class="line">preds = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> test_loader:                  <span class="comment"># 遍历测试集</span></span><br><span class="line">    x = x.to(device)                   <span class="comment"># 移动数据到设备（GPU、CPU）</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():              <span class="comment"># 禁用梯度计算</span></span><br><span class="line">        pred = model(x)                <span class="comment"># 前向传播，计算输出</span></span><br><span class="line">        preds.append(pred.cpu())       <span class="comment"># 记录预测结果</span></span><br></pre></td></tr></table></figure><blockquote><p>:warning: <code>model.eval(), torch.no_grad()</code></p><p><code>model.eval()</code>：更改一些模型层的行为，如dropout和batch normalization。</p><p><code>torch.no_grad()</code>：阻止计算被添加到梯度计算图中。通常用于防止对验证/测试数据的意外训练。</p></blockquote><h2 id="第六步-保存-加载训练好的模型"><a href="#第六步-保存-加载训练好的模型" class="headerlink" title="第六步-保存/加载训练好的模型"></a>第六步-保存/加载训练好的模型</h2><p>保存模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.save(model.state_dict(), path)</span><br></pre></td></tr></table></figure><p>加载模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ckpt = torch.load(path)</span><br><span class="line">model.load_state_dict(ckpt)</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/huaiyuechusan/Hongyi_Lee_dl_homeworks/blob/master/Warmup/Pytorch_Tutorial_1.pdf">Hongyi_Lee_dl_homeworks/Warmup/Pytorch_Tutorial_1.pdf at master · huaiyuechusan/Hongyi_Lee_dl_homeworks (github.com)</a></p><p><a href="https://tingsongyu.github.io/PyTorch-Tutorial-2nd/">PyTorch实用教程（第二版） (tingsongyu.github.io)</a></p><p><a href="https://www.bilibili.com/video/BV1JA411c7VT/?vd_source=085587719ae55cb73b56b0fa441ea840">李宏毅《机器学习/深度学习》2021课程（国语版本，已授权）</a></p><p><a href="https://www.bilibili.com/video/BV1hE411t7RN/?p=1&amp;vd_source=085587719ae55cb73b56b0fa441ea840">PyTorch深度学习快速入门教程（绝对通俗易懂！）【小土堆】</a></p><p><a href="https://space.bilibili.com/1567748478/channel/seriesdetail?sid=358497">跟李沐学AI的个人空间-【完结】动手学深度学习 PyTorch版)</a></p>]]></content>
    
    
    <summary type="html">快速入门PyTorch</summary>
    
    
    
    <category term="PyTorch" scheme="https://huaiyuechusan.gitee.io/categories/PyTorch/"/>
    
    
    <category term="深度学习" scheme="https://huaiyuechusan.gitee.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PyTorch" scheme="https://huaiyuechusan.gitee.io/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>分类任务实现模型（投票式）集成代码模版</title>
    <link href="https://huaiyuechusan.gitee.io/archives/6e00b65.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/6e00b65.html</id>
    <published>2024-08-30T03:49:00.000Z</published>
    <updated>2024-10-17T11:59:46.164Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="分类任务实现模型（投票式）集成代码模版"><a href="#分类任务实现模型（投票式）集成代码模版" class="headerlink" title="分类任务实现模型（投票式）集成代码模版"></a>分类任务实现模型（投票式）集成代码模版</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本实验使用上一博客的<a href="https://blog.csdn.net/manongtuzi/article/details/141723542?spm=1001.2014.3001.5501">深度学习分类模型训练代码模板-CSDN博客</a>，自定义投票式集成，手动实现模型集成（投票法）的代码。最后通过tensorboard进行可视化，对每个基学习器的性能进行对比，直观的看出模型集成的作用。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchmetrics</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> my_utils <span class="keyword">as</span> utils</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchensemble.utils <span class="keyword">import</span> set_module</span><br><span class="line"><span class="keyword">from</span> torchensemble.voting <span class="keyword">import</span> VotingClassifier</span><br><span class="line"></span><br><span class="line">classes = [<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_args_parser</span>(<span class="params">add_help=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;PyTorch Classification Training&quot;</span>, add_help=add_help)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&quot;--data-path&quot;</span>, default=<span class="string">r&quot;E:\Pytorch-Tutorial-2nd\data\datasets\cifar10-office&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;dataset path&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--model&quot;</span>, default=<span class="string">&quot;resnet8&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;model name&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--device&quot;</span>, default=<span class="string">&quot;cuda&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;device (Use cuda or cpu Default: cuda)&quot;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;-b&quot;</span>, <span class="string">&quot;--batch-size&quot;</span>, default=<span class="number">128</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;images per gpu, the total batch size is $NGPU x batch_size&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--epochs&quot;</span>, default=<span class="number">200</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;N&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;number of total epochs to run&quot;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;-j&quot;</span>, <span class="string">&quot;--workers&quot;</span>, default=<span class="number">4</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;N&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;number of data loading workers (default: 16)&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--opt&quot;</span>, default=<span class="string">&quot;SGD&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;optimizer&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--random-seed&quot;</span>, default=<span class="number">42</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;random seed&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--lr&quot;</span>, default=<span class="number">0.1</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, <span class="built_in">help</span>=<span class="string">&quot;initial learning rate&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--momentum&quot;</span>, default=<span class="number">0.9</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, metavar=<span class="string">&quot;M&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;momentum&quot;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--wd&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--weight-decay&quot;</span>,</span><br><span class="line">        default=<span class="number">1e-4</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">        metavar=<span class="string">&quot;W&quot;</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&quot;weight decay (default: 1e-4)&quot;</span>,</span><br><span class="line">        dest=<span class="string">&quot;weight_decay&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--lr-step-size&quot;</span>, default=<span class="number">80</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;decrease lr every step-size epochs&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--lr-gamma&quot;</span>, default=<span class="number">0.1</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, <span class="built_in">help</span>=<span class="string">&quot;decrease lr by a factor of lr-gamma&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--print-freq&quot;</span>, default=<span class="number">80</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;print frequency&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--output-dir&quot;</span>, default=<span class="string">&quot;./Result&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;path to save outputs&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--resume&quot;</span>, default=<span class="string">&quot;&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;path of checkpoint&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--start-epoch&quot;</span>, default=<span class="number">0</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;N&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;start epoch&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    args = get_args_parser().parse_args()</span><br><span class="line">    utils.setup_seed(args.random_seed)</span><br><span class="line">    args.device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">    device = args.device</span><br><span class="line">    data_dir = args.data_path</span><br><span class="line">    result_dir = args.output_dir</span><br><span class="line">    <span class="comment"># ------------------------------------  log ------------------------------------</span></span><br><span class="line">    logger, log_dir = utils.make_logger(result_dir)</span><br><span class="line">    writer = SummaryWriter(log_dir=log_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ step1: dataset ------------------------------------</span></span><br><span class="line"></span><br><span class="line">    normMean = [<span class="number">0.4948052</span>, <span class="number">0.48568845</span>, <span class="number">0.44682974</span>]</span><br><span class="line">    normStd = [<span class="number">0.24580306</span>, <span class="number">0.24236229</span>, <span class="number">0.2603115</span>]</span><br><span class="line">    normTransform = transforms.Normalize(normMean, normStd)</span><br><span class="line">    train_transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">32</span>),</span><br><span class="line">        transforms.RandomCrop(<span class="number">32</span>, padding=<span class="number">4</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        normTransform</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    valid_transform = transforms.Compose([</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        normTransform</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># root变量下需要存放cifar-10-python.tar.gz 文件</span></span><br><span class="line">    <span class="comment"># cifar-10-python.tar.gz可从 &quot;https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz&quot; 下载</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=data_dir, train=<span class="literal">True</span>, transform=train_transform, download=<span class="literal">True</span>)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=data_dir, train=<span class="literal">False</span>, transform=valid_transform, download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建DataLoder</span></span><br><span class="line">    train_loader = DataLoader(dataset=train_set, batch_size=args.batch_size, shuffle=<span class="literal">True</span>, num_workers=args.workers)</span><br><span class="line">    valid_loader = DataLoader(dataset=test_set, batch_size=args.batch_size, num_workers=args.workers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ tep2: model ------------------------------------</span></span><br><span class="line">    model_base = utils.resnet20()</span><br><span class="line">    <span class="comment"># model_base = utils.LeNet5()</span></span><br><span class="line">    model = MyEnsemble(estimator=model_base, n_estimators=<span class="number">3</span>, logger=logger, device=device, args=args,</span><br><span class="line">                       classes=classes, writer=writer, save_dir=log_dir)</span><br><span class="line">    model.set_optimizer(args.opt, lr=args.lr, weight_decay=args.weight_decay)</span><br><span class="line">    model.fit(train_loader, test_loader=valid_loader, epochs=args.epochs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyEnsemble</span>(<span class="title class_ inherited__">VotingClassifier</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="comment"># logger, device, args, classes, writer</span></span><br><span class="line">        <span class="built_in">super</span>(VotingClassifier, self).__init__(kwargs[<span class="string">&quot;estimator&quot;</span>], kwargs[<span class="string">&quot;n_estimators&quot;</span>])</span><br><span class="line">        self.logger = kwargs[<span class="string">&quot;logger&quot;</span>]</span><br><span class="line">        self.writer = kwargs[<span class="string">&quot;writer&quot;</span>]</span><br><span class="line">        self.device = kwargs[<span class="string">&quot;device&quot;</span>]</span><br><span class="line">        self.args = kwargs[<span class="string">&quot;args&quot;</span>]</span><br><span class="line">        self.classes = kwargs[<span class="string">&quot;classes&quot;</span>]</span><br><span class="line">        self.save_dir = kwargs[<span class="string">&quot;save_dir&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">model, save_dir, logger</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Implement model serialization to the specified directory.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> save_dir <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            save_dir = <span class="string">&quot;./&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(save_dir):</span><br><span class="line">            os.mkdir(save_dir)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Decide the base estimator name</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(model.base_estimator_, <span class="built_in">type</span>):</span><br><span class="line">            base_estimator_name = model.base_estimator_.__name__</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            base_estimator_name = model.base_estimator_.__class__.__name__</span><br><span class="line"></span><br><span class="line">        <span class="comment"># &#123;Ensemble_Model_Name&#125;_&#123;Base_Estimator_Name&#125;_&#123;n_estimators&#125;</span></span><br><span class="line">        filename = <span class="string">&quot;&#123;&#125;_&#123;&#125;_&#123;&#125;_ckpt.pth&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            <span class="built_in">type</span>(model).__name__,</span><br><span class="line">            base_estimator_name,</span><br><span class="line">            model.n_estimators,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># The real number of base estimators in some ensembles is not same as</span></span><br><span class="line">        <span class="comment"># `n_estimators`.</span></span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="string">&quot;n_estimators&quot;</span>: <span class="built_in">len</span>(model.estimators_),</span><br><span class="line">            <span class="string">&quot;model&quot;</span>: model.state_dict(),</span><br><span class="line">            <span class="string">&quot;_criterion&quot;</span>: model._criterion,</span><br><span class="line">        &#125;</span><br><span class="line">        save_dir = os.path.join(save_dir, filename)</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;Saving the model to `&#123;&#125;`&quot;</span>.<span class="built_in">format</span>(save_dir))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Save</span></span><br><span class="line">        torch.save(state, save_dir)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fit</span>(<span class="params">self, train_loader, epochs=<span class="number">100</span>, log_interval=<span class="number">100</span>, test_loader=<span class="literal">None</span>, save_model=<span class="literal">True</span>, save_dir=<span class="literal">None</span>, </span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 模型、优化器、学习率调整器、评估器 列表创建</span></span><br><span class="line">        estimators = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.n_estimators):</span><br><span class="line">            estimators.append(self._make_estimator())</span><br><span class="line"></span><br><span class="line">        optimizers = []</span><br><span class="line">        schedulers = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n_estimators):</span><br><span class="line">            optimizers.append(set_module.set_optimizer(estimators[i],</span><br><span class="line">                                                       self.optimizer_name, **self.optimizer_args))</span><br><span class="line">            scheduler_ = torch.optim.lr_scheduler.MultiStepLR(optimizers[i], milestones=[<span class="number">100</span>, <span class="number">150</span>],</span><br><span class="line">                                                              gamma=self.args.lr_gamma)  <span class="comment"># 设置学习率下降策略</span></span><br><span class="line">            <span class="comment"># scheduler_ = torch.optim.lr_scheduler.StepLR(optimizers[i], step_size=self.args.lr_step_size,</span></span><br><span class="line">            <span class="comment">#                                             gamma=self.args.lr_gamma)  # 设置学习率下降策略</span></span><br><span class="line">            schedulers.append(scheduler_)</span><br><span class="line"></span><br><span class="line">        acc_metrics = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n_estimators):</span><br><span class="line">            <span class="comment"># task类型与任务一致</span></span><br><span class="line">            <span class="comment"># num_classes与分类任务的类别数一致</span></span><br><span class="line">            acc_metrics.append(torchmetrics.Accuracy(task=<span class="string">&quot;multiclass&quot;</span>, num_classes=<span class="built_in">len</span>(self.classes)))</span><br><span class="line"></span><br><span class="line">        self._criterion = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># epoch循环迭代</span></span><br><span class="line">        best_acc = <span class="number">0.</span></span><br><span class="line">        <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># training</span></span><br><span class="line">            <span class="keyword">for</span> model_idx, (estimator, optimizer, scheduler) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(estimators, optimizers, schedulers)):</span><br><span class="line">                loss_m_train, acc_m_train, mat_train = \</span><br><span class="line">                    utils.ModelTrainerEnsemble.train_one_epoch(</span><br><span class="line">                        train_loader, estimator, self._criterion, optimizer, scheduler, epoch,</span><br><span class="line">                        self.device, self.args, self.logger, self.classes)</span><br><span class="line">                <span class="comment"># 学习率更新</span></span><br><span class="line">                scheduler.step()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 记录</span></span><br><span class="line">                self.writer.add_scalars(<span class="string">&#x27;Loss_group&#x27;</span>, &#123;<span class="string">&#x27;train_loss_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(model_idx):</span><br><span class="line">                                                           loss_m_train.avg&#125;, epoch)</span><br><span class="line">                self.writer.add_scalars(<span class="string">&#x27;Accuracy_group&#x27;</span>, &#123;<span class="string">&#x27;train_acc_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(model_idx):</span><br><span class="line">                                                               acc_m_train.avg&#125;, epoch)</span><br><span class="line">                self.writer.add_scalar(<span class="string">&#x27;learning rate&#x27;</span>, scheduler.get_last_lr()[<span class="number">0</span>], epoch)</span><br><span class="line">                <span class="comment"># 训练混淆矩阵图</span></span><br><span class="line">                conf_mat_figure_train = utils.show_conf_mat(mat_train, classes, <span class="string">&quot;train&quot;</span>, save_dir, epoch=epoch,</span><br><span class="line">                                                            verbose=epoch == epochs - <span class="number">1</span>, save=<span class="literal">False</span>)</span><br><span class="line">                self.writer.add_figure(<span class="string">&#x27;confusion_matrix_train&#x27;</span>, conf_mat_figure_train, global_step=epoch)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># validate</span></span><br><span class="line">            loss_valid_meter, acc_valid, top1_group, mat_valid = \</span><br><span class="line">                utils.ModelTrainerEnsemble.evaluate(test_loader, estimators, self._criterion, self.device, self.classes)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 日志</span></span><br><span class="line">            self.writer.add_scalars(<span class="string">&#x27;Loss_group&#x27;</span>, &#123;<span class="string">&#x27;valid_loss&#x27;</span>:</span><br><span class="line">                                                       loss_valid_meter.avg&#125;, epoch)</span><br><span class="line">            self.writer.add_scalars(<span class="string">&#x27;Accuracy_group&#x27;</span>, &#123;<span class="string">&#x27;valid_acc&#x27;</span>:</span><br><span class="line">                                                           acc_valid * <span class="number">100</span>&#125;, epoch)</span><br><span class="line">            <span class="comment"># 验证混淆矩阵图</span></span><br><span class="line">            conf_mat_figure_valid = utils.show_conf_mat(mat_valid, classes, <span class="string">&quot;valid&quot;</span>, save_dir, epoch=epoch,</span><br><span class="line">                                                        verbose=epoch == epochs - <span class="number">1</span>, save=<span class="literal">False</span>)</span><br><span class="line">            self.writer.add_figure(<span class="string">&#x27;confusion_matrix_valid&#x27;</span>, conf_mat_figure_valid, global_step=epoch)</span><br><span class="line"></span><br><span class="line">            self.logger.info(</span><br><span class="line">                <span class="string">&#x27;Epoch: [&#123;:0&gt;3&#125;/&#123;:0&gt;3&#125;]  &#x27;</span></span><br><span class="line">                <span class="string">&#x27;Train Loss avg: &#123;loss_train:&gt;6.4f&#125;  &#x27;</span></span><br><span class="line">                <span class="string">&#x27;Valid Loss avg: &#123;loss_valid:&gt;6.4f&#125;  &#x27;</span></span><br><span class="line">                <span class="string">&#x27;Train Acc@1 avg:  &#123;top1_train:&gt;7.2f&#125;%   &#x27;</span></span><br><span class="line">                <span class="string">&#x27;Valid Acc@1 avg: &#123;top1_valid:&gt;7.2%&#125;    &#x27;</span></span><br><span class="line">                <span class="string">&#x27;LR: &#123;lr&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                    epoch, self.args.epochs, loss_train=loss_m_train.avg, loss_valid=loss_valid_meter.avg,</span><br><span class="line">                    top1_train=acc_m_train.avg, top1_valid=acc_valid, lr=schedulers[<span class="number">0</span>].get_last_lr()[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> model_idx, top1_meter <span class="keyword">in</span> <span class="built_in">enumerate</span>(top1_group):</span><br><span class="line">                self.writer.add_scalars(<span class="string">&#x27;Accuracy_group&#x27;</span>,</span><br><span class="line">                                        &#123;<span class="string">&#x27;valid_acc_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(model_idx): top1_meter.compute() * <span class="number">100</span>&#125;, epoch)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> acc_valid &gt; best_acc:</span><br><span class="line">                best_acc = acc_valid</span><br><span class="line">                self.estimators_ = nn.ModuleList()</span><br><span class="line">                self.estimators_.extend(estimators)</span><br><span class="line">                <span class="keyword">if</span> save_model:</span><br><span class="line">                    self.save(self, self.save_dir, self.logger)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>本实验采用3个学习器进行投票式集成，因此绘制了7条曲线，其中各学习器在训练和验证各有2条曲线，集成模型的结果通过 valid_acc输出（蓝色），通过下图可发现，集成模型与三个基学习器相比，分类准确率都能提高3-4百分点左右，是非常高的提升了。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408301554354.png" alt="image-20240830103703565"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408301554355.png" alt="image-20240830154555390"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408301554357.png" alt="image-20240830154619630"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tingsongyu.github.io/PyTorch-Tutorial-2nd/chapter-7/7.7-torchensemble.html">7.7 TorchEnsemble 模型集成库 · PyTorch实用教程（第二版） (tingsongyu.github.io)</a></p>]]></content>
    
    
    <summary type="html">分类任务实现模型（投票式）集成代码模版</summary>
    
    
    
    <category term="深度学习" scheme="https://huaiyuechusan.gitee.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://huaiyuechusan.gitee.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PyTorch" scheme="https://huaiyuechusan.gitee.io/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>深度学习分类模型训练代码模板</title>
    <link href="https://huaiyuechusan.gitee.io/archives/3f9075ad.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/3f9075ad.html</id>
    <published>2024-08-29T03:54:00.000Z</published>
    <updated>2024-10-17T12:00:00.481Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="深度学习分类模型训练代码模板"><a href="#深度学习分类模型训练代码模板" class="headerlink" title="深度学习分类模型训练代码模板"></a>深度学习分类模型训练代码模板</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="参数模块"><a href="#参数模块" class="headerlink" title="参数模块"></a>参数模块</h3><p>采用argparse模块进行配置，便于服务器上训练，以及超参数记录。在服务器上进行训练时，通常采用命令行启动，或时采用sh脚本批量训练，这时候就需要从命令行传入一些参数，用来调整模型超参。</p><p>采用了函数<code>get_args_parser()</code>实现，有了args，还可以将它记录到日志中，便于复现以及查看模型的超参数设置，便于跟踪。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_args_parser</span>(<span class="params">add_help=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;PyTorch Classification Training&quot;</span>, add_help=add_help)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&quot;--data-path&quot;</span>, default=<span class="string">r&quot;E:\PyTorch-Tutorial-2nd\data\datasets\cifar10-office&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;dataset path&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--model&quot;</span>, default=<span class="string">&quot;resnet8&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;model name&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--device&quot;</span>, default=<span class="string">&quot;cuda&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;device (Use cuda or cpu Default: cuda)&quot;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;-b&quot;</span>, <span class="string">&quot;--batch-size&quot;</span>, default=<span class="number">128</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;images per gpu, the total batch size is $NGPU x batch_size&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--epochs&quot;</span>, default=<span class="number">200</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;N&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;number of total epochs to run&quot;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;-j&quot;</span>, <span class="string">&quot;--workers&quot;</span>, default=<span class="number">4</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;N&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;number of data loading workers (default: 16)&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--opt&quot;</span>, default=<span class="string">&quot;sgd&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;optimizer&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--random-seed&quot;</span>, default=<span class="number">42</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;random seed&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--lr&quot;</span>, default=<span class="number">0.01</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, <span class="built_in">help</span>=<span class="string">&quot;initial learning rate&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--momentum&quot;</span>, default=<span class="number">0.9</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, metavar=<span class="string">&quot;M&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;momentum&quot;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--wd&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--weight-decay&quot;</span>,</span><br><span class="line">        default=<span class="number">1e-4</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">        metavar=<span class="string">&quot;W&quot;</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&quot;weight decay (default: 1e-4)&quot;</span>,</span><br><span class="line">        dest=<span class="string">&quot;weight_decay&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--lr-step-size&quot;</span>, default=<span class="number">80</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;decrease lr every step-size epochs&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--lr-gamma&quot;</span>, default=<span class="number">0.1</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, <span class="built_in">help</span>=<span class="string">&quot;decrease lr by a factor of lr-gamma&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--print-freq&quot;</span>, default=<span class="number">80</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;print frequency&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--output-dir&quot;</span>, default=<span class="string">&quot;./Result&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;path to save outputs&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--resume&quot;</span>, default=<span class="string">&quot;&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;path of checkpoint&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--start-epoch&quot;</span>, default=<span class="number">0</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;N&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;start epoch&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parser</span><br></pre></td></tr></table></figure><h3 id="日志模块"><a href="#日志模块" class="headerlink" title="日志模块"></a>日志模块</h3><p>logging模块记录文本信息.log文件。模型训练的日志很重要，它用于指导下一次实验的超参数如何调整。</p><p>采用借助logging模块构建一个logger，并且以时间戳（年月日-时分秒）的形式创建文件夹，便于日志管理。</p><p>在logger中使用logger.info函数代替print函数，可以实现在终端展示信息，还可以将其保存到日志文件夹下的log.log文件，便于溯源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Logger</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, path_log</span>):</span><br><span class="line">        log_name = os.path.basename(path_log)</span><br><span class="line">        self.log_name = log_name <span class="keyword">if</span> log_name <span class="keyword">else</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">        self.out_path = path_log</span><br><span class="line"></span><br><span class="line">        log_dir = os.path.dirname(self.out_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">            os.makedirs(log_dir)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_logger</span>(<span class="params">self</span>):</span><br><span class="line">        logger = logging.getLogger(self.log_name)</span><br><span class="line">        logger.setLevel(level=logging.INFO)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 配置文件Handler</span></span><br><span class="line">        file_handler = logging.FileHandler(self.out_path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        file_handler.setLevel(logging.INFO)</span><br><span class="line">        formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">        file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 配置屏幕Handler</span></span><br><span class="line">        console_handler = logging.StreamHandler()</span><br><span class="line">        console_handler.setLevel(logging.INFO)</span><br><span class="line">        <span class="comment"># console_handler.setFormatter(logging.Formatter(&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加handler</span></span><br><span class="line">        logger.addHandler(file_handler)</span><br><span class="line">        logger.addHandler(console_handler)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> logger</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408301730429.png" alt="image-20240830161453296"></p><h3 id="训练模块"><a href="#训练模块" class="headerlink" title="训练模块"></a>训练模块</h3><p>训练模块封装为通用类——ModelTrainer。训练过程比较固定，因此会将其封装成 <code>train_one_epoch</code>和<code>evaluate</code>的两个函数，从这两个函数中需要返回我们关心的指标，如loss，accuracy，混淆矩阵等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ModelTrainer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">train_one_epoch</span>(<span class="params">data_loader, model, loss_f, optimizer, scheduler, epoch_idx, device, args, logger, classes</span>):</span><br><span class="line">        model.train()</span><br><span class="line">        end = time.time()</span><br><span class="line"></span><br><span class="line">        class_num = <span class="built_in">len</span>(classes)</span><br><span class="line">        conf_mat = np.zeros((class_num, class_num))</span><br><span class="line"></span><br><span class="line">        loss_m = AverageMeter()</span><br><span class="line">        top1_m = AverageMeter()</span><br><span class="line">        top5_m = AverageMeter()</span><br><span class="line">        batch_time_m = AverageMeter()</span><br><span class="line"></span><br><span class="line">        last_idx = <span class="built_in">len</span>(data_loader) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> batch_idx, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader):</span><br><span class="line"></span><br><span class="line">            inputs, labels = data</span><br><span class="line">            inputs, labels = inputs.to(device), labels.to(device)</span><br><span class="line">            <span class="comment"># forward &amp; backward</span></span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">            loss = loss_f(outputs.cpu(), labels.cpu())</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算accuracy</span></span><br><span class="line">            acc1, acc5 = accuracy(outputs, labels, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">            _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(labels)):</span><br><span class="line">                cate_i = labels[j].cpu().numpy()</span><br><span class="line">                pre_i = predicted[j].cpu().numpy()</span><br><span class="line">                conf_mat[cate_i, pre_i] += <span class="number">1.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 记录指标</span></span><br><span class="line">            loss_m.update(loss.item(), inputs.size(<span class="number">0</span>))  <span class="comment"># 因update里： self.sum += val * n， 因此需要传入batch数量</span></span><br><span class="line">            top1_m.update(acc1.item(), outputs.size(<span class="number">0</span>))</span><br><span class="line">            top5_m.update(acc5.item(), outputs.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 打印训练信息</span></span><br><span class="line">            batch_time_m.update(time.time() - end)</span><br><span class="line">            end = time.time()</span><br><span class="line">            <span class="keyword">if</span> batch_idx % args.print_freq == args.print_freq - <span class="number">1</span>:</span><br><span class="line">                logger.info(</span><br><span class="line">                    <span class="string">&#x27;&#123;0&#125;: [&#123;1:&gt;4d&#125;/&#123;2&#125;]  &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;Time: &#123;batch_time.val:.3f&#125; (&#123;batch_time.avg:.3f&#125;)  &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;Loss: &#123;loss.val:&gt;7.4f&#125; (&#123;loss.avg:&gt;6.4f&#125;)  &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;Acc@1: &#123;top1.val:&gt;7.4f&#125; (&#123;top1.avg:&gt;7.4f&#125;)  &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;Acc@5: &#123;top5.val:&gt;7.4f&#125; (&#123;top5.avg:&gt;7.4f&#125;)&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                        <span class="string">&quot;train&quot;</span>, batch_idx, last_idx, batch_time=batch_time_m,</span><br><span class="line">                        loss=loss_m, top1=top1_m, top5=top5_m))  <span class="comment"># val是当次传进去的值，avg是整体平均值。</span></span><br><span class="line">        <span class="keyword">return</span> loss_m, top1_m, conf_mat</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">data_loader, model, loss_f, device, classes</span>):</span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">        class_num = <span class="built_in">len</span>(classes)</span><br><span class="line">        conf_mat = np.zeros((class_num, class_num))</span><br><span class="line"></span><br><span class="line">        loss_m = AverageMeter()</span><br><span class="line">        top1_m = AverageMeter()</span><br><span class="line">        top5_m = AverageMeter()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader):</span><br><span class="line">            inputs, labels = data</span><br><span class="line">            inputs, labels = inputs.to(device), labels.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = loss_f(outputs.cpu(), labels.cpu())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算accuracy</span></span><br><span class="line">            acc1, acc5 = accuracy(outputs, labels, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">            _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(labels)):</span><br><span class="line">                cate_i = labels[j].cpu().numpy()</span><br><span class="line">                pre_i = predicted[j].cpu().numpy()</span><br><span class="line">                conf_mat[cate_i, pre_i] += <span class="number">1.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 记录指标</span></span><br><span class="line">            loss_m.update(loss.item(), inputs.size(<span class="number">0</span>))  <span class="comment"># 因update里： self.sum += val * n， 因此需要传入batch数量</span></span><br><span class="line">            top1_m.update(acc1.item(), outputs.size(<span class="number">0</span>))</span><br><span class="line">            top5_m.update(acc5.item(), outputs.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loss_m, top1_m, conf_mat</span><br></pre></td></tr></table></figure><h3 id="指标统计模块"><a href="#指标统计模块" class="headerlink" title="指标统计模块"></a>指标统计模块</h3><p>根据训练返回的指标进行loss、accuracy、混淆矩阵等指标的计算。通过tensorboard进行可视化展示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AverageMeter</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Computes and stores the average and current value</span></span><br><span class="line"><span class="string">    Hacked from https://github.com/rwightman/pytorch-image-models/blob/master/timm/utils/metrics.py</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.reset()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        self.val = <span class="number">0</span></span><br><span class="line">        self.avg = <span class="number">0</span></span><br><span class="line">        self.<span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, val, n=<span class="number">1</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">sum</span> += val * n</span><br><span class="line">        self.count += n</span><br><span class="line">        self.avg = self.<span class="built_in">sum</span> / self.count</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> my_utils <span class="keyword">as</span> utils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_args_parser</span>(<span class="params">add_help=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;PyTorch Classification Training&quot;</span>, add_help=add_help)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&quot;--data-path&quot;</span>, default=<span class="string">r&quot;E:\PyTorch-Tutorial-2nd\data\datasets\cifar10-office&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;dataset path&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--model&quot;</span>, default=<span class="string">&quot;resnet8&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;model name&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--device&quot;</span>, default=<span class="string">&quot;cuda&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;device (Use cuda or cpu Default: cuda)&quot;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;-b&quot;</span>, <span class="string">&quot;--batch-size&quot;</span>, default=<span class="number">128</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;images per gpu, the total batch size is $NGPU x batch_size&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--epochs&quot;</span>, default=<span class="number">200</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;N&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;number of total epochs to run&quot;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;-j&quot;</span>, <span class="string">&quot;--workers&quot;</span>, default=<span class="number">4</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;N&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;number of data loading workers (default: 16)&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--opt&quot;</span>, default=<span class="string">&quot;sgd&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;optimizer&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--random-seed&quot;</span>, default=<span class="number">42</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;random seed&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--lr&quot;</span>, default=<span class="number">0.01</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, <span class="built_in">help</span>=<span class="string">&quot;initial learning rate&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--momentum&quot;</span>, default=<span class="number">0.9</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, metavar=<span class="string">&quot;M&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;momentum&quot;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--wd&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--weight-decay&quot;</span>,</span><br><span class="line">        default=<span class="number">1e-4</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">        metavar=<span class="string">&quot;W&quot;</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&quot;weight decay (default: 1e-4)&quot;</span>,</span><br><span class="line">        dest=<span class="string">&quot;weight_decay&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--lr-step-size&quot;</span>, default=<span class="number">80</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;decrease lr every step-size epochs&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--lr-gamma&quot;</span>, default=<span class="number">0.1</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, <span class="built_in">help</span>=<span class="string">&quot;decrease lr by a factor of lr-gamma&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--print-freq&quot;</span>, default=<span class="number">80</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;print frequency&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--output-dir&quot;</span>, default=<span class="string">&quot;./Result&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;path to save outputs&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--resume&quot;</span>, default=<span class="string">&quot;&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;path of checkpoint&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--start-epoch&quot;</span>, default=<span class="number">0</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&quot;N&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;start epoch&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 调用 get_args_parser() 函数获取 ArgumentParser 实例</span></span><br><span class="line">    <span class="comment"># 然后调用 parse_args() 方法解析命令行参数</span></span><br><span class="line">    <span class="comment"># 解析后的参数将作为命名空间对象返回，并将其存储在变量 args 中</span></span><br><span class="line">    <span class="comment"># args 现在包含了所有通过命令行传递给程序的参数，可以通过属性访问，例如 args.parameter_name</span></span><br><span class="line">    args = get_args_parser().parse_args()</span><br><span class="line">    <span class="comment"># 设置随机种子，确保模型可复现性</span></span><br><span class="line">    utils.setup_seed(args.random_seed)</span><br><span class="line">    args.device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">    device = args.device</span><br><span class="line">    data_dir = args.data_path</span><br><span class="line">    result_dir = args.output_dir</span><br><span class="line">    <span class="comment"># ------------------------------------  log ------------------------------------</span></span><br><span class="line">    logger, log_dir = utils.make_logger(result_dir)</span><br><span class="line">    writer = SummaryWriter(log_dir=log_dir)</span><br><span class="line">    <span class="comment"># ------------------------------------ step1: dataset ------------------------------------</span></span><br><span class="line"></span><br><span class="line">    normMean = [<span class="number">0.4948052</span>, <span class="number">0.48568845</span>, <span class="number">0.44682974</span>]</span><br><span class="line">    normStd = [<span class="number">0.24580306</span>, <span class="number">0.24236229</span>, <span class="number">0.2603115</span>]</span><br><span class="line">    normTransform = transforms.Normalize(normMean, normStd)</span><br><span class="line">    train_transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">32</span>),</span><br><span class="line">        transforms.RandomCrop(<span class="number">32</span>, padding=<span class="number">4</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        normTransform</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    valid_transform = transforms.Compose([</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        normTransform</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># root变量下需要存放cifar-10-python.tar.gz 文件</span></span><br><span class="line">    <span class="comment"># cifar-10-python.tar.gz可从 &quot;https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz&quot; 下载</span></span><br><span class="line">    <span class="comment"># 其他数据集可以自定义数据集处理方式</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=data_dir, train=<span class="literal">True</span>, transform=train_transform, download=<span class="literal">True</span>)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=data_dir, train=<span class="literal">False</span>, transform=valid_transform, download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建DataLoder</span></span><br><span class="line">    train_loader = DataLoader(dataset=train_set, batch_size=args.batch_size, shuffle=<span class="literal">True</span>, num_workers=args.workers)</span><br><span class="line">    valid_loader = DataLoader(dataset=test_set, batch_size=args.batch_size, num_workers=args.workers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ tep2: model ------------------------------------</span></span><br><span class="line">    <span class="comment"># 此处替换自己模型即可</span></span><br><span class="line">    model = utils.resnet8()</span><br><span class="line">    model.to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ step3: optimizer, lr scheduler ------------------------------------</span></span><br><span class="line">    criterion = nn.CrossEntropyLoss()  <span class="comment"># 选择损失函数</span></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum,</span><br><span class="line">                          weight_decay=args.weight_decay)  <span class="comment"># 选择优化器</span></span><br><span class="line">    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=args.lr_step_size,</span><br><span class="line">                                                gamma=args.lr_gamma)  <span class="comment"># 设置学习率下降策略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------ step4: iteration ------------------------------------</span></span><br><span class="line">    best_acc, best_epoch = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    logger.info(<span class="string">f&#x27;args = <span class="subst">&#123;args&#125;</span>&#x27;</span>)</span><br><span class="line">    logger.info(<span class="string">f&#x27;train_loader = <span class="subst">&#123;train_loader&#125;</span>, valid_loader =  <span class="subst">&#123;valid_loader&#125;</span>&#x27;</span>)</span><br><span class="line">    logger.info(<span class="string">&quot;Start training&quot;</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    epoch_time_m = utils.AverageMeter()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(args.start_epoch, args.epochs):</span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        loss_m_train, acc_m_train, mat_train = \</span><br><span class="line">            utils.ModelTrainer.train_one_epoch(train_loader, model, criterion, optimizer, scheduler,</span><br><span class="line">                                               epoch, device, args, logger, classes)</span><br><span class="line">        <span class="comment"># 验证</span></span><br><span class="line">        loss_m_valid, acc_m_valid, mat_valid = \</span><br><span class="line">            utils.ModelTrainer.evaluate(valid_loader, model, criterion, device, classes)</span><br><span class="line"></span><br><span class="line">        epoch_time_m.update(time.time() - end)</span><br><span class="line">        end = time.time()</span><br><span class="line"></span><br><span class="line">        logger.info(</span><br><span class="line">            <span class="string">&#x27;Epoch: [&#123;:0&gt;3&#125;/&#123;:0&gt;3&#125;]  &#x27;</span></span><br><span class="line">            <span class="string">&#x27;Time: &#123;epoch_time.val:.3f&#125; (&#123;epoch_time.avg:.3f&#125;)  &#x27;</span></span><br><span class="line">            <span class="string">&#x27;Train Loss avg: &#123;loss_train.avg:&gt;6.4f&#125;  &#x27;</span></span><br><span class="line">            <span class="string">&#x27;Valid Loss avg: &#123;loss_valid.avg:&gt;6.4f&#125;  &#x27;</span></span><br><span class="line">            <span class="string">&#x27;Train Acc@1 avg:  &#123;top1_train.avg:&gt;7.4f&#125;   &#x27;</span></span><br><span class="line">            <span class="string">&#x27;Valid Acc@1 avg: &#123;top1_valid.avg:&gt;7.4f&#125;    &#x27;</span></span><br><span class="line">            <span class="string">&#x27;LR: &#123;lr&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                epoch, args.epochs, epoch_time=epoch_time_m, loss_train=loss_m_train, loss_valid=loss_m_valid,</span><br><span class="line">                top1_train=acc_m_train, top1_valid=acc_m_valid, lr=scheduler.get_last_lr()[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 学习率更新</span></span><br><span class="line">        scheduler.step()</span><br><span class="line">        <span class="comment"># 记录</span></span><br><span class="line">        writer.add_scalars(<span class="string">&#x27;Loss_group&#x27;</span>, &#123;<span class="string">&#x27;train_loss&#x27;</span>: loss_m_train.avg,</span><br><span class="line">                                          <span class="string">&#x27;valid_loss&#x27;</span>: loss_m_valid.avg&#125;, epoch)</span><br><span class="line">        writer.add_scalars(<span class="string">&#x27;Accuracy_group&#x27;</span>, &#123;<span class="string">&#x27;train_acc&#x27;</span>: acc_m_train.avg,</span><br><span class="line">                                              <span class="string">&#x27;valid_acc&#x27;</span>: acc_m_valid.avg&#125;, epoch)</span><br><span class="line">        conf_mat_figure_train = utils.show_conf_mat(mat_train, classes, <span class="string">&quot;train&quot;</span>, log_dir, epoch=epoch,</span><br><span class="line">                                                    verbose=epoch == args.epochs - <span class="number">1</span>, save=<span class="literal">False</span>)</span><br><span class="line">        conf_mat_figure_valid = utils.show_conf_mat(mat_valid, classes, <span class="string">&quot;valid&quot;</span>, log_dir, epoch=epoch,</span><br><span class="line">                                                    verbose=epoch == args.epochs - <span class="number">1</span>, save=<span class="literal">False</span>)</span><br><span class="line">        writer.add_figure(<span class="string">&#x27;confusion_matrix_train&#x27;</span>, conf_mat_figure_train, global_step=epoch)</span><br><span class="line">        writer.add_figure(<span class="string">&#x27;confusion_matrix_valid&#x27;</span>, conf_mat_figure_valid, global_step=epoch)</span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;learning rate&#x27;</span>, scheduler.get_last_lr()[<span class="number">0</span>], epoch)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ------------------------------------ 模型保存 ------------------------------------</span></span><br><span class="line">        <span class="keyword">if</span> best_acc &lt; acc_m_valid.avg <span class="keyword">or</span> epoch == args.epochs - <span class="number">1</span>:</span><br><span class="line">            best_epoch = epoch <span class="keyword">if</span> best_acc &lt; acc_m_valid.avg <span class="keyword">else</span> best_epoch</span><br><span class="line">            best_acc = acc_m_valid.avg <span class="keyword">if</span> best_acc &lt; acc_m_valid.avg <span class="keyword">else</span> best_acc</span><br><span class="line">            checkpoint = &#123;</span><br><span class="line">                <span class="string">&quot;model_state_dict&quot;</span>: model.state_dict(),</span><br><span class="line">                <span class="string">&quot;optimizer_state_dict&quot;</span>: optimizer.state_dict(),</span><br><span class="line">                <span class="string">&quot;lr_scheduler_state_dict&quot;</span>: scheduler.state_dict(),</span><br><span class="line">                <span class="string">&quot;epoch&quot;</span>: epoch,</span><br><span class="line">                <span class="string">&quot;args&quot;</span>: args,</span><br><span class="line">                <span class="string">&quot;best_acc&quot;</span>: best_acc&#125;</span><br><span class="line">            pkl_name = <span class="string">&quot;checkpoint_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(epoch) <span class="keyword">if</span> epoch == args.epochs - <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;checkpoint_best.pth&quot;</span></span><br><span class="line">            path_checkpoint = os.path.join(log_dir, pkl_name)</span><br><span class="line">            torch.save(checkpoint, path_checkpoint)</span><br><span class="line"></span><br><span class="line">    total_time = time.time() - start_time</span><br><span class="line">    total_time_str = <span class="built_in">str</span>(datetime.timedelta(seconds=<span class="built_in">int</span>(total_time)))</span><br><span class="line">    logger.info(<span class="string">&quot;Training time &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_time_str))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换自己数据集的分类</span></span><br><span class="line">classes = [<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>my_utils.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torchmetrics</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.nn.init <span class="keyword">as</span> init</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LeNet5</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LeNet5, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        self.pool = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">400</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.pool(F.relu(self.conv1(x)))</span><br><span class="line">        x = self.pool(F.relu(self.conv2(x)))</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">400</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_weights_init</span>(<span class="params">m</span>):</span><br><span class="line">    classname = m.__class__.__name__</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear) <span class="keyword">or</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        init.kaiming_normal_(m.weight)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LambdaLayer</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, lambd</span>):</span><br><span class="line">        <span class="built_in">super</span>(LambdaLayer, self).__init__()</span><br><span class="line">        self.lambd = lambd</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.lambd(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicBlock</span>(nn.Module):</span><br><span class="line">    expansion = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_planes, planes, stride=<span class="number">1</span>, option=<span class="string">&#x27;A&#x27;</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(BasicBlock, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=<span class="number">3</span>, stride=stride, padding=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(planes)</span><br><span class="line">        self.conv2 = nn.Conv2d(planes, planes, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(planes)</span><br><span class="line"></span><br><span class="line">        self.shortcut = nn.Sequential()</span><br><span class="line">        <span class="keyword">if</span> stride != <span class="number">1</span> <span class="keyword">or</span> in_planes != planes:</span><br><span class="line">            <span class="keyword">if</span> option == <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                For CIFAR10 ResNet paper uses option A.</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line">                self.shortcut = LambdaLayer(<span class="keyword">lambda</span> x:</span><br><span class="line">                                            F.pad(x[:, :, ::<span class="number">2</span>, ::<span class="number">2</span>], (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, planes // <span class="number">4</span>, planes // <span class="number">4</span>), <span class="string">&quot;constant&quot;</span>,</span><br><span class="line">                                                  <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">                self.shortcut = nn.Sequential(</span><br><span class="line">                    nn.Conv2d(in_planes, self.expansion * planes, kernel_size=<span class="number">1</span>, stride=stride, bias=<span class="literal">False</span>),</span><br><span class="line">                    nn.BatchNorm2d(self.expansion * planes)</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = F.relu(self.bn1(self.conv1(x)))</span><br><span class="line">        out = self.bn2(self.conv2(out))</span><br><span class="line">        out += self.shortcut(x)</span><br><span class="line">        out = F.relu(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResNet</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    https://github.com/akamaster/pytorch_resnet_cifar10/blob/master/resnet.py</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, block, num_blocks, num_classes=<span class="number">10</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(ResNet, self).__init__()</span><br><span class="line">        self.in_planes = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">16</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(<span class="number">16</span>)</span><br><span class="line">        self.layer1 = self._make_layer(block, <span class="number">16</span>, num_blocks[<span class="number">0</span>], stride=<span class="number">1</span>)  <span class="comment"># 原版16</span></span><br><span class="line">        self.layer2 = self._make_layer(block, <span class="number">32</span>, num_blocks[<span class="number">1</span>], stride=<span class="number">2</span>)  <span class="comment"># 原版32</span></span><br><span class="line">        self.layer3 = self._make_layer(block, <span class="number">64</span>, num_blocks[<span class="number">2</span>], stride=<span class="number">2</span>)  <span class="comment"># 原版64</span></span><br><span class="line">        self.linear = nn.Linear(<span class="number">64</span>, num_classes)</span><br><span class="line"></span><br><span class="line">        self.apply(_weights_init)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_make_layer</span>(<span class="params">self, block, planes, num_blocks, stride</span>):</span><br><span class="line">        strides = [stride] + [<span class="number">1</span>] * (num_blocks - <span class="number">1</span>)</span><br><span class="line">        layers = []</span><br><span class="line">        <span class="keyword">for</span> stride <span class="keyword">in</span> strides:</span><br><span class="line">            layers.append(block(self.in_planes, planes, stride))</span><br><span class="line">            self.in_planes = planes * block.expansion</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nn.Sequential(*layers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = F.relu(self.bn1(self.conv1(x)))</span><br><span class="line">        out = self.layer1(out)</span><br><span class="line">        out = self.layer2(out)</span><br><span class="line">        out = self.layer3(out)</span><br><span class="line">        out = F.avg_pool2d(out, out.size()[<span class="number">3</span>])</span><br><span class="line">        out = out.view(out.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        out = self.linear(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet8</span>(<span class="params">num_classes=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> ResNet(BasicBlock, [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], num_classes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resnet20</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    https://github.com/akamaster/pytorch_resnet_cifar10/blob/master/resnet.py</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> ResNet(BasicBlock, [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_conf_mat</span>(<span class="params">confusion_mat, classes, set_name, out_dir, epoch=<span class="number">999</span>, verbose=<span class="literal">False</span>, perc=<span class="literal">False</span>, save=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    混淆矩阵绘制并保存图片</span></span><br><span class="line"><span class="string">    :param confusion_mat:  nd.array</span></span><br><span class="line"><span class="string">    :param classes: list or tuple, 类别名称</span></span><br><span class="line"><span class="string">    :param set_name: str, 数据集名称 train or valid or test?</span></span><br><span class="line"><span class="string">    :param out_dir:  str, 图片要保存的文件夹</span></span><br><span class="line"><span class="string">    :param epoch:  int, 第几个epoch</span></span><br><span class="line"><span class="string">    :param verbose: bool, 是否打印精度信息</span></span><br><span class="line"><span class="string">    :param perc: bool, 是否采用百分比，图像分割时用，因分类数目过大</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cls_num = <span class="built_in">len</span>(classes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 归一化</span></span><br><span class="line">    confusion_mat_tmp = confusion_mat.copy()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(classes)):</span><br><span class="line">        confusion_mat_tmp[i, :] = confusion_mat[i, :] / confusion_mat[i, :].<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置图像大小</span></span><br><span class="line">    <span class="keyword">if</span> cls_num &lt; <span class="number">10</span>:</span><br><span class="line">        figsize = <span class="number">6</span></span><br><span class="line">    <span class="keyword">elif</span> cls_num &gt;= <span class="number">100</span>:</span><br><span class="line">        figsize = <span class="number">30</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        figsize = np.linspace(<span class="number">6</span>, <span class="number">30</span>, <span class="number">91</span>)[cls_num - <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">    fig, ax = plt.subplots(figsize=(<span class="built_in">int</span>(figsize), <span class="built_in">int</span>(figsize * <span class="number">1.3</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取颜色</span></span><br><span class="line">    cmap = plt.cm.get_cmap(<span class="string">&#x27;Greys&#x27;</span>)  <span class="comment"># 更多颜色: http://matplotlib.org/examples/color/colormaps_reference.html</span></span><br><span class="line">    plt_object = ax.imshow(confusion_mat_tmp, cmap=cmap)</span><br><span class="line">    cbar = plt.colorbar(plt_object, ax=ax, fraction=<span class="number">0.03</span>)</span><br><span class="line">    cbar.ax.tick_params(labelsize=<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置文字</span></span><br><span class="line">    xlocations = np.array(<span class="built_in">range</span>(<span class="built_in">len</span>(classes)))</span><br><span class="line">    ax.set_xticks(xlocations)</span><br><span class="line">    ax.set_xticklabels(<span class="built_in">list</span>(classes), rotation=<span class="number">60</span>)  <span class="comment"># , fontsize=&#x27;small&#x27;</span></span><br><span class="line">    ax.set_yticks(xlocations)</span><br><span class="line">    ax.set_yticklabels(<span class="built_in">list</span>(classes))</span><br><span class="line">    ax.set_xlabel(<span class="string">&#x27;Predict label&#x27;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&#x27;True label&#x27;</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Confusion_Matrix_&#123;&#125;_&#123;&#125;&quot;</span>.<span class="built_in">format</span>(set_name, epoch))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印数字</span></span><br><span class="line">    <span class="keyword">if</span> perc:</span><br><span class="line">        cls_per_nums = confusion_mat.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br><span class="line">        conf_mat_per = confusion_mat / cls_per_nums</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(confusion_mat_tmp.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(confusion_mat_tmp.shape[<span class="number">1</span>]):</span><br><span class="line">                ax.text(x=j, y=i, s=<span class="string">&quot;&#123;:.0%&#125;&quot;</span>.<span class="built_in">format</span>(conf_mat_per[i, j]), va=<span class="string">&#x27;center&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">                        fontsize=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(confusion_mat_tmp.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(confusion_mat_tmp.shape[<span class="number">1</span>]):</span><br><span class="line">                ax.text(x=j, y=i, s=<span class="built_in">int</span>(confusion_mat[i, j]), va=<span class="string">&#x27;center&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 保存</span></span><br><span class="line">    <span class="keyword">if</span> save:</span><br><span class="line">        fig.savefig(os.path.join(out_dir, <span class="string">&quot;Confusion_Matrix_&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(set_name)))</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> verbose:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cls_num):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;class:&#123;:&lt;10&#125;, total num:&#123;:&lt;6&#125;, correct num:&#123;:&lt;5&#125;  Recall: &#123;:.2%&#125; Precision: &#123;:.2%&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                classes[i], np.<span class="built_in">sum</span>(confusion_mat[i, :]), confusion_mat[i, i],</span><br><span class="line">                confusion_mat[i, i] / (<span class="number">1e-9</span> + np.<span class="built_in">sum</span>(confusion_mat[i, :])),</span><br><span class="line">                confusion_mat[i, i] / (<span class="number">1e-9</span> + np.<span class="built_in">sum</span>(confusion_mat[:, i]))))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModelTrainer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">train_one_epoch</span>(<span class="params">data_loader, model, loss_f, optimizer, scheduler, epoch_idx, device, args, logger, classes</span>):</span><br><span class="line">        model.train()</span><br><span class="line">        end = time.time()</span><br><span class="line"></span><br><span class="line">        class_num = <span class="built_in">len</span>(classes)</span><br><span class="line">        conf_mat = np.zeros((class_num, class_num))</span><br><span class="line"></span><br><span class="line">        loss_m = AverageMeter()</span><br><span class="line">        top1_m = AverageMeter()</span><br><span class="line">        top5_m = AverageMeter()</span><br><span class="line">        batch_time_m = AverageMeter()</span><br><span class="line"></span><br><span class="line">        last_idx = <span class="built_in">len</span>(data_loader) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> batch_idx, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader):</span><br><span class="line"></span><br><span class="line">            inputs, labels = data</span><br><span class="line">            inputs, labels = inputs.to(device), labels.to(device)</span><br><span class="line">            <span class="comment"># forward &amp; backward</span></span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">            loss = loss_f(outputs.cpu(), labels.cpu())</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算accuracy</span></span><br><span class="line">            acc1, acc5 = accuracy(outputs, labels, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">            _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(labels)):</span><br><span class="line">                cate_i = labels[j].cpu().numpy()</span><br><span class="line">                pre_i = predicted[j].cpu().numpy()</span><br><span class="line">                conf_mat[cate_i, pre_i] += <span class="number">1.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 记录指标</span></span><br><span class="line">            loss_m.update(loss.item(), inputs.size(<span class="number">0</span>))  <span class="comment"># 因update里： self.sum += val * n， 因此需要传入batch数量</span></span><br><span class="line">            top1_m.update(acc1.item(), outputs.size(<span class="number">0</span>))</span><br><span class="line">            top5_m.update(acc5.item(), outputs.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 打印训练信息</span></span><br><span class="line">            batch_time_m.update(time.time() - end)</span><br><span class="line">            end = time.time()</span><br><span class="line">            <span class="keyword">if</span> batch_idx % args.print_freq == args.print_freq - <span class="number">1</span>:</span><br><span class="line">                logger.info(</span><br><span class="line">                    <span class="string">&#x27;&#123;0&#125;: [&#123;1:&gt;4d&#125;/&#123;2&#125;]  &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;Time: &#123;batch_time.val:.3f&#125; (&#123;batch_time.avg:.3f&#125;)  &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;Loss: &#123;loss.val:&gt;7.4f&#125; (&#123;loss.avg:&gt;6.4f&#125;)  &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;Acc@1: &#123;top1.val:&gt;7.4f&#125; (&#123;top1.avg:&gt;7.4f&#125;)  &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;Acc@5: &#123;top5.val:&gt;7.4f&#125; (&#123;top5.avg:&gt;7.4f&#125;)&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                        <span class="string">&quot;train&quot;</span>, batch_idx, last_idx, batch_time=batch_time_m,</span><br><span class="line">                        loss=loss_m, top1=top1_m, top5=top5_m))  <span class="comment"># val是当次传进去的值，avg是整体平均值。</span></span><br><span class="line">        <span class="keyword">return</span> loss_m, top1_m, conf_mat</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">data_loader, model, loss_f, device, classes</span>):</span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">        class_num = <span class="built_in">len</span>(classes)</span><br><span class="line">        conf_mat = np.zeros((class_num, class_num))</span><br><span class="line"></span><br><span class="line">        loss_m = AverageMeter()</span><br><span class="line">        top1_m = AverageMeter()</span><br><span class="line">        top5_m = AverageMeter()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader):</span><br><span class="line">            inputs, labels = data</span><br><span class="line">            inputs, labels = inputs.to(device), labels.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = loss_f(outputs.cpu(), labels.cpu())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算accuracy</span></span><br><span class="line">            acc1, acc5 = accuracy(outputs, labels, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">            _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(labels)):</span><br><span class="line">                cate_i = labels[j].cpu().numpy()</span><br><span class="line">                pre_i = predicted[j].cpu().numpy()</span><br><span class="line">                conf_mat[cate_i, pre_i] += <span class="number">1.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 记录指标</span></span><br><span class="line">            loss_m.update(loss.item(), inputs.size(<span class="number">0</span>))  <span class="comment"># 因update里： self.sum += val * n， 因此需要传入batch数量</span></span><br><span class="line">            top1_m.update(acc1.item(), outputs.size(<span class="number">0</span>))</span><br><span class="line">            top5_m.update(acc5.item(), outputs.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loss_m, top1_m, conf_mat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModelTrainerEnsemble</span>(<span class="title class_ inherited__">ModelTrainer</span>):</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">outputs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Compute the average over a list of tensors with the same size.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(outputs) / <span class="built_in">len</span>(outputs)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">data_loader, models, loss_f, device, classes</span>):</span><br><span class="line"></span><br><span class="line">        class_num = <span class="built_in">len</span>(classes)</span><br><span class="line">        conf_mat = np.zeros((class_num, class_num))</span><br><span class="line"></span><br><span class="line">        loss_m = AverageMeter()</span><br><span class="line">        <span class="comment"># task类型与任务一致</span></span><br><span class="line">        <span class="comment"># num_classes与分类任务的类别数一致</span></span><br><span class="line">        top1_m = torchmetrics.Accuracy(task=<span class="string">&quot;multiclass&quot;</span>, num_classes=class_num).to(device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># top1 acc group</span></span><br><span class="line">        top1_group = []</span><br><span class="line">        <span class="keyword">for</span> model_idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(models)):</span><br><span class="line">            <span class="comment"># task类型与任务一致</span></span><br><span class="line">            <span class="comment"># num_classes与分类任务的类别数一致</span></span><br><span class="line">            top1_group.append(torchmetrics.Accuracy(task=<span class="string">&quot;multiclass&quot;</span>, num_classes=class_num).to(device))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader):</span><br><span class="line">            inputs, labels = data</span><br><span class="line">            inputs, labels = inputs.to(device), labels.to(device)</span><br><span class="line"></span><br><span class="line">            outputs = []</span><br><span class="line">            <span class="keyword">for</span> model_idx, model <span class="keyword">in</span> <span class="built_in">enumerate</span>(models):</span><br><span class="line">                output_single = F.softmax(model(inputs), dim=<span class="number">1</span>)</span><br><span class="line">                outputs.append(output_single)</span><br><span class="line">                <span class="comment"># 计算单个模型acc</span></span><br><span class="line">                top1_group[model_idx](output_single, labels)</span><br><span class="line">                <span class="comment"># 计算单个模型loss</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算acc 组</span></span><br><span class="line">            output_avg = ModelTrainerEnsemble.average(outputs)</span><br><span class="line">            top1_m(output_avg, labels)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># loss 组</span></span><br><span class="line">            loss = loss_f(output_avg.cpu(), labels.cpu())</span><br><span class="line">            loss_m.update(loss.item(), inputs.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loss_m, top1_m.compute(), top1_group, conf_mat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Logger</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, path_log</span>):</span><br><span class="line">        log_name = os.path.basename(path_log)</span><br><span class="line">        self.log_name = log_name <span class="keyword">if</span> log_name <span class="keyword">else</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">        self.out_path = path_log</span><br><span class="line"></span><br><span class="line">        log_dir = os.path.dirname(self.out_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">            os.makedirs(log_dir)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_logger</span>(<span class="params">self</span>):</span><br><span class="line">        logger = logging.getLogger(self.log_name)</span><br><span class="line">        logger.setLevel(level=logging.INFO)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 配置文件Handler</span></span><br><span class="line">        file_handler = logging.FileHandler(self.out_path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        file_handler.setLevel(logging.INFO)</span><br><span class="line">        formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">        file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 配置屏幕Handler</span></span><br><span class="line">        console_handler = logging.StreamHandler()</span><br><span class="line">        console_handler.setLevel(logging.INFO)</span><br><span class="line">        <span class="comment"># console_handler.setFormatter(logging.Formatter(&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加handler</span></span><br><span class="line">        logger.addHandler(file_handler)</span><br><span class="line">        logger.addHandler(console_handler)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_logger</span>(<span class="params">out_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在out_dir文件夹下以当前时间命名，创建日志文件夹，并创建logger用于记录信息</span></span><br><span class="line"><span class="string">    :param out_dir: str</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    now_time = datetime.now()</span><br><span class="line">    time_str = datetime.strftime(now_time, <span class="string">&#x27;%Y-%m-%d_%H-%M-%S&#x27;</span>)</span><br><span class="line">    log_dir = os.path.join(out_dir, time_str)  <span class="comment"># 根据config中的创建时间作为文件夹名</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">        os.makedirs(log_dir)</span><br><span class="line">    <span class="comment"># 创建logger</span></span><br><span class="line">    path_log = os.path.join(log_dir, <span class="string">&quot;log.log&quot;</span>)</span><br><span class="line">    logger = Logger(path_log)</span><br><span class="line">    logger = logger.init_logger()</span><br><span class="line">    <span class="keyword">return</span> logger, log_dir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_seed</span>(<span class="params">seed=<span class="number">42</span></span>):</span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    torch.manual_seed(seed)  <span class="comment"># cpu</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        torch.cuda.manual_seed_all(seed)</span><br><span class="line">        torch.backends.cudnn.deterministic = <span class="literal">True</span></span><br><span class="line">        torch.backends.cudnn.benchmark = <span class="literal">True</span>  <span class="comment"># 训练集变化不大时使训练加速，是固定cudnn最优配置，如卷积算法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AverageMeter</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Computes and stores the average and current value</span></span><br><span class="line"><span class="string">    Hacked from https://github.com/rwightman/pytorch-image-models/blob/master/timm/utils/metrics.py</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.reset()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        self.val = <span class="number">0</span></span><br><span class="line">        self.avg = <span class="number">0</span></span><br><span class="line">        self.<span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, val, n=<span class="number">1</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">sum</span> += val * n</span><br><span class="line">        self.count += n</span><br><span class="line">        self.avg = self.<span class="built_in">sum</span> / self.count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">output, target, topk=(<span class="params"><span class="number">1</span>,</span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Computes the accuracy over the k top predictions for the specified values of k</span></span><br><span class="line"><span class="string">    Hacked from https://github.com/rwightman/pytorch-image-models/blob/master/timm/utils/metrics.py</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    maxk = <span class="built_in">min</span>(<span class="built_in">max</span>(topk), output.size()[<span class="number">1</span>])</span><br><span class="line">    batch_size = target.size(<span class="number">0</span>)</span><br><span class="line">    _, pred = output.topk(maxk, <span class="number">1</span>, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    pred = pred.t()</span><br><span class="line">    correct = pred.eq(target.reshape(<span class="number">1</span>, -<span class="number">1</span>).expand_as(pred))</span><br><span class="line">    <span class="keyword">return</span> [correct[:<span class="built_in">min</span>(k, maxk)].reshape(-<span class="number">1</span>).<span class="built_in">float</span>().<span class="built_in">sum</span>(<span class="number">0</span>) * <span class="number">100.</span> / batch_size <span class="keyword">for</span> k <span class="keyword">in</span> topk]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408301730431.png" alt="image-20240830161706547"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408301730432.png" alt="image-20240830161719816"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408301730433.png" alt="image-20240830161740319"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408301730434.png" alt="image-20240830161748364"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408301730435.png" alt="image-20240830161801651"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tingsongyu.github.io/PyTorch-Tutorial-2nd/chapter-7/7.4-training-script.html">7.4 模型训练代码模板 · PyTorch实用教程（第二版） (tingsongyu.github.io)</a></p>]]></content>
    
    
    <summary type="html">深度学习分类模型训练代码模板</summary>
    
    
    
    <category term="深度学习" scheme="https://huaiyuechusan.gitee.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://huaiyuechusan.gitee.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PyTorch" scheme="https://huaiyuechusan.gitee.io/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>从零入门CV图像竞赛（2024全球Deepfake攻防挑战赛）</title>
    <link href="https://huaiyuechusan.gitee.io/archives/c3b7887e.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/c3b7887e.html</id>
    <published>2024-08-04T12:52:00.000Z</published>
    <updated>2024-10-17T11:58:45.714Z</updated>
    
    <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="从零入门CV图像竞赛（2024全球Deepfake攻防挑战赛）"><a href="#从零入门CV图像竞赛（2024全球Deepfake攻防挑战赛）" class="headerlink" title="从零入门CV图像竞赛（2024全球Deepfake攻防挑战赛）"></a>从零入门CV图像竞赛（2024全球Deepfake攻防挑战赛）</h1><h2 id="Deepfake是什么？"><a href="#Deepfake是什么？" class="headerlink" title="Deepfake是什么？"></a>Deepfake是什么？</h2><p>Deepfake是一种利用深度学习技术，特别是生成对抗网络（GANs）来实现视频、音频等多媒体内容的伪造技术。这项技术可以实现对视频中人物的面部、表情、口型甚至身体动作的精确替换和模仿，让一个人在视频中看起来像另一个人，或者做出他们实际上并未做出的动作和表情。</p><h3 id="Deepfake的制作流程大致如下："><a href="#Deepfake的制作流程大致如下：" class="headerlink" title="Deepfake的制作流程大致如下："></a>Deepfake的制作流程大致如下：</h3><ol><li><strong>数据收集</strong>：收集大量的目标人物图片和视频资料，用于训练模型。</li><li><strong>模型训练</strong>：使用生成对抗网络（GAN）进行训练。GAN包含两部分，生成器（Generator）和判别器（Discriminator）。生成器的任务是生成逼真的假视频或图片，而判别器的任务是区分生成的假视频或图片和真实的视频或图片。</li><li><strong>迭代优化</strong>：通过不断迭代，生成器生成的假视频或图片越来越难以被判别器识别，最终达到以假乱真的效果。</li></ol><h3 id="Deepfake技术具有以下特点："><a href="#Deepfake技术具有以下特点：" class="headerlink" title="Deepfake技术具有以下特点："></a>Deepfake技术具有以下特点：</h3><ul><li><strong>高仿真性</strong>：经过精心制作的Deepfake内容可以达到非常高的真实度，对于普通观众来说，很难分辨其真伪。</li><li><strong>多样性</strong>：不仅可以应用于视频，也可以应用于音频、图片等多种媒介。<br>Deepfake技术带来的潜在问题：</li><li><strong>伦理道德问题</strong>：Deepfake可能被用于制作虚假信息、色情内容、侵犯他人隐私等，对个人名誉和社会秩序造成负面影响。</li><li><strong>安全问题</strong>：在政治、经济、社会等领域，Deepfake可能被用作虚假信息传播的工具，误导公众，影响选举和决策过程。<br>针对Deepfake技术的潜在风险，各国政府、技术社区和社会组织正在努力制定相应的法律法规和对策，以防止其滥用。同时，也在开发检测和识别Deepfake内容的技术，以保护信息的真实性和社会的稳定。</li></ul><h2 id="如何区分Deepfake？"><a href="#如何区分Deepfake？" class="headerlink" title="如何区分Deepfake？"></a>如何区分Deepfake？</h2><p>区分Deepfake内容与真实内容是一个挑战性的任务，但随着技术的发展，已经有一些方法可以用来检测Deepfake。以下是一些常见的检测Deepfake的方法：</p><ol><li><strong>视觉不一致性检查</strong>：<ul><li><strong>光线和阴影</strong>：检查视频中的光线和阴影是否自然，Deepfake内容可能在光线变化和阴影上存在不一致。</li><li><strong>面部特征</strong>：观察面部特征是否在不同角度和表情下保持一致，Deepfake可能在某些角度下出现面部扭曲或异常。</li><li><strong>眨眼和眼球运动</strong>：人类在说话时会自然眨眼和移动眼球，Deepfake可能无法准确模拟这些细节。</li></ul></li><li><strong>图像质量分析</strong>：<ul><li><strong>分辨率不一致</strong>：Deepfake视频可能在某些部分分辨率较低，尤其是当面部被合成到不同背景上时。</li><li><strong>模糊和锐化</strong>：检查图像中是否有不自然的模糊或过度锐化的区域。</li></ul></li><li><strong>生物特征检测</strong>：<ul><li><strong>心跳和呼吸</strong>：通过分析视频中的心跳和呼吸模式，可以检测出与人类生理特征不符的情况。</li><li><strong>面部微表情</strong>：人类的面部微表情很难被Deepfake技术完美复制，检测微表情的不自然可能揭示Deepfake。</li></ul></li><li><strong>一致性检查</strong>：<ul><li><strong>口型和声音</strong>：检查视频中人物的口型是否与声音匹配，Deepfake可能在这方面存在不一致。</li><li><strong>身体动作</strong>：分析身体动作是否协调，Deepfake可能在模拟复杂的身体动作时出现不自然的情况。</li></ul></li><li><strong>深度学习检测工具</strong>：<ul><li><strong>专门的深度学习模型</strong>：已经有一些深度学习模型被训练来专门检测Deepfake内容，这些模型可以识别视频中的异常模式。</li></ul></li><li><strong>元数据分析</strong>：<ul><li><strong>视频元数据</strong>：检查视频文件的元数据，如创建日期、编辑历史等，以查找可能的篡改痕迹。</li></ul></li><li><strong>第三方验证</strong>：<ul><li><strong>专业机构</strong>：对于重要的视频内容，可以提交给专业的检测机构进行验证 </li></ul></li></ol><p>需要注意的是，随着Deepfake技术的不断进步，检测Deepfake的难度也在增加。因此，上述方法可能需要结合使用，并且需要不断更新检测工具和技术以应对新的挑战。此外，公众也应提高对Deepfake内容的警觉性，对来源不明的视频内容保持怀疑态度。</p><h2 id="基于深度学习的Deepfake检测"><a href="#基于深度学习的Deepfake检测" class="headerlink" title="基于深度学习的Deepfake检测"></a>基于深度学习的Deepfake检测</h2><h3 id="代码流程"><a href="#代码流程" class="headerlink" title="代码流程"></a>代码流程</h3><ol><li><strong>模型定义</strong>：使用<code>timm</code>库创建一个预训练的<code>resnet18</code>模型。</li><li><strong>训练/验证数据加载</strong>：使用<code>torch.utils.data.DataLoader</code>来加载训练集和验证集数据，并通过定义的<code>transforms</code>进行数据增强。</li><li><strong>训练与验证过程</strong>：<ol><li>定义了<code>train</code>函数来执行模型在一个epoch上的训练过程，包括前向传播、损失计算、反向传播和参数更新。</li><li>定义了<code>validate</code>函数来评估模型在验证集上的性能，计算准确率。</li></ol></li><li><strong>性能评估</strong>：使用准确率（Accuracy）作为性能评估的主要指标，并在每个epoch后输出验证集上的准确率。</li><li><strong>提交</strong>：最后，将预测结果保存到CSV文件中，准备提交到Kaggle比赛。</li></ol><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408042029641.png" alt="image-20240804182516999"></p><h3 id="模型网络定义-加载预训练模型"><a href="#模型网络定义-加载预训练模型" class="headerlink" title="模型网络定义-加载预训练模型"></a>模型网络定义-加载预训练模型</h3><p>预训练模型是指在特定的大型数据集（如ImageNet）上预先训练好的神经网络模型。这些模型已经学习到了丰富的特征表示，能够识别和处理图像中的多种模式。使用预训练模型的好处是，它们可以在新数据集或新任务上进行微调（Fine-tuning），从而加快训练过程并提高模型性能，尤其是当可用的数据量有限时。</p><p>在下面代码中，<code>timm.create_model(&#39;resnet18&#39;, pretrained=True, num_classes=2)</code>这行代码就是加载了一个预训练的ResNet-18模型，其中<code>pretrained=True</code>表示使用在ImageNet数据集上预训练的权重，<code>num_classes=2</code>表示模型的输出层被修改为有2个类别的输出，以适应二分类任务（例如区分真实和Deepfake图像）。通过<code>model = model.cuda()</code>将模型移动到GPU上进行加速。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timm</span><br><span class="line">model = timm.create_model(<span class="string">&#x27;resnet18&#x27;</span>, pretrained=<span class="literal">True</span>, num_classes=<span class="number">2</span>)</span><br><span class="line">model = model.cuda()</span><br></pre></td></tr></table></figure><h3 id="训练-验证集数据加载"><a href="#训练-验证集数据加载" class="headerlink" title="训练/验证集数据加载"></a>训练/验证集数据加载</h3><ol><li><p>自定义<code>FFDIDataset</code>类，继承Pytorch的<code>Dataset</code>类。</p><p><code>__init__</code>：读取数据集并处理</p><p><code>__getitem__</code>：每次返回一个样本</p><p><code>__len__</code>：返回数据集大小</p></li><li><p>使用<code>DataLoader</code>将数据分组。如果设置<code>shuffle=True</code>，<code>Dataloader</code>会自动排列所有样本的索引。我们在训练时经常设置<code>shuffle=True</code>。</p></li><li><p><strong>数据增强操作</strong></p><p>数据增强是一种在机器学习和深度学习中提升模型性能的重要技术。它通过应用一系列随机变换来增加训练数据的多样性，从而提高模型的泛化能力。<strong>增加数据多样性</strong>是数据增强的核心目的。通过对原始图像进行如旋转、缩放、翻转等操作，可以生成新的训练样本，使模型学习到更丰富的特征表示。</p><p><code>transforms.Compose</code>: 这是一个转换操作的组合，它将多个图像预处理步骤串联起来：</p><ul><li><code>transforms.Resize((256, 256))</code>：将所有图像调整为<code>256x256</code>像素的大小。</li><li><code>transforms.RandomHorizontalFlip()</code>：随机水平翻转图像。</li><li><code>transforms.RandomVerticalFlip()</code>：随机垂直翻转图像。</li><li><code>transforms.ToTensor()</code>：将<code>PIL</code>图像或<code>Numpy</code>数组转换为<code>torch.FloatTensor</code>类型，并除以255以将像素值范围从<code>[0, 255]</code>缩放到<code>[0, 1]</code>。</li><li><code>transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])</code>：对图像进行标准化，使用ImageNet数据集的均值和标准差。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FFDIDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, img_path, img_label, transform=<span class="literal">None</span></span>):</span><br><span class="line">        self.img_path = img_path</span><br><span class="line">        self.img_label = img_label</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> transform <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.transform = transform</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.transform = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img = Image.<span class="built_in">open</span>(self.img_path[index]).convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.transform <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            img = self.transform(img)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> img, torch.from_numpy(np.array(self.img_label[index]))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_path)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">train_loader = torch.utils.data.DataLoader(</span><br><span class="line">    FFDIDataset(train_label[<span class="string">&#x27;path&#x27;</span>], train_label[<span class="string">&#x27;target&#x27;</span>],             </span><br><span class="line">            transforms.Compose([</span><br><span class="line">                        transforms.Resize((<span class="number">256</span>, <span class="number">256</span>)),</span><br><span class="line">                        transforms.RandomHorizontalFlip(), <span class="comment"># 随机水平翻转</span></span><br><span class="line">                        transforms.RandomVerticalFlip(),   <span class="comment"># 随机垂直翻转 </span></span><br><span class="line">                        transforms.ToTensor(),</span><br><span class="line">                        transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">        ])</span><br><span class="line">    ), batch_size=bs_value, shuffle=<span class="literal">True</span>, num_workers=<span class="number">4</span>, pin_memory=<span class="literal">True</span>, collate_fn=collate_fn, drop_last=<span class="literal">False</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">val_loader = torch.utils.data.DataLoader(</span><br><span class="line">    FFDIDataset(val_label[<span class="string">&#x27;path&#x27;</span>], val_label[<span class="string">&#x27;target&#x27;</span>], </span><br><span class="line">            transforms.Compose([</span><br><span class="line">                        transforms.Resize((<span class="number">256</span>, <span class="number">256</span>)),</span><br><span class="line">                        transforms.ToTensor(),</span><br><span class="line">                        transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">        ])</span><br><span class="line">    ), batch_size=bs_value, shuffle=<span class="literal">False</span>, num_workers=<span class="number">4</span>, pin_memory=<span class="literal">True</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408042029642.png" alt="image-20240804184721659"></p><h3 id="训练与验证过程"><a href="#训练与验证过程" class="headerlink" title="训练与验证过程"></a>训练与验证过程</h3><p>在深度学习中，模型训练通常需要进行多次迭代，而不是单次完成。深度学习模型的训练本质上是一个优化问题，目标是最小化损失函数。梯度下降算法通过计算损失函数相对于模型参数的梯度来更新参数。由于每次参数更新只能基于一个数据批次来计算梯度，因此需要多次迭代，每次处理一个新的数据批次，以确保模型在整个数据集上都能得到优化。</p><p>模型训练的流程如下：</p><ol><li><strong>设置训练模式</strong>：通过调用<code>model.train()</code>将模型设置为训练模式。在训练模式下，模型的某些层（如<code>BatchNorm</code>和<code>Dropout</code>）会按照它们在训练期间应有的方式运行。</li><li><strong>遍历数据加载器</strong>：使用<code>enumerate(train_loader)</code>遍历<code>train_loader</code>提供的数据批次。<code>input</code>是批次中的图像数据，<code>target</code>是对应的标签。</li><li><strong>数据移动到GPU</strong>：通过<code>.cuda(non_blocking=True)</code>将数据和标签移动到GPU上。<code>non_blocking</code>参数设置为<code>True</code>意味着如果数据正在被复制到GPU，此操作会立即返回，不会等待数据传输完成。</li><li><strong>前向传播</strong>：通过<code>output = model(input)</code>进行前向传播，计算模型对输入数据的预测。</li><li><strong>计算损失</strong>：使用损失函数<code>loss = criterion(output, target)</code>计算预测输出和目标标签之间的差异。</li><li><strong>梯度归零</strong>：在每次迭代开始前，通过<code>optimizer.zero_grad()</code>清空（重置）之前的梯度，以防止梯度累积。</li><li><strong>反向传播</strong>：调用<code>loss.backward()</code>计算损失相对于模型参数的梯度。</li><li><strong>参数更新</strong>：通过<code>optimizer.step()</code>根据计算得到的梯度更新模型的参数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">train_loader, model, criterion, optimizer, epoch</span>):</span><br><span class="line">    batch_time = AverageMeter(<span class="string">&#x27;Time&#x27;</span>, <span class="string">&#x27;:6.3f&#x27;</span>)</span><br><span class="line">    losses = AverageMeter(<span class="string">&#x27;Loss&#x27;</span>, <span class="string">&#x27;:.4e&#x27;</span>)</span><br><span class="line">    top1 = AverageMeter(<span class="string">&#x27;Acc@1&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>)</span><br><span class="line">    progress = ProgressMeter(<span class="built_in">len</span>(train_loader), batch_time, losses, top1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch to train mode</span></span><br><span class="line">    model.train()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">for</span> i, (<span class="built_in">input</span>, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">input</span>.cuda(non_blocking=<span class="literal">True</span>)</span><br><span class="line">        target = target.cuda(non_blocking=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute output</span></span><br><span class="line">        output = model(<span class="built_in">input</span>)</span><br><span class="line">        loss = criterion(output, target)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure accuracy and record loss</span></span><br><span class="line">        losses.update(loss.item(), <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># print(f&quot;&#123;output.shape = &#125;,&#123;target.shape = &#125;&quot;)</span></span><br><span class="line">        <span class="comment"># output.shape = torch.Size([32, 2]),target.shape = torch.Size([32])</span></span><br><span class="line">        acc = (output.argmax(<span class="number">1</span>).view(-<span class="number">1</span>) == target.<span class="built_in">float</span>().view(-<span class="number">1</span>)).<span class="built_in">float</span>().mean() * <span class="number">100</span></span><br><span class="line">        top1.update(acc, <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute gradient and do SGD step</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure elapsed time</span></span><br><span class="line">        batch_time.update(time.time() - end)</span><br><span class="line">        end = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            progress.pr2int(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">val_loader, model, criterion</span>):</span><br><span class="line">    batch_time = AverageMeter(<span class="string">&#x27;Time&#x27;</span>, <span class="string">&#x27;:6.3f&#x27;</span>)</span><br><span class="line">    losses = AverageMeter(<span class="string">&#x27;Loss&#x27;</span>, <span class="string">&#x27;:.4e&#x27;</span>)</span><br><span class="line">    top1 = AverageMeter(<span class="string">&#x27;Acc@1&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>)</span><br><span class="line">    progress = ProgressMeter(<span class="built_in">len</span>(val_loader), batch_time, losses, top1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch to evaluate mode</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">for</span> i, (<span class="built_in">input</span>, target) <span class="keyword">in</span> tqdm_notebook(<span class="built_in">enumerate</span>(val_loader), total=<span class="built_in">len</span>(val_loader)):</span><br><span class="line">            <span class="built_in">input</span> = <span class="built_in">input</span>.cuda()</span><br><span class="line">            target = target.cuda()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># compute output</span></span><br><span class="line">            output = model(<span class="built_in">input</span>)</span><br><span class="line">            loss = criterion(output, target)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># measure accuracy and record loss</span></span><br><span class="line">            acc = (output.argmax(<span class="number">1</span>).view(-<span class="number">1</span>) == target.<span class="built_in">float</span>().view(-<span class="number">1</span>)).<span class="built_in">float</span>().mean() * <span class="number">100</span></span><br><span class="line">            losses.update(loss.item(), <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line">            top1.update(acc, <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line">            <span class="comment"># measure elapsed time</span></span><br><span class="line">            batch_time.update(time.time() - end)</span><br><span class="line">            end = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> this should also be done with the ProgressMeter</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; * Acc@1 &#123;top1.avg:.3f&#125;&#x27;</span></span><br><span class="line">              .<span class="built_in">format</span>(top1=top1))</span><br><span class="line">        <span class="keyword">return</span> top1</span><br></pre></td></tr></table></figure><h3 id="性能评估"><a href="#性能评估" class="headerlink" title="性能评估"></a>性能评估</h3><p>使用准确率（Accuracy）作为性能评估的主要指标，并在每个epoch后输出验证集上的准确率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义损失函数</span></span><br><span class="line">criterion = nn.CrossEntropyLoss().cuda()</span><br><span class="line"><span class="comment"># 定义优化算法</span></span><br><span class="line">optimizer = torch.optim.Adam(model.parameters(), <span class="number">0.005</span>)</span><br><span class="line"><span class="comment"># 定义学习率</span></span><br><span class="line">scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=<span class="number">4</span>, gamma=<span class="number">0.85</span>)</span><br><span class="line">best_acc = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch_num):</span><br><span class="line">    scheduler.step()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Epoch: &#x27;</span>, epoch)</span><br><span class="line"></span><br><span class="line">    train_mix(train_loader, model, criterion, optimizer, epoch)</span><br><span class="line">    val_acc = validate(val_loader, model, criterion)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> val_acc.avg.item() &gt; best_acc:</span><br><span class="line">        best_acc = <span class="built_in">round</span>(val_acc.avg.item(), <span class="number">2</span>)</span><br><span class="line">        torch.save(model.state_dict(), <span class="string">f&#x27;./model_<span class="subst">&#123;best_acc&#125;</span>.pt&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="测试集上预测并提交结果"><a href="#测试集上预测并提交结果" class="headerlink" title="测试集上预测并提交结果"></a>测试集上预测并提交结果</h3><p>定义<code>predict</code>函数，使用训练好的模型预测结果，将预测结果保存到CSV文件中，准备提交到Kaggle比赛。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">test_loader, model, tta=<span class="number">10</span></span>):</span><br><span class="line">    <span class="comment"># switch to evaluate mode</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    </span><br><span class="line">    test_pred_tta = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(tta):</span><br><span class="line">        test_pred = []</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            end = time.time()</span><br><span class="line">            <span class="keyword">for</span> i, (<span class="built_in">input</span>, target) <span class="keyword">in</span> tqdm_notebook(<span class="built_in">enumerate</span>(test_loader), total=<span class="built_in">len</span>(test_loader)):</span><br><span class="line">                <span class="built_in">input</span> = <span class="built_in">input</span>.cuda()</span><br><span class="line">                target = target.cuda()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># compute output</span></span><br><span class="line">                output = model(<span class="built_in">input</span>)</span><br><span class="line">                output = F.softmax(output, dim=<span class="number">1</span>)</span><br><span class="line">                output = output.data.cpu().numpy()</span><br><span class="line"></span><br><span class="line">                test_pred.append(output)</span><br><span class="line">        test_pred = np.vstack(test_pred)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> test_pred_tta <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            test_pred_tta = test_pred</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            test_pred_tta += test_pred</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> test_pred_tta</span><br><span class="line"></span><br><span class="line">test_loader = torch.utils.data.DataLoader(</span><br><span class="line">    FFDIDataset(val_label[<span class="string">&#x27;path&#x27;</span>], val_label[<span class="string">&#x27;target&#x27;</span>], </span><br><span class="line">            transforms.Compose([</span><br><span class="line">                        transforms.Resize((<span class="number">256</span>, <span class="number">256</span>)),</span><br><span class="line">                        transforms.ToTensor(),</span><br><span class="line">                        transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">        ])</span><br><span class="line">    ), batch_size=bs_value, shuffle=<span class="literal">False</span>, num_workers=<span class="number">4</span>, pin_memory=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">val_label[<span class="string">&#x27;y_pred&#x27;</span>] = predict(test_loader, model, <span class="number">1</span>)[:, <span class="number">1</span>]</span><br><span class="line">val_label[[<span class="string">&#x27;img_name&#x27;</span>, <span class="string">&#x27;y_pred&#x27;</span>]].to_csv(<span class="string">&#x27;submit.csv&#x27;</span>, index=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h3 id="改进方向"><a href="#改进方向" class="headerlink" title="改进方向"></a>改进方向</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408042029643.png" alt="image-20240802175944582"></p><h4 id="更多数据集增强"><a href="#更多数据集增强" class="headerlink" title="更多数据集增强"></a>更多数据集增强</h4><ol><li><p>几何变换</p><ul><li>调整大小: <code>Resize</code>可以将图像调整到指定的大小。</li><li>随机裁剪: <code>RandomCrop</code>和<code>RandomResizedCrop</code>可以随机裁剪图像。</li><li>中心裁剪: <code>CenterCrop</code>从图像的中心裁剪出指定大小。</li><li>五裁剪和十裁剪: <code>FiveCrop</code>和<code>TenCrop</code>分别裁剪出图像的四个角和中心区域。</li><li>翻转: <code>RandomHorizontalFlip</code>和<code>RandomVerticalFlip</code>可以水平或垂直翻转图像。</li><li>旋转: <code>RandomRotation</code>可以随机旋转图像。</li><li>仿射变换: <code>RandomAffine</code>可以进行随机的仿射变换。</li><li>透视变换: <code>RandomPerspective</code>可以进行随机的透视变换。</li></ul></li><li><p>颜色变换</p><ul><li>颜色抖动: <code>ColorJitter</code>可以随机改变图像的亮度、对比度、饱和度和色调。</li><li>灰度化: <code>Grayscale</code>和<code>RandomGrayscale</code>可以将图像转换为灰度图。</li><li>高斯模糊: <code>GaussianBlur</code>可以对图像进行高斯模糊。</li><li>颜色反转: <code>RandomInvert</code>可以随机反转图像的颜色。</li><li>颜色 posterize: <code>RandomPosterize</code>可以减少图像中每个颜色通道的位数。</li><li>颜色 solarize: <code>RandomSolarize</code>可以反转图像中所有高于阈值的像素值。</li></ul></li><li><p>自动增强</p><ul><li>自动增强: <code>AutoAugment</code>可以根据数据集自动学习数据增强策略。</li><li>随机增强: <code>RandAugment</code>可以随机应用一系列数据增强操作。</li><li><code>TrivialAugmentWide</code>:提供与数据集无关的数据增强。</li><li><code>AugMix</code>:通过混合多个增强操作进行数据增强。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">transforms.Compose([</span><br><span class="line">    <span class="comment">####几何变换####</span></span><br><span class="line">    transforms.Resize((<span class="number">256</span>, <span class="number">256</span>)),</span><br><span class="line">    transforms.RandomPerspective(distortion_scale=<span class="number">0.6</span>, p=<span class="number">1.0</span>),  <span class="comment"># 随机透视转换</span></span><br><span class="line">    transforms.RandomRotation(degrees=(<span class="number">0</span>, <span class="number">180</span>)),                <span class="comment"># 随机旋转</span></span><br><span class="line">    transforms.RandomAffine(degrees=(<span class="number">30</span>, <span class="number">70</span>), translate=(<span class="number">0.1</span>, <span class="number">0.3</span>), scale=(<span class="number">0.5</span>, <span class="number">0.75</span>)), <span class="comment"># 随机仿射</span></span><br><span class="line">    transforms.RandomHorizontalFlip(), <span class="comment"># 随机水平翻转</span></span><br><span class="line">    transforms.RandomVerticalFlip(),   <span class="comment"># 随机垂直翻转</span></span><br><span class="line">    <span class="comment">####颜色变换</span></span><br><span class="line">    transforms.RandomInvert(),  <span class="comment"># 随机反转颜色</span></span><br><span class="line">    transforms.GaussianBlur(kernel_size=(<span class="number">5</span>, <span class="number">9</span>), sigma=(<span class="number">0.1</span>, <span class="number">5.</span>)),  <span class="comment"># 高斯模糊变换</span></span><br><span class="line">    transforms.ColorJitter(brightness=<span class="number">.5</span>, hue=<span class="number">.3</span>),    <span class="comment"># 颜色抖动</span></span><br><span class="line">    transforms.RandomPosterize(bits=<span class="number">2</span>), <span class="comment"># 减少图像中每个颜色通道的位数</span></span><br><span class="line">    transforms.RandomSolarize(threshold=<span class="number">192.0</span>), <span class="comment"># 反转图像中所有高于阈值的像素值</span></span><br><span class="line">    transforms.RandomAdjustSharpness(sharpness_factor=<span class="number">2</span>),  <span class="comment"># 随机锐度</span></span><br><span class="line">    transforms.RandomEqualize(),       <span class="comment"># 随机均衡</span></span><br><span class="line">    transforms.RandomAutocontrast(),   <span class="comment"># 随机自动对比</span></span><br><span class="line">    <span class="comment">####自动增强####</span></span><br><span class="line">    transforms.AugMix(),   <span class="comment"># 混合多个增强操作进行数据增强</span></span><br><span class="line">    transforms.AutoAugment(transforms.AutoAugmentPolicy.IMAGENET),  <span class="comment"># 根据给定的自动增强策略自动增强数据</span></span><br><span class="line">    transforms.RandAugment(), <span class="comment"># 随机策略增强</span></span><br><span class="line">    transforms.TrivialAugmentWide()  <span class="comment"># AutoAugment 的替代实现</span></span><br><span class="line"></span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">])</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>Mixup</p><p>MixUp是一种数据增强技术，其原理是通过将两个不同的图像及其标签按照一定的比例混合，从而创建一个新的训练样本。这种方法可以增加训练数据的多样性，提高模型的泛化能力，并减少过拟合的风险。MixUp方法中混合比例是一个超参数，通常称为<code>alpha</code>。<code>alpha</code>是一个在0到1之间的值，表示混合的比例。例如，<code>alpha=0.5</code>意味着两个图像各占新图像的一半。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408042029644.png" alt="image-20240804200115064"></p><p>MixUp的混合过程包括以下步骤：</p><ul><li>从训练集中随机选择两个图像和它们的标签。</li><li>将这两个图像按照<code>alpha</code>的比例混合，得到一个新的图像。</li><li>将这两个标签按照相同的<code>alpha</code>比例混合，得到一个新的标签。</li></ul><p>MixUp方法具有以下几个优点：</p><ul><li>增加数据多样性：通过混合不同的图像和标签，MixUp可以创建更多样化的训练样本，帮助模型学习到更加鲁棒的特征表示。</li><li>减少过拟合：MixUp可以减少模型对特定训练样本的依赖，从而降低过拟合的风险。</li><li>提高泛化能力：MixUp可以帮助模型学习到更加泛化的特征表示，从而提高模型在未见过的数据上的表现。</li></ul></li><li><p>Cutmix</p><p>CutMix是一种数据增强技术，它通过将一个图像的一部分剪切并粘贴到另一个图像上来创建新的训练样本。同时，它也会根据剪切区域的大小来调整两个图像的标签。</p><p>CutMix方法中，剪切和粘贴操作是关键步骤。</p><p>具体来说，剪切和粘贴过程包括以下步骤：</p><ul><li>从训练集中随机选择两个图像和它们的标签。</li><li>随机选择一个剪切区域的大小和位置。</li><li>将第一个图像的剪切区域粘贴到第二个图像上，得到一个新的图像。</li><li>根据剪切区域的大小，计算两个图像的标签的加权平均值，得到一个新的标签。</li></ul><p>Mixup和Cutmix具体代码（参考文档：<a href="https://pytorch.ac.cn/vision/0.18/auto_examples/transforms/plot_cutmix_mixup.html">如何使用 CutMix 和 MixUp — Torchvision 0.18 文档 - PyTorch 中文</a>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> v2</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> default_collate</span><br><span class="line"></span><br><span class="line">NUM_CLASSES = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">cutmix = v2.CutMix(num_classes=NUM_CLASSES)</span><br><span class="line">mixup = v2.MixUp(num_classes=NUM_CLASSES)</span><br><span class="line">cutmix_or_mixup = v2.RandomChoice([cutmix, mixup])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">collate_fn</span>(<span class="params">batch</span>):</span><br><span class="line">    <span class="keyword">return</span> cutmix_or_mixup(*default_collate(batch))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 需重新定义train方法  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_mix</span>(<span class="params">train_loader, model, criterion, optimizer, epoch</span>):</span><br><span class="line">    batch_time = AverageMeter(<span class="string">&#x27;Time&#x27;</span>, <span class="string">&#x27;:6.3f&#x27;</span>)</span><br><span class="line">    losses = AverageMeter(<span class="string">&#x27;Loss&#x27;</span>, <span class="string">&#x27;:.4e&#x27;</span>)</span><br><span class="line">    top1 = AverageMeter(<span class="string">&#x27;Acc@1&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>)</span><br><span class="line">    progress = ProgressMeter(<span class="built_in">len</span>(train_loader), batch_time, losses, top1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch to train mode</span></span><br><span class="line">    model.train()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">for</span> i, (<span class="built_in">input</span>, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">input</span>.cuda(non_blocking=<span class="literal">True</span>)</span><br><span class="line">        target = target.cuda(non_blocking=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute output</span></span><br><span class="line">        output = model(<span class="built_in">input</span>)</span><br><span class="line">        loss = criterion(output, target)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure accuracy and record loss</span></span><br><span class="line">        losses.update(loss.item(), <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># print(f&quot;&#123;output.shape = &#125;,&#123;target.shape = &#125;&quot;)</span></span><br><span class="line">        <span class="comment"># output.shape = torch.Size([32, 2]),target.shape = torch.Size([32, 2])</span></span><br><span class="line">        <span class="comment"># 与不带cutmix、mixup的代码差别，cutmix、mixup操作会增加target的维度，需要选取指定维度</span></span><br><span class="line">        acc = (output.argmax(<span class="number">1</span>).view(-<span class="number">1</span>) == target.argmax(dim=<span class="number">1</span>).<span class="built_in">float</span>().view(-<span class="number">1</span>)).<span class="built_in">float</span>().mean() * <span class="number">100</span></span><br><span class="line">        top1.update(acc, <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute gradient and do SGD step</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure elapsed time</span></span><br><span class="line">        batch_time.update(time.time() - end)</span><br><span class="line">        end = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            progress.pr2int(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################添加cutmix&amp;mixup############################################</span></span><br><span class="line">train_loader = torch.utils.data.DataLoader(</span><br><span class="line">    FFDIDataset(train_label[<span class="string">&#x27;path&#x27;</span>], train_label[<span class="string">&#x27;target&#x27;</span>],             </span><br><span class="line">            transforms.Compose([</span><br><span class="line">                        <span class="comment">####几何变换####</span></span><br><span class="line">                        transforms.Resize((<span class="number">256</span>, <span class="number">256</span>)),</span><br><span class="line">                        <span class="comment">####颜色变换</span></span><br><span class="line">                        transforms.ColorJitter(brightness=<span class="number">.5</span>, hue=<span class="number">.3</span>),    <span class="comment"># 颜色抖动</span></span><br><span class="line">                        transforms.RandomEqualize(),       <span class="comment"># 随机均衡</span></span><br><span class="line">                        transforms.RandomAutocontrast(),   <span class="comment"># 随机自动对比</span></span><br><span class="line">                        <span class="comment">####自动增强####</span></span><br><span class="line">                        transforms.AugMix(),   <span class="comment"># 混合多个增强操作进行数据增强</span></span><br><span class="line">                        transforms.AutoAugment(transforms.AutoAugmentPolicy.IMAGENET), <span class="comment"># 根据给定的增强策略自动增强数据</span></span><br><span class="line">          </span><br><span class="line">                        transforms.ToTensor(),</span><br><span class="line">                        transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">        ])</span><br><span class="line">    ), batch_size=bs_value, shuffle=<span class="literal">True</span>, num_workers=<span class="number">4</span>, pin_memory=<span class="literal">True</span>, collate_fn=collate_fn, drop_last=<span class="literal">False</span></span><br><span class="line">)  <span class="comment"># 添加collate_fn参数。 它允许您定义一个自定义的函数，该函数用于处理和组合来自不同数据源的样本，以便它们可以被有效地批量处理。                                                  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证集数据加载不需要变化</span></span><br><span class="line">val_loader = torch.utils.data.DataLoader(</span><br><span class="line">    FFDIDataset(val_label[<span class="string">&#x27;path&#x27;</span>], val_label[<span class="string">&#x27;target&#x27;</span>], </span><br><span class="line">            transforms.Compose([</span><br><span class="line">                        transforms.Resize((<span class="number">256</span>, <span class="number">256</span>)),</span><br><span class="line">                        transforms.ToTensor(),</span><br><span class="line">                        transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">        ])</span><br><span class="line">    ), batch_size=bs_value, shuffle=<span class="literal">False</span>, num_workers=<span class="number">4</span>, pin_memory=<span class="literal">True</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>cutmix、mixup数据增强的得分正在跑，后续会更新</p></blockquote><h4 id="更换模型"><a href="#更换模型" class="headerlink" title="更换模型"></a>更换模型</h4><p>使用比resnet18更大的预训练模型（:warning:只允许使用 ImageNet1K 的预训练模型）</p><p>不同模型得分表</p><div class="table-container"><table><thead><tr><th>model</th><th>epoch</th><th>score</th></tr></thead><tbody><tr><td>efficientnet_b0</td><td>10</td><td>0.9921364049</td></tr><tr><td>efficientnet_b4</td><td>5</td><td>0.9874735502</td></tr><tr><td>mobilenetv3_large_100.miil_in21k_ft_in1k</td><td>5</td><td>0.9492682898</td></tr></tbody></table></div><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202408042029645.png" alt="目前得分"></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>探究验证集和训练集产生逻辑&amp;缩放数据集：暂时没有想到如何的实现，感兴趣的可以在评论区讨论，大家一起学习。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢Datawhaler开源学习组织提供的组队学习平台和经验分享会，感谢九月大佬的代码分享。欢迎大家来组队一起学习。</p><p>完整代码地址：<a href="https://www.kaggle.com/code/sunsanshui/deepfake-ffdi-how-to-imporve-socres">Deepfake-FFDI-how to imporve socres | Kaggle</a></p><p>Datawhaler学习手册：<a href="https://datawhaler.feishu.cn/wiki/Uou8w9igsibGP7kduiycCgesnOh">‌⁠﻿‍‬‌‬‬‍‍‬‌‬‍⁠‌‌‍‍﻿‌‌‌﻿‬⁠﻿﻿‌‍⁠从零入门CV图像竞赛(Deepfake攻防) - 飞书云文档 (feishu.cn)</a></p><p>九月大佬的代码：<a href="https://www.kaggle.com/code/chg0901/0-98766-deepfake-ffdi-way-to-get-top-scores">[九月0.98766]Deepfake-FFDI-Way to Get Top Scores | Kaggle</a></p>]]></content>
    
    
    <summary type="html">Deepfake是一种利用深度学习技术，特别是生成对抗网络（GANs）来实现视频、音频等多媒体内容的伪造技术。这项技术可以实现对视频中人物的面部、表情、口型甚至身体动作的精确替换和模仿，让一个人在视频中看起来像另一个人，或者做出他们实际上并未做出的动作和表情。本次比赛使用深度学习技术检测图片是否由Deepfake生成。</summary>
    
    
    
    <category term="竞赛" scheme="https://huaiyuechusan.gitee.io/categories/%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="深度学习" scheme="https://huaiyuechusan.gitee.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="竞赛" scheme="https://huaiyuechusan.gitee.io/tags/%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="计算机视觉" scheme="https://huaiyuechusan.gitee.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>大模型开发实战</title>
    <link href="https://huaiyuechusan.gitee.io/archives/763f7a6d.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/763f7a6d.html</id>
    <published>2024-06-19T15:01:00.000Z</published>
    <updated>2024-10-17T11:59:24.695Z</updated>
    
    <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="大模型开发实战"><a href="#大模型开发实战" class="headerlink" title="大模型开发实战"></a>大模型开发实战</h1><p>本文将以百度的文心一言，阿里巴巴的通义千问，科大讯飞的讯飞星火认知大模型，智谱清言的ChartGLM，腾讯的混元大模型，OpenAI的ChatGPT，这六个模型的api调用进行实战代码讲解。</p><h2 id="大模型向量数据库创建"><a href="#大模型向量数据库创建" class="headerlink" title="大模型向量数据库创建"></a>大模型向量数据库创建</h2><h3 id="对上传的不同格式文件进行处理"><a href="#对上传的不同格式文件进行处理" class="headerlink" title="对上传的不同格式文件进行处理"></a>对上传的不同格式文件进行处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> embedding.call_embedding <span class="keyword">import</span> get_embedding</span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> UnstructuredFileLoader, UnstructuredCSVLoader, CSVLoader</span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> UnstructuredMarkdownLoader</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> PyMuPDFLoader</span><br><span class="line"><span class="keyword">from</span> langchain.vectorstores <span class="keyword">import</span> Chroma</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_loader</span>(<span class="params">file, loaders</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(file):</span><br><span class="line">        [file_loader(os.path.join(file, f), loaders) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(file)]</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    file_type = file.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> file_type == <span class="string">&#x27;pdf&#x27;</span>:</span><br><span class="line">        loaders.append(PyMuPDFLoader(file))</span><br><span class="line">    <span class="keyword">elif</span> file_type == <span class="string">&#x27;md&#x27;</span>:</span><br><span class="line">        loaders.append(UnstructuredMarkdownLoader(file))</span><br><span class="line">    <span class="keyword">elif</span> file_type == <span class="string">&#x27;txt&#x27;</span>:</span><br><span class="line">        loaders.append(UnstructuredFileLoader(file))</span><br><span class="line">    <span class="keyword">elif</span> file_type == <span class="string">&#x27;csv&#x27;</span>:</span><br><span class="line">        loaders.append(CSVLoader(file))</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="切分文档"><a href="#切分文档" class="headerlink" title="切分文档"></a>切分文档</h3><p>:warning:小技巧</p><p>在每段分割的文档前后加上文档名，这样可以保证查询的信息是指定文档内的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_db</span>(<span class="params">files=DEFAULT_DB_PATH, persist_directory=DEFAULT_PERSIST_PATH, embeddings=<span class="string">&quot;openai&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    该函数用于加载 PDF 文件，切分文档，生成文档的嵌入向量，创建向量数据库。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    file: 存放文件的路径。</span></span><br><span class="line"><span class="string">    embeddings: 用于生产 Embedding 的模型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    vectordb: 创建的数据库。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> files == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;can&#x27;t load empty file&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(files) != <span class="built_in">list</span>:</span><br><span class="line">        files = [files]</span><br><span class="line">    loaders = []</span><br><span class="line">    [file_loader(file, loaders) <span class="keyword">for</span> file <span class="keyword">in</span> files]</span><br><span class="line">    docs = []</span><br><span class="line">    <span class="keyword">for</span> loader <span class="keyword">in</span> loaders:</span><br><span class="line">        <span class="keyword">if</span> loader <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            docs.extend(loader.load())</span><br><span class="line">    <span class="comment"># 切分文档</span></span><br><span class="line">    text_splitter = RecursiveCharacterTextSplitter(</span><br><span class="line">        chunk_size=<span class="number">1500</span>, chunk_overlap=<span class="number">150</span>)</span><br><span class="line">    split_docs = text_splitter.split_documents(docs[:<span class="number">1000</span>])</span><br><span class="line">    <span class="string">&quot;&quot;&quot;小技巧&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 在每段分割的文档前后加上文档名，这样可以保证查询的信息是指定文档内的</span></span><br><span class="line">    <span class="keyword">for</span> one_chunk <span class="keyword">in</span> split_docs:</span><br><span class="line">        one_chunk.page_content = one_chunk.metadata[<span class="string">&quot;source&quot;</span>].split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>] + one_chunk.page_content + \</span><br><span class="line">                                 one_chunk.metadata[<span class="string">&quot;source&quot;</span>].split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(embeddings) == <span class="built_in">str</span>:</span><br><span class="line">        embeddings = get_embedding(embedding=embeddings)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载数据库</span></span><br><span class="line">    vectordb = Chroma.from_documents(</span><br><span class="line">        documents=split_docs,</span><br><span class="line">        embedding=embeddings,</span><br><span class="line">        persist_directory=persist_directory  <span class="comment"># 允许我们将persist_directory目录保存到磁盘上</span></span><br><span class="line">    )</span><br><span class="line">    vectordb.persist()</span><br><span class="line">    <span class="keyword">return</span> vectordb</span><br></pre></td></tr></table></figure><h2 id="大模型API调用"><a href="#大模型API调用" class="headerlink" title="大模型API调用"></a>大模型API调用</h2><h3 id="抖音豆包大模型（新增）"><a href="#抖音豆包大模型（新增）" class="headerlink" title="抖音豆包大模型（新增）"></a>抖音豆包大模型（新增）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">doubao_llm</span>(<span class="params">prompt: <span class="built_in">str</span>, model: <span class="built_in">str</span>, api_key: <span class="built_in">str</span>, temperature: <span class="built_in">float</span></span>):</span><br><span class="line">    client = Ark(base_url=<span class="string">&quot;https://ark.cn-beijing.volces.com/api/v3&quot;</span>,</span><br><span class="line">                 api_key=api_key,</span><br><span class="line">                 max_retries=<span class="number">5</span>,</span><br><span class="line">                 timeout=<span class="number">600</span>)</span><br><span class="line">    <span class="comment"># Non-streaming:</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----- standard request -----&quot;</span>)</span><br><span class="line">    completion = client.chat.completions.create(</span><br><span class="line">        model=model,</span><br><span class="line">        messages=[</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;系统提示词&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;,</span><br><span class="line">        ],</span><br><span class="line">        temperature=temperature</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> completion.usage.total_tokens, completion.choices[<span class="number">0</span>].message.content</span><br></pre></td></tr></table></figure><h3 id="腾讯的混元大模型"><a href="#腾讯的混元大模型" class="headerlink" title="腾讯的混元大模型"></a>腾讯的混元大模型</h3><p>:warning:混元大模型需要企业认证才可以使用。官方API文档<a href="https://cloud.tencent.com/document/api/1729/101836">腾讯混元大模型 腾讯混元大模型标准版-腾讯混元大模型相关接口-API 中心-腾讯云 (tencent.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数get_completion_hunyuan，用于调用hunyuan原生接口</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_completion_hunyuan</span>(<span class="params">prompt: <span class="built_in">str</span>, model: <span class="built_in">str</span>, temperature: <span class="built_in">float</span>, secret_id: <span class="built_in">str</span>, secret_key: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="comment"># 判断是否传入secret_id和secret_key，如果没有传入，则从配置文件中解析</span></span><br><span class="line">    <span class="keyword">if</span> secret_id == <span class="literal">None</span> <span class="keyword">or</span> secret_key == <span class="literal">None</span>:</span><br><span class="line">        secret_id, secret_key = parse_llm_api_key(<span class="string">&quot;hunyuan&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用secret_id和secret_key创建一个认证对象</span></span><br><span class="line">    cred = credential.Credential(secret_id, secret_key)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个客户端配置对象，可以设置连接池大小等参数</span></span><br><span class="line">    cpf = ClientProfile()</span><br><span class="line">    <span class="comment"># 设置预先建立连接的数量，可以降低访问延迟</span></span><br><span class="line">    cpf.httpProfile.pre_conn_pool_size = <span class="number">3</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用认证对象和客户端配置对象创建一个hunyuan客户端</span></span><br><span class="line">    client = hunyuan_client.HunyuanClient(cred, <span class="string">&quot;ap-guangzhou&quot;</span>, cpf)</span><br><span class="line">    <span class="comment"># 创建一个请求对象</span></span><br><span class="line">    req = models.ChatStdRequest()</span><br><span class="line">    <span class="comment"># 创建一个消息对象，设置角色为用户，内容为传入的prompt</span></span><br><span class="line">    msg = models.Message()</span><br><span class="line">    msg.Role = <span class="string">&quot;user&quot;</span></span><br><span class="line">    msg.Content = prompt</span><br><span class="line">    <span class="comment"># 将消息对象添加到请求对象的Messages列表中</span></span><br><span class="line">    req.Messages = [msg]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用hunyuan客户端的ChatStd方法，传入请求对象，获取响应</span></span><br><span class="line">    resp = client.ChatStd(req)</span><br><span class="line">    <span class="comment"># 打印响应</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;resp:&quot;</span>, resp)</span><br><span class="line">    <span class="comment"># 初始化一个字符串，用于存储完整的响应内容</span></span><br><span class="line">    full_content = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 遍历响应中的事件</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> resp:</span><br><span class="line">        <span class="comment"># 打印事件</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;event&quot;</span>, event)</span><br><span class="line">        <span class="comment"># 将事件中的数据解析为json对象</span></span><br><span class="line">        data = json.loads(event[<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line">        <span class="comment"># 遍历json对象中的Choices列表</span></span><br><span class="line">        <span class="keyword">for</span> choice <span class="keyword">in</span> data[<span class="string">&#x27;Choices&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 将每个Choice中的Content添加到full_content中</span></span><br><span class="line">            full_content += choice[<span class="string">&#x27;Delta&#x27;</span>][<span class="string">&#x27;Content&#x27;</span>]</span><br><span class="line">    <span class="comment"># 打印完整的响应内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;full_content:&quot;</span>, full_content)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回完整的响应内容</span></span><br><span class="line">    <span class="keyword">return</span> full_content</span><br></pre></td></tr></table></figure><h3 id="阿里巴巴的通义千问"><a href="#阿里巴巴的通义千问" class="headerlink" title="阿里巴巴的通义千问"></a>阿里巴巴的通义千问</h3><p>官方API文档<a href="https://help.aliyun.com/zh/dashscope/create-a-chat-foundation-model?spm=a2c4g.11186623.0.0.8ab5f4001AhvFp">快速入门_模型服务灵积(DashScope)-阿里云帮助中心 (aliyun.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数get_completion_qwen，用于调用qwen原生接口</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_completion_qwen</span>(<span class="params">prompt: <span class="built_in">str</span>, model: <span class="built_in">str</span>, temperature: <span class="built_in">float</span>, api_key: <span class="built_in">str</span>, max_tokens: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="comment"># 判断是否传入api_key，如果没有传入，则从配置文件中解析</span></span><br><span class="line">    <span class="keyword">if</span> api_key == <span class="literal">None</span>:</span><br><span class="line">        api_key = parse_llm_api_key(<span class="string">&quot;qwen&quot;</span>)</span><br><span class="line">    <span class="comment"># 设置dashscope的api_key，dashscope是一个第三方库，用于简化API调用</span></span><br><span class="line">    dashscope.api_key = api_key</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个消息列表，包含用户的消息</span></span><br><span class="line">    messages = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;]</span><br><span class="line">    <span class="comment"># 调用dashscope.Generation.call方法，传入模型名称、消息列表、温度系数、最大回复长度和结果格式</span></span><br><span class="line">    response = dashscope.Generation.call(</span><br><span class="line">        model=model,  <span class="comment"># 模型名称</span></span><br><span class="line">        messages=messages,  <span class="comment"># 消息列表</span></span><br><span class="line">        temperature=temperature,  <span class="comment"># 模型输出的温度系数，控制输出的随机程度</span></span><br><span class="line">        max_tokens=max_tokens,  <span class="comment"># 回复最大长度</span></span><br><span class="line">        result_format=<span class="string">&#x27;message&#x27;</span>,  <span class="comment"># 设置结果格式为&quot;message&quot;</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印响应</span></span><br><span class="line">    <span class="built_in">print</span>(response)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 从响应中提取回复内容并返回</span></span><br><span class="line">    <span class="keyword">return</span> response.output.choices[<span class="number">0</span>].message[<span class="string">&quot;content&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="OpenAI的ChatGPT"><a href="#OpenAI的ChatGPT" class="headerlink" title="OpenAI的ChatGPT"></a>OpenAI的ChatGPT</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数get_completion_gpt，用于调用OpenAI原生接口</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_completion_gpt</span>(<span class="params">prompt: <span class="built_in">str</span>, model: <span class="built_in">str</span>, temperature: <span class="built_in">float</span>, api_key: <span class="built_in">str</span>, max_tokens: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="comment"># 判断是否传入api_key，如果没有传入，则从配置文件中解析</span></span><br><span class="line">    <span class="keyword">if</span> api_key == <span class="literal">None</span>:</span><br><span class="line">        api_key = parse_llm_api_key(<span class="string">&quot;openai&quot;</span>)</span><br><span class="line">    <span class="comment"># 设置OpenAI的api_key，openai是一个第三方库，用于简化API调用</span></span><br><span class="line">    openai.api_key = api_key</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个消息列表，包含用户的消息</span></span><br><span class="line">    messages = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用openai.ChatCompletion.create方法，传入模型名称、消息列表、温度系数和最大回复长度</span></span><br><span class="line">    response = openai.ChatCompletion.create(</span><br><span class="line">        model=model,  <span class="comment"># 模型名称</span></span><br><span class="line">        messages=messages,  <span class="comment"># 消息列表</span></span><br><span class="line">        temperature=temperature,  <span class="comment"># 模型输出的温度系数，控制输出的随机程度</span></span><br><span class="line">        max_tokens=max_tokens,  <span class="comment"># 回复最大长度</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 从响应中提取回复内容并返回</span></span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message[<span class="string">&quot;content&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="百度的文心一言"><a href="#百度的文心一言" class="headerlink" title="百度的文心一言"></a>百度的文心一言</h3><p>官方API文档<a href="https://cloud.baidu.com/doc/WENXINWORKSHOP/s/flfmc9do2">API介绍 - 千帆大模型平台 | 百度智能云文档 (baidu.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_access_token</span>(<span class="params">api_key, secret_key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 API Key，Secret Key 获取access_token，替换下列示例中的应用API Key、应用Secret Key</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 指定网址</span></span><br><span class="line">    url = <span class="string">f&quot;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=<span class="subst">&#123;api_key&#125;</span>&amp;client_secret=<span class="subst">&#123;secret_key&#125;</span>&quot;</span></span><br><span class="line">    <span class="comment"># 设置 POST 访问</span></span><br><span class="line">    payload = json.dumps(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 通过 POST 访问获取账户对应的 access_token</span></span><br><span class="line">    response = requests.request(<span class="string">&quot;POST&quot;</span>, url, headers=headers, data=payload)</span><br><span class="line">    <span class="keyword">return</span> response.json().get(<span class="string">&quot;access_token&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_completion_wenxin</span>(<span class="params">prompt: <span class="built_in">str</span>, model: <span class="built_in">str</span>, temperature: <span class="built_in">float</span>, api_key: <span class="built_in">str</span>, secret_key: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="comment"># 封装百度文心原生接口</span></span><br><span class="line">    <span class="keyword">if</span> api_key == <span class="literal">None</span> <span class="keyword">or</span> secret_key == <span class="literal">None</span>:</span><br><span class="line">        api_key, secret_key = parse_llm_api_key(<span class="string">&quot;wenxin&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取access_token</span></span><br><span class="line">    access_token = get_access_token(api_key, secret_key)</span><br><span class="line">    <span class="comment"># 调用接口</span></span><br><span class="line">    url = <span class="string">f&quot;https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/eb-instant?access_token=<span class="subst">&#123;access_token&#125;</span>&quot;</span></span><br><span class="line">    <span class="comment"># 配置 POST 参数</span></span><br><span class="line">    payload = json.dumps(&#123;</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,  <span class="comment"># user prompt</span></span><br><span class="line">                <span class="string">&quot;content&quot;</span>: <span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(prompt)  <span class="comment"># 输入的 prompt</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 发起请求</span></span><br><span class="line">    response = requests.request(<span class="string">&quot;POST&quot;</span>, url, headers=headers, data=payload)</span><br><span class="line">    <span class="comment"># 返回的是一个 Json 字符串</span></span><br><span class="line">    js = json.loads(response.text)</span><br><span class="line">    <span class="keyword">return</span> js[<span class="string">&quot;result&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="科大讯飞的讯飞星火认知大模型"><a href="#科大讯飞的讯飞星火认知大模型" class="headerlink" title="科大讯飞的讯飞星火认知大模型"></a>科大讯飞的讯飞星火认知大模型</h3><p>官方API文档<a href="https://www.xfyun.cn/doc/spark/Web.html">星火认知大模型Web API文档 | 讯飞开放平台文档中心 (xfyun.cn)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_completion_spark</span>(<span class="params">prompt: <span class="built_in">str</span>, model: <span class="built_in">str</span>, temperature: <span class="built_in">float</span>, api_key: <span class="built_in">str</span>, appid: <span class="built_in">str</span>, api_secret: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">                         max_tokens: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">if</span> api_key == <span class="literal">None</span> <span class="keyword">or</span> appid == <span class="literal">None</span> <span class="keyword">and</span> api_secret == <span class="literal">None</span>:</span><br><span class="line">        api_key, appid, api_secret = parse_llm_api_key(<span class="string">&quot;spark&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置 1.5、2、3、3.5 的不同环境</span></span><br><span class="line">    <span class="keyword">if</span> model == <span class="string">&quot;Spark-1.5&quot;</span>:</span><br><span class="line">        domain = <span class="string">&quot;general&quot;</span></span><br><span class="line">        Spark_url = <span class="string">&quot;wss://spark-api.xf-yun.com/v1.1/chat&quot;</span>  <span class="comment"># v1.5环境的地址</span></span><br><span class="line">    <span class="keyword">if</span> model == <span class="string">&quot;Spark-2.0&quot;</span>:</span><br><span class="line">        domain = <span class="string">&quot;generalv2&quot;</span>  <span class="comment"># v2.0版本</span></span><br><span class="line">        Spark_url = <span class="string">&quot;wss://spark-api.xf-yun.com/v2.1/chat&quot;</span>  <span class="comment"># v2.0环境的地址</span></span><br><span class="line">    <span class="keyword">if</span> model == <span class="string">&quot;Spark-3.0&quot;</span>:</span><br><span class="line">        domain = <span class="string">&quot;generalv3&quot;</span>  <span class="comment"># v3.0版本</span></span><br><span class="line">        Spark_url = <span class="string">&quot;wss://spark-api.xf-yun.com/v3.1/chat&quot;</span>  <span class="comment"># v3.0环境的地址</span></span><br><span class="line">    <span class="keyword">if</span> model == <span class="string">&quot;Spark-3.5&quot;</span>:</span><br><span class="line">        domain = <span class="string">&quot;generalv3.5&quot;</span>  <span class="comment"># v3.5版本</span></span><br><span class="line">        Spark_url = <span class="string">&quot;wss://spark-api.xf-yun.com/v3.5/chat&quot;</span>  <span class="comment"># v3.5环境的地址</span></span><br><span class="line"></span><br><span class="line">    question = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;]</span><br><span class="line">    response = spark_main(appid, api_key, api_secret, Spark_url, domain, question, temperature, max_tokens)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ws_Param</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, APPID, APIKey, APISecret, Spark_url</span>):</span><br><span class="line">        self.APPID = APPID</span><br><span class="line">        self.APIKey = APIKey</span><br><span class="line">        self.APISecret = APISecret</span><br><span class="line">        self.host = urlparse(Spark_url).netloc</span><br><span class="line">        self.path = urlparse(Spark_url).path</span><br><span class="line">        self.Spark_url = Spark_url</span><br><span class="line">        <span class="comment"># 自定义</span></span><br><span class="line">        self.temperature = <span class="number">0</span></span><br><span class="line">        self.max_tokens = <span class="number">2048</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成url</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_url</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 生成RFC1123格式的时间戳</span></span><br><span class="line">        now = datetime.now()</span><br><span class="line">        date = format_date_time(mktime(now.timetuple()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拼接字符串</span></span><br><span class="line">        signature_origin = <span class="string">&quot;host: &quot;</span> + self.host + <span class="string">&quot;\n&quot;</span></span><br><span class="line">        signature_origin += <span class="string">&quot;date: &quot;</span> + date + <span class="string">&quot;\n&quot;</span></span><br><span class="line">        signature_origin += <span class="string">&quot;GET &quot;</span> + self.path + <span class="string">&quot; HTTP/1.1&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进行hmac-sha256进行加密</span></span><br><span class="line">        signature_sha = hmac.new(self.APISecret.encode(<span class="string">&#x27;utf-8&#x27;</span>), signature_origin.encode(<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">                                 digestmod=hashlib.sha256).digest()</span><br><span class="line"></span><br><span class="line">        signature_sha_base64 = base64.b64encode(signature_sha).decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        authorization_origin = <span class="string">f&#x27;api_key=&quot;<span class="subst">&#123;self.APIKey&#125;</span>&quot;, algorithm=&quot;hmac-sha256&quot;, headers=&quot;host date request-line&quot;, signature=&quot;<span class="subst">&#123;signature_sha_base64&#125;</span>&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">        authorization = base64.b64encode(authorization_origin.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将请求的鉴权参数组合为字典</span></span><br><span class="line">        v = &#123;</span><br><span class="line">            <span class="string">&quot;authorization&quot;</span>: authorization,</span><br><span class="line">            <span class="string">&quot;date&quot;</span>: date,</span><br><span class="line">            <span class="string">&quot;host&quot;</span>: self.host</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 拼接鉴权参数，生成url</span></span><br><span class="line">        url = self.Spark_url + <span class="string">&#x27;?&#x27;</span> + urlencode(v)</span><br><span class="line">        <span class="comment"># 此处打印出建立连接时候的url,参考本demo的时候可取消上方打印的注释，比对相同参数时生成的url与自己代码生成的url是否一致</span></span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 收到websocket错误的处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_error</span>(<span class="params">ws, error</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;### error:&quot;</span>, error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 收到websocket关闭的处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_close</span>(<span class="params">ws, one, two</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 收到websocket连接建立的处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_open</span>(<span class="params">ws</span>):</span><br><span class="line">    thread.start_new_thread(run, (ws,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">ws, *args</span>):</span><br><span class="line">    data = json.dumps(gen_params(appid=ws.appid, domain=ws.domain, question=ws.question, temperature=ws.temperature,</span><br><span class="line">                                 max_tokens=ws.max_tokens))</span><br><span class="line">    ws.send(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 收到websocket消息的处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">ws, message</span>):</span><br><span class="line">    <span class="comment"># print(message)</span></span><br><span class="line">    data = json.loads(message)</span><br><span class="line">    code = data[<span class="string">&#x27;header&#x27;</span>][<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> code != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;请求错误: <span class="subst">&#123;code&#125;</span>, <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line">        ws.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        choices = data[<span class="string">&quot;payload&quot;</span>][<span class="string">&quot;choices&quot;</span>]</span><br><span class="line">        status = choices[<span class="string">&quot;status&quot;</span>]</span><br><span class="line">        content = choices[<span class="string">&quot;text&quot;</span>][<span class="number">0</span>][<span class="string">&quot;content&quot;</span>]</span><br><span class="line">        <span class="built_in">print</span>(content, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">global</span> answer</span><br><span class="line">        answer += content</span><br><span class="line">        <span class="comment"># print(1)</span></span><br><span class="line">        <span class="keyword">if</span> status == <span class="number">2</span>:</span><br><span class="line">            ws.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_params</span>(<span class="params">appid, domain, question, temperature, max_tokens</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    通过appid和用户的提问来生成请参数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;header&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;app_id&quot;</span>: appid,</span><br><span class="line">            <span class="string">&quot;uid&quot;</span>: <span class="string">&quot;1234&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;chat&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;domain&quot;</span>: domain,</span><br><span class="line">                <span class="string">&quot;random_threshold&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">                <span class="string">&quot;max_tokens&quot;</span>: max_tokens,</span><br><span class="line">                <span class="string">&quot;temperature&quot;</span>: temperature,</span><br><span class="line">                <span class="string">&quot;auditing&quot;</span>: <span class="string">&quot;default&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;payload&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;text&quot;</span>: question</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spark_main</span>(<span class="params">appid, api_key, api_secret, Spark_url, domain, question, temperature, max_tokens</span>):</span><br><span class="line">    <span class="comment"># print(&quot;星火:&quot;)</span></span><br><span class="line">    output_queue = queue.Queue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">ws, message</span>):</span><br><span class="line">        data = json.loads(message)</span><br><span class="line">        code = data[<span class="string">&#x27;header&#x27;</span>][<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> code != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;请求错误: <span class="subst">&#123;code&#125;</span>, <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line">            ws.close()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            choices = data[<span class="string">&quot;payload&quot;</span>][<span class="string">&quot;choices&quot;</span>]</span><br><span class="line">            status = choices[<span class="string">&quot;status&quot;</span>]</span><br><span class="line">            content = choices[<span class="string">&quot;text&quot;</span>][<span class="number">0</span>][<span class="string">&quot;content&quot;</span>]</span><br><span class="line">            <span class="comment"># print(content, end=&#x27;&#x27;)</span></span><br><span class="line">            <span class="comment"># 将输出值放入队列</span></span><br><span class="line">            output_queue.put(content)</span><br><span class="line">            <span class="keyword">if</span> status == <span class="number">2</span>:</span><br><span class="line">                ws.close()</span><br><span class="line"></span><br><span class="line">    wsParam = Ws_Param(appid, api_key, api_secret, Spark_url)</span><br><span class="line">    websocket.enableTrace(<span class="literal">False</span>)</span><br><span class="line">    wsUrl = wsParam.create_url()</span><br><span class="line">    ws = websocket.WebSocketApp(wsUrl, on_message=on_message, on_error=on_error, on_close=on_close, on_open=on_open)</span><br><span class="line">    ws.appid = appid</span><br><span class="line">    ws.question = question</span><br><span class="line">    ws.domain = domain</span><br><span class="line">    ws.temperature = temperature</span><br><span class="line">    ws.max_tokens = max_tokens</span><br><span class="line">    ws.run_forever(sslopt=&#123;<span class="string">&quot;cert_reqs&quot;</span>: ssl.CERT_NONE&#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([output_queue.get() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(output_queue.qsize())])</span><br></pre></td></tr></table></figure><h3 id="智谱清言的ChartGLM（2024-08最新调用）"><a href="#智谱清言的ChartGLM（2024-08最新调用）" class="headerlink" title="智谱清言的ChartGLM（2024.08最新调用）"></a>智谱清言的ChartGLM（2024.08最新调用）</h3><p>官方API文档<a href="https://open.bigmodel.cn/dev/api">智谱AI开放平台 (bigmodel.cn)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> zhipuai <span class="keyword">import</span> ZhipuAI</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_completion_glm</span>(<span class="params">prompt: <span class="built_in">str</span>, model: <span class="built_in">str</span>, temperature: <span class="built_in">float</span>, api_key: <span class="built_in">str</span>, max_tokens: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="comment"># 判断是否传入api_key，如果没有传入，则从配置文件中解析</span></span><br><span class="line">    <span class="keyword">if</span> api_key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        api_key = parse_llm_api_key(<span class="string">&quot;zhipuai&quot;</span>)</span><br><span class="line">    <span class="comment"># 设置zhipuai的api_key，zhipuai是一个第三方库，用于简化API调用</span></span><br><span class="line">    client = ZhipuAI(api_key=api_key)  <span class="comment"># 填写您自己的APIKey</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用 client.chat.completions.create方法，传入模型名称、提示、温度系数和最大回复长度</span></span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=model,  <span class="comment"># 模型名称</span></span><br><span class="line">        messages=[</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;系统提示词&quot;</span>&#125;,</span><br><span class="line">        ],  <span class="comment"># 提示</span></span><br><span class="line">        temperature=temperature,  <span class="comment"># 温度系数</span></span><br><span class="line">        max_tokens=max_tokens  <span class="comment"># 最大回复长度</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从响应中提取回复内容，并去除首尾的引号和空格</span></span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取本地-env配置文件的api-key"><a href="#获取本地-env配置文件的api-key" class="headerlink" title="获取本地.env配置文件的api_key"></a>获取本地.env配置文件的api_key</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv, find_dotenv</span><br><span class="line"><span class="keyword">from</span> langchain.utils <span class="keyword">import</span> get_from_dict_or_env</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_llm_api_key</span>(<span class="params">model: <span class="built_in">str</span>, env_file: <span class="built_in">dict</span>(<span class="params"></span>) = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    通过 model 和 env_file 的来解析平台参数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> env_file <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        _ = load_dotenv(find_dotenv())</span><br><span class="line">        env_file = os.environ</span><br><span class="line">    <span class="keyword">if</span> model == <span class="string">&quot;openai&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> env_file[<span class="string">&quot;OPENAI_API_KEY&quot;</span>]</span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">&quot;wenxin&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> env_file[<span class="string">&quot;wenxin_api_key&quot;</span>], env_file[<span class="string">&quot;wenxin_secret_key&quot;</span>]</span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">&quot;spark&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> env_file[<span class="string">&quot;spark_api_key&quot;</span>], env_file[<span class="string">&quot;spark_appid&quot;</span>], env_file[<span class="string">&quot;spark_api_secret&quot;</span>]</span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">&quot;zhipuai&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> get_from_dict_or_env(env_file, <span class="string">&quot;zhipuai_api_key&quot;</span>, <span class="string">&quot;ZHIPUAI_API_KEY&quot;</span>)</span><br><span class="line">        <span class="comment"># return env_file[&quot;ZHIPUAI_API_KEY&quot;]</span></span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">&quot;qwen&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> env_file[<span class="string">&quot;QWEN_API_KEY&quot;</span>]</span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">&quot;hunyuan&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> env_file[<span class="string">&quot;hunyuan_secret_id&quot;</span>], env_file[<span class="string">&quot;hunyuan_secret_key&quot;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;model<span class="subst">&#123;model&#125;</span> not support!!!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文将以百度的文心一言，阿里巴巴的通义千问，科大讯飞的讯飞星火认知大模型，智谱清言的ChartGLM，腾讯的混元大模型，OpenAI的ChatGPT，这六个模型的api调用进行实战代码讲解。</summary>
    
    
    
    <category term="AI大模型" scheme="https://huaiyuechusan.gitee.io/categories/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
    
    <category term="大模型" scheme="https://huaiyuechusan.gitee.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="Python" scheme="https://huaiyuechusan.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>本地基于知识库的大模型的使用教程</title>
    <link href="https://huaiyuechusan.gitee.io/archives/9ac21f23.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/9ac21f23.html</id>
    <published>2024-05-02T15:37:00.000Z</published>
    <updated>2024-10-17T11:58:34.034Z</updated>
    
    <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="本地基于知识库的大模型的使用教程"><a href="#本地基于知识库的大模型的使用教程" class="headerlink" title="本地基于知识库的大模型的使用教程"></a>本地基于知识库的大模型的使用教程</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>双击 大模型启动.bat文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd /k &quot;cd /d G:\Anaconda3\Scripts &amp;&amp; activate.bat &amp;&amp; cd /d D:\docdb_llm &amp;&amp; conda activate python3.11 &amp;&amp; python startup.py --all-webui --model-name Qwen-1_8B-Chat</span><br></pre></td></tr></table></figure><p>参数解读</p><ol><li>—model-name：可以选择选择不同的模型，目前支持</li><li>—all-webui：启动webui界面。不需要修改</li></ol><h2 id="知识库管理"><a href="#知识库管理" class="headerlink" title="知识库管理"></a>知识库管理</h2><ol><li><p>选择对应的知识库</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202405022323621.png" alt="image-20240502230421574"></p></li><li><p>上传文件，大小最好不要超过20mb，否则显存不够。pdf最好是纯文本形式</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202405022323623.png" alt="image-20240502230526787"></p></li><li><p>输入知识库的介绍</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202405022323624.png" alt="image-20240502230600203"></p></li><li><p>单段文本最大长度：大模型每批次嵌入的文本大小，数值越大，消耗的显存越多。相邻文本重合长度：每相邻的两个文本段之间重合的部分，数值越大，两文本段语义关联程度越高。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202405022323625.png" alt="image-20240502230852809"></p></li><li><p>点击添加到知识库，文件添加到源码的knowledge_base/samples/content 文件夹下面。samples：对应的知识库名字。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202405022323626.png" alt="image-20240502230927191"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202405022323627.png" alt="image-20240502230955246"></p></li><li><p>选择一条文件，显示文档加载器列为空白，说明文档没有嵌入到向量数据库的，需要点击重新添加至向量数据库。从向量数据库删除：文件数据从量数据库中删除，但知识库的content目录下还有源文件。从知识库中删除：删除content下的源文件。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202405022323629.png" alt="image-20240502231206500"></p></li><li><p>如果第一次启动项目，之前没有知识库，推荐使用将需要上传的文件放入  知识库名称/content/ 下，点击从源文件重建数据库，即可将所有文件嵌入到向量数据库，文件多的化，运行时间会比较久（跟文件的质量也有关系，如果很多图片pdf需要orc，也会很占时间和显存）。以后每次添加新文件可以使用步骤6的方法。如果已有知识库，点击此按钮会将之前的所有文件重新向量化，比较耗时间。建议少量的添加文件使用步骤6。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202405022323630.png" alt="image-20240502231631098"></p></li><li><p>可视化修改知识库里的文件内容（如果orc识别的文件，可能会出现需要错误的问题，所以高质量的文档很重要）</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202405022323631.png" alt="image-20240502232241340"></p></li></ol><h2 id="大模型对话"><a href="#大模型对话" class="headerlink" title="大模型对话"></a>大模型对话</h2><p>参数解释：</p><ol><li>选择模型：可以切换模型</li><li>选择prompt模板，可以修改大模型指令。默认即可。</li><li>temperature：大模型回答的随机性，数值越大，回答的创造性（随机性）越高</li><li>历史对话轮数：数值越大，上下文关联的历史对话轮数越高，消耗的显存也高。</li><li>=择知识库：选择要问答的知识库</li><li>匹配知识条数：匹配的知识库内容个数，大模型将结合匹配的内容回答问题。数据越高，消耗的显存也高。</li><li>知识匹配分数阈值：用于确定两个知识实体是否匹配。默认1即可。</li></ol><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202405022333062.png" alt="image-20240502232345012"></p><h3 id="对话内容"><a href="#对话内容" class="headerlink" title="对话内容"></a>对话内容</h3><p>上面是对问题的回答，下面知识库匹配的结果是匹配到的知识库内容</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202405022333063.png" alt="image-20240502233232151"></p>]]></content>
    
    
    <summary type="html">本地基于知识库的大模型的使用教程</summary>
    
    
    
    <category term="AI大模型" scheme="https://huaiyuechusan.gitee.io/categories/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
    
    <category term="大模型" scheme="https://huaiyuechusan.gitee.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="Python" scheme="https://huaiyuechusan.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ShellScript脚本编程</title>
    <link href="https://huaiyuechusan.gitee.io/archives/d8093044.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/d8093044.html</id>
    <published>2024-02-03T13:28:00.000Z</published>
    <updated>2024-10-17T12:01:05.056Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="ShellScript脚本编程"><a href="#ShellScript脚本编程" class="headerlink" title="ShellScript脚本编程"></a>ShellScript脚本编程</h2><h3 id="Shell脚本入门"><a href="#Shell脚本入门" class="headerlink" title="Shell脚本入门"></a>Shell脚本入门</h3><h4 id="Shell是什么"><a href="#Shell是什么" class="headerlink" title="Shell是什么"></a>Shell是什么</h4><p>Shell英文是”壳”，Shell是一块包裹着系统核心的壳，处于操作系统的最外层。</p><p>Shell是一个用C语言编写的程序，它是用户使用Linux的桥梁。通过编写Shell命令发送给linuⅸ内核去执行，操作就是计算机硬件，所以Shell命令是用户操作计算机硬件的桥梁，Shell是命令，类似于Windows系统中的Dos命令。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221985.png" alt="image-20240118180308328"></p><p>同时它可以作为<strong>命令语言</strong>，它交互式解释和执行用户输入的命令或者自动地解释和执行预先设定好的一连串的命令；作为<strong>程序设计语言</strong>，它定义了各种变量和参数，并提供了许多在高级语言中才具有的控制结构，包括循环和分支。</p><p>为什么学习Shell脚本？</p><p>Shell脚本语言的好处是简单、易学、易用，适合处理文件和目录之类的对象，以简单的方式快速完成某些复杂的事情。通过Shell命令编程语言来提高Linux系统的管理工作效率。</p><h4 id="Shell的运行过程"><a href="#Shell的运行过程" class="headerlink" title="Shell的运行过程"></a>Shell的运行过程</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221986.png" alt="image-20240118180732072"></p><p>当用户下达指令给该操作系统的时候，时间上是把指令告诉shell,经过shell解释，处理后让内核做出相应的动作。系统的回应和输出的信息也由shl处理，然后显示在用户的屏幕上。</p><h4 id="Shell解析器"><a href="#Shell解析器" class="headerlink" title="Shell解析器"></a>Shell解析器</h4><p>查看linux系统centos支持的shell解析器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221987.png" alt="image-20240118180939827"></p><p>打印输出当前centos默认的解析器是bash语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221988.png" alt="image-20240118180949730"></p><blockquote><p>其中：</p><ul><li>echo：用于打印输出数据到终端</li><li>$SHELL：是全局共享的读取解析器类型环境变量，所有的Shell程序都可以读取的变量</li></ul></blockquote><h4 id="Shell编写格式与执行方式"><a href="#Shell编写格式与执行方式" class="headerlink" title="Shell编写格式与执行方式"></a>Shell编写格式与执行方式</h4><h5 id="脚本格式"><a href="#脚本格式" class="headerlink" title="脚本格式"></a>脚本格式</h5><ol><li><p>脚本文件后缀名规范</p><p>Shell脚本文件就是一个文本文件，后缀名建议使用.sh结尾。</p></li><li><p>首行格式规范</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br></pre></td></tr></table></figure><p> 设置当前Shell脚本文件采用bash解析器运行脚本代码</p></li><li><p>注释格式</p><p>单行注释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注释内容</span></span><br></pre></td></tr></table></figure><p>多行注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;!</span><br><span class="line"># 注释内容1 </span><br><span class="line"># 注释内容2</span><br><span class="line">!</span><br></pre></td></tr></table></figure></li></ol><h5 id="脚本文件执行的三种方式"><a href="#脚本文件执行的三种方式" class="headerlink" title="脚本文件执行的三种方式"></a>脚本文件执行的三种方式</h5><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221989.png" alt="image-20240118181812661"></p><p>添加权限：<code>chmod a+x helloworld.sh</code></p><p>三种方式的区别：sh或bash执行脚本文件方式是直接使用Shell解析器运行脚本文件，不需要可执行权限，仅路径方式是执行脚本文件自己，需要可执行权限。</p><h4 id="解释执行多个命令"><a href="#解释执行多个命令" class="headerlink" title="解释执行多个命令"></a>解释执行多个命令</h4><p>案例：执行test.sh脚本，实现在/root/bjsxt/目录下创建一个onetest..txt,在onetest.txt文件中增加内容”hello onetest shell”</p><p>实现步骤：</p><ol><li><p>使用<code>mkdir</code>创建/root/bjsxt目录</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221990.png" alt="image-20240118182403442"></p></li><li><p>创建脚本文件</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221991.png" alt="image-20240118182700294"></p></li><li><p>编写脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root/bjsxt/目录下创建onetest.txt文件</span></span><br><span class="line">touch /root/bjsxt/onetest.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在onetest.txt文件中写入内容</span></span><br><span class="line">echo &quot;Hello Shell&quot; &gt;&gt; /root/bjsxt/onetest.txt</span><br></pre></td></tr></table></figure></li><li><p>执行脚本文件使用cat命令查看文件内容</p><p>​    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221992.png" alt="image-20240118182745532"></p></li></ol><h3 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h3><p>变量用于存储管理运行在内存中的数据。</p><p>变量的类型</p><ol><li>系统环境变量</li><li>自定义变量</li><li>特殊符号变量</li></ol><h4 id="系统环境变量"><a href="#系统环境变量" class="headerlink" title="系统环境变量"></a>系统环境变量</h4><p>系统环境变量是系统提供的共享变量，是linux系统加载Shell的配置文件中定义的变量共享给所有的Shell程序使用。</p><h5 id="Shell的配置文件分类"><a href="#Shell的配置文件分类" class="headerlink" title="Shell的配置文件分类"></a>Shell的配置文件分类</h5><ol><li><p>全局配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/profile</span><br><span class="line">/etc/profile.d/*.sh</span><br><span class="line">/etc/bashrc</span><br></pre></td></tr></table></figure></li><li><p>个人配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当前用户/.bash_profile</span><br><span class="line">当前用户/.bashrc</span><br></pre></td></tr></table></figure><p>一般情况下，我们都是直接针对全局配置进行操作。</p></li></ol><h5 id="环境变量的分类"><a href="#环境变量的分类" class="headerlink" title="环境变量的分类"></a>环境变量的分类</h5><p>在Liux系统中，环境变量按照其作用范围不同大致可以分为系统级环境变量和用户级环境变量。</p><p>系统级环境变量：Shell环境加载全局配置文件中的变量共享给所有用户所有Shell程序使用，全局共享。</p><p>用户级环境变量：Shell环境加载个人配置文件中的变共享当前用户的Shell程序使用，登录用户使用。</p><h5 id="查看当前Shell系统环境变量"><a href="#查看当前Shell系统环境变量" class="headerlink" title="查看当前Shell系统环境变量"></a>查看当前Shell系统环境变量</h5><p>查看当前Shell系统环境变量，命令： <code>env</code></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221993.png" alt="image-20240118183913779"></p><h5 id="查看所有变量"><a href="#查看所有变量" class="headerlink" title="查看所有变量"></a>查看所有变量</h5><p>命令：<code>set</code></p><h5 id="常用系统环境变量"><a href="#常用系统环境变量" class="headerlink" title="常用系统环境变量"></a>常用系统环境变量</h5><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221994.png" alt="image-20240118184152132"></p><p>【示例】查看PATH环境变量</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221995.png" alt="image-20240118184326233"></p><h4 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h4><h5 id="自定义变量分类"><a href="#自定义变量分类" class="headerlink" title="自定义变量分类"></a>自定义变量分类</h5><ol><li>自定义局部变量</li><li>自定义常量</li><li>自定义全局变量</li></ol><h4 id="自定义局部变量"><a href="#自定义局部变量" class="headerlink" title="自定义局部变量"></a>自定义局部变量</h4><p>就是在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</p><h5 id="变量定义规则"><a href="#变量定义规则" class="headerlink" title="变量定义规则"></a>变量定义规则</h5><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线(_)。</li><li>不能使用Shell中的关键字作为变量名称。</li><li>在bash环境中，变量的默认类型都是字符串类型，无法直接进行数值运算。</li><li>变量的值如果有空格，必须使用双引号括起来。</li></ul><h5 id="定义变量语法"><a href="#定义变量语法" class="headerlink" title="定义变量语法"></a>定义变量语法</h5><p><code>变量名=变量值</code></p><p><strong>注意：==等号两边不能有空格==</strong></p><p>【示例】定义局部变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义变量</span></span><br><span class="line">a=10</span><br><span class="line">your_name=jack</span><br></pre></td></tr></table></figure><h5 id="查看变量"><a href="#查看变量" class="headerlink" title="查看变量"></a>查看变量</h5><p>查看变量的值方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法1：直接使用变量名查询</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">var_name</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法2：使用花括号</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;var_name&#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">区别：花括号方式适合拼接字符串</span></span><br></pre></td></tr></table></figure><h5 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h5><p>使用unset命令可以删除变量。语法：</p><p><code>unset variable_name</code></p><p>变量被删除后不能再次使用。unset命令不能删除只读变量。</p><h4 id="自定义全局变量"><a href="#自定义全局变量" class="headerlink" title="自定义全局变量"></a>自定义全局变量</h4><h5 id="父子Shell环境介绍"><a href="#父子Shell环境介绍" class="headerlink" title="父子Shell环境介绍"></a>父子Shell环境介绍</h5><p>例如：有2个Shell脚本文件A.sh和B.sh</p><p>如果在A.sh脚本文件中执行了B.sh脚本文件，那么A.sh就是父Shell环境，B.sh就是子Shell环境。</p><h5 id="自定义全局变量-1"><a href="#自定义全局变量-1" class="headerlink" title="自定义全局变量"></a>自定义全局变量</h5><p>就是在当前脚本文件中定义全局变量，这个全局变量可以在当前Shell环境与子Shell环境中都可以使用</p><p>语法：</p><p><code>export var_namel var_name2</code></p><p>测试全局变量在子Shell中是否用，在父Shel中是否可用</p><p>实现步骤：</p><ol><li><p>创建2个脚本文件test1.sh和test2.sh</p><p>​    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221996.png" alt="image-20240118185927713"></p></li><li><p>编辑test1.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义全局变量</span></span><br><span class="line">export a=100</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行test2.sh脚本文件</span></span><br><span class="line">sh test2.sh </span><br></pre></td></tr></table></figure></li><li><p>编辑test2.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出全局变量</span></span><br><span class="line">echo &quot;全局变量a的值：$a&quot;</span><br></pre></td></tr></table></figure></li></ol><h5 id="自定义系统环境变量"><a href="#自定义系统环境变量" class="headerlink" title="自定义系统环境变量"></a>自定义系统环境变量</h5><p>/etc/profile定义存储自定义系统级环境变量数据，当前用户进入Shell环境初始化的时候会加载全局配置文件/etc/profile里面的环境变量，供给所有Shell程序使用，以后只要是所有Shel‖程序或命令使用的变量，就可以定义在这个文件中。</p><p>创建环境变量步骤：</p><ol><li><p>编辑/etc/profile全局配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加命令：定义变量 VAR1=VAR1，并导出为环境变量</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>直接打开全局配置文件是在配置文件的最顶端，使用G可以快速到文件底部，gg重新回到文件的顶端。</p></li><li><p>重新加载置文件/etc/profile，因为配置文件修改后要立刻功加载里面的数据就需要重新加载，语法：</p><p><code>source /etc/profile</code></p></li><li><p>在Shell环境中读取系统级环境变量var1</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221997.png" alt="image-20240118211442150"></p></li></ol><h4 id="特殊符号变量"><a href="#特殊符号变量" class="headerlink" title="特殊符号变量"></a>特殊符号变量</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221998.png" alt="image-20240118211718305"></p><h5 id="特殊符号变量：-n"><a href="#特殊符号变量：-n" class="headerlink" title="特殊符号变量：$n"></a>特殊符号变量：<code>$n</code></h5><p><code>$n</code>：用于接收脚本文件执行时传入的参数，</p><p><code>$0</code>用于获取当前脚本文件名称。</p><p><code>$1</code>~<code>$9</code>代表获取第1个输入参数到第9个输入参数。</p><p>第10个以上参数获取参数的格式：<code>$&#123;数字&#125;</code>，否则无法获取。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试特殊符号变量 <span class="variable">$n</span></span></span><br><span class="line">echo &quot;脚本文件名： $0&quot;</span><br><span class="line">echo &quot;第一个参数： $1&quot;</span><br><span class="line">echo &quot;第二个参数： $2&quot;</span><br><span class="line">echo &quot;第三个参数： $3&quot;</span><br><span class="line">echo &quot;第九个参数： $9&quot;</span><br><span class="line">echo &quot;第十个参数： $10&quot;  # 参数有问题</span><br><span class="line">echo &quot;第十个参数： $&#123;10&#125;&quot;</span><br><span class="line">echo &quot;第11个参数： $&#123;11&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221999.png" alt="image-20240118212602737"></p><h5 id="特殊符号变量：-和"><a href="#特殊符号变量：-和" class="headerlink" title="特殊符号变量：$#和$*"></a>特殊符号变量：<code>$#</code>和<code>$*</code></h5><p><code>$#</code>是获取所有输入参数如的个数</p><p><code>$*(或$@)</code>：传递的参数作为一个字符串显示</p><p>【示例】<code>$#</code>和<code>$*</code>的使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试特殊符号变量 <span class="variable">$n</span></span></span><br><span class="line">echo &quot;脚本文件名： $0&quot;</span><br><span class="line">echo &quot;第一个参数： $1&quot;</span><br><span class="line">echo &quot;第二个参数： $2&quot;</span><br><span class="line">echo &quot;第三个参数： $3&quot;</span><br><span class="line">echo &quot;第九个参数： $9&quot;</span><br><span class="line">echo &quot;第十个参数： $10&quot;  # 参数有问题</span><br><span class="line">echo &quot;第十个参数： $&#123;10&#125;&quot;</span><br><span class="line">echo &quot;第11个参数： $&#123;11&#125;&quot;</span><br><span class="line">echo &quot;参数的个数： $#&quot;</span><br><span class="line">echo &quot;参数：$*&quot;</span><br><span class="line">echo &quot;参数：$@&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221000.png" alt="image-20240118213252605"></p><p><code>$*</code>与<code>$@</code>区别：</p><p>相同点：都是引用所有参数。</p><p>不同点：只有在双引号中体现出来。</p><p>​                <code>$*</code>获取的所有参数拼接为一个字符串，格式为：<code>&quot;$1 $2...$n&quot;</code></p><p>​                <code>$@</code>获取一组参数列表对像，格式为：<code>&quot;$1&quot; &quot;$2&quot;...&quot;$n&quot;</code></p><p>假设在脚本运行时写了三个参数1、2、3，则<code>$*</code>等价于<code>&quot;123&quot;</code>（传递了一个参数），而<code>$@</code>等价于<code>&quot;1&quot; &quot;2&quot; &quot;3&quot;</code>（传递了三个参数）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试$*与<span class="variable">$@</span>的区别</span></span><br><span class="line">for i in &quot;$*&quot;</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line">echo &quot;---------------&quot;</span><br><span class="line">for i in &quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221001.png" alt="image-20240118214241636"></p><h5 id="特殊符号变量-1"><a href="#特殊符号变量-1" class="headerlink" title="特殊符号变量$?"></a>特殊符号变量<code>$?</code></h5><p><code>$?</code>用于获取上一个Shell命令的退出码，或者是函数的返回值。</p><p>每个Shell命令的执行都有一个返回值，这个返回值用于说明命令执行是否成功。一般来说，返回0代表命令代表执行成功，非0代表执行失败。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">function test_add()&#123;</span><br><span class="line">echo &quot;调用函数&quot;</span><br><span class="line">return 10</span><br><span class="line">&#125;</span><br><span class="line">test_add</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221002.png" alt="image-20240118225919217"></p><h5 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号$$$$"></a>特殊符号$$$$</h5><p>$$$$:用于获取当前Shell环境的进程ID号。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221003.png" alt="image-20240119220128876"></p><h4 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h4><h5 id="字符串创建"><a href="#字符串创建" class="headerlink" title="字符串创建"></a>字符串创建</h5><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了)，字符串可以用<strong>单引号</strong>，也可以用双引号，也可以<strong>不用引号</strong>。</p><p>【示例】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建字符串使用单引号</span></span><br><span class="line">a=&#x27;aaaa&#x27;</span><br><span class="line">echo $a</span><br><span class="line">echo $&#123;a&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建字符串使用双引号</span></span><br><span class="line">b=&quot;bbb&quot;</span><br><span class="line">echo $b</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建字符串不使用引号</span></span><br><span class="line">c=ccc</span><br><span class="line">echo $c</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">d=aa bb</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$d</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意如果变量的值中间有空格，需要使用引号创建</span></span><br><span class="line">d=&quot;aa bb&quot;</span><br><span class="line">echo $d</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221004.png" alt="image-20240119220914783"></p><blockquote><p>三者区别：</p><ul><li><p>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；双引号里可以有变量</p></li><li><p>字符串中还可以出现双引号的子字符串，但是需要转义</p></li><li>不被引号包围的字符串中出现变量时也会被解析，这一点和双引号””包围的字符串一样。字符串中不能出现空格，否则空格后边的字符串会作为其他命令解析（直接输出没有问题，但不能赋值给其它变量)</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=&#x27;aaaa&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出字符串变量</span></span><br><span class="line">echo &#x27;hellosa&#x27;</span><br><span class="line">echo &quot;hello$a&quot;</span><br><span class="line">echo &quot;hello\&quot;$a\&quot;&quot;</span><br><span class="line">echo hello$a</span><br><span class="line">echo &quot;hello $a&quot;</span><br><span class="line">echo hello $a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋值给其他变量</span></span><br><span class="line">str1=&quot;hello$a&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">str1=hello <span class="variable">$a</span> <span class="comment"># 不允许</span></span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221005.png" alt="image-20240119221622482"></p><h5 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h5><p>获取字符串长度语法：</p><p><code>$&#123;#字符串变量名&#125;`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取字符串长度</span></span><br><span class="line">a=&quot;abc&quot;</span><br><span class="line">b=&quot;123456&quot;</span><br><span class="line">echo &quot;字符串变量a的值：$a, 长度：$&#123;#a&#125;&quot;</span><br><span class="line">echo &quot;字符串变量b的值：$&#123;b&#125;, 长度：$&#123;#b&#125;&quot;</span><br></pre></td></tr></table></figure>![image-20240119222044188](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221006.png)##### 字符串的拼接<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=&quot;jack&quot;</span><br><span class="line">age=22</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">无符号拼接</span></span><br><span class="line">str=$name$age</span><br><span class="line">echo $str</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">双引号拼接</span></span><br><span class="line">str=&quot;$name$age&quot;</span><br><span class="line">echo $str</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">混合拼接</span></span><br><span class="line">str=$name&#x27;,&#x27;$age</span><br><span class="line">echo $str</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字符串拼接中间有空格需要使用双号</span></span><br><span class="line">str=&quot;$name $age&quot;</span><br><span class="line">echo $str</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不支持，需要使用引号</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">str=<span class="variable">$name</span> <span class="variable">$age</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span>输出字符串中间可以有空格</span></span><br><span class="line">echo $name $age</span><br></pre></td></tr></table></figure>##### 截取字符串| 格式                     | 说明                                                         || ------------------------ | ------------------------------------------------------------ || $&#123;变量名:start:length&#125;   | 从string字符串的左边第start个字符开始，向右截取length个字符。<br/>start从0开始 || $&#123;变量名:start&#125;          | 从string字符串的左边第start个字符开始截取，直到最后          || $&#123;变量名:0-start:length&#125; | 从string字符串的右边第start个字符开始，向右截<br/>取length个字符，stat从1开始，代表右侧第一个字符 || $&#123;变量名:0-start&#125;        | 从string字符串的右边第start个字符开始截取，直到最后          || $&#123;变量名#*chars&#125;         | 从string字符串左边第一次出现`*chars`的位置开始，<br/>截取`*chars`右边的所有字符 || $&#123;变量名##*chars&#125;        | 从string字符串左边最后一次出现`*chars`的位置开<br/>始，截取`*chars`右边的所有字符 || # $&#123;变量名%chars*&#125;       | 从string字符串右边第一次出现`chars*`的位置开始，<br/>截取`chars*`左边的所有字符 || # $&#123;变量名%%chars*&#125;      | 从string字符串右边最后一次出现`chars*`的位置开<br/>始，截取`chars*`左边的所有字符 |<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">截取字符串 <span class="variable">$&#123;变量名:start:length&#125;</span></span></span><br><span class="line">str=&quot;abcdefgabc&quot;</span><br><span class="line">sub_str=$&#123;str:1:3&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名:start&#125;</span></span></span><br><span class="line">sub_str=$&#123;str:2&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名:0-start:length&#125;</span></span></span><br><span class="line">sub_str=$&#123;str:0-3:5&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名:0-start&#125;</span></span></span><br><span class="line">sub_str=$&#123;str:0-4&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名#*chars&#125;</span>   不包括第一次出现的chars</span></span><br><span class="line">sub_str=$&#123;str#*a&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名##*chars&#125;</span>  不包括最后一次出现的chars</span></span><br><span class="line">sub_str=$&#123;str##*a&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名%chars*&#125;</span>   不包括第一次出现的chars</span></span><br><span class="line">sub_str=$&#123;str%b*&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名%%chars*&#125;</span>  不包括最后一次出现的chars</span></span><br><span class="line">sub_str=$&#123;str%%b*&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br></pre></td></tr></table></figure>![image-20240119225130625](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192252351.png)#### 数组变量bash支持一维数组（不支持多维数组），并且没有限定数组的大小。类似于C语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。##### 定义数组在Shell中，用括号来表示数组，数组元素用"空格"符号分开。定义数组的一般形式为：`array_name=(value0 value1 value2 value3)`数组的值类型任意，个数不限可以不使用连续的下标，而且下标的范围没有限制。`array_name=([0]=value0 [3]=value3 [5]=value5)`##### 读取数组读取数组元素值的一般格式是：`$&#123;数组名[下标]&#125;`@或*获取数组中的所有元素`$(array_name[@])``$(array_name[*])`获取数组的长度或个数`$(#array_name[@])``$(#array_name[*]`获取数组指定元素的字符长度`$&#123;#array_name[索引]&#125;`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义数组</span></span><br><span class="line">arr1=(21 33 &quot;abc&quot; &#x27;123&#x27;)</span><br><span class="line">arr2=(1 2 3 4)</span><br><span class="line">arr3=([0]=10 [1]=20 [3]=30 [4]=40 [6]=60)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据下标获取数组元素的值</span></span><br><span class="line">echo &quot;获取arr1数组第1个元素的值：$&#123;arr1[0]&#125;&quot;</span><br><span class="line">echo &quot;获取arr3数组第7个元素的值：$&#123;arr3[6]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组中的所有元素</span></span><br><span class="line">echo &quot;获取arr1数组中的所有元素：$&#123;arr1[@]&#125;&quot;</span><br><span class="line">echo &quot;获取arr2数组中的所有元素：$&#123;arr2[*]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组的长度</span></span><br><span class="line">echo &quot;获取arr1数组的长度：$&#123;#arr1[@]&#125;&quot;</span><br><span class="line">echo &quot;获取arr2数组的长度：$&#123;#arr2[*]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组指定元素的字符长度</span></span><br><span class="line">echo &quot;获取arr1数组中第4个元素的长度：$&#123;#arr1[3]&#125;&quot;</span><br></pre></td></tr></table></figure>##### 数组拼接所谓的数组拼接就是将两个数组连接成一个数组。语法：使用`@`和`*`获取数组所有元素之后进行拼接。`new_array=($&#123;array1[@]&#125; $&#123;array2[@]&#125; ...)``new_array=($&#123;array1[*])&#125; $&#123;array2[*]&#125; ...)`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义数组</span></span><br><span class="line">arr1=(1 2 3 4 5 6)</span><br><span class="line">arr2=(a b c d e f g)</span><br><span class="line">echo &quot;输出数组中所有元素：&quot;</span><br><span class="line">echo &quot;arr1数组中的所有元素：$&#123;arr1[@]&#125;&quot;</span><br><span class="line">echo &quot;arr2数组中的所有元素：$&#123;arr2[*]&#125;&quot;</span><br><span class="line">echo &quot;数组的拼接：&quot;</span><br><span class="line">new_arr=($&#123;arr1[@]&#125; $&#123;arr2[*]&#125;)</span><br><span class="line">echo &quot;拼接后数组：$&#123;new_arr[*]&#125;&quot;</span><br></pre></td></tr></table></figure>##### 数组删除删除数组可以删哪除数组中指定元素，也可以删除整个数组。删除数组中指定元素语法格式：`unset array_name[index]`删除整个数组`unset array_name`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义数组</span></span><br><span class="line">arr1=(1 2 3 4 5 6)</span><br><span class="line">arr2=(a b c d e f g)</span><br><span class="line">echo &quot;输出数组中所有元素：&quot;</span><br><span class="line">echo &quot;arr1数组中的所有元素：$&#123;arr1[@]&#125;&quot;</span><br><span class="line">echo &quot;arr2数组中的所有元素：$&#123;arr2[*]&#125;&quot;</span><br><span class="line">echo &quot;数组元素的删除：&quot;</span><br><span class="line">unset arr1[0] </span><br><span class="line">echo &quot;删除后输出arr1中的所有元素：$&#123;arr1[@]&#125;&quot;</span><br><span class="line">echo &quot;数组的删除：&quot;</span><br><span class="line">unset arr2</span><br><span class="line">echo &quot;删除arr2数组后：$&#123;arr2[*]&#125;&quot;</span><br></pre></td></tr></table></figure>### Shell内置命令#### 内置命令介绍Shell内置命令，就是由Bash Shell自身提供的命令，而不是文件系统的可执行脚本文件。使用type来确定一个命令是否是内置命令：`type 命令`![image-20240122235544837](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401231733980.png)由此可见，cd是一个Shell内建命令，而ifconfig是一个外部文件，它的位置是/sbin/ifconfig。通常来说，内置命令会比外部命令执行得更快，执行外部命令时不但会触发磁盘I/O还需要开启一个单独的进程来执行，执行完成后再退出。而执行内置命令相当于调用当前Shell进程的一个函数，还是在当前Shell环境进程内，减少了上下文切换。Bash Shell中常用的内建命令![image-20240122235750440](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401231733981.png)#### alias：给命令创建别名alisa用来给命令创建一个别名。若直接输入该命令且不带任何参数，则列出当前Shell进程中使用了哪些别名。![image-20240122235920906](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401231733982.png)##### 使用alias命令自定义别名使用alias命令自定义别名的语法格式为：`alias 别名='命令'`设置查看进程的别名<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias pslist=&#x27;ps -aux&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这样使用pslist和输入ps-aux可以达到同样的效果</span></span><br></pre></td></tr></table></figure> 删除别名<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unalias pslist </span><br></pre></td></tr></table></figure>#### echo命令：输出字符串echo是一个Shell内建命令，用来在终端输出字符串，并在最后**默认加上换行符**。#####  echo不换行输出echo命令输出结束后默认会换行，如果不希望换行，可以加上`-n`参数。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo -n &quot;echo不换行输出测试&quot;</span><br></pre></td></tr></table></figure>##### -e参数默认情况下，echo不会解析以反斜杠开头的转义字符。比如，\n表示换行，echo默认会将它作为普通字符对待。![image-20240123171639483](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401231733983.png)#### read命令：读取从键盘输入的数据read是Shell内置命令，用来从标准输入中读取数据并赋值给变量。如果没有进行重定向，默认就是从键盘读取用户输入的数据；如果进行了重定向，那么可以从文件中读取数据。read命令的用法为：  `read [-options] [variables]`options表示选项，如下表所示；variables表示用来存储数据的变量，可以有一个，也可以有多个。options和variables都是可选的，如果没有提供变量名，那么读取的数据将存放到环境变量REPLY。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试<span class="built_in">read</span>内置命令的使用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不指定选项及变量</span></span><br><span class="line">read</span><br><span class="line">echo &quot;没有指定变量获取值：$REPLY&quot;</span><br><span class="line">read a</span><br><span class="line">echo &quot;指定变量获取值：$a&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加选项 -p</span></span><br><span class="line">read -p &quot;请输入姓名：&quot; name</span><br><span class="line">read -p &quot;请输入年龄：&quot; age</span><br><span class="line">echo &quot;姓名：$name, 年龄：$age&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">read</span> 参数 -n num</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取两个字符</span></span><br><span class="line">read -n 2 -p &quot;获取输入字符串&quot; str</span><br><span class="line">echo &quot;读取输入内容：$str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">read</span> 参数 -s</span></span><br><span class="line">read -sp &quot;请输入密码：&quot; password</span><br><span class="line">read -sp &quot;请输入确认密码：&quot; repassword</span><br><span class="line">echo &quot;密码：$password， 确认密码：$repassword&quot;</span><br><span class="line">if [ $password == $repassword ]</span><br><span class="line">then</span><br><span class="line">echo &quot;密码和确认密码一致&quot;</span><br><span class="line">else </span><br><span class="line">echo &quot;密码和确认密码不一致&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">read</span> 参数 -t</span></span><br><span class="line">read -t 5 -p &quot;输入有时间限制，请在5秒内输入：&quot; str</span><br><span class="line">echo &quot;输入内容：$str&quot;</span><br></pre></td></tr></table></figure>read命令支持的选项及options支持的参数![image-20240123172315834](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401231733984.png)![image-20240123173256121](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401231733985.png)#### exit命令exit是一个Shell内置命令，用来退出当前Shell进程，并返回一个退出状态；使用`$?`可以接收这个退出状态。exit命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是0。exit退出状态只能是一个介于0~255之间的整数，其中只有0表示成功，其它值都表示失败。【示例】Shell脚本文件中使用exit退出<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;exit命令示例&quot;</span><br><span class="line">exit 3</span><br><span class="line">echo &quot;hello exit命令&quot;</span><br></pre></td></tr></table></figure>#### declare命令declare命令的用法如下所示：`declare [+/-] [aAirfx] [变量名=变量值]`其中，-表示设置属性，+表示取消属性，aAifⅸ都是具体的选项，它们的含义如下表所示：![image-20240123180532149](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132996.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试 + -</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置一个整数变量</span></span><br><span class="line">declare -i age=20</span><br><span class="line">echo &quot;整数变量：$age&quot;</span><br><span class="line">age=aaa</span><br><span class="line">echo &quot;整数变量age: $age&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消变量设置</span></span><br><span class="line">declare +i age</span><br><span class="line">age=bbbb</span><br><span class="line">echo &quot;取消age设置后age的值: $age&quot;</span><br><span class="line">设置只读变量</span><br><span class="line">declare -r pi=3.14</span><br><span class="line">echo &quot;只读变量pi的值：$pi&quot;</span><br><span class="line">p1=3.3333</span><br><span class="line">echo &quot;只读变量pi的值：$pi&quot;</span><br></pre></td></tr></table></figure>![image-20240123194411183](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132997.png)实现key-value关联数组变量语法关联数组也称为"键值对(key-value)"数组，键(key）也即字符串形式的数组下标，值(value)也即元素值。`declare -A 关联数组变量名=([字符串key1]=值1 [字符串key2]=值2 ...)`declare也可以用于定义普通索引数组，`-a`参数创建普通或索数组 `-A`创建关联数组。`declare -a 普通数组变量名=(值1 值2 ...）``declare -a 普通数组变量名=([0]=值1 [1]=值2 ...)` 获取指定key的值`$&#123;关联数组变量名[key]&#125;`获取所有值`$&#123;关联数组变量名[*]&#125;``$&#123;关联数组变量名[@]&#125;`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建普通数组</span></span><br><span class="line">declare -a arr1=(10 20 30 &quot;abc&quot;)</span><br><span class="line">declare -a arr2=([0]=&quot;baizhan&quot; [2]=a [3]=10 [7]=70)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组元素</span></span><br><span class="line">echo &quot;数组arr1中第2个元素：$&#123;arr1[1]&#125;&quot;</span><br><span class="line">echo &quot;数组arr2中第8个元素：$&#123;arr2[7]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组中所有元素</span></span><br><span class="line">echo &quot;数组arr1中所有的元素：$&#123;arr1[*]&#125;&quot;</span><br><span class="line">echo &quot;数组arr2中所有的元素：$&#123;arr2[@]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建关联数组</span></span><br><span class="line">declare -A arr1=([&quot;aa&quot;]=10 [&quot;bb&quot;]=20 [&quot;cc&quot;]=30)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取关联数组的值</span></span><br><span class="line">echo &quot;获取关联数组的值；$&#123;arr1[&quot;aa&quot;]&#125;&quot;</span><br><span class="line">echo &quot;获取关联数组的值：$&#123;arr1[&quot;cc&quot;]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取关联数组的所有元素</span></span><br><span class="line">echo &quot;数组中所有元素的值：$&#123;arr1[*]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组的长度</span></span><br><span class="line">echo &quot;数组的长度：$&#123;#arr1[*]&#125;&quot;</span><br></pre></td></tr></table></figure>###  Shell运算符Shell和其他编程语言一样，支持多种运算符，包括：- 算数运算符- 关系运算符- 逻辑运算符- 文件测试运算符原生bash不支持简单的数学运算，需要通过其他命令来实现，如eXpr。expr是evaluate expressions的缩写，译为"求值表达式”。Shell expr是一个功能强大，并且比较复杂的命令，它除了可以实现整数计算，还可以结合一些选对字符串进行处理，例如计算字符串长度、字符串比较、字符串匹配、字符串提取等。expr语法：`expr 算术运算符表达式`获取计算结果赋值给新变量语法：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result=`expr 算术运算符表达式`</span><br></pre></td></tr></table></figure>注意：这里不是单引号是**反引号**。运算表达式运算符两边必须要有空格。运算不能是小数远算必须是整数运算。`expr 10 + 10`#### 算数运算符![image-20240123204527943](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132998.png)![image-20240123204603888](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132999.png) 注意：条件表达式要放在方括号之间，并且要有空格，例如：`[$a==$b]`是错误的，必须写成`[ $a == $b ]`。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试算术运算符</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入两个整数</span></span><br><span class="line">read -p &quot;请输入第一个数：&quot; a</span><br><span class="line">read -p &quot;请输入第二个数：&quot; b</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出输入的值</span></span><br><span class="line">echo &quot;a:$a, b:$b&quot;</span><br><span class="line">result=`expr $a + $b`</span><br><span class="line">echo &quot;加法的结果：$result&quot;</span><br><span class="line">result=`expr $a - $b`</span><br><span class="line">echo &quot;减法的结果：$result&quot;</span><br><span class="line">result=`expr $a \* $b`</span><br><span class="line">echo &quot;乘法的结果：$result&quot;</span><br><span class="line">result=`expr $a / $b`</span><br><span class="line">echo &quot;除法的结果：$result&quot;</span><br><span class="line">result=`expr $a % $b`</span><br><span class="line">echo &quot;取余的结果：$result&quot;</span><br></pre></td></tr></table></figure>#### 比较运算符##### 整数处比较运算符假定变量a为10，变量b为20：![image-20240123205455324](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132000.png)![image-20240123205538603](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132001.png)##### 字符串比较运算符字符串比较运算符可以比较2个变量，变量的类型可以为**数字（整数，小数）与字符串**。下表列出了常用的字符串运算符，假定变量a为"abc",变量b为"efg"。字符串比较可以使用`[[]]`和`[]`2种方式。![image-20240123212219672](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132002.png)![image-20240123212426794](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132003.png)字符串比较没有`<=`可以通过`[[ "a" < "b" || "a" == "b"]]``[[]]`和`[]`的区别由于(())只能比较整数，不能比较小数和字符串所以不建议使用。区别1：`[]`会产生单词分隔现象，`[[]]`不会产生单词分隔![image-20240123212926474](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132004.png)区别2：`[]`需要对`>`和`<`进行转义![image-20240123213033152](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132005.png)#### 布尔运算符下表列出了常用的布尔运算符，假定变量a为10，变量b为20：![image-20240124223257317](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848212.png)![image-20240124223316183](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848213.png):warning:注意：布尔运算符必须放在`[]`或与test命令配合使用才有效![image-20240124223408186](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848214.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">布尔运算符使用到<span class="keyword">if</span>条件中</span></span><br><span class="line">if [ ! $a \&gt; $b ]</span><br><span class="line">then</span><br><span class="line">echo &quot;a变量的值小于等于b&quot;</span><br><span class="line">else </span><br><span class="line">echo &quot;a变量的值大于b&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">str=&quot;abc&quot;</span><br><span class="line">if [ $str -o 1 == 2 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;条件成立&quot;</span><br><span class="line">else </span><br><span class="line">echo &quot;条件不成立&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $str -a 1 == 2 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;条件成立&quot;</span><br><span class="line">else </span><br><span class="line">echo &quot;条件不成立&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>#### 逻辑运算符假定变量a为10，变量b为20：![image-20240128171756753](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848215.png)![image-20240128171816913](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848216.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=100</span><br><span class="line">b=200</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">布尔运算符 [] ！-o -a</span></span><br><span class="line">if [ $a \&lt; $b -o 10 == 100 ]</span><br><span class="line">then</span><br><span class="line">echo&quot;布尔运算符：条件成立”</span><br><span class="line">else</span><br><span class="line">echo&quot;布尔运算符：条件不成立&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">逻辑运算符[[]]</span></span><br><span class="line">if [[ $a -lt $b || 10 == 100 ]]</span><br><span class="line">then</span><br><span class="line">echo&quot;逻辑运算符条件成立&quot;</span><br><span class="line">else</span><br><span class="line">echo&quot;逻辑运算符条件不成立&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>#### 文件测试运算符文件测试运算符用于检查文件，如检查文件是否存在、是否可读、是否可执行、是否为空、是否可写、是否是目录、是否是普通文件。属性检测描述如下：![image-20240128172831527](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848217.png)![image-20240128172923850](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848218.png)![image-20240128173005607](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848219.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件测试运算符</span></span><br><span class="line">file=/root/test_shell/test_suanshu.sh</span><br><span class="line">if [ -e $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件存在&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不存在&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断文件是普通文件吗</span></span><br><span class="line">if [ -f $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件是普通文件&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不是普通文件&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断文件是目录吗</span></span><br><span class="line">if [ -d $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件是目录&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不是目录&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断文件是否为空</span></span><br><span class="line">if [ -s $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件不为空&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件为空&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断文件是否可读 可写 可执行</span></span><br><span class="line">if [-r $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件可读&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不可读”</span><br><span class="line">fi</span><br><span class="line">if [ -w $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件可写&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不可写&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -x $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件可执行&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不可执行&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>### 计算命令要想让数学计算发挥作用，必须使用数学计算命令，shell中常用的数学计算命令如下表所示。![image-20240128175037025](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848220.png)#### expr命令##### expr用于求表达式的值语法：`expr 算术运算符表达式`【示例】expr求表达式的值![image-20240128175253188](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848221.png)【示例】expr表达式的值赋给变量![image-20240128175346258](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848222.png)##### expr在字符串中的使用**计算字符串的长度**`expr length 字符串`【示例】计算字符串的长度![image-20240128175540534](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848223.png)**截取字符串**`expr substr 字符串 start len`start：截取字符串的起始位置，从1开始len：截取字符串的个数![image-20240128175807487](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848224.png)**获取第一个字符在字符串中出现的位置**`expr index 被查找字符串 需要查找的字符`【示例】获取第一个字符在字符串中出现的位置![image-20240128175925474](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848225.png)**正则表达式匹配语法1**`expr match 字符串 正则表达式`返回值为符合匹配字符串的长度，否则返回为0【示例】正则表达式匹配语法1![image-20240128180043255](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848226.png)**正则表达式匹配语法2**`expr 字符串 : 正则表达式`返回值为符合匹配字符串的长度，否则返回为0【示例】正则表达式匹配语法2![image-20240128180147291](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848227.png)#### (())命令能够使用`(())`进行**整数**的数学运算。将数学运算表达式放到`((`和`))`之间，可以使用`$`获取`(())`表达式命令的结果，这和使用`$`获得变量值是一样的。语法：`((表达式))`用法：![image-20240128180640310](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848228.png)![image-20240128180919201](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848229.png)![image-20240128181502042](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848230.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(())命令的使用</span></span><br><span class="line">((a=10+20))</span><br><span class="line">((b=a-10))</span><br><span class="line">((c=a+b))I</span><br><span class="line">echo &quot;a=$a,b=$b,c=$c&quot;</span><br><span class="line"></span><br><span class="line">a=$((10+20))</span><br><span class="line">b=$((a-10))</span><br><span class="line">c=$((a+b))</span><br><span class="line">echo &quot;a=$a,b=$b,c=$c&quot;</span><br><span class="line"></span><br><span class="line">if ((a&gt;10 &amp;&amp; a==c))</span><br><span class="line">then</span><br><span class="line">echo &quot;a&gt;10 &amp;&amp; a==c&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;不成立&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo $((100+100))</span><br><span class="line">((a=10+20,b=a-10,c=a+b))</span><br><span class="line">echo &quot;a=$a,b=$b,c=$c&quot;</span><br></pre></td></tr></table></figure>==注意：符号之间有无空格都可以，((a = 1 + 2))等价于((a=1+2))==#### let命令能够使用let进行整数的数学运算赋值。let命令和双小括`(())`在数字计算方面功能一样，但是没有`(())`功能强大，**let只能用于赋值计算，不能直接输出，不可以条件判断。**语法：`let 赋值表达式`多个表达式赋值语法：`let 变量名1=值1 变量名2=值2 …`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">let</span>命令的使用</span></span><br><span class="line">let a=10+20</span><br><span class="line">let b=a-10</span><br><span class="line">let c=a+b</span><br><span class="line">echo &quot;a=$a,b=$b,c=$c&quot;</span><br><span class="line">echo&quot;a=$&#123;a&#125;,b=$&#123;b&#125;,c=$&#123;c&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">let</span>命令用于多个赋值表达式</span></span><br><span class="line">let a=10+20 b=a-10 c=a+b</span><br><span class="line">echo &quot;a=$a,b=$b,c=$c&quot;</span><br></pre></td></tr></table></figure>#### $[]命令和`(())`和Iet命令类似，`$[]`也只能进行整数运算，但是只能对==单个表达式==的计算求值与输出。语法：`$[表达式]`1. `$[]`会对表达式进行计算，并取得计算结果2. 表达式内部不可以赋值给变量<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=$[10+20]</span><br><span class="line">b=$[a-10]</span><br><span class="line">c=$[a+b]</span><br><span class="line">echo &quot;a=$a,b=$b,c=$c&quot;</span><br></pre></td></tr></table></figure>**执行整数表达式命令总结：**![image-20240128184037358](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848231.png)#### bc命令Bash shell内置了对整数运算的支持，但是并不支持浮点运算，而linux bc命令可以很方便的进行**浮点运算**。bc命令是Liux简单的计算器，能进行进制转换与计算。能转换的进制包括十六进制、十进制、八进制、二进制等。可以使用的运算符号包括(+)加法、(-)减法、(*)乘法、(/)除法、(^)指数、(%)余数等。语法：`bc [options] [参数]`options选项![image-20240128184322212](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848232.png)默认使用bc命令后回车会有很多欢迎信息，可以使用`bc -q`回车后不会有欢迎信息。![image-20240128184440963](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848234.png)##### 基本使用![image-20240128184534981](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281851111.png)【示例】**bc命令执行计算任务的文件**创建一个文件test task.txt<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">108*67+123456</span><br><span class="line">58+2008*11</span><br><span class="line">3.14*43+187.23</span><br></pre></td></tr></table></figure>执行任务文件计算每行表达式的值`bc -q test_task.txt`##### 内置变量的使用![image-20240128184602906](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848236.png)![image-20240128184805504](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848237.png)![image-20240128184850023](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848238.png)##### 内置数学函数的使用内置数学函数![image-20240128185226330](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218209.png)![image-20240128185323846](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218210.png)【示例】bc中内置的数学函数的使用使用内置函数时必须使用`bc -ql`![image-20240128185419073](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218211.png)##### 非互动式的运算**直接进行bc的表达式计算输出**`echo "expression" | bc [options]`expression：表达式必须符合bc命令要求的公式​表达式里面可以引用shell变量例如：shell变量a=2在表达式里面引用的语法：$a【示例】bc中非互动式的运算![image-20240128185708958](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218213.png)![image-20240128185809295](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218214.png)##### 将bc计算的结果赋值给shell变量语法格式：#第一种方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var name=`echo &quot;expression&quot; | bc [options]`</span><br></pre></td></tr></table></figure>#第二种方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var name=$(echo &quot;expression&quot; | bc [options])</span><br></pre></td></tr></table></figure>`$()`与``功能一样，都是执行里面的命令区别：``是所有linux系统支持的方式，兼容性较好，但是容易与引号产生混淆。`$()`不是所有linux系统都支持的方式。兼容性较差，但是不容易产生混淆。【示例】将bc计算的结果赋值给shell变量![image-20240128191808459](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218215.png)##### 非互动式的输入重定向运算将计算表达式输出给bc去执行，特点类似于文件中输入，可以输入多行表达式。更加清晰。语法：#第一种方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var name=`bc [options] &lt;&lt;EOF</span><br><span class="line">第一行表达式</span><br><span class="line">第二行表达式</span><br><span class="line">...</span><br><span class="line">EOF</span><br><span class="line">`</span><br></pre></td></tr></table></figure>#第二种方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var name=$(bc [options] &lt;&lt;EOF</span><br><span class="line">第一行表达式</span><br><span class="line">第二行表达式</span><br><span class="line">...</span><br><span class="line">EOF</span><br><span class="line">)</span><br></pre></td></tr></table></figure>var name这里Shell变量的名字bc执行bc的命令EOF..EOF输入流的多行表达式含义：将EOF中间多行表达式输入给到bc去执行，将bc执行的结果赋值shel变量【示例】Shell中非互动式的输入重定向运算![image-20240128192040807](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218216.png)### 流程控制语句#### 条件if语句##### if语句语法格式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">... </span><br><span class="line">commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>写成一行（适用于终端命令提示符）：`if 条件;then 命令;fi`【示例】判断num的值是否是10<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试<span class="keyword">if</span>单分支</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">键盘输入一个数num</span></span><br><span class="line">read -p &quot;请输入一个数：&quot; num</span><br><span class="line">if ((num==10))</span><br><span class="line">then</span><br><span class="line">echo&quot;您输入的数是10&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>##### if else语句语法格式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">commadd1</span><br><span class="line">command2</span><br><span class="line">...</span><br><span class="line">commandN</span><br><span class="line">else</span><br><span class="line">command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>写成一行（适用于终端命令提示符）：`if 条件;then 命令;else 命令;fi`【示例】输入年龄判断是否成人<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试<span class="keyword">if</span> <span class="keyword">else</span></span></span><br><span class="line">read -p&quot;请输入年龄：&quot;age</span><br><span class="line">if ((age&gt;=18))</span><br><span class="line">then</span><br><span class="line">echo &quot;成年&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;未成年&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>##### if else-if else语法格式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">command1</span><br><span class="line">elif codition2</span><br><span class="line">then</span><br><span class="line">command2</span><br><span class="line">else</span><br><span class="line">commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>【示例】输入成绩判断成绩等级<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试<span class="keyword">if</span> <span class="keyword">elif</span> <span class="keyword">else</span> 多分支结构</span></span><br><span class="line">read -p &quot;请输入成绩：&quot; score</span><br><span class="line">if ((score&gt;=90))</span><br><span class="line">then</span><br><span class="line">echo &quot;成绩等级为A&quot;</span><br><span class="line">elif ((score&gt;=80))</span><br><span class="line">then</span><br><span class="line">echo &quot;成绩等级为B&quot;</span><br><span class="line">elif ((score&gt;=70))</span><br><span class="line">then</span><br><span class="line">echo &quot;成绩等级为C”</span><br><span class="line">elif ((score&gt;=60))</span><br><span class="line">then</span><br><span class="line">echo &quot;成绩及格&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;成绩不及格&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>【示例】根据输入的值判断是周几。如输入1输出”周一“<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p&quot;请输入一个数(1-7)：&quot; num</span><br><span class="line">if [[ $num == 1 ]]</span><br><span class="line">then</span><br><span class="line">echo &quot;周一&quot;</span><br><span class="line">elif [[ $num == 2 ]]</span><br><span class="line">then</span><br><span class="line">echo &quot;周二&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>##### 选择嵌套语法格式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if [ condition1 ];then</span><br><span class="line">command1</span><br><span class="line">if [ condition2 ];then</span><br><span class="line">command2</span><br><span class="line">fi</span><br><span class="line">else</span><br><span class="line">if [ condition3 ];then</span><br><span class="line">command3</span><br><span class="line">elif [ condition4 ];then</span><br><span class="line">command4</span><br><span class="line">else</span><br><span class="line">command5</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>【示例】输入成绩输出成绩的等级<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span>条件语句嵌套</span></span><br><span class="line">read -p &quot;请输入成绩：&quot; score</span><br><span class="line">if ((score&gt;0 &amp;&amp; score&lt;=100))</span><br><span class="line">then</span><br><span class="line">echo &quot;输入的成绩是正确的&quot;</span><br><span class="line">    if ((score&gt;=90))</span><br><span class="line">    then</span><br><span class="line">    echo &quot;成绩的等级为A&quot;</span><br><span class="line">    elif ((score&gt;=80))</span><br><span class="line">    then</span><br><span class="line">    echo &quot;成绩的等级为B&quot;</span><br><span class="line">    elif ((score&gt;=70)】</span><br><span class="line">    then</span><br><span class="line">    echo &quot;成绩的等级为C&quot;</span><br><span class="line">    elif ((score&gt;=60)】</span><br><span class="line">    then</span><br><span class="line">    echo &quot;及格&quot;</span><br><span class="line">    else</span><br><span class="line">    echo &quot;不及格&quot;</span><br><span class="line">    fi</span><br><span class="line">else</span><br><span class="line">echo &quot;偷入的成绩不正确”</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>#### 内置命令testShell中test命令用于检查某个条件是否成立，它可以进行数值、字符串和文件三个方面的测试。功能和一样。##### 整数比较测试整数比较语法<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if test 数字1 options 数字2</span><br><span class="line">then</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>options具体如下：![image-20240129212756654](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218217.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">test</span>命令检查整数</span></span><br><span class="line">num1=100</span><br><span class="line">num2=200</span><br><span class="line">if test $numl -lt $num2</span><br><span class="line">then</span><br><span class="line">echo &quot;num1小于num2&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;num1不小于num2&quot;</span><br><span class="line">fi</span><br><span class="line">num3=200</span><br><span class="line">if test $num2 -eq $num3</span><br><span class="line">then</span><br><span class="line">echo &quot;num2和num3相等&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a -o</span></span><br><span class="line">if test $num1 -lt $num2 -a $num2 -eq $num3</span><br><span class="line">then</span><br><span class="line">echo &quot;两个条件成立&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;两个条件不成立&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>#####  字符串比较测试![image-20240129213552217](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218218.png)![image-20240129213616548](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218219.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">test</span>命令检查字符串</span></span><br><span class="line">str1=&quot;hello&quot;</span><br><span class="line">if test -z $str1</span><br><span class="line">then</span><br><span class="line">echo &quot;str1为空&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;str1不为空&quot;</span><br><span class="line">fi</span><br><span class="line">if test $str1</span><br><span class="line">then</span><br><span class="line">echo &quot;str1不为空&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;str1为空&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">str2=&quot;world&quot;</span><br><span class="line">if test $strl = $str2</span><br><span class="line">then</span><br><span class="line">echo &quot;str1和str2相等&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;不相等&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多条件</span></span><br><span class="line">if test $strl -o 1 -eq 1</span><br><span class="line">then</span><br><span class="line">echo &quot;条件成立&quot;</span><br><span class="line">fi</span><br><span class="line">if test $strl -a 10 -eq 1</span><br><span class="line">then</span><br><span class="line">echo &quot;条件成立&quot;</span><br><span class="line">else </span><br><span class="line">echo &quot;条件不成立&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>##### 文件测试![image-20240129214204828](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218220.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">test</span>检查文件</span></span><br><span class="line">file=&quot;/root/test_shell/test_test1.sh&quot;</span><br><span class="line">if test -e $file</span><br><span class="line">then</span><br><span class="line">echo &quot;文件存在&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不存在”</span><br><span class="line">fi</span><br><span class="line">if test -r $file</span><br><span class="line">then</span><br><span class="line">echo &quot;文件可读”</span><br><span class="line">fi</span><br><span class="line">if test -w $file</span><br><span class="line">then</span><br><span class="line">echo &quot;文件可写&quot;</span><br><span class="line">fi</span><br><span class="line">if test -s $file</span><br><span class="line">then</span><br><span class="line">echo &quot;文件不为空&quot;</span><br><span class="line">fi</span><br><span class="line">if test -d $sfile</span><br><span class="line">then</span><br><span class="line">echo &quot;文件是目录&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不是目录&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>test命令经常与`-a`和`-o`一起使用，`&&`和`||`只能使用到`[]`中【示例】if中有多条件时候，必须都满足才会执行根据提示输入文件全名和输入写入的数据。判断文件是否有可写权限和输入的数据长度不为0，满足以上2个条件将用户的数据写入到指定的文件中去。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p &quot;请输入文件名：&quot; filename</span><br><span class="line">read -p &quot;请输入写入的内容：&quot; data</span><br><span class="line">echo &quot;文件名：$filename,内容：$data&quot;</span><br><span class="line">if test -w $filename -a -n $data</span><br><span class="line">then</span><br><span class="line">echo $data &gt; $filename</span><br><span class="line">echo &quot;写入内容成功&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;写入内容失败&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>#### case语句`case...esac`为多选择语句，与其他语言中的switch...case语句类似，是一种多分枝选择结构，每个case分支用右圆括号`)`开始，用两个分`;;`表示执行结束，跳出整个case...esac语句，esac(就是case反过来)作为结束标记。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。`case...esac`语法格式如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">case 值 in</span><br><span class="line">    模式1)</span><br><span class="line">        command1</span><br><span class="line">        command2</span><br><span class="line">        ...</span><br><span class="line">        commandN</span><br><span class="line">    ;;</span><br><span class="line">    模式2)</span><br><span class="line">        command1</span><br><span class="line">        command2</span><br><span class="line">        ...</span><br><span class="line">        commandN</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>case工作方式如上所示，取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至`;;`。取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号`*`捕获该值，再执行后面的命令。case、in和esac都是Shell关键字，esac就是case的反写在这里代表结束case。匹配模式：可以是一个数字、一个字符串，甚至是一个简单正则表达式。简单正则表达式支持如下通配符：![image-20240129215703726](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218221.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">case</span>多分支选择结构</span></span><br><span class="line">read -p &quot;请输入一个(0-7)之间的数：&quot; num</span><br><span class="line">case $num in</span><br><span class="line">1)</span><br><span class="line">echo &quot;周一&quot;</span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">echo &quot;周二&quot;</span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">echo &quot;周三&quot;</span><br><span class="line">;;</span><br><span class="line">4)</span><br><span class="line">echo &quot;周四&quot;</span><br><span class="line">;;</span><br><span class="line">5)</span><br><span class="line">echo &quot;周五&quot;</span><br><span class="line">;;</span><br><span class="line">6)</span><br><span class="line">echo &quot;周六&quot;</span><br><span class="line">;;</span><br><span class="line">0|7)</span><br><span class="line">echo &quot;周日&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;输入有误&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">case</span>多分支结构</span></span><br><span class="line">case $1 in</span><br><span class="line">start | S)</span><br><span class="line">echo &quot;启动成功&quot;</span><br><span class="line">;;</span><br><span class="line">stop | T)</span><br><span class="line">echo &quot;停止成功&quot;</span><br><span class="line">;;</span><br><span class="line">restart | R)</span><br><span class="line">echo &quot;重新启动成功&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;输入有误&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>![image-20240129220547110](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218222.png)#### while语句##### while循环while循环用于不断执行一系列命令，也用于从输入文件中读取数据。其语法格式为：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">while</span>循环</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">键盘输入一个数</span></span><br><span class="line">read -p &quot;请输入一个整数：&quot; num</span><br><span class="line">i=1</span><br><span class="line">while ((i&lt;=num))</span><br><span class="line">do</span><br><span class="line">echo&quot;当前i的值：$i&quot;</span><br><span class="line">let i++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用whi1e循环求1-100的和</span></span><br><span class="line">i=1</span><br><span class="line">sum=0</span><br><span class="line">while ((i&lt;=100))</span><br><span class="line">do</span><br><span class="line">sum=$((sum+i))</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">sum</span>=`<span class="built_in">expr</span> <span class="variable">$sum</span> + <span class="variable">$i</span>`</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span></span><br><span class="line">let i++</span><br><span class="line">done</span><br><span class="line">echo &quot;sum: $sum&quot; </span><br></pre></td></tr></table></figure>##### 无限循环无限循环语法格式：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while:</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure>或<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while true</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure>![image-20240130154742282](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032034453.png)![image-20240130154802584](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032035634.png)##### 跳出循环在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue**break命令**break命令允许跳出当前整个循环。【示例】break命令退出当前循环，脚本进入死循环直至用户输入数字大于5。要跳出这个循环<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出循环<span class="built_in">break</span>的使用</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">read -p &quot;请输入一个整数：&quot; num</span><br><span class="line">case $num in</span><br><span class="line">1|2|3|4|5)</span><br><span class="line">echo &quot;您输入的数：$num&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;您输入的数不是1 2 3 4 5，退出循环&quot;</span><br><span class="line">break</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure>**continue命令**continue命令允许跳出本次循环。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试退出循坏<span class="built_in">continue</span></span></span><br><span class="line">while</span><br><span class="line">do</span><br><span class="line">read -p &quot;请输入一个数：&quot; num</span><br><span class="line">if ((num==1 || num==2 || num==3 || num==4 || num==5))</span><br><span class="line">then</span><br><span class="line">echo &quot;您输入的数是：$num&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;您输入的数不是1 2 3 4 5&quot;</span><br><span class="line">continue</span><br><span class="line">echo&quot;continue退出本次循环&quot;</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>#### until语句until循环执行一系列命令直至条件为true时停止。until循环与while循环在处理方式上刚好相反。一般while循环优于until循环，但在某些时候一也只是极少数情况下，until循环更加有用。until语法格式：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure>condition一般为条件表达式，如果返回值为false，则继续执行循环体内的语句，否则跳出循环。【示例】使用until命令来输出0~9的数字<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试until循坏</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出0-9的数</span></span><br><span class="line">i=0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">until [[ ! <span class="variable">$i</span> -le 9 ]]</span></span><br><span class="line">until ((i&gt;9))</span><br><span class="line">do</span><br><span class="line">echo &quot;当前i的值：$i&quot;</span><br><span class="line">let i++</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">计算1-100之间的和</span></span><br><span class="line">i=1</span><br><span class="line">sum=0</span><br><span class="line">until ((i&gt;100))</span><br><span class="line">do</span><br><span class="line">sum=$((i+sum))</span><br><span class="line">let i++</span><br><span class="line">done</span><br><span class="line">echo &quot;1-100的和：$sum&quot;</span><br></pre></td></tr></table></figure>#### for语句##### 循环第一种方式与其他编程语言类似，Shell支持for循环。for循环一般格式为：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure>写成一行：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN;do command1;command2... done;</span><br></pre></td></tr></table></figure>【示例】for循环顺序输出当前列表中的数字<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span>循环 <span class="keyword">for</span> <span class="keyword">in</span></span></span><br><span class="line">for i in 1 2 3 10 20 30</span><br><span class="line">do</span><br><span class="line">echo &quot;当前变量的值：$i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for v in hello bai d com baizhai</span><br><span class="line">do</span><br><span class="line">echo &quot;当前变量的值：$v&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>##### 循环第二种方式语法：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for var in &#123;start..end&#125;</span><br><span class="line">do</span><br><span class="line">命令</span><br><span class="line">done</span><br></pre></td></tr></table></figure>start：循环范围的起始值必须为整数end：循环范围的结束值，必须为整数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出1-10的整数</span></span><br><span class="line">for i in &#123;1..10&#125;</span><br><span class="line">do</span><br><span class="line">echo &quot;当前整数：$i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">sum=0</span><br><span class="line">for i in &#123;1..100&#125;</span><br><span class="line">do</span><br><span class="line">sum=$((sum+i))</span><br><span class="line">done</span><br><span class="line">echo &quot;1-100的和：$sum&quot;</span><br></pre></td></tr></table></figure>##### 循环第三种方式语法：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for((i=start;i&lt;=end;i++))</span><br><span class="line">do</span><br><span class="line">命令</span><br><span class="line">done</span><br></pre></td></tr></table></figure>一行写法：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for(i=start;i&lt;=end;i++);do 命令;done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用<span class="keyword">for</span>循环输出10-20之间的数</span></span><br><span class="line">for((i=10;i&lt;=20;i++))</span><br><span class="line">do</span><br><span class="line">echo &quot;当前i的值：$i&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>##### for循环的无限循环for循环的无限循环语法：`for((;;));do 命令;done`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span>无限循环</span></span><br><span class="line">i=1</span><br><span class="line">for((;;))</span><br><span class="line">do</span><br><span class="line">if((i==5))</span><br><span class="line">then</span><br><span class="line">echo &quot;i等于5退出循环&quot;</span><br><span class="line">break</span><br><span class="line">else</span><br><span class="line">echo &quot;当前i的值：$i&quot;</span><br><span class="line">let i++</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>#### select语句select in循环用于增强交互性，它可以显示出带编号的菜单，用于输入不同的编号就可以选择不同的菜单，并执行不同的功能，select in是Shell独有的一种循环，非常适合终端这样的交互场景，其它语言没有。语法格式如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select var in 菜单1 菜单2 ...</span><br><span class="line">do</span><br><span class="line">命令</span><br><span class="line">done</span><br></pre></td></tr></table></figure>注意：select是无限循环（死循环），输入空值，或者输入的值无效，都不会结束循环，只有遇到break语句，或者按下Ctrl+D组合键才能结束循环。执行命令中终端输出`#?`代表可以输入选择的菜单编号 【示例】select in的使用<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试select语句的使用</span></span><br><span class="line">echo &quot;一年四个季节，您最喜欢哪个季节？&quot;</span><br><span class="line">select d in &quot;春大&quot; &quot;夏天&quot; &quot;秋大&quot; &quot;冬天&quot;</span><br><span class="line">do</span><br><span class="line">echo &quot;您最喜欢的季节是：$d&quot;</span><br><span class="line">break</span><br><span class="line">done</span><br></pre></td></tr></table></figure>![image-20240201162643067](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032046256.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">select语句与<span class="keyword">case</span>一起使用</span></span><br><span class="line">echo &quot;您最喜欢的老师是哪位？&quot;</span><br><span class="line">select t in 张老师 李老师 王老师 赵老师</span><br><span class="line">do</span><br><span class="line">case $t in</span><br><span class="line">&quot;张老师&quot;)</span><br><span class="line">echo &quot;您最喜欢的老师是张老师&quot;</span><br><span class="line">break</span><br><span class="line">;;</span><br><span class="line">&quot;李老师&quot;)</span><br><span class="line">echo &quot;您最喜欢的老师是李老师&quot;</span><br><span class="line">break</span><br><span class="line">;;</span><br><span class="line">&quot;赵老师&quot;)I</span><br><span class="line">echo &quot;您最喜欢的老师是赵老师&quot;</span><br><span class="line">break</span><br><span class="line">;;</span><br><span class="line">&quot;王老师&quot;)</span><br><span class="line">echo &quot;您最喜欢的老师是王老师&quot;</span><br><span class="line">break</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure>![image-20240201162612012](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032046522.png)### Shell函数Shell函数和其他编程语言一样，函数是由若干条Shell命令组成的语句块，实现Shell脚本代码重用和模块化编程。#### 系统函数#####  basenamebasename返回完整路径最后/的部分，常用于获取文件名，基本语法如下：`basename [pathname] [suffix]`suffix为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉。【示例】basename的使用![image-20240201163354799](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032046408.png)【示例】basename的使用（写入到脚本文件）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统函数<span class="built_in">basename</span></span></span><br><span class="line">filename1=`basename /root/test_shell/test_while.sh`</span><br><span class="line">filename2=$(basename /root/test_shell/test_while.sh .sh)</span><br><span class="line">echo &quot;filenamel:$filename1&quot;</span><br><span class="line">echo &quot;filename2:$filename2&quot;</span><br></pre></td></tr></table></figure>##### dirnamedirname返回完整路径最后V的前面的部分，常用于返回路径部分。dirname文件绝对路径（功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分)，然后返回剩下的路径（目录的部分）)【示例】dirname的使用![image-20240201163823760](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032047339.png)【示例】dirname的使用（写到脚本中）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">dirname</span>系统函数</span></span><br><span class="line">filename=`basename /root/test_shell/test_while.sh`</span><br><span class="line">mydire=$(dirname /root/test_shell/test_while.sh)</span><br><span class="line">echo &quot;文件名：$filename&quot;</span><br><span class="line">echo &quot;文件路径：$mydire&quot;</span><br></pre></td></tr></table></figure>#### 自定义函数##### 函数定义shell中函数的定义格式如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ function ] funname [()]</span><br><span class="line">&#123;</span><br><span class="line">action;</span><br><span class="line">[return int;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>说明：1. 可以带function fun()定义，也可以直接fun()定义，不带任何参数。2. 参数返回，可以显示加：return返回，如果不加，将以最后一条命令运行结果，作为返回值。return后跟数值n(0-255)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自定义函数</span></span><br><span class="line">function test_fun1()&#123;</span><br><span class="line">echo &quot;自定义函数fun1&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用函数之前必须先定义好函数</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">test</span> fun2</span></span><br><span class="line"></span><br><span class="line">test fun2()&#123;</span><br><span class="line">echo &quot;自定义函数fun2&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用函数</span></span><br><span class="line">test_fun1</span><br><span class="line">test_fun2</span><br></pre></td></tr></table></figure>【示例】函数示例（有返回值）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义函数，有返回值</span></span><br><span class="line">test_add()&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">键盘输入两个整数</span></span><br><span class="line">read -p &quot;请输入第一个整数：&quot; num1</span><br><span class="line">read -p &quot;请输入第二个整数：&quot; num2</span><br><span class="line">return $((num1+num2))</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用函数</span></span><br><span class="line">test_add</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取函数的返回值</span></span><br><span class="line">echo &quot;函数的返回值：$?&quot;</span><br></pre></td></tr></table></figure>函数返回值在调用该函数后通过`$?`来获得。注意：**所有函数在使用前必须定义**。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。##### 函数参数在Shell中，调用函数时可以向其传递参数。在函数体内部，通过`$n`的形式来获取参数的值，例如，`$1`表示第一个参数，`$2`表示第二个参数...注意，`$10`不能获取第十个参数，获取第十个参数需要`$&#123;10&#125;`。当n>=10时，需要使用`$&#123;n&#125;`来获取参数。【示例】函数参数的使用<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义函数传递函数参数</span></span><br><span class="line">test_param()&#123;</span><br><span class="line">echo &quot;第一个参数：$1&quot;</span><br><span class="line">echo &quot;第二个参数：$2&quot;</span><br><span class="line">echo &quot;第三个参数：$3&quot;</span><br><span class="line">echo &quot;第10个参数：$&#123;10&#125;&quot;</span><br><span class="line">echo &quot;第11个参数：$&#123;11&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用函数</span></span><br><span class="line">test_param 1 2 3 4 5 6 7 8 9 100 101 102</span><br></pre></td></tr></table></figure>【示例】定义函数绘制图像<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义函数及<span class="keyword">for</span>循环综合练习</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出一个矩形</span></span><br><span class="line">echo &quot;输出一个矩形&quot;</span><br><span class="line">test_fun1()&#123;</span><br><span class="line">for i in &#123;1..5&#125;</span><br><span class="line">do</span><br><span class="line">echo &quot;***&quot;</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">test_fun1</span><br><span class="line"></span><br><span class="line">echo &#x27;输出一个矩形2&#x27;</span><br><span class="line">test_fun2()&#123;</span><br><span class="line">for((i=1;i&lt;=6;i++))</span><br><span class="line">do</span><br><span class="line">for((j=1;j&lt;=4;j++))</span><br><span class="line">do</span><br><span class="line">echo -n &quot;*&quot;</span><br><span class="line">done</span><br><span class="line">echo  # 输出换行</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">test_fun2</span><br><span class="line"></span><br><span class="line">echo &quot;输出直角三角形”</span><br><span class="line">test_fun3()&#123;</span><br><span class="line">for((i=1;i&lt;=5;i++))</span><br><span class="line">do</span><br><span class="line">for((j=1;j&lt;=$i;j++))</span><br><span class="line">do</span><br><span class="line">echo -n &quot;*&quot;</span><br><span class="line">done</span><br><span class="line">echo</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">test_fun3</span><br></pre></td></tr></table></figure>![image-20240201165737019](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032047819.png)#####  Shell程序与函数的区别函数和Shell程序比较相似，区别在于：Shell程序（内置命令和外部脚本文件），外部脚本文件是在子Shell中运行，会开启独立的进程运行。Shell函数在当前Shell的进程中运行。【示例】Shel程序与函数的区别<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">test_fun()&#123;</span><br><span class="line">echo &quot;函数中输出：进程ID$$&quot;</span><br><span class="line">&#125;</span><br><span class="line">test_fun</span><br><span class="line">echo &quot;脚本文件中：进程ID$$&quot;</span><br></pre></td></tr></table></figure>![image-20240201170221887](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032047632.png)### Shell重定向输入输出#### 概念##### 标准输入从键盘读取用户输入的数据，然后再把数据拿到Shell程序中使用。##### 标准输出Shell程序产生的数据，这些数据一般都是呈现到显示器上供用户浏览查看##### 输入输出重定向输入方向就是数据从哪里流向程序。数据默认从键盘流向程序，如果改变了它的方向，数据就从其它地方流入，这就是输入重定向。输出方向就是数据从程序流向哪里。数据默认从程序流向显示器，如果改变了它的方向，数据就流向其它地方，这就是输出重定向。#### 文件描述符linux命令默认从标准输入设备(stdin)获取输入，将结果输出到标准输出设备(stdout)显示。一般情况下，标准输入设备就是键盘，标准输出设备就是终端，即显示器。在linux shell执行命令时，每个进程都和三个打开的文件相联系，并使用文件描述符来引用这些文件。由于文件描述符不容易记忆，shell同时也给出了相应的文件名。![image-20240201170613166](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032056153.png)#### 重定向命令列表![image-20240201170850153](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032056229.png)##### 输出重定向![image-20240201170826698](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032056594.png)![image-20240201171043019](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032056377.png)![image-20240201171347044](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057655.png)##### 输入重定向wC命令可以用来对文本进行统计，包括单词个数、行数、字节数。wc语法格式：`wc [options] [文件名]`options有如下：![image-20240201171621618](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057589.png)![image-20240201171659676](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057891.png)【示例】读取文件每行内容<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入重定间</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">读取文件内容</span></span><br><span class="line">r=1</span><br><span class="line">while read m</span><br><span class="line">do</span><br><span class="line">echo&quot;第$r行，内容是：$m&quot;</span><br><span class="line">let r++</span><br><span class="line">done &lt; log.txt</span><br></pre></td></tr></table></figure>【示例】标记位读取内容![image-20240201172106448](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057992.png)### 文本处理工具#### grep文本搜索grep是一种强大的文本搜索工具，用于根据关键字进行行过滤，并把匹配的行打印出来。grep语法格式：`grep [选项] '关键字' 文件名`它在一个或多个文件中搜索满足模式的文本行。常用的grep选项：![image-20240201172322202](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057131.png)![image-20240203100250887](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402041145935.png)![image-20240203100642812](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057445.png)![image-20240203100718496](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057552.png)![image-20240203100842828](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057757.png)![image-20240203100940561](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058503.png)![image-20240203101007811](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058498.png)![image-20240203101033123](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058513.png)![image-20240203101429736](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058888.png)#### cut按列切分文本cut译为“剪切、切割”，是一个强大文本处理工具，它可以将文本按列进行划分的文本处理。cut命令逐行读入文本，然后按列划分字段并进行提取、输出等操作。语法格式：`cut [options] 文件名`options参数说明![image-20240203101606240](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058526.png)**提取范围说明**![image-20240203101648085](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058493.png)【示例】cut的使用 准备test_cut.xt文件内容![image-20240203101841005](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058376.png)【示例】cut截取列数据![image-20240203101954943](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058217.png)![image-20240203102100439](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402041147383.png)【示例】cut按字符提取![image-20240203102419788](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058554.png)![image-20240203102450789](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058701.png)![image-20240203102654486](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058545.png)【示例】cut的切割获取指定单词![image-20240203102912665](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058329.png)【示例】cut的切割bash进程的PID号![image-20240203103014436](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058144.png)【示例】cut的切割当前服务器的IP![image-20240203103108093](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059055.png)#### sed文本编辑器sed是Liux下一款功能强大的非交互流式文本编辑器，可以对文本文件进行增、删改、查等操作，支持按行、按字段、按正则匹配文本内容，灵活方便，特别适合于大文件的编辑。sed工作原理：sed会读取每一行数据到模式空间中，判断当前行是否符合模式心配要求，符合要求就会执行sed程序命令，否则不会执行sed程序命令，如果不写四配模式，那么每一行都会执行sed程序命令。sed的使用语法：`sed [选项参数] [模式匹配 | sed程序命令] [文件名]`sed的常用选项：![image-20240203103614821](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059966.png)![image-20240203103729930](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059899.png)##### 【示例】向文件中添加或插入行1.准备test_sed.txt内容2.`sed '3aworld' test_sed.txt`      #向第三行后面添加world，3表示行号![image-20240203104025459](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059854.png)注意：预览可以看到是添加了，但实际没有添加到文件内容。想要真是的添加到文件，需要加选项 `-i`。![image-20240203104114124](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059368.png)![image-20240203104257274](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059467.png)![image-20240203104426376](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059522.png)![image-20240203104522105](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059686.png)##### 【示例】更改文件中指定的行![image-20240203104708214](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402041150896.png)![image-20240203104822114](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059659.png)##### 【示例】删除文件中的行![image-20240203104914682](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059198.png)![image-20240203105915529](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402041227856.png)2.删除3~5之外的所有行![image-20240203112354974](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059651.png)3.删除从匹配abc的行到最后一行![image-20240203112604351](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402041227997.png)4.删除空行![image-20240203113044347](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059106.png)5.删除不匹配hello或abc的行，`/hello\|abc/`表示匹配hello或abc，`!`表示取反![image-20240203113326358](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059920.png)6.删除`1~3`行中，匹配内容hello的行，1,3表示匹配`1~3`行，`&#123;/hello/d&#125;`表示删除匹配hello的行![image-20240203113512409](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059036.png)#####  【示例】替换文件中的内容1.将文件中的a替换为123，默认只替换每行第一个123![image-20240203114041506](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402041228304.png)![image-20240203114130143](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059725.png)![image-20240203114235556](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100200.png)4.将每行中所有匹配的a替换为123，并将替换后的内容写入test_sed2.txt![image-20240203114411504](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100447.png)![image-20240203114550942](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100381.png)5.匹配有#号的行，替换匹配行中逗号后的所有内容为空`(,.*)`表示逗号后的所有内容​![image-20240203114715692](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100517.png)6.替换每行中的最后两个字符为空，每个点代表一个字符，`$`表示匹配末尾`(...$)`表示匹配最后两个字符 ![image-20240203114950448](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100562.png)7.在test_sed.txt文件的每一行后面加上"hahha"字段![image-20240203115023685](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100585.png)##### 【示例】打印文件中的行1.打印文件中的第三行内容![image-20240203115325660](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100507.png)2.从第一行开始，每隔两行打印一行，波浪号后面的2表示步长![image-20240203115508010](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101863.png)3.打印文件的最后一行![image-20240203115338000](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101427.png)4.打印1-3行![image-20240203115345629](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101023.png)5.打印匹配的行![image-20240203115634612](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101129.png)##### 【示例】打印文件的行号1.打印test sed.txt文件最后一行的行号![image-20240203120027153](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101631.png)2.打印匹配abc的行的行号![image-20240203115903879](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101564.png)3.打印空行行号![image-20240203115853510](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101509.png)##### 【示例】从文件中读取内容1.将文件test_sed3.txt中的内容，读入test_sed4.txt中，会在test_sed4.txt中的**每一行**后都读入test_sed3.txt的内容![image-20240203120234360](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101344.png)2.在test_sed.3.txt的第3行之后插入文件test_sed4.txt的内容（可用于向文件中插入内容)![image-20240203120356379](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101635.png)3.在匹配456的行之后插入文件test_sed4.txt的内容，如果test_sed3.txt中有多行匹配456则在每一行之后都会插入![image-20240203120518338](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101391.png)4.在test_sed3.txt的最后一行插入test_sed4.txt的内容![image-20240203120656179](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101346.png)##### 【示例】向文件中写入内容1.将test_sed3.txt文件的内容写入test_sed4.txt文件，如果test_sed3.txt文件不存在则创建，如果test_sed.4.txt存在则覆盖之前的内容![image-20240203120846835](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101428.png)2.将文件test_sed3.txt中的第2行内容写入到文件test_sed4.txt![image-20240203120958428](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102451.png)3.将test_sed3.txt的第2行和最后一行内容写入test_sed4.txt![image-20240203121202820](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102166.png)-e： 它告诉sed将下一个参数解释为一个sed指令，只有当命令行上给出多个sed指令时才需要使用-e选项4.将test_sed3.txt的第2行和最后一行内容分别写入test_sed4.txt和test_sed5.txt中![image-20240203121409496](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102258.png)5.将test_sed3.txt中匹配789或123的行的内容，写入到test_sed4.txt中![image-20240203121559874](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102030.png)6.将test_sed.3.txt中从匹配123的行到最后行的内容，写入到test_sed.4.txt中`,$`：到最后一行![image-20240203121841438](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102956.png)7.将test_sed3.txt中从匹配456的行及其后2行的内容，写入到test_sed4.txt中![image-20240203121919344](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102573.png)#### awk文本分析工具##### awk概述awk是一种强大的文本分析工具，主要用于在linux/uniⅸ下对文本和数据进行处理。对数据进行分析、统计并生成报表，比如网站的访问量，访问的IP量等等。awk是种编程语言，awk可以定义变量、运算符，使用流程控制语句进行深度加工与分析。awk其名称得自于它的创始人Alfred Aho、Peter Weinberger和Brian Kernighan姓氏的首个字母。awk的处理文本和数据的方式：把文件逐行读入，以空格为默认分隔符将每行切片。切片的部分再进行各种分析处理。##### awk基本使用使用方法：`awk 选项 '命令部分' 文件名`特别说明：引用shell变量需用双引号引起常用命令选项![image-20240203123414316](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032032231.png)AWK内置变量![image-20240203123457651](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102570.png)![image-20240203124203929](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102006.png)【示例】awk匹配内容整行输出，默认每行空格切割数据，并将这行赋给内部变量$0![image-20240203132304618](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031333107.png)【示例】awk匹配以root开头的行![image-20240203132313537](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031333108.png)【示例】awk使用一行作为输入，默认每行空格切割数据，并将这行赋给内部变量$0![image-20240203132538803](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031333109.png)![image-20240203132644186](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031333110.png)##### 格式化输出print和printfprint函数：类似echo，它是**换行输出**printf函数：类似echo-n，它**不换行输出**，可以使用%s、%d进行占位。其中%s表示字符类型，%d数值类型。`-`：表示左对齐，默认是右对齐例如：`%-15s`                 表示所占15字符，使用左对齐方式显示。【示例】print的使用![image-20240203133124844](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032103185.png)【示例】printf占位的使用![image-20240203133232646](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031333112.png)![image-20240203133313710](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031337593.png)![image-20240203133422718](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031337594.png)【示例】print打印文件每行属性信息统计passwd文件名，每行的行号，每行的列数，对应的完整行内容![image-20240203133630224](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031337595.png)![image-20240203133722927](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031337596.png)【示例】打印第三行信息![image-20240203133906367](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633788.png)##### awk中BEGIN...END使用BEGIN：表示在程序开始前执行END：表示所有文件处理完后执行用法：`'BEGIN&#123;开始处理之前&#125;;&#123;处理中&#125;;END&#123;处理结束后&#125;'`【示例】添加开始与结束内容![image-20240203134419835](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633789.png)![image-20240203134541005](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633790.png)![image-20240203134628718](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633791.png)##### awk变量定义【示例】-v定义变量![image-20240203134922839](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633792.png)##### awk中流程控制语句![image-20240203135427288](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633793.png)1. if语句语法格式   `&#123; if(表达式) &#123;语句1;语句2;...&#125; &#125;`   准备test_awk.txt文件    ![image-20240203135709752](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633794.png)   ![image-20240203135846364](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633795.png)2. if else的语法格式   `&#123;if(表达式) &#123;语句;语句;...&#125; else&#123;语句;语句;...&#125;&#125;</code></p><p>   【示例】awk中使用<code>if...else</code></p><p>   <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633796.png" alt="image-20240203140139314"></p><p>   <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633797.png" alt="image-20240203140233114"></p><ol><li><p>if else if else if的语法格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;if(表达式1)&#123;语句；语句；...&#125;</span><br><span class="line">else if(表达式2)&#123;语句;语句; ...&#125;</span><br><span class="line">else if(表达式3)&#123;语句;语句; ...&#125;</span><br><span class="line">else&#123;语句;语句; ...&#125;&#125;</span><br></pre></td></tr></table></figure><p>​    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633798.png" alt="image-20240203140608122"></p></li></ol><h5 id="awk中循环语句的使用"><a href="#awk中循环语句的使用" class="headerlink" title="awk中循环语句的使用"></a>awk中循环语句的使用</h5><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633799.png" alt="image-20240203140922700"></p><p>【示例】使用循环拼接字符串</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633800.png" alt="image-20240203141109009"></p><p>【示例】使用循环计算每行的和</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633801.png" alt="image-20240203141355571"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633802.png" alt="image-20240203141604923"></p><p>【示例】循环中使用break</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633803.png" alt="image-20240203141827328"></p><p> 【示例】操指定数字运算</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633804.png" alt="image-20240203141931217"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633805.png" alt="image-20240203142020130"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633806.png" alt="image-20240203142120705"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633807.png" alt="image-20240203142646024"></p><p>【示例】切割ip</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633808.png" alt="image-20240203143237774"></p><p>【示例】显示空行行号</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633809.png" alt="image-20240203143400833"></p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>sort命令以行为单位对文本进行排序。sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p><h5 id="【示例】sort的使用"><a href="#【示例】sort的使用" class="headerlink" title="【示例】sort的使用"></a>【示例】sort的使用</h5><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633810.png" alt="image-20240203143642200"></p><h5 id="【示例】sort的-u选项"><a href="#【示例】sort的-u选项" class="headerlink" title="【示例】sort的-u选项"></a>【示例】sort的<code>-u</code>选项</h5><p>在输出行中去除重复行。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633811.png" alt="image-20240203143815597"></p><h5 id="【示例】sort的-r选项"><a href="#【示例】sort的-r选项" class="headerlink" title="【示例】sort的-r选项"></a>【示例】sort的<code>-r</code>选项</h5><p>sort默认的排序方式是升序，如果想改成降序，就加个<code>-r</code>就搞定了。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633812.png" alt="image-20240203143917563"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633813.png" alt="image-20240203143939226"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633814.png" alt="image-20240203144003364"></p><h5 id="【示例】sort的-o选项"><a href="#【示例】sort的-o选项" class="headerlink" title="【示例】sort的-o选项"></a>【示例】sort的-o选项</h5><p>由于sort默认是把结果输出到标准输出，所以需要用重定向才能将结果写入文件，形如 <code>sort filename &gt; newfile</code>,</p><p>但是，如果你想把排序结果输出到原文件中，用重定向可就不行了。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633815.png" alt="image-20240203144150945"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633816.png" alt="image-20240203144302692"></p><h5 id="【示例】sort的-n选项"><a href="#【示例】sort的-n选项" class="headerlink" title="【示例】sort的-n选项"></a>【示例】sort的<code>-n</code>选项</h5><p>对数字排序，会出现一种现象，如10比2小的情况。出现这种情况是由于排序程序将这些数字按字符来排序了，排序程序会先比较1和2，显然1小，所以就将10放在2前面。这也是sort的一贯作风。</p><p>如果想改变这种现状，就要使用<code>-n</code>选项，“要以数值来排序”！</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633817.png" alt="image-20240203144525158"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633818.png" alt="image-20240203144609321"></p><h5 id="【示例】sort的-t选项和-k选项"><a href="#【示例】sort的-t选项和-k选项" class="headerlink" title="【示例】sort的-t选项和-k选项"></a>【示例】sort的<code>-t</code>选项和<code>-k</code>选项</h5><p><code>-t</code>选项，后面可以设定间隔符。</p><p><code>-k</code>选项，分割后用来指定列数了。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633819.png" alt="image-20240203144805814"></p><p>这个文件有三列，列与列之间用冒号隔开了，第一列表示水果类型，第二列表示水果数量，第三列表示水果价格。</p><p>现在想以水果数量来排序，也就是以第二列来排序，如何利用sort实现？</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633820.png" alt="image-20240203144931438"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633821.png" alt="image-20240203145022617"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633822.png" alt="image-20240203145603508"></p><h4 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h4><p>tee命令作用把输出的一个副本输送到标准输出，另一个副本拷贝到相应的文件中。如果希望在看到输出的同时，也将其存入一个文件，那么这个命令再合适不过了。</p><p> 它的使用语法格式：</p><p><code>tee [-a] files</code></p><p>其中，-a表示追加到文件末尾。</p><p>当执行某些命令或脚本时，如果希望把输出保存下来，tee命令非常方便。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633823.png" alt="image-20240203150829903"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633824.png" alt="image-20240203150926614"></p><p><code>&gt;/dev/null</code>：不显示在屏幕上</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633825.png" alt="image-20240203151113026"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="批量修改文件"><a href="#批量修改文件" class="headerlink" title="批量修改文件"></a>批量修改文件</h5><p>将某目录下.txt文件全部修改为.bat。</p><p>1.批量创建文件</p><p><code>mkdir test_filedir</code></p><p><code>touch test_filedir/file&#123;1...10).txt</code></p><p>2.重命名文件语法</p><p><code>rename 旧文件名 新文件名 旧文件所在位置</code></p><p>注意：旧文件所在位置后面加<code>/*</code>     例如：<code>/root/test filedir/*</code>s</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">批量修改文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取所有要修收的文件</span></span><br><span class="line">filenames=$(ls /root/test_shell/test_filedir | grep &#x27;txt&#x27;)</span><br><span class="line">for fname in $filenames</span><br><span class="line">do</span><br><span class="line">echo&quot;文件名：&quot;$fname</span><br><span class="line">newname=$(basename $fname .txt)&quot;.bat&quot;</span><br><span class="line">echo &quot;新文件名：&quot;$newname</span><br><span class="line">rename $fname $newname /root/test_shell/test_filedir/*</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h5 id="批量创建用户"><a href="#批量创建用户" class="headerlink" title="批量创建用户"></a>批量创建用户</h5><p>添加用户的命令</p><p><code>useradd 用户名</code></p><p>给用户设置默认密码</p><p><code>echo &quot;123456&quot; | passwd-stdin 用户名</code></p><p>【示例】批量添加用户</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031806643.png" alt="image-20240203171544440"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">批量创建用户</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取文件中要添加的所有用户名</span></span><br><span class="line">users=$(cat /root/test_shell/test_adduser.txt)</span><br><span class="line">for u in $users</span><br><span class="line">do</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$u</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加用户</span></span><br><span class="line">useradd $u</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">初始化密码</span></span><br><span class="line">echo &quot;123456&quot; | passwd --stdin $u &amp;&gt;/dev/null</span><br><span class="line">[ $? -eq 0 ] &amp;&amp; echo &quot;添加用户&quot;$u&quot;初始化密吗成功”</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031806644.png" alt="image-20240203172705194"></p><h5 id="计算linux系统所有进程占用内存大小的和"><a href="#计算linux系统所有进程占用内存大小的和" class="headerlink" title="计算linux系统所有进程占用内存大小的和"></a>计算linux系统所有进程占用内存大小的和</h5><p>1.查看进程内存大小</p><p><code>ps-aux</code></p><p>2.可以看到有多列，RSS这列表示所占内存大小。提取RSS这列并去掉RSS这行</p><p><code>ps -aux | awk &#39;&#123;print $6&#125;&#39; | grep -v &#39;RSS&#39;</code></p><p>3.统计进程大小之和</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计linux系统中所有进程所占内存大小之和</span></span><br><span class="line">ps_aux=$(ps -aux | awk &#x27;&#123;print $6&#125;&#x27; | grep -v &#x27;RSS&#x27;)</span><br><span class="line">sum=0</span><br><span class="line">for n in $ps_aux</span><br><span class="line">do</span><br><span class="line">sum=$[ $sum + $n ]</span><br><span class="line">done</span><br><span class="line">sum=$[ $sum / 1024 ]</span><br><span class="line">echo &quot;所占内存：$sum&quot;&quot;M&quot;</span><br></pre></td></tr></table></figure><h4 id="【示例】统计系统中各种类型的shell并按降序排序显示"><a href="#【示例】统计系统中各种类型的shell并按降序排序显示" class="headerlink" title="【示例】统计系统中各种类型的shell并按降序排序显示"></a>【示例】统计系统中各种类型的shell并按降序排序显示</h4><p>在awk中数组叫做关联数组(associative arrays)。awk中的<strong>数组不必提前声明，也不必声明大小</strong>。数组元素用0或空字符串来初始化，这根据上下文而定。</p><p>1.awk中的数组赋值并获取</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031806645.png" alt="image-20240203174731249"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031806646.png" alt="image-20240203175457931"></p><p>2.统计系统中各种类型的shell并按降序排序显示</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031806647.png" alt="image-20240203180533631"></p>]]></content>
    
    
    <summary type="html">ShellScript脚本编程</summary>
    
    
    
    <category term="Liunx" scheme="https://huaiyuechusan.gitee.io/categories/Liunx/"/>
    
    
    <category term="Liunx" scheme="https://huaiyuechusan.gitee.io/tags/Liunx/"/>
    
    <category term="Shell脚本" scheme="https://huaiyuechusan.gitee.io/tags/Shell%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境编程基础</title>
    <link href="https://huaiyuechusan.gitee.io/archives/3cc384d0.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/3cc384d0.html</id>
    <published>2024-02-03T10:26:00.000Z</published>
    <updated>2024-10-17T11:58:13.862Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Linux环境编程基础"><a href="#Linux环境编程基础" class="headerlink" title="Linux环境编程基础"></a>Linux环境编程基础</h1><h2 id="Linux操作系统概述与安装"><a href="#Linux操作系统概述与安装" class="headerlink" title="Linux操作系统概述与安装"></a>Linux操作系统概述与安装</h2><h3 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h3><p>见gitee地址：</p><p><a href="https://gitee.com/huaiyuechusan/23-S1-BigData_PP_Sprints_Learning/blob/master/S02-09-05-虚拟机安装讲解/02-虚拟机安装.md">S02-09-05-虚拟机安装讲解/02-虚拟机安装.md · 槐月初叁/23-S1-BigData_PP_Sprints_Learning </a></p><h3 id="Liunx三种网络配置"><a href="#Liunx三种网络配置" class="headerlink" title="Liunx三种网络配置"></a>Liunx三种网络配置</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604595.png" alt="image-20240115171515181"></p><p>桥接模式</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604596.png" alt="image-20240115171605717"></p><p>NAT模式</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604597.png" alt="image-20240115171753723"></p><p>Host-only模式（主机模式）</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604598.png" alt="image-20240115172021856"></p><h3 id="Linux远程登录"><a href="#Linux远程登录" class="headerlink" title="Linux远程登录"></a>Linux远程登录</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604599.png" alt="image-20240115172159375"></p><h4 id="修改当前虚拟机ip地址"><a href="#修改当前虚拟机ip地址" class="headerlink" title="修改当前虚拟机ip地址"></a>修改当前虚拟机ip地址</h4><p><strong>1.查看IP地址</strong></p><p>1）基本语法</p><p>ip addr        （功能描述：显示所有网络接口的配置信息）</p><p>2）案例实操</p><p>[root@node0 ~]# ip addr</p><p>​                                                <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604600.jpg" alt="img"></p><p>当前网络不可用，需要进行修改。</p><p><strong>2.修改当前虚拟机ip地址</strong></p><p>1）修改IP地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node0 ~]#vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p>​                                                                        <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604601.jpg" alt="img"> </p><p>以下标红的项必须修改，有值的按照下面的值修改，没有该项的要增加，另外删除UUID这行配置。</p><p>#IP的配置方法[none|static|bootp|dhcp]（引导时不使用协议|静态分配IP|BOOTP协议|动态分配IP协议）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">UUID=xxxx  #删除这一行  esc -&gt;dd</span><br><span class="line">BOOTPROTO=static   </span><br><span class="line">ONBOOT=yes </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">IP地址</span></span><br><span class="line">IPADDR=192.168.20.100</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">子网掩码</span></span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">网关</span>  </span><br><span class="line">GATEWAY=192.168.20.2      </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">域名解析器</span></span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">DNS2=8.8.8.8</span><br></pre></td></tr></table></figure><p>​    修改后，如下图所示</p><p>​                                                                            <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604602.jpg" alt="img"> </p><p>：wq  保存退出</p><p>2）执行systemctl restart network </p><p>3）如果报错，reboot，重启虚拟机</p><p><strong>3.ping 测试主机之间网络连通性</strong></p><p>1）基本语法</p><p>​    ping 目的主机    （功能描述：测试当前服务器是否可以连接目的主机）</p><p>2）案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试当前服务器是否可以连接百度</span></span><br><span class="line">[root@node0 ~]# ping www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604603.jpg" alt="img"></p><h4 id="安装Xshell7和Xftp7"><a href="#安装Xshell7和Xftp7" class="headerlink" title="安装Xshell7和Xftp7"></a>安装Xshell7和Xftp7</h4><p>使用Xshell即可进行远程登录Linux</p><p>（安装MobaXterm也可以进行远程登录）</p><h3 id="Linux系统目录结构"><a href="#Linux系统目录结构" class="headerlink" title="Linux系统目录结构"></a>Linux系统目录结构</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604605.png" alt="image-20240115191108720"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604606.png" alt="image-20240115190847550"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604607.png" alt="image-20240115190924888"></p><h3 id="Linux路径"><a href="#Linux路径" class="headerlink" title="Linux路径"></a>Linux路径</h3><p>路径，顾名思议，是指从树形目录中的某个目录层次到某个文件的一条道路。Liux系统中是从<code>/</code>开始的。</p><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p>绝对路径是指从“根”开始的路径。例如<code>/usr/local</code>，<code>/etc/hosts</code>,如果一个路径是从<code>/</code>开始它一定是绝对路径。</p><p>注意：</p><blockquote><p>绝对路径必须以<code>/</code>开头，它表示根目录。</p></blockquote><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>相对路径是以<code>.</code>或者<code>..</code>开始的。<code>.</code>表示<strong>用户操作所处的位置</strong>，<code>..</code>表示<strong>上级目录</strong>。</p><p>注意：</p><blockquote><ul><li>相对路径不能以<code>/</code>开头。</li><li>每个目录中都有<code>..</code>目录文件。</li></ul></blockquote><p><strong>在路径一些特殊符号的说明</strong></p><blockquote><ul><li><code>.</code> :当前用户所在目录</li><li><code>..</code> :表示上一级目录</li><li><code>~</code>:表示当前用户自己家目录</li><li><code>~ USER</code>:表示用户名为USER的家目录。这里的USER是在/etc/passwd中存在的用户。</li></ul></blockquote><h2 id="Linux用户权限"><a href="#Linux用户权限" class="headerlink" title="Linux用户权限"></a>Linux用户权限</h2><h3 id="Linux用户和用户组"><a href="#Linux用户和用户组" class="headerlink" title="Linux用户和用户组"></a>Linux用户和用户组</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604608.png" alt="image-20240115191356567"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604609.png" alt="image-20240116214749719"></p><p>用户概念</p><blockquote><p>通过前面对Linux多用户的理解，我们明白Linux是真正意义上的多用户操作系统，所以我们能在Linux系统中建若干用户(user)</p></blockquote><p>用户组概念</p><blockquote><p>用户组(group)就是具有相同特征的用户(user)的集合体；比如有时我们要让多个用户具有相同的权限，比如查看、修改某一文件或执行某个命令，这时我们需要用户组，我们把用户都定义到同一用户组，我们通过修改文件或目录的权限，让用户组具有一定的操作权限，这样用户组下的用户对该文件或目录都具有相同的权限，这是我们通过定义组和修改文件的权限来实现的，</p></blockquote><p><strong>Linux用户和组的关系</strong></p><p>用户和用户组的对应关系有以下4种：</p><ol><li>一对一：一个用户可以存在一个组中，是组中的唯一成员；</li><li>一对多：一个用户可以存在多个用户组中，此用户具有这多个组的共同权限；</li><li>多对一：多个用户可以存在一个组中，这些用户具有和组相同的权限；</li><li>多对多：多个用户可以存在多个组中，也就是以上3种关系的扩展。</li></ol><h3 id="Linux用户管理"><a href="#Linux用户管理" class="headerlink" title="Linux用户管理"></a>Linux用户管理</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604610.png" alt="image-20240116215403876"></p><p>Liux系统的管理员之所以是root,是因为该用户的身份号码即UID的数值为0，UID就相当于我们的身份证号码一样具有唯一性，因此可通过用户的UID值来判断用户身份。</p><ul><li>管理员UID为0：系统的管理员用户。</li><li>系统用户UID为1 ~ 999：Liux系统为了避免因某个服务程序出现漏洞而被黑客提权至整台服务器，默认服务程序会有独立的系统用户负责运行，进而有效控制被破坏范围。</li><li>普通用户UID从1000开始：是由管理员创建的用于日常工作的用户。需要注意的是，UID是不能冲突的，而且管理员创建的普通用户的UID默认是从1000开始的（即使前面有闲置的号码)</li></ul><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><p><code>useradd  [选项]  参数</code></p><p><strong>选项说明:</strong> </p><blockquote><ul><li>-d 指定用户的家目录（默认为/home/username)</li><li>-e 账户的到期时间，格式为YYYY-MM-DD.</li><li>-u 指定该用户的默认UID</li><li>-g 指定一个初始的用户基本组（必须已存在）</li><li>-G 指定一个或多个扩展用户组</li><li>-N 不创建与用户同名的基本用户组</li><li>-s 指定该用户的默认Shell解释器</li></ul></blockquote><p><strong>参数：</strong></p><p>用户名: 要创建的用户名。</p><p><strong>案例实战</strong></p><p>实例1：下面我们创建一个普通用户并指定家目录的路径、用户的UID以及Shll解释器。在下面的命令中，请注意/sbin/nologin,它是终端解释器中的一员，与Bash解释器有着天壤之别。一旦用户的解释器被设置为nologin，则代表该用户不能登录到系统中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># useradd -d /home/linux -u 8888 -s /sbin/nologin linuxprobe</span></span><br><span class="line">[root@node1 ~]<span class="comment"># id linuxprobe</span></span><br><span class="line">uid=8888(linuxprobe) gid=8888(linuxprobe) <span class="built_in">groups</span>=8888(linuxprobe)</span><br></pre></td></tr></table></figure><h4 id="修改帐号"><a href="#修改帐号" class="headerlink" title="修改帐号"></a>修改帐号</h4><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。 </p><p>修改已有用户的信息使用usermod命令，其格式如下： </p><p><code>usermod [选项] 用户名</code></p><p><strong>选项</strong>：</p><blockquote><ul><li>-c&lt;备注&gt;：修改用户帐号的备注文字；</li><li>-d&lt;登入目录&gt;：修改用户登入时的目录；</li><li>-e&lt;有效期那限&gt;：修改帐号的有效期限；</li><li>-f&lt;缓冲天数&gt;：修改在密码过期后多少天即关闭该帐号：</li><li>-g&lt;群组&gt;：修改用户所属的群组；</li><li>-G&lt;群组&gt;；修改用户所属的附加群组；</li><li>-l&lt;帐号名称&gt;：修改用户帐号名称；</li><li>-L：锁定用户密码，使密码无效；</li><li>-s<she11>:修改用户登入后所使用的shell;</li><li>-u<uid>:修改用户D;</li><li>-U：解除密码锁定</li></ul></blockquote><p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。 </p><p>这个选项指定一个新的账号，即将原来的用户名改为新的用户名。</p><p><strong>案例实战：</strong> </p><p>实例1：将用户jinxf的登录Shell修改为bash，主目录改为/home/z，用户组改为root。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># cat /etc/passwd|grep gem</span></span><br><span class="line">gm:x:1003:1000::/home/gm:/bin/sh</span><br><span class="line">[root@node1 ~]<span class="comment"># id gem</span></span><br><span class="line">uid=1003(gem) gid=1000(gtjin) 组=1000(gtjin),0(root),4(adm)</span><br><span class="line">[root@node1 ~]<span class="comment"># usermod -s /bin/bash –g root gem</span></span><br><span class="line">[root@node1 ~]<span class="comment"># usermod -d /home/z -m gem</span></span><br><span class="line">[root@node1 ~]<span class="comment"># cat /etc/passwd|grep gem</span></span><br><span class="line">gem:x:1003:0::/home/z:/bin/bash</span><br></pre></td></tr></table></figure><h4 id="删除帐号"><a href="#删除帐号" class="headerlink" title="删除帐号"></a>删除帐号</h4><p>如果一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。 </p><p>删除一个已有的用户账号使用userdel命令，其格式如下： </p><p><code>userdel [选项] 用户名</code></p><p><strong>选项</strong>：</p><blockquote><ul><li><p>-f：强制删除用户</p></li><li><p>-r：同时删除用户及用户家目录</p><p>这个命令的目的删除用户，与它相关的文件有：</p><p>①/etc/passwd</p><p>②/etc/shadow</p><p>③/home/username</p></li></ul></blockquote><p>常用的选项是-r，它的作用是把用户的主目录一起删除。 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># userdel jinxf</span></span><br></pre></td></tr></table></figure><p>此命令删除用户jinxf在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。 </p><h4 id="用户口令的管理"><a href="#用户口令的管理" class="headerlink" title="用户口令的管理"></a>用户口令的管理</h4><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。 </p><p>指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令的格式为： </p><p><code>passwd [选项] 用户名</code></p><p>可使用的选项： </p><blockquote><ul><li>-d：删除密码，仅有系统管理者才能使用；</li><li>-f：强制执行；</li><li>-k：设置只有在密码过期失效后，方能更新；</li><li>-l：锁住密码；</li><li>-s：列出密码的相关信息，仅有系统管理者才能使用；</li><li>-u：解开已上锁的帐号。</li></ul></blockquote><p>如果默认用户名，则修改当前用户的口令。</p><p>例如，假设当前用户是jinxf，则下面的命令修改该用户自己的口令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># passwd </span></span><br><span class="line"></span><br><span class="line">Old password:</span><br><span class="line"></span><br><span class="line">New password:*</span><br><span class="line"></span><br><span class="line">Re-enter new password:*</span><br></pre></td></tr></table></figure><p>如果是超级用户，可以用下列形式指定任何用户的口令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment">#  passwd jinxf</span></span><br><span class="line"></span><br><span class="line">New password:*</span><br><span class="line"></span><br><span class="line">Re-enter new password:*</span><br></pre></td></tr></table></figure><p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。 </p><p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。 </p><p>为用户指定空口令时，执行下列形式的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment">#  passwd -d jinxf</span></span><br></pre></td></tr></table></figure><p>此命令将用户jinxf的口令删除，这样用户jinxf下一次登录时，系统就不再询问口令。</p><p>passwd命令还可以用<code>-l</code>(lock)选项锁定某一用户，使其不能登录，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]#  passwd -l jinxf</span><br></pre></td></tr></table></figure><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p><h4 id="添加新组groupadd"><a href="#添加新组groupadd" class="headerlink" title="添加新组groupadd"></a>添加新组groupadd</h4><p>语法：</p><p><code>groupadd [选项] 用户组</code></p><p><strong>选项：</strong></p><blockquote><ul><li>-g：指定新建工作组的id;</li><li>-r：创建系统工作组，系统工作组的组ID小于500；</li><li>-K：覆盖配置文件”/ect/login.defs”;</li><li>-o：允许添加组D号不唯一的工作组。</li></ul></blockquote><p>实例1：添加用户组group1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># groupadd group1</span></span><br></pre></td></tr></table></figure><p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。 </p><p>实例2：向系统中增加了一个新组group2，同时指定新组的组标识号是101</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># groupadd -g 101 group2</span></span><br></pre></td></tr></table></figure><p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p><h4 id="删除用户组groupdel"><a href="#删除用户组groupdel" class="headerlink" title="删除用户组groupdel"></a>删除用户组groupdel</h4><p>语法：</p><p><code>groupdel 用户组</code></p><p>实例1：从系统中删除组group1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># groupdel group1</span></span><br></pre></td></tr></table></figure><h4 id="修改群组groupmod"><a href="#修改群组groupmod" class="headerlink" title="修改群组groupmod"></a>修改群组groupmod</h4><p>语法：</p><p><code>groupmod [选项] 用户组</code></p><p>常用的选项有： </p><blockquote><ul><li>-g&lt;群组识别码&gt;：设置欲使用的群组识别码；</li><li>-o：重复使用群组识别码；</li><li>-n&lt;新群组名称&gt;：设置欲使用的群组名称。</li></ul></blockquote><p>实例1：将组group2的标识号改为10000，组名修改为group3</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># groupmod –g 10000 -n group3 group2</span></span><br></pre></td></tr></table></figure><h4 id="用户切换组"><a href="#用户切换组" class="headerlink" title="用户切换组"></a>用户切换组</h4><p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p><p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># newgrp root</span></span><br></pre></td></tr></table></figure><p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成。 </p><h3 id="Linuxi超级用户与伪用户"><a href="#Linuxi超级用户与伪用户" class="headerlink" title="Linuxi超级用户与伪用户"></a>Linuxi超级用户与伪用户</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604611.png" alt="image-20240116222824144"></p><blockquote><p>Liux下用户分为三类：超级用户、普通用户、伪用户</p><ol><li>超级用户：用户名为root，具有一切管理权限，UID为0，可以创建多个管理员。</li><li>普通用户：在默认情况下，普通用户UID是介于500~6000；</li><li>伪用户：这些用户的存在是为了方便系统管理，满足相应的系统进程对文件属主的要求。伪用户不能够登录，他的UID值介于1 ~ 499。</li></ol></blockquote><h4 id="用户身份切换"><a href="#用户身份切换" class="headerlink" title="用户身份切换"></a>用户身份切换</h4><p>由于超级权限在系统管理中的不可缺少的重要作用，为了完成系统管理任务，必须用到超级权限。</p><h5 id="su"><a href="#su" class="headerlink" title="su"></a>su</h5><p>su命令就是切换用户的工具。</p><p>语法</p><p><code>su [-fmp] [-c command] [-s shell] [--help] [--version] [-] [USER [ARG]]</code></p><blockquote><p>参数说明：</p><ul><li>-c command或-command=command变更为帐号为USER的使用者并执丸行指令(command)后再变回原来使用者</li><li>—i或—login这个参数加了之后，就好像是重新login为该使用者一样，大部份环境变数(HOME SHELL USER等等)都是以该使用者(USER)为主，并且工作目录也会改变，如果没有指定USER，内定是root</li></ul></blockquote><h5 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h5><p>sudo的全称为：super user do。</p><p>顾名思义：干超级用户才能干的事！所以Sudo最常用的功能就是提升一个命名的执行权限。</p><p>语法：</p><p><code>sudo [参数] 命令名称</code></p><blockquote><p>参数：</p><ul><li>-h：列出帮助信息</li><li>-l：列出当前用户可执行的命令</li><li>-u：用户名或UD值以指定的用户身份执行命令</li><li>-k：清空密码的有效时间，下次执行sudo时需要再次进行密码验证</li><li>-b：在后台执行指定的命令</li><li>-p：更改询问密码的提示语</li></ul><p>总结</p><p>sudo命令具有如下功能：</p><ul><li>限制用户执行指定的命令：</li><li>记录用户执行的每一条命令；</li><li>配置文件（/etc/sudoers)提供集中的用户管理、权限与主机等参数；</li><li>验证密码的后5分钟内（默认值）无须再让用户再次验证密码。</li></ul></blockquote><p><strong>编辑配置文件命令：<code>visudo</code></strong>来配置用户权限。</p><p>按照下面的格式将第99行（大约）填写上指定的信息：</p><p>谁可以使用 允许使用的主机 =（以谁的身份）可执行命令的列表</p><p><code>niit ALL=(ALL) ALL</code></p><blockquote><p>:warning:注意：</p><p>编辑sudo的配置文件/etc/sudoers，是一般不要直接使用vi(vi/etc/sudoers)去编辑，因为sudoers配置有一定的语法，直接用vi编辑保存系统不会检查语法，如有错也保存了可能导致无法使用sudo工具，最好使用visudo命令去配置。虽然visudo也是调用vi去编辑，但是保存时会进行语法检查，有错会有提示。</p></blockquote><p> <strong>sudo免密配置：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br><span class="line">niit ALL=NOPASSWD:  ALL</span><br></pre></td></tr></table></figure><h3 id="Linux文件基本属性"><a href="#Linux文件基本属性" class="headerlink" title="Linux文件基本属性"></a>Linux文件基本属性</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604612.png" alt="image-20240116224902477"></p><h4 id="显示文件属性"><a href="#显示文件属性" class="headerlink" title="显示文件属性"></a>显示文件属性</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604613.png" alt="image-20240116225005946"></p><h5 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h5><p>Linux ls(英文全拼：list files)命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。</p><p>语法：</p><p><code>ls [参数]</code></p><blockquote><p>参数：</p><ul><li>-a 显示所有文件及目录(以 . 开头的隐藏文件也会列出)</li><li>-l 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</li><li>ls -l 的缩写 ll</li></ul></blockquote><h4 id="Linux文件类型"><a href="#Linux文件类型" class="headerlink" title="Linux文件类型"></a>Linux文件类型</h4><p>Linux可以支持长达256个字符的文件名称，且文件名是区分大小写的，“abc”与”ABC”所代表的是不同文件。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604614.png" alt="image-20240116225544617"></p><blockquote><p>Linux文件类型</p><ol><li>普通文件(-)：存放数据，程序等信息的文件，一般为文本文件和二进制文件。</li><li>目录文件(d)：文件系统中一个目录所包含的目录文件，包括文件名和子目录名</li><li>链接文件(l)：可以在不同的文件系统之间建立链接关系来实现对文件的访问。</li><li>设备文件(c)：把IO设备映射为一个设备文件。</li><li>管道文件(p)：主要用于在进程间传递数据。</li></ol></blockquote><h4 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h4><p>所谓的文件权限，是指对文件访问权限，包括对文件的读、写、删除、执行操作。Linux是一个多用户操作系统，它运行多个用户同时登陆和工作，因此Linux将一个文件或者目录与一个用户和组联系起来。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604615.png" alt="image-20240116230013223"></p><blockquote><ul><li><p>r（read）：可读取此文件的实际内容，如读取文本文件的文字内容等；</p></li><li><p>w（write）：可以编辑、新增或者是修改该文件的内容</p></li><li><p>x（execute）：该文件具有可以被系统执行的权限。</p></li></ul><p>:warning:<strong>注意:</strong>在Linux中,文件是否能被执行是由是否具有<code>x</code>这个权限来决定，与拓展名无关。</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604616.png" alt="image-20240116230515478"></p><h3 id="Linux权限字和权限操作"><a href="#Linux权限字和权限操作" class="headerlink" title="Linux权限字和权限操作"></a>Linux权限字和权限操作</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604617.png" alt="image-20240116230825844"></p><blockquote><ol><li>chgrp：改变文件所属群组；</li><li>chown：改变文件所有人；</li><li>chmod：改变文件的属性；</li></ol></blockquote><h4 id="改变所属群组chgrp"><a href="#改变所属群组chgrp" class="headerlink" title="改变所属群组chgrp"></a>改变所属群组chgrp</h4><p>改变一个文件的群组很简单，直接用chgrp命令，这个命令是change group的缩写。</p><p>语法：</p><p><code>chgrp [-R] 属组名 文件名</code></p><blockquote><p>参数选项</p><ul><li>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数那么该目录下的所有文件的属组都会更改。</li></ul></blockquote><h4 id="改变文件属性chmod"><a href="#改变文件属性chmod" class="headerlink" title="改变文件属性chmod"></a>改变文件属性chmod</h4><p>Liux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是<strong>owner/group/others(拥有者/组/其他)</strong>三种身份各有自己的<strong>read/write/execute</strong>权限。</p><p><strong>文字设定法</strong></p><p>基本上就九个权限分别是：</p><ul><li>user:用户</li><li>group:组</li><li>others:其他</li></ul><p>那么我们就可以使用<strong>u，g，o</strong>来代表三种身份的权限。</p><p>此外，<strong>a</strong>则代表<strong>all</strong>，即全部的身份。读写的权限可以写成<strong>r，w，x</strong>，也就是可以使用下表的方式来看：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604618.png" alt="image-20240116231650874"></p><p>语法：<br>        <code>chmod [who] [+ | - | =] [mode]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod niit+w a.txt</span><br></pre></td></tr></table></figure><p><strong>数字设定法</strong></p><p>我们必须首先了解用数字表示的属性的含义：0表示没有权限，1表示可执行权限，2表示可写权限，4表示可读权限，然后将其相加。所以数字属性的格式应为3个从0到7的八进制数，其顺序是(u) (g) (o)。</p><p>例如，如果想让某个文件的属主有“读/写”二种权限，需要把 4（可读）+ 2（可写）= 6（读写)。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：<strong>-rwxrwxrwx</strong>，这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><ul><li>r：4</li><li>w：2</li><li>x：1</li></ul><h4 id="改变文件拥有者chown"><a href="#改变文件拥有者chown" class="headerlink" title="改变文件拥有者chown"></a>改变文件拥有者chown</h4><p>更改文件属主，也可以同时更改文件属组</p><p>语法：</p><p><code>chown [-R] 属主名 文件名</code></p><p><code>chown [-R] 属主名:属组名 文件名</code></p><h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><p>更多详细内容见：</p><p><a href="https://gitee.com/huaiyuechusan/23-S1-BigData_PP_Sprints_Learning/blob/master/OnlineEducationProject/Sprint0-环境搭建/NIIT-BD-PP-05-Linux Review-V1.1.md#linux-常用终端快捷键">OnlineEducationProject/Sprint0-环境搭建/NIIT-BD-PP-05-Linux Review-V1.1.md · 槐月初叁/23-S1-BigData_PP_Sprints_Learning </a></p><h3 id="Linux文件编辑工具vi-vim"><a href="#Linux文件编辑工具vi-vim" class="headerlink" title="Linux文件编辑工具vi/vim"></a>Linux文件编辑工具vi/vim</h3><h4 id="vi-vim的使用"><a href="#vi-vim的使用" class="headerlink" title="vi/vim的使用"></a>vi/vim的使用</h4><p>vi或vim是Linuxi最常用的文本编辑器工具，vi或vim没有图形界面编辑器那样单机鼠标的简单操作，但编辑器在系统管理、服务器管理中，永远是图形界面的编辑器所不能比的。</p><blockquote><p>基本上vi/vim共分为三种模式：</p><ol><li>命令模式(Cornmand mode)</li><li>输入模式(Insert mode)</li><li>底线命令模式(Last line mode)</li></ol></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604619.png" alt="image-20240116235318009"></p><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p>用户刚刚启动vi/vim,便进入了命令模式。</p><p>此状态下敲击键盘动作会被识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，被当作了一个命令。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604620.png" alt="image-20240117001223578"></p><h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h4><p>在命令模式下按下i、o、a就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><blockquote><ul><li>字符按键以及Shift组合：输入字符</li><li>ENTER：回车键，换行</li><li>BACK SPACE：退格键，删除光标前一个字符</li><li>DEL：删除键，删除光标后一个字符</li><li>方向键：在文本中移动光标</li><li>HOME/END：移动光标到行首/行尾</li><li>Page Up/Page Down：上/下翻页</li><li>Insert：切换光标为输入/替换模式，光标将变成竖线下划线</li><li>ESC：退出输入模式，切换到命令模式</li></ul></blockquote><h4 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h4><p>主要保存或者退出文件，以及设置Vim编辑器的工作环境，还可以让用户执行外部的Linux命令或跳转所编写文档的特定行数。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604621.png" alt="image-20240117002011293"></p><p><strong>shift + zz 也可以保存退出</strong></p><h3 id="Linux处理文件目录的常用命令"><a href="#Linux处理文件目录的常用命令" class="headerlink" title="Linux处理文件目录的常用命令"></a>Linux处理文件目录的常用命令</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604622.png" alt="image-20240116233600654"></p><h4 id="pwd（显示目前所在目录）"><a href="#pwd（显示目前所在目录）" class="headerlink" title="pwd（显示目前所在目录）"></a>pwd（显示目前所在目录）</h4><p>pwd是Print Working Directory的缩写，也就是显示目前所在目录的命令。</p><p><code>[root@www ~] pwd [-P]</code></p><p>选项与参数：</p><blockquote><p>-P:显示出确实的路径，而非使用连结(ink)路径。</p></blockquote><h4 id="mkdir（创建新目录）"><a href="#mkdir（创建新目录）" class="headerlink" title="mkdir（创建新目录）"></a>mkdir（创建新目录）</h4><p>如果想要创建新的目录的话，那么就使用mkdir(make directory)吧。</p><p>语法：<code>mkdir [-mp] 目录名称</code></p><p>选项与参数：</p><blockquote><ul><li>-m：配置文件的权限喔！直接配置，不需要看默认权限（umask）的脸色~</li><li>-p：帮助你直接将所需要的目录（包含上一级目录）递归创建起来！</li></ul></blockquote><h4 id="rmdir（删除空的目录）"><a href="#rmdir（删除空的目录）" class="headerlink" title="rmdir（删除空的目录）"></a>rmdir（删除空的目录）</h4><p>语法：<code>rmdir [-p] 目录名称</code></p><p>选项与参数：</p><blockquote><ul><li><p>-p：从该目录起，一次删除多级空目录</p><p>删除runoob目录</p></li></ul></blockquote><h4 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp(复制文件或目录)"></a>cp(复制文件或目录)</h4><p>cp即拷贝文件和目录。copy的意思。</p><p>语法：<code>cp [-adfilprsu] 来源档 目标档</code></p><p>选项与参数：</p><blockquote><p>-r：递归持续复制，用于目录的复制行为</p></blockquote><h4 id="rm（删除文件或者目录）"><a href="#rm（删除文件或者目录）" class="headerlink" title="rm（删除文件或者目录）"></a>rm（删除文件或者目录）</h4><p>语法：<code>rm [-fir] 文件或目录</code></p><p>选项与参数：</p><blockquote><ul><li>-f：就是force的意思，忽略不存在的文件，不会出现警告信息；</li><li>-r：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul></blockquote><h4 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv(移动文件与目录，或修改名称)"></a>mv(移动文件与目录，或修改名称)</h4><p>语法：</p><p><code>mv [-fiu] source destination</code></p><p><code>mv [options] source1 source2 source3 ... directory</code></p><p>选项与参数：</p><blockquote><ul><li>-f：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖：</li><li>-i：若目标文件(destination)已经存在时，就会询问是否覆盖！</li><li>-u：若目标文件已经存在，且source比较新，才会升级(update)</li></ul></blockquote><h3 id="Linux文件内容查看命令"><a href="#Linux文件内容查看命令" class="headerlink" title="Linux文件内容查看命令"></a>Linux文件内容查看命令</h3><h4 id="cat-显示文件内容"><a href="#cat-显示文件内容" class="headerlink" title="cat(显示文件内容)"></a>cat(显示文件内容)</h4><p>由第一行开始显示文件内容</p><p>语法：<code>cat [-AbEnTv]</code></p><blockquote><p>选项与参数：</p><ul><li>-A：相当于-vET的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E：将结尾的断行字节$显示出来；</li><li>-n：列印出行号，连同空白行也会有行号，与-b的选项不同；</li><li>-T：将[tab]按键以N显示出来；</li><li>-v:列出一些看不出来的特殊字符</li></ul></blockquote><h4 id="tac-倒着显示文件内容"><a href="#tac-倒着显示文件内容" class="headerlink" title="tac(倒着显示文件内容)"></a>tac(倒着显示文件内容)</h4><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出tac是cat的倒着写！</p><p>如：<code>tac /etc/issue</code></p><h4 id="nl-显示行号"><a href="#nl-显示行号" class="headerlink" title="nl(显示行号)"></a>nl(显示行号)</h4><p>语法：<code>n1 [-bnw] 文件</code></p><blockquote><p>选项与参数：</p><ul><li><p>-b：指定行号指定的方式，主要有两种：</p><p>-b a：表示不论是否为空行，也同样列出行号（类似cat -n);</p><p>-b t：如果有空行，空的那一行不要列出行号（默认值）；</p></li><li><p>-n：列出行号表示的方法，主要有三种：</p><p>-n ln：行号在荧幕的最左方显示；</p><p>-n rn：行号在自己栏位的最右方显示，且不加0；</p><p>-n rz：行号在自己栏位的最右方显示，且加0；</p></li><li><p>-W：行号栏位的占用的位数</p></li></ul></blockquote><h4 id="more-一页一页的显示文件内容"><a href="#more-一页一页的显示文件内容" class="headerlink" title="more(一页一页的显示文件内容)"></a>more(一页一页的显示文件内容)</h4><p>一页一页翻动</p><blockquote><p>在more这个程序的运行过程中，你有几个按键可以按的：</p><ul><li>空白键(space)：代表向下翻一页；</li><li>Enter：代表向下翻『一行」；</li><li><code>/</code>字串：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f：立刻显示出档名以及目前显示的行数：</li><li>q：代表立刻离开more，不再显示该文件内容。</li><li>b或[ctrl]-b：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul></blockquote><h4 id="Iess-往前翻页"><a href="#Iess-往前翻页" class="headerlink" title="Iess(往前翻页)"></a>Iess(往前翻页)</h4><p>一页一页翻动，以下实例输出/etc/man.config文件的内容：</p><blockquote><p>Iess运行时可以输入的命令有：</p><ul><li>空白键：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup]：向上翻动一页；</li><li>/字串：向下搜寻『字串』的功能；</li><li>?字串：向上搜寻『字串』的功能；</li><li>n：重复前一个搜寻（与/或？有关！）</li><li>N：反向的重复前一个搜寻（与/或？有关！）</li><li>q：离开less这个程序；</li></ul></blockquote><h4 id="head-只看头几行"><a href="#head-只看头几行" class="headerlink" title="head(只看头几行)"></a>head(只看头几行)</h4><p>取出文件前面几行</p><p>语法：<code>head [-n number] 文件</code></p><blockquote><p>选项与参数：</p><ul><li>-n：后面接数字，代表显示几行的意思</li></ul></blockquote><h4 id="tail-只看尾几行"><a href="#tail-只看尾几行" class="headerlink" title="tail(只看尾几行)"></a>tail(只看尾几行)</h4><p>取出文件后面几行</p><p>语法：<code>tail [-n number] 文件</code></p><blockquote><p>选项与参数：</p><ul><li>-n：后面接数字，代表显示几行的意思</li><li>-f：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</li></ul></blockquote><h3 id="Linux打包压缩命令"><a href="#Linux打包压缩命令" class="headerlink" title="Linux打包压缩命令"></a>Linux打包压缩命令</h3><h4 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h4><p>语法：<code>tar [选项] [文件]</code></p><p>选项：</p><blockquote><ul><li>-c：产生.tar打包文件</li><li>-v：显示详细信息</li><li>-f：指定压缩后的文件名</li><li>-z：打包同时压缩Gzip</li><li>-x：解包.tar文件</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包多个文件</span></span><br><span class="line">tar -zcvf test.tar.gz a.txt b.txt c.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压文件</span></span><br><span class="line">tar -zxvf test.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压文件到指定目录</span></span><br><span class="line">tar -zxvf test.tar.gz -C /opt</span><br></pre></td></tr></table></figure><h4 id="gzip-gunzip压缩"><a href="#gzip-gunzip压缩" class="headerlink" title="gzip/gunzip压缩"></a>gzip/gunzip压缩</h4><p>语法：</p><p><code>gzip+文件</code>  (功能描述：压缩文件，只能将文件压缩为*.gz文件)</p><p><code>gunzip+文件.gz</code>  (功能描述：解压缩文件命令)</p><h3 id="Linux搜索命令"><a href="#Linux搜索命令" class="headerlink" title="Linux搜索命令"></a>Linux搜索命令</h3><h4 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h4><p>grep命令用于在文本中执行关键词搜索，并显示匹配的结果。</p><p>语法：</p><p><code>grep [参数 查找内容 源文件]</code></p><blockquote><p>选项：</p><ul><li>-b：将可执行文件(binary)当作文本文件(text)来搜索</li><li>-c：仅显示找到的行数</li><li>-i：忽略大小写</li><li>-n：显示行号</li><li>-v：反向选择一仅列出没有”关键词”的行</li><li>-E：开启扩展(Extend)的正则表达式</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n &quot;a&quot; a.txt</span><br></pre></td></tr></table></figure><h4 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h4><p>find命令用于按照指定条件来查找文件。</p><p>语法：</p><p><code>find [查找路径] 寻找条件 操作</code></p><blockquote><p>选项：</p><ul><li>-name：匹配名称</li><li>-perm：匹配权限（mode为完全匹配，-mode为包含即可）</li><li>-user：匹配所有者</li><li>-group：匹配所有组</li><li>-mtime -n +n：匹配修改的间（-n指n天以内，+n指n天以前）</li><li>atime -n +n：匹配访问文件的时间(-n指n天以内，+n指n天以前)</li><li>-ctime -n +n：匹配修改文件权限的时间(-n指n天以内，+n指n天以前)</li><li>-nouser：匹配无所有者的文件</li><li>-nogroup：匹配无所有组的文件</li><li>-newer f1 !f2：匹配比文件f1新但比f2I旧的文件i</li><li>—type b/d/c/p/l/f：匹配文件类型<br>(后面的字幕参数依次表示块设备、目录、字符设备、管道、链接文件、文本文件)</li><li>-size：匹配文件的大小（+50KB为查找超过50KB的文件，而-50KB为查找小于50K的文件)</li><li>-prune：忽略某个目录-exec…..{}\；后面可跟用于进一步处理搜索结果的命令</li></ul></blockquote><h3 id="Linux常用系统工作命令"><a href="#Linux常用系统工作命令" class="headerlink" title="Linux常用系统工作命令"></a>Linux常用系统工作命令</h3><h4 id="reboot命令"><a href="#reboot命令" class="headerlink" title="reboot命令"></a>reboot命令</h4><p>reboot命令用于重启系统，其格式为reboot。</p><p>由于重启计算机这种操作会涉及硬件资源的管理权限，因此默认只能使用root管理员来重启，其命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# reboot</span><br></pre></td></tr></table></figure><h4 id="poweroff命令"><a href="#poweroff命令" class="headerlink" title="poweroff命令"></a>poweroff命令</h4><p>poweroff命令用于关闭系统，其格式为poweroff。</p><p>该命令与reboot命令相同，都会涉及硬件资源的管理权限，因此默认只有root管理员才可以关闭电脑，其命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# poweroff</span><br></pre></td></tr></table></figure><h4 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h4><p>wget命令用于在终端中下载网络文件。</p><p>语法：</p><p><code>wget [参数] 下载地址</code></p><blockquote><p>参数：</p><ul><li>-b：后台下载模式</li><li>-P：下载到指定目录</li><li>-t：最大尝试次数</li><li>-c：断点续传</li><li>-p：下载页面内所有资源，包括图片、视频等</li><li>-r：递归下载</li></ul></blockquote><h3 id="Linux重定向、管道符、通配符和环境变量"><a href="#Linux重定向、管道符、通配符和环境变量" class="headerlink" title="Linux重定向、管道符、通配符和环境变量"></a>Linux重定向、管道符、通配符和环境变量</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604623.png" alt="image-20240117183022388"></p><h4 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h4><p>把多个Linux命令适当地组合到一起，使其协同工作，以便我们更加高效地处理数据。</p><blockquote><ul><li>标准输入重定向(STDN，文件描述符为0)：默认从键盘输入，也可从其他文件或命令中输入。</li><li>标准输出重定向(STDOUT，文件描述符为1)：默认输出到屏幕。</li><li>错误输出重定向(STDERR，文件描述符为2)：默认输出到屏幕。</li></ul></blockquote><p><strong>输入重定向作用表</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604624.png" alt="image-20240117183414542"></p><p><strong>输出重定向作用表</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604625.png" alt="image-20240117183544952"></p><h4 id="管道命令符"><a href="#管道命令符" class="headerlink" title="管道命令符"></a>管道命令符</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604626.png" alt="image-20240117183738265"></p><p>管道命令符的执行格式：<code>命令A | 命令B</code></p><p>命令符的作用：<strong>把前一个命令原本要输出到屏幕的数据当作是后一个命令的标准输入</strong></p><p>实例1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">找出被限制登录用户的命令是 grep &quot;/sbin/nologin&quot; /etc/passwd</span><br><span class="line">统计文本行数的命令则是 wc -l</span><br></pre></td></tr></table></figure><p>现在要做的就是把搜索命令的输出值传递给统计命令，即把原本要输出到屏幂的用户信息列表再交给wc命令作进一步的加工，因此只需要把管道符放到两条命令之间即可，具体如下。这简直是太方便了！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;/sbin/nologin&quot; /etc/passwd | wc -l</span><br></pre></td></tr></table></figure><p>实例2：</p><p>这个管道符就像一个法宝，我们可以将它套用到其他不同的命令上，比如用翻页的形式查看/etc目录中的文件列表及属性信息（这些内容默认会一股脑儿地显示到屏幕上，根本看不清楚)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc/ | more</span><br></pre></td></tr></table></figure><p>实例3：</p><p>在修改用户密码时，通常都需要输入两次密码以进行确认，这在编写自动化脚本时将成为一个非常致命的缺陷。通过把管道符和passwd命令的-stdin参数相结合，我们可以用一条命令来完成密码重置操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;linuxprobe&quot; | passwd --stdin root</span><br></pre></td></tr></table></figure><p><strong>可以连续使用管道符</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604627.png" alt="image-20240117184353923"></p><h4 id="命令行的通配符"><a href="#命令行的通配符" class="headerlink" title="命令行的通配符"></a>命令行的通配符</h4><p>通配符就是通用的匹配信息的符号。</p><p>星号<code>*</code>代表匹配零个或多个字符，</p><p>问号<code>？</code>代表匹配单个字符，</p><p>中括号内加上数字<code>[0-9]</code>代表匹配0~9之间的单个数字的字符，</p><p>中括号内加上字母<code>[abc]</code>侧是代表匹配a、b、c三个字符中的任意一个字符。</p><h4 id="重要的环境变量"><a href="#重要的环境变量" class="headerlink" title="重要的环境变量"></a>重要的环境变量</h4><p>在Liux系统中，环境变量按照其作用范围不同大致可以分为系统级环境变量和用户级环境变量。</p><blockquote><ul><li>系统级环境变量：每一个登录到系统的用户都能够读取到系统级的环境变量</li><li>用户级环境变量：每一个登录到系统的用户只能够读取属于自己的用户级的环境变量</li></ul></blockquote><p>自然而然地，环境变量的配置文件也相应的被分成了系统级和用户级两种。</p><h5 id="系统级"><a href="#系统级" class="headerlink" title="系统级"></a>系统级</h5><p><strong>/etc/profile</strong></p><p>在系统启动后第一个用户登录时运行，并从<code>/etc/profile.d</code>目录的配置文件中搜集shell的设置，使用该文件配置的环境变量将应用于登录到系统的每一个用户。</p><p>提示：</p><p>在Liux系统中，使用以下命令可以使配置文件立刻生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><h5 id="用户级"><a href="#用户级" class="headerlink" title="用户级"></a>用户级</h5><p><strong>~/.profile（推荐首选）</strong></p><p>当用户登录时执行，每个用户都可以使用该文件来配置专属于自己使用的shell信息。</p><p>实例1：配置tomcat环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export TOMCAT_HOME=</span><br><span class="line">export PATH=$PATH:$TOMCAT_HOME/bin</span><br></pre></td></tr></table></figure><h3 id="Linux磁盘管理"><a href="#Linux磁盘管理" class="headerlink" title="Linux磁盘管理"></a>Linux磁盘管理</h3><h4 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h4><p>查看分区</p><p>语法：</p><p><code>fdisk [必要参数] [选择参数]</code></p><blockquote><p>必要参数：</p><ul><li>-m：查看全部可用的参数</li><li>-n：添加新的分区</li><li>-d：删除某个分区信息</li><li>-l：列出所有可用的分区类型</li><li>-t：改变某个分区的类型</li><li>-p：查看分区信息</li><li>-w：保存并退出</li><li>-q：不保存直接退出</li></ul></blockquote><p><strong>磁盘计算公式</strong></p><p>一个磁盘的大小=一个柱面大小柱面的总数=磁头数量每个磁道上的扇区数一个扇区大小柱面总数</p><h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><p>用于显示Liux系统中各文件系统的硬盘使用情况，包括文件系统所在硬盘分区的总容量、已使用的容量、剩余容量等。</p><p>语法：</p><p><code>df [选项] [目录或文件名]</code></p><blockquote><p>选项：</p><ul><li>-a：显示所有文件系统信息，包括系统特有的/proc、/sysfs等文件系统；</li><li>-m：以MB为单位显示容量：</li><li>-k：以KB为单位显示容量，默认以KB为单位；</li><li>-h：使用人们习惯的KB、MB或GB等单位自行显示容量；</li><li>-T：显示该分区的文件系统名称；</li><li>-i：不用硬盘容量显示，面是以盒有Qd日的数量来显示。</li></ul></blockquote><h4 id="软硬方式链接"><a href="#软硬方式链接" class="headerlink" title="软硬方式链接"></a>软硬方式链接</h4><p>Linux系统中的“快捷方式”了。</p><p>在Linuⅸ系统中存在<strong>硬链接</strong>和<strong>软链接</strong>两种文件。</p><p>硬链接：可以将它理解为一个“<strong>指向原始文件inode的指针</strong>”，系统不为它分配独立的inode和文件。所以，硬链接文件与原始文件其实是同一个文件，只是名字不同。我们每添加一个硬链接，该文件的inode连接数就会增加1；而且只有当该文件的inode连接数为0时，才算彻底将它删除。换言之，由于硬链接实际上是指向原文件inode的指针，因此即便原始文件被删除，依然可以通过硬链接文件来访问。需要注意的是，由于技术的局限性我们不能跨分区对目录文件进行链接。</p><p>软链接：仅仅包含所链接文件的路径名，因此能链接目录文件，也可以跨越文件系统进行链接。但是，当原始文件被删除后，链接文件也将失效，从这一点上来说与Windows系统中的“<strong>快捷方式</strong>”具有一样的性质。</p><h5 id="In命令"><a href="#In命令" class="headerlink" title="In命令"></a>In命令</h5><p>In命令用于创建链接文件。</p><p>语法：</p><p><code>ln [选项] 目标</code></p><blockquote><p>参数：</p><ul><li>-s：创建“符号链接”（如果不带-s参数，则默认创建硬链接）</li><li>-f：强制创建文件或目录的链接</li><li>-i：覆盖前先询问</li><li>-v：显示创建链接的过程</li></ul></blockquote><h3 id="Linux系统状态检测命令"><a href="#Linux系统状态检测命令" class="headerlink" title="Linux系统状态检测命令"></a>Linux系统状态检测命令</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604628.png" alt="image-20240117204456894"></p><h4 id="ip-addr（ifconfig）命令"><a href="#ip-addr（ifconfig）命令" class="headerlink" title="ip addr（ifconfig）命令"></a>ip addr（ifconfig）命令</h4><p>命令用于获取网卡配置与网络状态等信息。</p><h4 id="uname命令"><a href="#uname命令" class="headerlink" title="uname命令"></a>uname命令</h4><p>uname命令用于查看系统内核与系统版本等信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br><span class="line">Linux zk33.10.0-1160.e17.x8664#1 SMP Mon0ct1916:18:59 UTC 2020 x86_64 x86_64 x86_64 GMU/Linux</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>在使用uname命令时，一般会固定搭配上-a参数来完整地查看当前系统的内核名称，主机名、内核发行版本、节点名、系统时间、硬件名称、硬件平台、处理器类型以及操作系统名称等信息。</p></blockquote><p>查看系统版本 <code>cat /etc/redhat-release</code></p><h4 id="free命令"><a href="#free命令" class="headerlink" title="free命令"></a>free命令</h4><p>free用于显示当前系统中内存的使用量信息。</p><p><code>free -h</code></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604629.png" alt="image-20240117204912822"></p><h4 id="last命令"><a href="#last命令" class="headerlink" title="last命令"></a>last命令</h4><p>last命令用于查看所有系统的登录记录。</p><p>语法：</p><p><code>last [参数]</code></p><blockquote><p>注意：</p><p>使用Iast命令可以查看本机的登录记录。但是，由于这些信息都是以日志文件的形式保存在系统中，因此黑客可以很容易地对内容进行篡改。干万不要单纯以该命令的输出信息而判断系统有无被恶意入侵！</p></blockquote><h4 id="history命令"><a href="#history命令" class="headerlink" title="history命令"></a>history命令</h4><p>history命令用于显示历史执行过的命令。</p><p>语法：</p><p><code>history [-c]</code></p><blockquote><p>注意：</p><p>执行history命令能显示出当前用户在本地计算机中执行过的最近1000条命令记录。如果觉得1000不够用，还可以自定义/etc/profile文件中的HISTSIZE变量值。在使用history命令时，如果使用-c参数则会清空所有的命令历史记录。</p></blockquote><h4 id="uptime命令"><a href="#uptime命令" class="headerlink" title="uptime命令"></a>uptime命令</h4><p>uptime用于查看系统的负载信息，格式为uptime。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@niit opt]# uptime</span><br><span class="line">17:56:03up7:14,2 users,1 oad average:0.02,0.02,0.05</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>uptime命令真的很棒，它可以显示当前系统时间、系统已运行时间、启用终端数量以及平均负载值等信息。平均负载值指的是系统在最近1分钟、5分钟、15分钟内的压力情况；负载值越低越好，尽量不要长期超过1，在生产环境中不要超过5。</p></blockquote><h3 id="Linux下软件安装的命令"><a href="#Linux下软件安装的命令" class="headerlink" title="Linux下软件安装的命令"></a>Linux下软件安装的命令</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604630.png" alt="image-20240117205505268"></p><h4 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h4><p>以源代码安装软件，每次都需要配置操作系统、配置编译参数、实际编译，最后还要依据个人喜好的方式来安装软件。这个过程很麻烦很累人。</p><h4 id="rpm软件包管理"><a href="#rpm软件包管理" class="headerlink" title="rpm软件包管理"></a>rpm软件包管理</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604631.png" alt="image-20240117205749310"></p><h5 id="rpm安装软件的默认路径"><a href="#rpm安装软件的默认路径" class="headerlink" title="rpm安装软件的默认路径"></a>rpm安装软件的默认路径</h5><blockquote><p>注意：</p><ul><li>/etc配置文件放置目录</li><li>/usr/bin一些可执行文件</li><li>/usr/lib一些程序使用的动态链接库</li><li>/usr/share/doc一些基本的软件使用手册与说明文件</li><li>/usr/share/man一些man page档案</li></ul></blockquote><h5 id="常用的rpm软件包命令"><a href="#常用的rpm软件包命令" class="headerlink" title="常用的rpm软件包命令"></a>常用的rpm软件包命令</h5><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604632.png" alt="image-20240117210004538"></p><blockquote><p>参数说明：</p><ul><li>-i：install的意思，安装</li><li>-v：查看更详细的安装信息画面</li><li>-h：以安装信息栏显示安装进度</li></ul></blockquote><h5 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h5><p>如你需要安装一个jdk,首先要到网上下载一个jdk的rpm包，如jdk-8u171—linux-x64.rpm。安装并显示安装的进度，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh package-name</span><br></pre></td></tr></table></figure><h5 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h5><p>使用rpm的卸载过程一定要由最上层往下卸载，以rp-pppoe为例，这个软件主要是依据ppp这个软件来安装的，所以当你要卸载ppp的时候，就必须先卸载rp-pppoe才行！</p><p>删除的命令非常简单，通过-e参数就可以完成。不过，经常生软件属性依赖导致无法删除某些软件的问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e package-name</span><br></pre></td></tr></table></figure><p>直接强制删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps package-name</span><br></pre></td></tr></table></figure><h4 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h4><p>yum可以看作是CS架构的软件，yum的存在很好的解决了rpm的属性依赖问题。</p><p>yum通过依赖rpm软件包管理器，实现了rpm软件包管理器在功能上的扩展，因此yum是不能脱离rpm而独立运行的。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604633.png" alt="image-20240117211130785"></p><blockquote><p>注意：</p><p>yum是一个在线软件管理工具，所以使用yum进行的操作大都是需要在联网的条件下才能正常使用。</p></blockquote><h5 id="YUM的配置文件"><a href="#YUM的配置文件" class="headerlink" title="YUM的配置文件"></a>YUM的配置文件</h5><p><strong>容器说明</strong></p><p>虽然yum是你在联网后就能直接使用，不过，由于你系统的站点镜像没选择好，会导致连接速度非常慢！所以，这时候就需要我们去手动修改yum的设置文档了。</p><p><strong>容器查询</strong></p><p>首先，可以先查询一下目录yum server所使用的容器有哪些。</p><p>使用命令：<code>yum repolist all</code>，查询结果如下：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604634.png" alt="image-20240117211645248"></p><blockquote><p>如上图，只有当最右边的status为enabled该容器才算激活</p><p>/etc/yum.repos.d/里面会有多个配置文件（文件名以.repo结尾），yum会从里面逐查找，所以里面的容器名称不能有重复。</p></blockquote><p><strong>配置文件修改</strong></p><p>打开配置文件：<code>vim /etc/yum.repos.d/CenOS-Base.repo</code></p><p>实例1：配置阿里yum源</p><p>1：安装wget  (如果已经安装了则省略）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget</span><br></pre></td></tr></table></figure><p>2：备份 /etc/yum.repos.d/Centos-Base.repo文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">mv Centos-Base.repo Centos-Base.repo.back</span><br></pre></td></tr></table></figure><p>3：下载阿里云的Centos-7.repo文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -0 Centos-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>4：重新加载yum</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p>5：检查配置的源是否是阿里的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/yum.repos.d/Centos-Base.repo</span><br></pre></td></tr></table></figure><h5 id="yum使用手册"><a href="#yum使用手册" class="headerlink" title="yum使用手册"></a>yum使用手册</h5><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604635.png" alt="image-20240117212501766"></p><p><strong>小技巧：</strong></p><p>使用参数-y，当遇到需要等待用户输入时，这个选项会提供yes的响应，如上面的例子可以写成：</p><p><code>yum install -y emacs</code></p><h3 id="Linux下常用软件安装-MySql安装"><a href="#Linux下常用软件安装-MySql安装" class="headerlink" title="Linux下常用软件安装_MySql安装"></a>Linux下常用软件安装_MySql安装</h3><h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><p>下载YUM库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装YUM库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p>报错</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604636.png" alt="image-20240117213430099"></p><p>解决办法：不对gpg进行验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ny install mysql-community-server --nogpgcheck</span><br></pre></td></tr></table></figure><p>完成安装，重启mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;password&quot; /var/log/mysqld.log</span><br><span class="line">[root@hadoop8 ~]# grep &quot;password&quot;/var/log/mysqld.log </span><br><span class="line">2018-10-13T08:33:27.994868Z 1 [Note]A temporary password is generated for root@localhost:yjov.Ow*ywPk</span><br></pre></td></tr></table></figure><p>复制粘贴上边的密码进入数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>输入初始密码，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库</p><p>修改密码命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span></span><br><span class="line">Your password does not satisfy the current policy requirements</span><br></pre></td></tr></table></figure><p>解决报错如下</p><h4 id="修改密码策略"><a href="#修改密码策略" class="headerlink" title="修改密码策略"></a>修改密码策略</h4><p>因为当前的密码太复杂不方便后期做实验，所以使用命令修改密码策略两种方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">set</span> global validate_password_policy=0;</span></span><br><span class="line">Query OK,0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">set</span> global validate_password_policy=LoW;</span></span><br><span class="line">Query OK,0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta prompt_">mysql&gt;</span><span class="language-bash">SET GLOBAL validate_password_length=6;</span></span><br><span class="line">Query OK,0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>注：执行完初始化命令后需要输入数据库root用户密码</p><p>注：密码策略分四种</p><p>1、OFF(关闭) 2、LOw(低) 3、MEDIUM(中) 4、STRONG(强)</p></blockquote><p>修改密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span></span><br></pre></td></tr></table></figure><h4 id="开启MySQL远程连接"><a href="#开启MySQL远程连接" class="headerlink" title="开启MySQL远程连接"></a>开启MySQL远程连接</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">select User,Host,Password from user;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">update user <span class="built_in">set</span> host =<span class="string">&quot;%&quot;</span> <span class="built_in">where</span> user <span class="string">&quot;root&quot;</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新信息</span></span><br><span class="line"><span class="meta prompt_">mysq1&gt; </span><span class="language-bash">flush privileges;</span></span><br></pre></td></tr></table></figure><h3 id="Linux下常用软件安装-MySql卸载"><a href="#Linux下常用软件安装-MySql卸载" class="headerlink" title="Linux下常用软件安装_MySql卸载"></a>Linux下常用软件安装_MySql卸载</h3><p>检查是否安装了MySQL组件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]rpm -qa grep -i mysql</span><br><span class="line">mysq157-community-release-el7-10.noarch</span><br><span class="line">mysq1-community-libs-5.7.36-1.el7.x86_64</span><br><span class="line">mysq1-community-server-5.7.36-1.el7.x86_64</span><br><span class="line">mysql-community-common-5.7.36-1.el7.x86_64</span><br><span class="line">mysq1-community-client-5.7.36-1.el7.x86_64</span><br><span class="line">mysq1-community-libs-compat-5.7.36-1.el7.x86_6</span><br></pre></td></tr></table></figure><p>卸载前关闭MySQL服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mysqld</span><br><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><p> 收集MySQL对应的文件夹信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis mysql</span><br><span class="line">mysql:/usr/bin/mysql /usr/1ib64/mysql /usr/share/mysql  /usr/share/man/man1/mysql.1.gz</span><br></pre></td></tr></table></figure><p>卸载删除MySQL各类组件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rpm -ev --nodeps mysq157-community-release-el7-10.noarch</span><br><span class="line">rpm -ev --nodeps mysq1-community-libs-5.7.36-1.el7.x86_64</span><br><span class="line">rpm -ev --nodeps mysql-community-server-5.7.36-1.e17.x86_64</span><br><span class="line">rpm -ev --nodeps mysq1-community-common-5.7.36-1.el7.x86_64</span><br><span class="line">rpm -ev --nodeps mysq1-community-client-5.7.36-1.el7.x86_64</span><br><span class="line">rpm -ev --nodeps mysql-community-libs-compat-5.7.36-1.e17.x86_64</span><br></pre></td></tr></table></figure><p>删除MySQL对应的文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@DB-Server init.d]# whereis mysql</span><br><span class="line">mysql:</span><br><span class="line">[root@DB-Server init.d]# find /-name mysql</span><br><span class="line">/var/lib/mysql</span><br><span class="line">/var/1ib/mysql/mysql</span><br><span class="line">/usr/lib64/mysql</span><br><span class="line">[root@DB-Server init.d]# rm -rf /var/lib/mysql</span><br><span class="line">[root@DB-server init.d]# rm -rf /var/lib/mysq1/mysql</span><br><span class="line">[root@DB-Server init.d]# rm -rf /usr/lib64/mysql</span><br></pre></td></tr></table></figure><p>删除mysql用户及用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@DB-Server init.d]# rpm -qa | grep -i mysql</span><br></pre></td></tr></table></figure><h3 id="Linux进程管理"><a href="#Linux进程管理" class="headerlink" title="Linux进程管理"></a>Linux进程管理</h3><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>查看系统中所有进程</p><p>语法：</p><p><code>ps [options] [--help]</code></p><blockquote><p>参数：</p><ul><li>-a：显示所有进程（包括其他用户的进程）</li><li>-u：用户以及其他详细信息</li><li>-x：显示没有控制终端的进程</li></ul></blockquote><p>USER  PID  %CPU  %MEM  VSZ  RSS  TTY  STAT  START  TIME  COMMAND</p><blockquote><ul><li>USER：行程拥有者</li><li>PID：pid</li><li>%CPU：占用的CPU使用率</li><li>%MEM：占用的记忆体使用率</li><li>VSZ：占用的虚拟记忆体大小</li><li>RSS：占用的记忆体大小</li><li>TTY：终端的次要装置号码(minor device number of tty)</li><li>STAT：该行程的状态：</li><li><p>D：无法中断的休眠状态（通常IO的进程）</p></li><li><p>R：正在执行中</p></li><li>S：静止状态</li><li>T：暂停执行</li><li>Z：不存在但暂时无法消除</li><li>W：没有足够的记忆体分页可分配</li><li>&lt;：高优先序的行程</li><li>N：低优先序的行程</li><li>L：有记忆体分页分配并锁在记忆体内（实时系统或捱A/O)</li><li>START：行程开始时间</li><li>TIME：执行的时间</li><li>COMMAND：所执行的指令</li></ul></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604637.png" alt="image-20240117220916848"></p><p>实例1：找出和cron与syslog这两个服务有关的PID号码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@zk3 home]# ps -aux | egrep &#x27;(cron syslog)&#x27;</span><br><span class="line">root 714 0.0 0.1 126388 1680? Ss Oct17 0:01 /usr/sbin/crond -n</span><br><span class="line">root 1069 0.0 0.4 222780 4552? ssl Oct17 0:49 /usr/sbin/rsyslogd -n</span><br><span class="line">root 15844 0.0 0.0 112808 988 pts/0 R+ 10:39 0:00 grep -E --color=auto (cron|syslog)</span><br></pre></td></tr></table></figure><blockquote><p>温馨提示：</p><p>egrep是grep的扩展和grep -e是一样的</p><p>grep中的匹配字符，全部当作字符串来处理，但是不支持正则表达式的特殊元字符</p><p>egrep可以支特元字符</p><p>^：指匹配的字符串在行首，</p><p>$：指匹配的字符串在行尾，</p></blockquote><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>查看系统健康状态，windows加强版任务管理器</p><p>语法：</p><p><code>top [-d] | top [-bnp]</code></p><blockquote><p>选项</p><ul><li>-d：屏幕刷新间隔时间；</li><li>-p&lt;进程号&gt;：指定进程；</li></ul></blockquote><p>实例1：每2s更新一次top，观察整体信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -d 2</span><br></pre></td></tr></table></figure><p>top是一个不错的进程观察工具，但不同于ps是静态的结果输出。top这个进程可以持续地监测整个系统的进程的工作状态。</p><h4 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h4><p>htop的介绍</p><p>htop是Linux系统中的一个互动的进程查看器，与Linux传统的top比较的话，htop更人性化并且还支持鼠标操作！</p><p>htop的安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装epel源</span></span><br><span class="line">yum install epel-release -y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装htop</span></span><br><span class="line">yum install -y htop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装完毕后命令行输入</span></span><br><span class="line">htop</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604638.png" alt="image-20240117222438000"></p><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><p>终止进程，kill的应用是和ps或者grep命名结合在一起使用的。</p><p>语法：</p><p><code>kill [信号量] 进程ID</code></p><p>注：信号代码可以省略，常用的信号代码是-9，表示强制终止</p><p>实例1：终止所有的httpd进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps auxf | grep httpd</span><br><span class="line">kill -9 4158</span><br></pre></td></tr></table></figure><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><p>netstat命令是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连以及每一个网络接口设备的状态信息。</p><p>语法：</p><p><code>netstat [选项]</code></p><p>实例1：列出所有端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">netstat -a  # 列出所有端口</span><br><span class="line">netstat -at # 列出所有TCP端口</span><br><span class="line">netstat -au # 列出所有UDP端口</span><br><span class="line">netstat -ax # 列出所有unix端口</span><br><span class="line">netstat -atnlp # 直接使用ip地址列出所有处理监听状态的TCP端口，且加上程序名</span><br></pre></td></tr></table></figure><p>实例2：显示每个协议的统计信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -s  # 显示所有端口的统计信息</span><br><span class="line">netstat -st # 显示所有TCP的统计信息</span><br><span class="line">netstat -su # 显示所有UDP的统计信息</span><br></pre></td></tr></table></figure><p>实例3：显示核心路由信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -r # 显示所有端口的统计信息</span><br><span class="line">netstat -rn # 显示所有TCP的统计信息</span><br></pre></td></tr></table></figure><h3 id="Linux系统服务"><a href="#Linux系统服务" class="headerlink" title="Linux系统服务"></a>Linux系统服务</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401181604639.png" alt="image-20240117223234930"></p><h4 id="Service命令"><a href="#Service命令" class="headerlink" title="Service命令"></a>Service命令</h4><p>服务(service)本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如(mysql,sshd防火墙等)，因此我们又称为守护进程。</p><p>语法：</p><p><code>service 服务名 [start | stop | restart | reload | status]</code></p><blockquote><p>注意：</p><p>service命令其实是去/etc/init.d目录下，去执行相关程序</p></blockquote><p>实例1： 查看当前防火墙的状况，关闭防火墙和重启防火墙。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zk3 ~]# service iptables status</span><br></pre></td></tr></table></figure><h4 id="Systemd命令"><a href="#Systemd命令" class="headerlink" title="Systemd命令"></a>Systemd命令</h4><p>Linux的启动一直采用init进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/apache2 start</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">service apache2 start</span><br></pre></td></tr></table></figure><blockquote><p>service两个缺点：</p><ul><li>一是启动时间长。init进程是串行启动只有前一个进程启动完，才会启动下一个进程。</li><li>二是启动脚本复杂。init进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。</li></ul></blockquote><p>Systemd并不是一个命令，而是一组命令，涉及到系统管理的方方面面。</p><h5 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h5><p><code>systemctl</code>是Systemd的主命令，用于管理系统。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221974.png" alt="image-20240118160941097"></p><h5 id="systemd-analyze"><a href="#systemd-analyze" class="headerlink" title="systemd-analyze"></a>systemd-analyze</h5><p>systemd-analyze命令用于查看启动耗时。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看启动耗时</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemd-analyze</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看每个服务的启动耗时</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemd-analyze blame</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示瀑布状的启动过程流</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemd-analyze critical-chain</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示指定服务的启动流</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemd-analyze critical-chain atd.service</span></span><br></pre></td></tr></table></figure><h5 id="hostnamectl"><a href="#hostnamectl" class="headerlink" title="hostnamectl"></a>hostnamectl</h5><p>hostnamectl命令用于查看当前主机的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前主机的信息</span></span><br><span class="line">hostnamectl</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置主机名。</span></span><br><span class="line">sudo hostnamect]set-hostname rhel7</span><br></pre></td></tr></table></figure><h5 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h5><p>timedatectl命令用于查看当前时区设置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前时区设置</span></span><br><span class="line">timedatectl</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有可用的时区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">timedatect list-timezones</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置当前时区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo timedatectl set-timezone America/New_York</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo timedatectl set-time YYYY-MM-DD</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo timedatectl set-time HH:MM:SS</span></span><br></pre></td></tr></table></figure><p>Systemd并不是一个命令，而是一组命令，涉及到系统管理的方方面面。</p><ul><li>systemctl 是Systemd的主命令管理系统</li><li>systemd-analyze 命令用于查看启动耗时。</li><li>hostnamectl 命令用于查看当前主机的信息。</li><li>localectl 命令用于查看本地化设置。</li><li>timedatectl 命令用于查看当前时区设置。</li></ul><h4 id="chkconfig"><a href="#chkconfig" class="headerlink" title="chkconfig"></a>chkconfig</h4><p>chkconfig命令用来更新、查询、改动不同执行级上的系统服务。比方安装了httpd服务，而且把启动的脚本放在了/etc/rc.d/init.d文件夹下，有时候须要开机自己主动启动它，而有时候则不须要，因此，就能够使chkconfig命令来进行控制。</p><blockquote><p>选项：</p><ul><li>—add：将相应的服务加入chkconfig管理</li><li>—del：将相应的服务从chkconfig管理中删除</li><li>—level：查看相应服的运级别</li></ul></blockquote><p>实例1：</p><p>列出chkconfig所知道的所有命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list</span><br></pre></td></tr></table></figure><p>开启服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig telnet on  # 开启Telnet服务</span><br><span class="line">chkconfig --list     # 列出chkconfig所知道的所有的服务的情况</span><br></pre></td></tr></table></figure><p>关闭服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig telnet off  # 关闭Telnet服务</span><br><span class="line">chkconfig --list      # 列出chkconfig所知道的所有的服务的情况</span><br></pre></td></tr></table></figure><p>systemctl置服务开机启动、不启动、查看各级别下服务启动状态等常用命令</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221975.png" alt="image-20240118162325324"></p><p><strong>经常使用服务介绍</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">amd:  # 自己主动安装网络文件系统守侯进程</span><br><span class="line">apmd: # 高级电源管理</span><br><span class="line">Arpwatch: # 记录日志并构建一个在LAN接口上看到的以太网地址和IP地址对数据库</span><br><span class="line">Autofs: # 自己主动安装管理进程automount。与NFS相关，依赖于NIS</span><br><span class="line">Bootparamd: # 引导參数server。为LAN上的无盘工作站提供引导所需的相关信息</span><br><span class="line">crond: # 计划任务</span><br><span class="line">Dhcpd: # 启动一个动态IP地址分配server</span><br><span class="line">Gated: # 网关路由守候进程，使用动态的OSPF路由选择协议</span><br><span class="line">Httpd: # WEBserver</span><br><span class="line">Inetd: # 支持多种网络服务的核心守候程序</span><br><span class="line">Innd:  # Usenet新闻server</span><br><span class="line">Linuxconf: # 同意使用本地WEBserver作为用户接口来配置机器</span><br><span class="line">Lpd:   # 打印server</span><br><span class="line">Mars-nwe:  # mars-nwe文件和用于Nove1T的打印server</span><br><span class="line">Mcserv:# Midnight命令文件server</span><br><span class="line">named: # DNSserver</span><br><span class="line">netfs: # 安装NFS、Samba和NetWare网络文件系统</span><br><span class="line">network: # 激活己配置网络接口的脚本程序</span><br><span class="line">nfs:   # 打开NFS服务</span><br><span class="line">nscd:  # nscdserver,用于NTS一个支持服务，它快速缓存用户口令和组成成员关系</span><br><span class="line">portmap: # RPC portmap管理器，与inetd相似，它管理基于RPc服务的连接</span><br><span class="line">postgresq1: # 一种SQL数据库server。</span><br><span class="line">routed: # 路由守候进程，使用动态RIP路由选择协议</span><br><span class="line">rstatd: # 一个为LAN上的其他机器收集和提供系统信息的守候程序</span><br><span class="line">ruserd: # 这是一个基于RPC的服务。它提供关于当前记录到LAN上一个机器日志中的用户信息</span><br><span class="line">rwalld: # 这是一项基于RPC的服务。同意用户给每一个注冊到LAN机器的其他终端写消息</span><br><span class="line">rwhod:  # 激活rwhod.服务进程。它支持LAN的rwho和ruptime服务</span><br><span class="line">sendmail: # 邮件serversendmail</span><br><span class="line">smb:      # Samba文件共享/打印服务</span><br><span class="line">snmpd: # 本地简单网络管理候进程</span><br><span class="line">squid: # 激活代理serversquid</span><br><span class="line">syslog: # 一个让系统引导时起动sys1og和k1ogd系统日志守候进程的脚本</span><br><span class="line">xfs: # X Window字型server,为本地和远程Xserver提供字型集</span><br><span class="line">xntpd: # 网络时间server</span><br><span class="line">ypbind: # 为NIS(网络信息系统)客户机激活ypbind服务进程</span><br><span class="line">yppasswdd: # NIS口令server</span><br><span class="line">ypserv: # NIS主server</span><br><span class="line">gpm: # 管鼠标的服务</span><br><span class="line">identd: # AUTH服务。在提供用户信息方面与finger相似</span><br></pre></td></tr></table></figure><h3 id="Linux系统定时任务"><a href="#Linux系统定时任务" class="headerlink" title="Linux系统定时任务"></a>Linux系统定时任务</h3><h4 id="什么是定时任务"><a href="#什么是定时任务" class="headerlink" title="什么是定时任务"></a>什么是定时任务</h4><p>定时任务命令是cond，crond就是计划任务，类似于我们平时生活中的闹钟，定点执行。</p><h4 id="为什么要用crond"><a href="#为什么要用crond" class="headerlink" title="为什么要用crond"></a>为什么要用crond</h4><p>计划任务主要是做一些周期性的任务，比如凌晨3点定时备份数据、晚上23点开启网站抢购接口、凌晨0点关闭抢占接口等。</p><blockquote><p>计划任务主要分为以下两种使用情况：</p><ol><li><p>系统级别的定时任务</p><p>临时文件清理、系统信息采集、日志文件切割</p></li><li><p>用户级别的定时任务</p><p>定时向互联网同步时间、定时备份系统配置文件、定时备份数据库的数据。</p></li></ol></blockquote><h4 id="crontab配置文件"><a href="#crontab配置文件" class="headerlink" title="crontab配置文件"></a>crontab配置文件</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221976.png" alt="image-20240118163926164"></p><h4 id="crontab的时间编写规范"><a href="#crontab的时间编写规范" class="headerlink" title="crontab的时间编写规范"></a>crontab的时间编写规范</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00 02 * * * ls   # 每天的凌晨2点整执行</span><br><span class="line">00 02 1 * * ls    # 每月的1日的凌晨2点整执行</span><br><span class="line">00 02 14 2 * ls  # 每年的2月14日凌晨2点执行</span><br><span class="line">00 02 * * 7 ls   # 每周天的凌晨2点整执行</span><br><span class="line">00 02 * 6 5 ls   # 每年的6月周五凌晨2点执行</span><br><span class="line">00 02 14 * 7 ls  # 每月14日或每周日的凌晨2点都执行</span><br><span class="line">00 02 14 2 7 ls  # 每年2月14日或每年2月的周天的凌晨2点执行</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221977.png" alt="image-20240118164637041"></p><h4 id="crontab命令选项"><a href="#crontab命令选项" class="headerlink" title="crontab命令选项"></a>crontab命令选项</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-e # 编辑定时任务</span><br><span class="line">-l # 查看定时任务</span><br><span class="line">-r # 删除定时任务</span><br><span class="line">-u # 指定其他用户</span><br></pre></td></tr></table></figure><h4 id="计划任务实践示例"><a href="#计划任务实践示例" class="headerlink" title="计划任务实践示例"></a>计划任务实践示例</h4><p>假设在每周一、三、五的凌晨3点25分，都需要使用tr命令把某个网站的数据目录进行打包处理，使其作为一个备份文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25 3 * * 1,3,5 /usr/bin/tar -zcvf backup.tar.gz /opt/wwwroot</span><br></pre></td></tr></table></figure><h3 id="Linux网络防火墙"><a href="#Linux网络防火墙" class="headerlink" title="Linux网络防火墙"></a>Linux网络防火墙</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221978.png" alt="image-20240118165106513"></p><h4 id="防火墙管理工具"><a href="#防火墙管理工具" class="headerlink" title="防火墙管理工具"></a>防火墙管理工具</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221979.png" alt="image-20240118165212515"></p><h4 id="firewalld概述"><a href="#firewalld概述" class="headerlink" title="firewalld概述"></a>firewalld概述</h4><p>Centos系统中集成了多款防火墙管理工具，其中firewalld服务是默认的防火墙配置管理工具，它拥有基于CLI(命令行界面)和基于GUI（图形用户界面）的两种管理方式：</p><h5 id="firewalld中常用的区域名称及测了规则"><a href="#firewalld中常用的区域名称及测了规则" class="headerlink" title="firewalld中常用的区域名称及测了规则"></a>firewalld中常用的区域名称及测了规则</h5><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221980.png" alt="image-20240118170810943"></p><h5 id="firewalld防火墙的配置"><a href="#firewalld防火墙的配置" class="headerlink" title="firewalld防火墙的配置"></a>firewalld防火墙的配置</h5><blockquote><p>使用firewall—cmd命令行工具。</p><p>使用firewall-config图形工具。</p><p>编写/etc/firewalld/中的配置文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">启动：systemctl start firewalld</span><br><span class="line">关闭：systemct1 stop firewalld</span><br><span class="line">查看状态：</span><br><span class="line">systemctl status firewalld</span><br><span class="line">firewall-cmd --state</span><br><span class="line">开机禁用：systemctl disable firewalld</span><br><span class="line">开机启用：systemct1 enable firewalld</span><br></pre></td></tr></table></figure><h4 id="终端管理工具"><a href="#终端管理工具" class="headerlink" title="终端管理工具"></a>终端管理工具</h4><p>Liux命令时曾经听到，命令行终端是一种极富效率的工作方式，frewalld-cmd是firewalld防火墙配置管理工具的CLI(命令行界面)版本。</p><h5 id="firewalld-cmd命令的参数以及作用"><a href="#firewalld-cmd命令的参数以及作用" class="headerlink" title="firewalld-cmd命令的参数以及作用"></a>firewalld-cmd命令的参数以及作用</h5><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221981.png" alt="image-20240118170206573"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221982.png" alt="image-20240118170235886"></p><blockquote><p>:warning:注意:</p><p>使用firewalld配置的防火墙策略默认为运行时(Runtime)模式，又称为当前生效模式，而且随着系统的重启会失效。如果想让配置策略一直存在，就需要使用永久(Permanent)模式了，方法就是在用firewall-cmd命令正常设置防火墙策略时添加-permanent参数，这样配置的防火墙策略就可以永久生效了。</p><p>但是，永久生效模式有一个“不近人情“的特点，就是使用它设置的策略只有在系统重启之后才能自动生效：</p></blockquote><h4 id="区域管理示例"><a href="#区域管理示例" class="headerlink" title="区域管理示例"></a>区域管理示例</h4><p>显示当前系统中的默认区域</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --get-default-zone</span><br></pre></td></tr></table></figure><p>显示默认区域的所有规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure><p>显示当前正在使用的区域及其对应的网卡接口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --get-active-zones</span><br></pre></td></tr></table></figure><p>设置默认区域</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --set-default-zone=home</span><br></pre></td></tr></table></figure><h4 id="端口管理示例"><a href="#端口管理示例" class="headerlink" title="端口管理示例"></a>端口管理示例</h4><p>查看开启的端口列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><p>开启某端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# firewall-cmd --zone=public --add-port=8080/tcp</span><br><span class="line">success</span><br></pre></td></tr></table></figure><p>关闭某端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# firewall-cmd --zone=public --remove-port=8080/tcp</span><br><span class="line">success </span><br></pre></td></tr></table></figure><h4 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h4><p>安全增强型Linux(Security-Enhanced Linux)简称SELinux,它是一个Linux内核模块，也是Linux的一个安全子系统。</p><p>SELinux主要由美国国家安全局开发。2.6及以上版本的Linux内核都已经集成了SELinux模块。</p><blockquote><p>说明：</p><p>当您全神贯注地使用它给照片进行美颜的时候，它却在后台默默监听着浏览器中输入的密码信息，而这显然不应该是它应做的事情，SELinux安全子系统就是为了杜绝此类情况而设计的，它能够从多方面监控违法行为。</p><ol><li>对服务程序的功能进行限制（确保程序干不了出格的事情）</li><li>对文件资源的访问资源限制(SELinux安全上下文确保文件资源只能被其他所属的服务程序进行访问)</li></ol></blockquote><p><strong>SELinux服务有三种配置模式：</strong></p><ul><li>enforcing：强制启用安全策略模式，将拦截服务的不合法请求。</li><li>permissive：遇到服务越权访问时，只发出警告而不强制拦截。</li><li>disabled:对于越权的行为不警告也不拦截。</li></ul><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221983.png" alt="image-20240118171908002"></p><blockquote><p>SELinux服务的主配置文件中，定义的是SELinux的默认运行状态，可以将其理解为系统重启后的状态，因此它不会在更改后立即生效。可以使用getenforce命令获得当前SELinux服务的运行模式：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# getenforce</span><br><span class="line">Enforcing</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>修改SELinux当前的运行模式(0为禁用，1为启用)。这种修改只是临时的，在系统重启后就会失效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure></blockquote><h3 id="Linux内核机制"><a href="#Linux内核机制" class="headerlink" title="Linux内核机制"></a>Linux内核机制</h3><h4 id="Linux内核都有啥"><a href="#Linux内核都有啥" class="headerlink" title="Linux内核都有啥"></a>Linux内核都有啥</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221984.png" alt="image-20240118172225059"></p><p>漫画赏析：Linux 内核到底长啥样<a href="https://linux.cn/article-8290-1.html">https://linux.cn/article-8290-1.html</a></p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/172808pim5iueyqwa5egww.jpg" alt="img"></p><p>这幅漫画是以一个房子的侧方刨面图来绘画的。使用这样的一个房子来代表 Linux 内核。</p><h4 id="地基"><a href="#地基" class="headerlink" title="地基"></a>地基</h4><p>作为一个房子，最重要的莫过于其地基，在这个图片里，我们也从最下面的地基开始看起：</p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/173034wv1qodoavs7v11q1.jpg" alt="地基"></p><p>地基（底层）由一排排的文件柜组成，井然有序，文件柜里放置着“文件”——电脑中的文件。左上角，有一只胸前挂着 421 号牌的小企鹅，它表示着 PID（进程 ID Process ID） 为 421 的进程，它正在查看文件柜中的文件，这代表系统中正有一个进程在访问文件系统。在右下角有一只小狗，它是看门狗watchdog ，这代表对文件系统的监控。</p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/173228e3ehznhh5wzuwnhk.jpg" alt="一层（地面层）"></p><h4 id="一层（地面层）"><a href="#一层（地面层）" class="headerlink" title="一层（地面层）"></a>一层（地面层）</h4><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/173346wq87xgqp8kzk1up7.jpg" alt="进程表"></p><p>在这一层，最引人瞩目的莫过于中间的一块垫子，众多小企鹅在围着着桌子坐着。这个垫子的区域代表进程表。</p><p>左上角有一个小企鹅，站着，仿佛在说些什么这显然是一位家长式的人物，不过看起来周围坐的那些小企鹅不是很听话——你看有好多走神、自顾自聊天的——“喂喂，说你呢，哇塞娃（171），转过身来”。它代表着 Linux 内核中的初始化（init）进程，也就是我们常说的 PID 为 1 的进程。桌子上坐的小企鹅都在等待状态wait中，等待工作任务。</p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/173448yl694u97ihh6sl9h.jpg" alt="看门狗"></p><p>瞧瞧，垫子（进程表）两旁有两只小狗，它会监控小企鹅的状态（监控进程），当小企鹅们不听话时，它就会汪汪地叫喊起来。</p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/173557n1i1xscsxiclue5s.jpg" alt="http 进程"></p><p>在这层的左侧，有一只号牌为 1341 的小企鹅，守在门口，门上写着 80，说明这个 PID 为 1341 的小企鹅负责接待 80 端口，也就是我们常说的 HTTP （网站）的端口。小企鹅头上有一片羽毛，这片羽毛大有来历，它是著名的 HTTP 服务器 Apache 的 Logo。喏，就是这只：</p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/11/181641irppc393zm96lcbw.jpg" alt="apache logo"></p><p>向右看，我们可以看到这里仍有一扇门，门上写着 21，但是，看起来这扇门似乎年久失修，上面的门牌号都歪了，门口也没人守着。看起来这个 21 端口的 FTP 协议有点老旧了，目前用的人也比以前少了，以至于这里都没人接待了。</p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/173801cijdj9iuqdzh4v2v.jpg" alt="无人看守的 FTP 进程"></p><p>而在最右侧的一个门牌号 22 的们的待遇就大为不同，居然有一只带着墨镜的小企鹅在守着，看起来好酷啊，它是黑衣人叔叔吗？为什么要这么酷的一个企鹅呢，因为 22 端口是 SSH 端口，是一个非常重要的远程连接端口，通常通过这个端口进行远程管理，所以对这个端口进来的人要仔细审查。</p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/173855y3zutv6w2bgwfg2u.jpg" alt="SSH 守护进程"></p><p>它的身上写着 52，说明它是第 52 个小企鹅。</p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/174017tl49c9ca4lh9wzur.jpg" alt="到达文件系统"></p><p>在图片的左上角，有一个向下台阶。这个台阶是底层（地基）的文件系统中的，进程们可以通过这个台阶，到文件系统中去读取文件，进行操作。</p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/174114ex2yjd282wewe2dj.jpg" alt="Cron 任务"></p><p>在这一层中，有一个身上写着 217 的小企鹅，他正满头大汗地看着自己的手表。这只小企鹅就是定时任务（Crontab），他会时刻关注时间，查看是否要去做某个工作。</p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/174204sqh4o4v94cwpvoib.jpg" alt="管道"></p><p>在图片的中部，有两个小企鹅扛着管道（PipeLine）在行走，一只小企鹅可以把自己手上的东西通过这个管道，传递给后面的小企鹅。不过怎么看起来前面这种（男？）企鹅累得满头大汗，而后面那只（女？）企鹅似乎游刃有余——喂喂，前面那个，裤子快掉了~</p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/174246utkckjcfj4efbf8z.jpg" alt="Wine"></p><p>在这一层还有另外的一个小企鹅，它手上拿着一杯红酒，身上写着 411，看起来有点不胜酒力。它就是红酒（Wine）小企鹅,它可以干（执行）一些来自 Windows 的任务。</p><h4 id="跃层"><a href="#跃层" class="headerlink" title="跃层"></a>跃层</h4><p>在一层之上，还有一个跃层，这里有很多不同的屏幕，每个屏幕上写着 TTY（这就是对外的终端）。比如说最左边 tty4 上输入了“fre”——这是想输入“freshmeat…”么 ：d ；它旁边的 tty2 和 tty3 就正常多了，看起来是比较正常的命令；tty7 显示的图形界面嗳，对，图形界面（X Window）一般就在 7 号终端；tty5 和 tty6 是空的，这表示这两个终端没人用。等等，tty1 呢？</p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/174350fb4ugtub22yd193d.jpg" alt="跃层"></p><p>tty（终端）是对外沟通的渠道之一，但是，不是每一个进程都需要 tty，某些进程可以直接通过其他途径（比如端口）来和外部进行通信，对外提供服务的，所以，这一层不是完整的一层，只是个跃层。</p><p>好了，我们有落下什么吗？</p><p><img src="https://img.linux.net.cn/data/attachment/album/201703/20/174437u57e34zke23nb2e7.jpg" alt="小丑？"></p><p>这小丑是谁啊？</p><p>啊哈，我也不知道，或许是病毒？你说呢？</p><h2 id="ShellScript脚本编程"><a href="#ShellScript脚本编程" class="headerlink" title="ShellScript脚本编程"></a>ShellScript脚本编程</h2><h3 id="Shell脚本入门"><a href="#Shell脚本入门" class="headerlink" title="Shell脚本入门"></a>Shell脚本入门</h3><h4 id="Shell是什么"><a href="#Shell是什么" class="headerlink" title="Shell是什么"></a>Shell是什么</h4><p>Shell英文是”壳”，Shell是一块包裹着系统核心的壳，处于操作系统的最外层。</p><p>Shell是一个用C语言编写的程序，它是用户使用Linux的桥梁。通过编写Shell命令发送给linuⅸ内核去执行，操作就是计算机硬件，所以Shell命令是用户操作计算机硬件的桥梁，Shell是命令，类似于Windows系统中的Dos命令。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221985.png" alt="image-20240118180308328"></p><p>同时它可以作为<strong>命令语言</strong>，它交互式解释和执行用户输入的命令或者自动地解释和执行预先设定好的一连串的命令；作为<strong>程序设计语言</strong>，它定义了各种变量和参数，并提供了许多在高级语言中才具有的控制结构，包括循环和分支。</p><p>为什么学习Shell脚本？</p><p>Shell脚本语言的好处是简单、易学、易用，适合处理文件和目录之类的对象，以简单的方式快速完成某些复杂的事情。通过Shell命令编程语言来提高Linux系统的管理工作效率。</p><h4 id="Shell的运行过程"><a href="#Shell的运行过程" class="headerlink" title="Shell的运行过程"></a>Shell的运行过程</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221986.png" alt="image-20240118180732072"></p><p>当用户下达指令给该操作系统的时候，时间上是把指令告诉shell,经过shell解释，处理后让内核做出相应的动作。系统的回应和输出的信息也由shl处理，然后显示在用户的屏幕上。</p><h4 id="Shell解析器"><a href="#Shell解析器" class="headerlink" title="Shell解析器"></a>Shell解析器</h4><p>查看linux系统centos支持的shell解析器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221987.png" alt="image-20240118180939827"></p><p>打印输出当前centos默认的解析器是bash语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221988.png" alt="image-20240118180949730"></p><blockquote><p>其中：</p><ul><li>echo：用于打印输出数据到终端</li><li>$SHELL：是全局共享的读取解析器类型环境变量，所有的Shell程序都可以读取的变量</li></ul></blockquote><h4 id="Shell编写格式与执行方式"><a href="#Shell编写格式与执行方式" class="headerlink" title="Shell编写格式与执行方式"></a>Shell编写格式与执行方式</h4><h5 id="脚本格式"><a href="#脚本格式" class="headerlink" title="脚本格式"></a>脚本格式</h5><ol><li><p>脚本文件后缀名规范</p><p>Shell脚本文件就是一个文本文件，后缀名建议使用.sh结尾。</p></li><li><p>首行格式规范</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br></pre></td></tr></table></figure><p> 设置当前Shell脚本文件采用bash解析器运行脚本代码</p></li><li><p>注释格式</p><p>单行注释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注释内容</span></span><br></pre></td></tr></table></figure><p>多行注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;!</span><br><span class="line"># 注释内容1 </span><br><span class="line"># 注释内容2</span><br><span class="line">!</span><br></pre></td></tr></table></figure></li></ol><h5 id="脚本文件执行的三种方式"><a href="#脚本文件执行的三种方式" class="headerlink" title="脚本文件执行的三种方式"></a>脚本文件执行的三种方式</h5><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221989.png" alt="image-20240118181812661"></p><p>添加权限：<code>chmod a+x helloworld.sh</code></p><p>三种方式的区别：sh或bash执行脚本文件方式是直接使用Shell解析器运行脚本文件，不需要可执行权限，仅路径方式是执行脚本文件自己，需要可执行权限。</p><h4 id="解释执行多个命令"><a href="#解释执行多个命令" class="headerlink" title="解释执行多个命令"></a>解释执行多个命令</h4><p>案例：执行test.sh脚本，实现在/root/bjsxt/目录下创建一个onetest..txt,在onetest.txt文件中增加内容”hello onetest shell”</p><p>实现步骤：</p><ol><li><p>使用<code>mkdir</code>创建/root/bjsxt目录</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221990.png" alt="image-20240118182403442"></p></li><li><p>创建脚本文件</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221991.png" alt="image-20240118182700294"></p></li><li><p>编写脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root/bjsxt/目录下创建onetest.txt文件</span></span><br><span class="line">touch /root/bjsxt/onetest.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在onetest.txt文件中写入内容</span></span><br><span class="line">echo &quot;Hello Shell&quot; &gt;&gt; /root/bjsxt/onetest.txt</span><br></pre></td></tr></table></figure></li><li><p>执行脚本文件使用cat命令查看文件内容</p><p>​    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221992.png" alt="image-20240118182745532"></p></li></ol><h3 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h3><p>变量用于存储管理运行在内存中的数据。</p><p>变量的类型</p><ol><li>系统环境变量</li><li>自定义变量</li><li>特殊符号变量</li></ol><h4 id="系统环境变量"><a href="#系统环境变量" class="headerlink" title="系统环境变量"></a>系统环境变量</h4><p>系统环境变量是系统提供的共享变量，是linux系统加载Shell的配置文件中定义的变量共享给所有的Shell程序使用。</p><h5 id="Shell的配置文件分类"><a href="#Shell的配置文件分类" class="headerlink" title="Shell的配置文件分类"></a>Shell的配置文件分类</h5><ol><li><p>全局配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/profile</span><br><span class="line">/etc/profile.d/*.sh</span><br><span class="line">/etc/bashrc</span><br></pre></td></tr></table></figure></li><li><p>个人配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当前用户/.bash_profile</span><br><span class="line">当前用户/.bashrc</span><br></pre></td></tr></table></figure><p>一般情况下，我们都是直接针对全局配置进行操作。</p></li></ol><h5 id="环境变量的分类"><a href="#环境变量的分类" class="headerlink" title="环境变量的分类"></a>环境变量的分类</h5><p>在Liux系统中，环境变量按照其作用范围不同大致可以分为系统级环境变量和用户级环境变量。</p><p>系统级环境变量：Shell环境加载全局配置文件中的变量共享给所有用户所有Shell程序使用，全局共享。</p><p>用户级环境变量：Shell环境加载个人配置文件中的变共享当前用户的Shell程序使用，登录用户使用。</p><h5 id="查看当前Shell系统环境变量"><a href="#查看当前Shell系统环境变量" class="headerlink" title="查看当前Shell系统环境变量"></a>查看当前Shell系统环境变量</h5><p>查看当前Shell系统环境变量，命令： <code>env</code></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221993.png" alt="image-20240118183913779"></p><h5 id="查看所有变量"><a href="#查看所有变量" class="headerlink" title="查看所有变量"></a>查看所有变量</h5><p>命令：<code>set</code></p><h5 id="常用系统环境变量"><a href="#常用系统环境变量" class="headerlink" title="常用系统环境变量"></a>常用系统环境变量</h5><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221994.png" alt="image-20240118184152132"></p><p>【示例】查看PATH环境变量</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221995.png" alt="image-20240118184326233"></p><h4 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h4><h5 id="自定义变量分类"><a href="#自定义变量分类" class="headerlink" title="自定义变量分类"></a>自定义变量分类</h5><ol><li>自定义局部变量</li><li>自定义常量</li><li>自定义全局变量</li></ol><h4 id="自定义局部变量"><a href="#自定义局部变量" class="headerlink" title="自定义局部变量"></a>自定义局部变量</h4><p>就是在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</p><h5 id="变量定义规则"><a href="#变量定义规则" class="headerlink" title="变量定义规则"></a>变量定义规则</h5><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线(_)。</li><li>不能使用Shell中的关键字作为变量名称。</li><li>在bash环境中，变量的默认类型都是字符串类型，无法直接进行数值运算。</li><li>变量的值如果有空格，必须使用双引号括起来。</li></ul><h5 id="定义变量语法"><a href="#定义变量语法" class="headerlink" title="定义变量语法"></a>定义变量语法</h5><p><code>变量名=变量值</code></p><p><strong>注意：==等号两边不能有空格==</strong></p><p>【示例】定义局部变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义变量</span></span><br><span class="line">a=10</span><br><span class="line">your_name=jack</span><br></pre></td></tr></table></figure><h5 id="查看变量"><a href="#查看变量" class="headerlink" title="查看变量"></a>查看变量</h5><p>查看变量的值方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法1：直接使用变量名查询</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">var_name</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法2：使用花括号</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;var_name&#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">区别：花括号方式适合拼接字符串</span></span><br></pre></td></tr></table></figure><h5 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h5><p>使用unset命令可以删除变量。语法：</p><p><code>unset variable_name</code></p><p>变量被删除后不能再次使用。unset命令不能删除只读变量。</p><h4 id="自定义全局变量"><a href="#自定义全局变量" class="headerlink" title="自定义全局变量"></a>自定义全局变量</h4><h5 id="父子Shell环境介绍"><a href="#父子Shell环境介绍" class="headerlink" title="父子Shell环境介绍"></a>父子Shell环境介绍</h5><p>例如：有2个Shell脚本文件A.sh和B.sh</p><p>如果在A.sh脚本文件中执行了B.sh脚本文件，那么A.sh就是父Shell环境，B.sh就是子Shell环境。</p><h5 id="自定义全局变量-1"><a href="#自定义全局变量-1" class="headerlink" title="自定义全局变量"></a>自定义全局变量</h5><p>就是在当前脚本文件中定义全局变量，这个全局变量可以在当前Shell环境与子Shell环境中都可以使用</p><p>语法：</p><p><code>export var_namel var_name2</code></p><p>测试全局变量在子Shell中是否用，在父Shel中是否可用</p><p>实现步骤：</p><ol><li><p>创建2个脚本文件test1.sh和test2.sh</p><p>​    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221996.png" alt="image-20240118185927713"></p></li><li><p>编辑test1.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义全局变量</span></span><br><span class="line">export a=100</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行test2.sh脚本文件</span></span><br><span class="line">sh test2.sh </span><br></pre></td></tr></table></figure></li><li><p>编辑test2.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出全局变量</span></span><br><span class="line">echo &quot;全局变量a的值：$a&quot;</span><br></pre></td></tr></table></figure></li></ol><h5 id="自定义系统环境变量"><a href="#自定义系统环境变量" class="headerlink" title="自定义系统环境变量"></a>自定义系统环境变量</h5><p>/etc/profile定义存储自定义系统级环境变量数据，当前用户进入Shell环境初始化的时候会加载全局配置文件/etc/profile里面的环境变量，供给所有Shell程序使用，以后只要是所有Shel‖程序或命令使用的变量，就可以定义在这个文件中。</p><p>创建环境变量步骤：</p><ol><li><p>编辑/etc/profile全局配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加命令：定义变量 VAR1=VAR1，并导出为环境变量</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>直接打开全局配置文件是在配置文件的最顶端，使用G可以快速到文件底部，gg重新回到文件的顶端。</p></li><li><p>重新加载置文件/etc/profile，因为配置文件修改后要立刻功加载里面的数据就需要重新加载，语法：</p><p><code>source /etc/profile</code></p></li><li><p>在Shell环境中读取系统级环境变量var1</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221997.png" alt="image-20240118211442150"></p></li></ol><h4 id="特殊符号变量"><a href="#特殊符号变量" class="headerlink" title="特殊符号变量"></a>特殊符号变量</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221998.png" alt="image-20240118211718305"></p><h5 id="特殊符号变量：-n"><a href="#特殊符号变量：-n" class="headerlink" title="特殊符号变量：$n"></a>特殊符号变量：<code>$n</code></h5><p><code>$n</code>：用于接收脚本文件执行时传入的参数，</p><p><code>$0</code>用于获取当前脚本文件名称。</p><p><code>$1</code>~<code>$9</code>代表获取第1个输入参数到第9个输入参数。</p><p>第10个以上参数获取参数的格式：<code>$&#123;数字&#125;</code>，否则无法获取。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试特殊符号变量 <span class="variable">$n</span></span></span><br><span class="line">echo &quot;脚本文件名： $0&quot;</span><br><span class="line">echo &quot;第一个参数： $1&quot;</span><br><span class="line">echo &quot;第二个参数： $2&quot;</span><br><span class="line">echo &quot;第三个参数： $3&quot;</span><br><span class="line">echo &quot;第九个参数： $9&quot;</span><br><span class="line">echo &quot;第十个参数： $10&quot;  # 参数有问题</span><br><span class="line">echo &quot;第十个参数： $&#123;10&#125;&quot;</span><br><span class="line">echo &quot;第11个参数： $&#123;11&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221999.png" alt="image-20240118212602737"></p><h5 id="特殊符号变量：-和"><a href="#特殊符号变量：-和" class="headerlink" title="特殊符号变量：$#和$*"></a>特殊符号变量：<code>$#</code>和<code>$*</code></h5><p><code>$#</code>是获取所有输入参数如的个数</p><p><code>$*(或$@)</code>：传递的参数作为一个字符串显示</p><p>【示例】<code>$#</code>和<code>$*</code>的使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试特殊符号变量 <span class="variable">$n</span></span></span><br><span class="line">echo &quot;脚本文件名： $0&quot;</span><br><span class="line">echo &quot;第一个参数： $1&quot;</span><br><span class="line">echo &quot;第二个参数： $2&quot;</span><br><span class="line">echo &quot;第三个参数： $3&quot;</span><br><span class="line">echo &quot;第九个参数： $9&quot;</span><br><span class="line">echo &quot;第十个参数： $10&quot;  # 参数有问题</span><br><span class="line">echo &quot;第十个参数： $&#123;10&#125;&quot;</span><br><span class="line">echo &quot;第11个参数： $&#123;11&#125;&quot;</span><br><span class="line">echo &quot;参数的个数： $#&quot;</span><br><span class="line">echo &quot;参数：$*&quot;</span><br><span class="line">echo &quot;参数：$@&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221000.png" alt="image-20240118213252605"></p><p><code>$*</code>与<code>$@</code>区别：</p><p>相同点：都是引用所有参数。</p><p>不同点：只有在双引号中体现出来。</p><p>​                <code>$*</code>获取的所有参数拼接为一个字符串，格式为：<code>&quot;$1 $2...$n&quot;</code></p><p>​                <code>$@</code>获取一组参数列表对像，格式为：<code>&quot;$1&quot; &quot;$2&quot;...&quot;$n&quot;</code></p><p>假设在脚本运行时写了三个参数1、2、3，则<code>$*</code>等价于<code>&quot;123&quot;</code>（传递了一个参数），而<code>$@</code>等价于<code>&quot;1&quot; &quot;2&quot; &quot;3&quot;</code>（传递了三个参数）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试$*与<span class="variable">$@</span>的区别</span></span><br><span class="line">for i in &quot;$*&quot;</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line">echo &quot;---------------&quot;</span><br><span class="line">for i in &quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221001.png" alt="image-20240118214241636"></p><h5 id="特殊符号变量-1"><a href="#特殊符号变量-1" class="headerlink" title="特殊符号变量$?"></a>特殊符号变量<code>$?</code></h5><p><code>$?</code>用于获取上一个Shell命令的退出码，或者是函数的返回值。</p><p>每个Shell命令的执行都有一个返回值，这个返回值用于说明命令执行是否成功。一般来说，返回0代表命令代表执行成功，非0代表执行失败。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">function test_add()&#123;</span><br><span class="line">echo &quot;调用函数&quot;</span><br><span class="line">return 10</span><br><span class="line">&#125;</span><br><span class="line">test_add</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221002.png" alt="image-20240118225919217"></p><h5 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号$$$$"></a>特殊符号$$$$</h5><p>$$$$:用于获取当前Shell环境的进程ID号。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221003.png" alt="image-20240119220128876"></p><h4 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h4><h5 id="字符串创建"><a href="#字符串创建" class="headerlink" title="字符串创建"></a>字符串创建</h5><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了)，字符串可以用<strong>单引号</strong>，也可以用双引号，也可以<strong>不用引号</strong>。</p><p>【示例】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建字符串使用单引号</span></span><br><span class="line">a=&#x27;aaaa&#x27;</span><br><span class="line">echo $a</span><br><span class="line">echo $&#123;a&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建字符串使用双引号</span></span><br><span class="line">b=&quot;bbb&quot;</span><br><span class="line">echo $b</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建字符串不使用引号</span></span><br><span class="line">c=ccc</span><br><span class="line">echo $c</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">d=aa bb</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$d</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意如果变量的值中间有空格，需要使用引号创建</span></span><br><span class="line">d=&quot;aa bb&quot;</span><br><span class="line">echo $d</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221004.png" alt="image-20240119220914783"></p><blockquote><p>三者区别：</p><ul><li><p>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；双引号里可以有变量</p></li><li><p>字符串中还可以出现双引号的子字符串，但是需要转义</p></li><li>不被引号包围的字符串中出现变量时也会被解析，这一点和双引号””包围的字符串一样。字符串中不能出现空格，否则空格后边的字符串会作为其他命令解析（直接输出没有问题，但不能赋值给其它变量)</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=&#x27;aaaa&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出字符串变量</span></span><br><span class="line">echo &#x27;hellosa&#x27;</span><br><span class="line">echo &quot;hello$a&quot;</span><br><span class="line">echo &quot;hello\&quot;$a\&quot;&quot;</span><br><span class="line">echo hello$a</span><br><span class="line">echo &quot;hello $a&quot;</span><br><span class="line">echo hello $a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋值给其他变量</span></span><br><span class="line">str1=&quot;hello$a&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">str1=hello <span class="variable">$a</span> <span class="comment"># 不允许</span></span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221005.png" alt="image-20240119221622482"></p><h5 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h5><p>获取字符串长度语法：</p><p><code>$&#123;#字符串变量名&#125;`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取字符串长度</span></span><br><span class="line">a=&quot;abc&quot;</span><br><span class="line">b=&quot;123456&quot;</span><br><span class="line">echo &quot;字符串变量a的值：$a, 长度：$&#123;#a&#125;&quot;</span><br><span class="line">echo &quot;字符串变量b的值：$&#123;b&#125;, 长度：$&#123;#b&#125;&quot;</span><br></pre></td></tr></table></figure>![image-20240119222044188](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192221006.png)##### 字符串的拼接<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=&quot;jack&quot;</span><br><span class="line">age=22</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">无符号拼接</span></span><br><span class="line">str=$name$age</span><br><span class="line">echo $str</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">双引号拼接</span></span><br><span class="line">str=&quot;$name$age&quot;</span><br><span class="line">echo $str</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">混合拼接</span></span><br><span class="line">str=$name&#x27;,&#x27;$age</span><br><span class="line">echo $str</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字符串拼接中间有空格需要使用双号</span></span><br><span class="line">str=&quot;$name $age&quot;</span><br><span class="line">echo $str</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不支持，需要使用引号</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">str=<span class="variable">$name</span> <span class="variable">$age</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span>输出字符串中间可以有空格</span></span><br><span class="line">echo $name $age</span><br></pre></td></tr></table></figure>##### 截取字符串| 格式                     | 说明                                                         || ------------------------ | ------------------------------------------------------------ || $&#123;变量名:start:length&#125;   | 从string字符串的左边第start个字符开始，向右截取length个字符。<br/>start从0开始 || $&#123;变量名:start&#125;          | 从string字符串的左边第start个字符开始截取，直到最后          || $&#123;变量名:0-start:length&#125; | 从string字符串的右边第start个字符开始，向右截<br/>取length个字符，stat从1开始，代表右侧第一个字符 || $&#123;变量名:0-start&#125;        | 从string字符串的右边第start个字符开始截取，直到最后          || $&#123;变量名#*chars&#125;         | 从string字符串左边第一次出现`*chars`的位置开始，<br/>截取`*chars`右边的所有字符 || $&#123;变量名##*chars&#125;        | 从string字符串左边最后一次出现`*chars`的位置开<br/>始，截取`*chars`右边的所有字符 || # $&#123;变量名%chars*&#125;       | 从string字符串右边第一次出现`chars*`的位置开始，<br/>截取`chars*`左边的所有字符 || # $&#123;变量名%%chars*&#125;      | 从string字符串右边最后一次出现`chars*`的位置开<br/>始，截取`chars*`左边的所有字符 |<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">截取字符串 <span class="variable">$&#123;变量名:start:length&#125;</span></span></span><br><span class="line">str=&quot;abcdefgabc&quot;</span><br><span class="line">sub_str=$&#123;str:1:3&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名:start&#125;</span></span></span><br><span class="line">sub_str=$&#123;str:2&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名:0-start:length&#125;</span></span></span><br><span class="line">sub_str=$&#123;str:0-3:5&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名:0-start&#125;</span></span></span><br><span class="line">sub_str=$&#123;str:0-4&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名#*chars&#125;</span>   不包括第一次出现的chars</span></span><br><span class="line">sub_str=$&#123;str#*a&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名##*chars&#125;</span>  不包括最后一次出现的chars</span></span><br><span class="line">sub_str=$&#123;str##*a&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名%chars*&#125;</span>   不包括第一次出现的chars</span></span><br><span class="line">sub_str=$&#123;str%b*&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;变量名%%chars*&#125;</span>  不包括最后一次出现的chars</span></span><br><span class="line">sub_str=$&#123;str%%b*&#125;</span><br><span class="line">echo &quot;sub_str:$sub_str&quot;</span><br></pre></td></tr></table></figure>![image-20240119225130625](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401192252351.png)#### 数组变量bash支持一维数组（不支持多维数组），并且没有限定数组的大小。类似于C语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。##### 定义数组在Shell中，用括号来表示数组，数组元素用"空格"符号分开。定义数组的一般形式为：`array_name=(value0 value1 value2 value3)`数组的值类型任意，个数不限可以不使用连续的下标，而且下标的范围没有限制。`array_name=([0]=value0 [3]=value3 [5]=value5)`##### 读取数组读取数组元素值的一般格式是：`$&#123;数组名[下标]&#125;`@或*获取数组中的所有元素`$(array_name[@])``$(array_name[*])`获取数组的长度或个数`$(#array_name[@])``$(#array_name[*]`获取数组指定元素的字符长度`$&#123;#array_name[索引]&#125;`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义数组</span></span><br><span class="line">arr1=(21 33 &quot;abc&quot; &#x27;123&#x27;)</span><br><span class="line">arr2=(1 2 3 4)</span><br><span class="line">arr3=([0]=10 [1]=20 [3]=30 [4]=40 [6]=60)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据下标获取数组元素的值</span></span><br><span class="line">echo &quot;获取arr1数组第1个元素的值：$&#123;arr1[0]&#125;&quot;</span><br><span class="line">echo &quot;获取arr3数组第7个元素的值：$&#123;arr3[6]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组中的所有元素</span></span><br><span class="line">echo &quot;获取arr1数组中的所有元素：$&#123;arr1[@]&#125;&quot;</span><br><span class="line">echo &quot;获取arr2数组中的所有元素：$&#123;arr2[*]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组的长度</span></span><br><span class="line">echo &quot;获取arr1数组的长度：$&#123;#arr1[@]&#125;&quot;</span><br><span class="line">echo &quot;获取arr2数组的长度：$&#123;#arr2[*]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组指定元素的字符长度</span></span><br><span class="line">echo &quot;获取arr1数组中第4个元素的长度：$&#123;#arr1[3]&#125;&quot;</span><br></pre></td></tr></table></figure>##### 数组拼接所谓的数组拼接就是将两个数组连接成一个数组。语法：使用`@`和`*`获取数组所有元素之后进行拼接。`new_array=($&#123;array1[@]&#125; $&#123;array2[@]&#125; ...)``new_array=($&#123;array1[*])&#125; $&#123;array2[*]&#125; ...)`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义数组</span></span><br><span class="line">arr1=(1 2 3 4 5 6)</span><br><span class="line">arr2=(a b c d e f g)</span><br><span class="line">echo &quot;输出数组中所有元素：&quot;</span><br><span class="line">echo &quot;arr1数组中的所有元素：$&#123;arr1[@]&#125;&quot;</span><br><span class="line">echo &quot;arr2数组中的所有元素：$&#123;arr2[*]&#125;&quot;</span><br><span class="line">echo &quot;数组的拼接：&quot;</span><br><span class="line">new_arr=($&#123;arr1[@]&#125; $&#123;arr2[*]&#125;)</span><br><span class="line">echo &quot;拼接后数组：$&#123;new_arr[*]&#125;&quot;</span><br></pre></td></tr></table></figure>##### 数组删除删除数组可以删哪除数组中指定元素，也可以删除整个数组。删除数组中指定元素语法格式：`unset array_name[index]`删除整个数组`unset array_name`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义数组</span></span><br><span class="line">arr1=(1 2 3 4 5 6)</span><br><span class="line">arr2=(a b c d e f g)</span><br><span class="line">echo &quot;输出数组中所有元素：&quot;</span><br><span class="line">echo &quot;arr1数组中的所有元素：$&#123;arr1[@]&#125;&quot;</span><br><span class="line">echo &quot;arr2数组中的所有元素：$&#123;arr2[*]&#125;&quot;</span><br><span class="line">echo &quot;数组元素的删除：&quot;</span><br><span class="line">unset arr1[0] </span><br><span class="line">echo &quot;删除后输出arr1中的所有元素：$&#123;arr1[@]&#125;&quot;</span><br><span class="line">echo &quot;数组的删除：&quot;</span><br><span class="line">unset arr2</span><br><span class="line">echo &quot;删除arr2数组后：$&#123;arr2[*]&#125;&quot;</span><br></pre></td></tr></table></figure>### Shell内置命令#### 内置命令介绍Shell内置命令，就是由Bash Shell自身提供的命令，而不是文件系统的可执行脚本文件。使用type来确定一个命令是否是内置命令：`type 命令`![image-20240122235544837](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401231733980.png)由此可见，cd是一个Shell内建命令，而ifconfig是一个外部文件，它的位置是/sbin/ifconfig。通常来说，内置命令会比外部命令执行得更快，执行外部命令时不但会触发磁盘I/O还需要开启一个单独的进程来执行，执行完成后再退出。而执行内置命令相当于调用当前Shell进程的一个函数，还是在当前Shell环境进程内，减少了上下文切换。Bash Shell中常用的内建命令![image-20240122235750440](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401231733981.png)#### alias：给命令创建别名alisa用来给命令创建一个别名。若直接输入该命令且不带任何参数，则列出当前Shell进程中使用了哪些别名。![image-20240122235920906](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401231733982.png)##### 使用alias命令自定义别名使用alias命令自定义别名的语法格式为：`alias 别名='命令'`设置查看进程的别名<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias pslist=&#x27;ps -aux&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这样使用pslist和输入ps-aux可以达到同样的效果</span></span><br></pre></td></tr></table></figure> 删除别名<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unalias pslist </span><br></pre></td></tr></table></figure>#### echo命令：输出字符串echo是一个Shell内建命令，用来在终端输出字符串，并在最后**默认加上换行符**。#####  echo不换行输出echo命令输出结束后默认会换行，如果不希望换行，可以加上`-n`参数。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo -n &quot;echo不换行输出测试&quot;</span><br></pre></td></tr></table></figure>##### -e参数默认情况下，echo不会解析以反斜杠开头的转义字符。比如，\n表示换行，echo默认会将它作为普通字符对待。![image-20240123171639483](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401231733983.png)#### read命令：读取从键盘输入的数据read是Shell内置命令，用来从标准输入中读取数据并赋值给变量。如果没有进行重定向，默认就是从键盘读取用户输入的数据；如果进行了重定向，那么可以从文件中读取数据。read命令的用法为：  `read [-options] [variables]`options表示选项，如下表所示；variables表示用来存储数据的变量，可以有一个，也可以有多个。options和variables都是可选的，如果没有提供变量名，那么读取的数据将存放到环境变量REPLY。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试<span class="built_in">read</span>内置命令的使用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不指定选项及变量</span></span><br><span class="line">read</span><br><span class="line">echo &quot;没有指定变量获取值：$REPLY&quot;</span><br><span class="line">read a</span><br><span class="line">echo &quot;指定变量获取值：$a&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加选项 -p</span></span><br><span class="line">read -p &quot;请输入姓名：&quot; name</span><br><span class="line">read -p &quot;请输入年龄：&quot; age</span><br><span class="line">echo &quot;姓名：$name, 年龄：$age&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">read</span> 参数 -n num</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取两个字符</span></span><br><span class="line">read -n 2 -p &quot;获取输入字符串&quot; str</span><br><span class="line">echo &quot;读取输入内容：$str&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">read</span> 参数 -s</span></span><br><span class="line">read -sp &quot;请输入密码：&quot; password</span><br><span class="line">read -sp &quot;请输入确认密码：&quot; repassword</span><br><span class="line">echo &quot;密码：$password， 确认密码：$repassword&quot;</span><br><span class="line">if [ $password == $repassword ]</span><br><span class="line">then</span><br><span class="line">echo &quot;密码和确认密码一致&quot;</span><br><span class="line">else </span><br><span class="line">echo &quot;密码和确认密码不一致&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">read</span> 参数 -t</span></span><br><span class="line">read -t 5 -p &quot;输入有时间限制，请在5秒内输入：&quot; str</span><br><span class="line">echo &quot;输入内容：$str&quot;</span><br></pre></td></tr></table></figure>read命令支持的选项及options支持的参数![image-20240123172315834](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401231733984.png)![image-20240123173256121](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401231733985.png)#### exit命令exit是一个Shell内置命令，用来退出当前Shell进程，并返回一个退出状态；使用`$?`可以接收这个退出状态。exit命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是0。exit退出状态只能是一个介于0~255之间的整数，其中只有0表示成功，其它值都表示失败。【示例】Shell脚本文件中使用exit退出<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;exit命令示例&quot;</span><br><span class="line">exit 3</span><br><span class="line">echo &quot;hello exit命令&quot;</span><br></pre></td></tr></table></figure>#### declare命令declare命令的用法如下所示：`declare [+/-] [aAirfx] [变量名=变量值]`其中，-表示设置属性，+表示取消属性，aAifⅸ都是具体的选项，它们的含义如下表所示：![image-20240123180532149](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132996.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试 + -</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置一个整数变量</span></span><br><span class="line">declare -i age=20</span><br><span class="line">echo &quot;整数变量：$age&quot;</span><br><span class="line">age=aaa</span><br><span class="line">echo &quot;整数变量age: $age&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消变量设置</span></span><br><span class="line">declare +i age</span><br><span class="line">age=bbbb</span><br><span class="line">echo &quot;取消age设置后age的值: $age&quot;</span><br><span class="line">设置只读变量</span><br><span class="line">declare -r pi=3.14</span><br><span class="line">echo &quot;只读变量pi的值：$pi&quot;</span><br><span class="line">p1=3.3333</span><br><span class="line">echo &quot;只读变量pi的值：$pi&quot;</span><br></pre></td></tr></table></figure>![image-20240123194411183](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132997.png)实现key-value关联数组变量语法关联数组也称为"键值对(key-value)"数组，键(key）也即字符串形式的数组下标，值(value)也即元素值。`declare -A 关联数组变量名=([字符串key1]=值1 [字符串key2]=值2 ...)`declare也可以用于定义普通索引数组，`-a`参数创建普通或索数组 `-A`创建关联数组。`declare -a 普通数组变量名=(值1 值2 ...）``declare -a 普通数组变量名=([0]=值1 [1]=值2 ...)` 获取指定key的值`$&#123;关联数组变量名[key]&#125;`获取所有值`$&#123;关联数组变量名[*]&#125;``$&#123;关联数组变量名[@]&#125;`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建普通数组</span></span><br><span class="line">declare -a arr1=(10 20 30 &quot;abc&quot;)</span><br><span class="line">declare -a arr2=([0]=&quot;baizhan&quot; [2]=a [3]=10 [7]=70)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组元素</span></span><br><span class="line">echo &quot;数组arr1中第2个元素：$&#123;arr1[1]&#125;&quot;</span><br><span class="line">echo &quot;数组arr2中第8个元素：$&#123;arr2[7]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组中所有元素</span></span><br><span class="line">echo &quot;数组arr1中所有的元素：$&#123;arr1[*]&#125;&quot;</span><br><span class="line">echo &quot;数组arr2中所有的元素：$&#123;arr2[@]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建关联数组</span></span><br><span class="line">declare -A arr1=([&quot;aa&quot;]=10 [&quot;bb&quot;]=20 [&quot;cc&quot;]=30)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取关联数组的值</span></span><br><span class="line">echo &quot;获取关联数组的值；$&#123;arr1[&quot;aa&quot;]&#125;&quot;</span><br><span class="line">echo &quot;获取关联数组的值：$&#123;arr1[&quot;cc&quot;]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取关联数组的所有元素</span></span><br><span class="line">echo &quot;数组中所有元素的值：$&#123;arr1[*]&#125;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组的长度</span></span><br><span class="line">echo &quot;数组的长度：$&#123;#arr1[*]&#125;&quot;</span><br></pre></td></tr></table></figure>###  Shell运算符Shell和其他编程语言一样，支持多种运算符，包括：- 算数运算符- 关系运算符- 逻辑运算符- 文件测试运算符原生bash不支持简单的数学运算，需要通过其他命令来实现，如eXpr。expr是evaluate expressions的缩写，译为"求值表达式”。Shell expr是一个功能强大，并且比较复杂的命令，它除了可以实现整数计算，还可以结合一些选对字符串进行处理，例如计算字符串长度、字符串比较、字符串匹配、字符串提取等。expr语法：`expr 算术运算符表达式`获取计算结果赋值给新变量语法：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result=`expr 算术运算符表达式`</span><br></pre></td></tr></table></figure>注意：这里不是单引号是**反引号**。运算表达式运算符两边必须要有空格。运算不能是小数远算必须是整数运算。`expr 10 + 10`#### 算数运算符![image-20240123204527943](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132998.png)![image-20240123204603888](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132999.png) 注意：条件表达式要放在方括号之间，并且要有空格，例如：`[$a==$b]`是错误的，必须写成`[ $a == $b ]`。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试算术运算符</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入两个整数</span></span><br><span class="line">read -p &quot;请输入第一个数：&quot; a</span><br><span class="line">read -p &quot;请输入第二个数：&quot; b</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出输入的值</span></span><br><span class="line">echo &quot;a:$a, b:$b&quot;</span><br><span class="line">result=`expr $a + $b`</span><br><span class="line">echo &quot;加法的结果：$result&quot;</span><br><span class="line">result=`expr $a - $b`</span><br><span class="line">echo &quot;减法的结果：$result&quot;</span><br><span class="line">result=`expr $a \* $b`</span><br><span class="line">echo &quot;乘法的结果：$result&quot;</span><br><span class="line">result=`expr $a / $b`</span><br><span class="line">echo &quot;除法的结果：$result&quot;</span><br><span class="line">result=`expr $a % $b`</span><br><span class="line">echo &quot;取余的结果：$result&quot;</span><br></pre></td></tr></table></figure>#### 比较运算符##### 整数处比较运算符假定变量a为10，变量b为20：![image-20240123205455324](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132000.png)![image-20240123205538603](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132001.png)##### 字符串比较运算符字符串比较运算符可以比较2个变量，变量的类型可以为**数字（整数，小数）与字符串**。下表列出了常用的字符串运算符，假定变量a为"abc",变量b为"efg"。字符串比较可以使用`[[]]`和`[]`2种方式。![image-20240123212219672](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132002.png)![image-20240123212426794](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132003.png)字符串比较没有`<=`可以通过`[[ "a" < "b" || "a" == "b"]]``[[]]`和`[]`的区别由于(())只能比较整数，不能比较小数和字符串所以不建议使用。区别1：`[]`会产生单词分隔现象，`[[]]`不会产生单词分隔![image-20240123212926474](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132004.png)区别2：`[]`需要对`>`和`<`进行转义![image-20240123213033152](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401232132005.png)#### 布尔运算符下表列出了常用的布尔运算符，假定变量a为10，变量b为20：![image-20240124223257317](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848212.png)![image-20240124223316183](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848213.png):warning:注意：布尔运算符必须放在`[]`或与test命令配合使用才有效![image-20240124223408186](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848214.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">布尔运算符使用到<span class="keyword">if</span>条件中</span></span><br><span class="line">if [ ! $a \&gt; $b ]</span><br><span class="line">then</span><br><span class="line">echo &quot;a变量的值小于等于b&quot;</span><br><span class="line">else </span><br><span class="line">echo &quot;a变量的值大于b&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">str=&quot;abc&quot;</span><br><span class="line">if [ $str -o 1 == 2 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;条件成立&quot;</span><br><span class="line">else </span><br><span class="line">echo &quot;条件不成立&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $str -a 1 == 2 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;条件成立&quot;</span><br><span class="line">else </span><br><span class="line">echo &quot;条件不成立&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>#### 逻辑运算符假定变量a为10，变量b为20：![image-20240128171756753](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848215.png)![image-20240128171816913](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848216.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=100</span><br><span class="line">b=200</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">布尔运算符 [] ！-o -a</span></span><br><span class="line">if [ $a \&lt; $b -o 10 == 100 ]</span><br><span class="line">then</span><br><span class="line">echo&quot;布尔运算符：条件成立”</span><br><span class="line">else</span><br><span class="line">echo&quot;布尔运算符：条件不成立&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">逻辑运算符[[]]</span></span><br><span class="line">if [[ $a -lt $b || 10 == 100 ]]</span><br><span class="line">then</span><br><span class="line">echo&quot;逻辑运算符条件成立&quot;</span><br><span class="line">else</span><br><span class="line">echo&quot;逻辑运算符条件不成立&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>#### 文件测试运算符文件测试运算符用于检查文件，如检查文件是否存在、是否可读、是否可执行、是否为空、是否可写、是否是目录、是否是普通文件。属性检测描述如下：![image-20240128172831527](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848217.png)![image-20240128172923850](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848218.png)![image-20240128173005607](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848219.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件测试运算符</span></span><br><span class="line">file=/root/test_shell/test_suanshu.sh</span><br><span class="line">if [ -e $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件存在&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不存在&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断文件是普通文件吗</span></span><br><span class="line">if [ -f $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件是普通文件&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不是普通文件&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断文件是目录吗</span></span><br><span class="line">if [ -d $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件是目录&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不是目录&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断文件是否为空</span></span><br><span class="line">if [ -s $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件不为空&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件为空&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断文件是否可读 可写 可执行</span></span><br><span class="line">if [-r $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件可读&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不可读”</span><br><span class="line">fi</span><br><span class="line">if [ -w $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件可写&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不可写&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -x $file ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件可执行&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不可执行&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>### 计算命令要想让数学计算发挥作用，必须使用数学计算命令，shell中常用的数学计算命令如下表所示。![image-20240128175037025](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848220.png)#### expr命令##### expr用于求表达式的值语法：`expr 算术运算符表达式`【示例】expr求表达式的值![image-20240128175253188](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848221.png)【示例】expr表达式的值赋给变量![image-20240128175346258](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848222.png)##### expr在字符串中的使用**计算字符串的长度**`expr length 字符串`【示例】计算字符串的长度![image-20240128175540534](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848223.png)**截取字符串**`expr substr 字符串 start len`start：截取字符串的起始位置，从1开始len：截取字符串的个数![image-20240128175807487](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848224.png)**获取第一个字符在字符串中出现的位置**`expr index 被查找字符串 需要查找的字符`【示例】获取第一个字符在字符串中出现的位置![image-20240128175925474](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848225.png)**正则表达式匹配语法1**`expr match 字符串 正则表达式`返回值为符合匹配字符串的长度，否则返回为0【示例】正则表达式匹配语法1![image-20240128180043255](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848226.png)**正则表达式匹配语法2**`expr 字符串 : 正则表达式`返回值为符合匹配字符串的长度，否则返回为0【示例】正则表达式匹配语法2![image-20240128180147291](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848227.png)#### (())命令能够使用`(())`进行**整数**的数学运算。将数学运算表达式放到`((`和`))`之间，可以使用`$`获取`(())`表达式命令的结果，这和使用`$`获得变量值是一样的。语法：`((表达式))`用法：![image-20240128180640310](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848228.png)![image-20240128180919201](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848229.png)![image-20240128181502042](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848230.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(())命令的使用</span></span><br><span class="line">((a=10+20))</span><br><span class="line">((b=a-10))</span><br><span class="line">((c=a+b))I</span><br><span class="line">echo &quot;a=$a,b=$b,c=$c&quot;</span><br><span class="line"></span><br><span class="line">a=$((10+20))</span><br><span class="line">b=$((a-10))</span><br><span class="line">c=$((a+b))</span><br><span class="line">echo &quot;a=$a,b=$b,c=$c&quot;</span><br><span class="line"></span><br><span class="line">if ((a&gt;10 &amp;&amp; a==c))</span><br><span class="line">then</span><br><span class="line">echo &quot;a&gt;10 &amp;&amp; a==c&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;不成立&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo $((100+100))</span><br><span class="line">((a=10+20,b=a-10,c=a+b))</span><br><span class="line">echo &quot;a=$a,b=$b,c=$c&quot;</span><br></pre></td></tr></table></figure>==注意：符号之间有无空格都可以，((a = 1 + 2))等价于((a=1+2))==#### let命令能够使用let进行整数的数学运算赋值。let命令和双小括`(())`在数字计算方面功能一样，但是没有`(())`功能强大，**let只能用于赋值计算，不能直接输出，不可以条件判断。**语法：`let 赋值表达式`多个表达式赋值语法：`let 变量名1=值1 变量名2=值2 …`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">let</span>命令的使用</span></span><br><span class="line">let a=10+20</span><br><span class="line">let b=a-10</span><br><span class="line">let c=a+b</span><br><span class="line">echo &quot;a=$a,b=$b,c=$c&quot;</span><br><span class="line">echo&quot;a=$&#123;a&#125;,b=$&#123;b&#125;,c=$&#123;c&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">let</span>命令用于多个赋值表达式</span></span><br><span class="line">let a=10+20 b=a-10 c=a+b</span><br><span class="line">echo &quot;a=$a,b=$b,c=$c&quot;</span><br></pre></td></tr></table></figure>#### $[]命令和`(())`和Iet命令类似，`$[]`也只能进行整数运算，但是只能对==单个表达式==的计算求值与输出。语法：`$[表达式]`1. `$[]`会对表达式进行计算，并取得计算结果2. 表达式内部不可以赋值给变量<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=$[10+20]</span><br><span class="line">b=$[a-10]</span><br><span class="line">c=$[a+b]</span><br><span class="line">echo &quot;a=$a,b=$b,c=$c&quot;</span><br></pre></td></tr></table></figure>**执行整数表达式命令总结：**![image-20240128184037358](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848231.png)#### bc命令Bash shell内置了对整数运算的支持，但是并不支持浮点运算，而linux bc命令可以很方便的进行**浮点运算**。bc命令是Liux简单的计算器，能进行进制转换与计算。能转换的进制包括十六进制、十进制、八进制、二进制等。可以使用的运算符号包括(+)加法、(-)减法、(*)乘法、(/)除法、(^)指数、(%)余数等。语法：`bc [options] [参数]`options选项![image-20240128184322212](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848232.png)默认使用bc命令后回车会有很多欢迎信息，可以使用`bc -q`回车后不会有欢迎信息。![image-20240128184440963](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848234.png)##### 基本使用![image-20240128184534981](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281851111.png)【示例】**bc命令执行计算任务的文件**创建一个文件test task.txt<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">108*67+123456</span><br><span class="line">58+2008*11</span><br><span class="line">3.14*43+187.23</span><br></pre></td></tr></table></figure>执行任务文件计算每行表达式的值`bc -q test_task.txt`##### 内置变量的使用![image-20240128184602906](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848236.png)![image-20240128184805504](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848237.png)![image-20240128184850023](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401281848238.png)##### 内置数学函数的使用内置数学函数![image-20240128185226330](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218209.png)![image-20240128185323846](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218210.png)【示例】bc中内置的数学函数的使用使用内置函数时必须使用`bc -ql`![image-20240128185419073](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218211.png)##### 非互动式的运算**直接进行bc的表达式计算输出**`echo "expression" | bc [options]`expression：表达式必须符合bc命令要求的公式​表达式里面可以引用shell变量例如：shell变量a=2在表达式里面引用的语法：$a【示例】bc中非互动式的运算![image-20240128185708958](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218213.png)![image-20240128185809295](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218214.png)##### 将bc计算的结果赋值给shell变量语法格式：#第一种方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var name=`echo &quot;expression&quot; | bc [options]`</span><br></pre></td></tr></table></figure>#第二种方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var name=$(echo &quot;expression&quot; | bc [options])</span><br></pre></td></tr></table></figure>`$()`与``功能一样，都是执行里面的命令区别：``是所有linux系统支持的方式，兼容性较好，但是容易与引号产生混淆。`$()`不是所有linux系统都支持的方式。兼容性较差，但是不容易产生混淆。【示例】将bc计算的结果赋值给shell变量![image-20240128191808459](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218215.png)##### 非互动式的输入重定向运算将计算表达式输出给bc去执行，特点类似于文件中输入，可以输入多行表达式。更加清晰。语法：#第一种方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var name=`bc [options] &lt;&lt;EOF</span><br><span class="line">第一行表达式</span><br><span class="line">第二行表达式</span><br><span class="line">...</span><br><span class="line">EOF</span><br><span class="line">`</span><br></pre></td></tr></table></figure>#第二种方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var name=$(bc [options] &lt;&lt;EOF</span><br><span class="line">第一行表达式</span><br><span class="line">第二行表达式</span><br><span class="line">...</span><br><span class="line">EOF</span><br><span class="line">)</span><br></pre></td></tr></table></figure>var name这里Shell变量的名字bc执行bc的命令EOF..EOF输入流的多行表达式含义：将EOF中间多行表达式输入给到bc去执行，将bc执行的结果赋值shel变量【示例】Shell中非互动式的输入重定向运算![image-20240128192040807](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218216.png)### 流程控制语句#### 条件if语句##### if语句语法格式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">... </span><br><span class="line">commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>写成一行（适用于终端命令提示符）：`if 条件;then 命令;fi`【示例】判断num的值是否是10<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试<span class="keyword">if</span>单分支</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">键盘输入一个数num</span></span><br><span class="line">read -p &quot;请输入一个数：&quot; num</span><br><span class="line">if ((num==10))</span><br><span class="line">then</span><br><span class="line">echo&quot;您输入的数是10&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>##### if else语句语法格式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">commadd1</span><br><span class="line">command2</span><br><span class="line">...</span><br><span class="line">commandN</span><br><span class="line">else</span><br><span class="line">command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>写成一行（适用于终端命令提示符）：`if 条件;then 命令;else 命令;fi`【示例】输入年龄判断是否成人<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试<span class="keyword">if</span> <span class="keyword">else</span></span></span><br><span class="line">read -p&quot;请输入年龄：&quot;age</span><br><span class="line">if ((age&gt;=18))</span><br><span class="line">then</span><br><span class="line">echo &quot;成年&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;未成年&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>##### if else-if else语法格式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">command1</span><br><span class="line">elif codition2</span><br><span class="line">then</span><br><span class="line">command2</span><br><span class="line">else</span><br><span class="line">commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>【示例】输入成绩判断成绩等级<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试<span class="keyword">if</span> <span class="keyword">elif</span> <span class="keyword">else</span> 多分支结构</span></span><br><span class="line">read -p &quot;请输入成绩：&quot; score</span><br><span class="line">if ((score&gt;=90))</span><br><span class="line">then</span><br><span class="line">echo &quot;成绩等级为A&quot;</span><br><span class="line">elif ((score&gt;=80))</span><br><span class="line">then</span><br><span class="line">echo &quot;成绩等级为B&quot;</span><br><span class="line">elif ((score&gt;=70))</span><br><span class="line">then</span><br><span class="line">echo &quot;成绩等级为C”</span><br><span class="line">elif ((score&gt;=60))</span><br><span class="line">then</span><br><span class="line">echo &quot;成绩及格&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;成绩不及格&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>【示例】根据输入的值判断是周几。如输入1输出”周一“<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p&quot;请输入一个数(1-7)：&quot; num</span><br><span class="line">if [[ $num == 1 ]]</span><br><span class="line">then</span><br><span class="line">echo &quot;周一&quot;</span><br><span class="line">elif [[ $num == 2 ]]</span><br><span class="line">then</span><br><span class="line">echo &quot;周二&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>##### 选择嵌套语法格式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if [ condition1 ];then</span><br><span class="line">command1</span><br><span class="line">if [ condition2 ];then</span><br><span class="line">command2</span><br><span class="line">fi</span><br><span class="line">else</span><br><span class="line">if [ condition3 ];then</span><br><span class="line">command3</span><br><span class="line">elif [ condition4 ];then</span><br><span class="line">command4</span><br><span class="line">else</span><br><span class="line">command5</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>【示例】输入成绩输出成绩的等级<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span>条件语句嵌套</span></span><br><span class="line">read -p &quot;请输入成绩：&quot; score</span><br><span class="line">if ((score&gt;0 &amp;&amp; score&lt;=100))</span><br><span class="line">then</span><br><span class="line">echo &quot;输入的成绩是正确的&quot;</span><br><span class="line">    if ((score&gt;=90))</span><br><span class="line">    then</span><br><span class="line">    echo &quot;成绩的等级为A&quot;</span><br><span class="line">    elif ((score&gt;=80))</span><br><span class="line">    then</span><br><span class="line">    echo &quot;成绩的等级为B&quot;</span><br><span class="line">    elif ((score&gt;=70)】</span><br><span class="line">    then</span><br><span class="line">    echo &quot;成绩的等级为C&quot;</span><br><span class="line">    elif ((score&gt;=60)】</span><br><span class="line">    then</span><br><span class="line">    echo &quot;及格&quot;</span><br><span class="line">    else</span><br><span class="line">    echo &quot;不及格&quot;</span><br><span class="line">    fi</span><br><span class="line">else</span><br><span class="line">echo &quot;偷入的成绩不正确”</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>#### 内置命令testShell中test命令用于检查某个条件是否成立，它可以进行数值、字符串和文件三个方面的测试。功能和一样。##### 整数比较测试整数比较语法<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if test 数字1 options 数字2</span><br><span class="line">then</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>options具体如下：![image-20240129212756654](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218217.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">test</span>命令检查整数</span></span><br><span class="line">num1=100</span><br><span class="line">num2=200</span><br><span class="line">if test $numl -lt $num2</span><br><span class="line">then</span><br><span class="line">echo &quot;num1小于num2&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;num1不小于num2&quot;</span><br><span class="line">fi</span><br><span class="line">num3=200</span><br><span class="line">if test $num2 -eq $num3</span><br><span class="line">then</span><br><span class="line">echo &quot;num2和num3相等&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a -o</span></span><br><span class="line">if test $num1 -lt $num2 -a $num2 -eq $num3</span><br><span class="line">then</span><br><span class="line">echo &quot;两个条件成立&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;两个条件不成立&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>#####  字符串比较测试![image-20240129213552217](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218218.png)![image-20240129213616548](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218219.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">test</span>命令检查字符串</span></span><br><span class="line">str1=&quot;hello&quot;</span><br><span class="line">if test -z $str1</span><br><span class="line">then</span><br><span class="line">echo &quot;str1为空&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;str1不为空&quot;</span><br><span class="line">fi</span><br><span class="line">if test $str1</span><br><span class="line">then</span><br><span class="line">echo &quot;str1不为空&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;str1为空&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">str2=&quot;world&quot;</span><br><span class="line">if test $strl = $str2</span><br><span class="line">then</span><br><span class="line">echo &quot;str1和str2相等&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;不相等&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多条件</span></span><br><span class="line">if test $strl -o 1 -eq 1</span><br><span class="line">then</span><br><span class="line">echo &quot;条件成立&quot;</span><br><span class="line">fi</span><br><span class="line">if test $strl -a 10 -eq 1</span><br><span class="line">then</span><br><span class="line">echo &quot;条件成立&quot;</span><br><span class="line">else </span><br><span class="line">echo &quot;条件不成立&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>##### 文件测试![image-20240129214204828](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218220.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">test</span>检查文件</span></span><br><span class="line">file=&quot;/root/test_shell/test_test1.sh&quot;</span><br><span class="line">if test -e $file</span><br><span class="line">then</span><br><span class="line">echo &quot;文件存在&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不存在”</span><br><span class="line">fi</span><br><span class="line">if test -r $file</span><br><span class="line">then</span><br><span class="line">echo &quot;文件可读”</span><br><span class="line">fi</span><br><span class="line">if test -w $file</span><br><span class="line">then</span><br><span class="line">echo &quot;文件可写&quot;</span><br><span class="line">fi</span><br><span class="line">if test -s $file</span><br><span class="line">then</span><br><span class="line">echo &quot;文件不为空&quot;</span><br><span class="line">fi</span><br><span class="line">if test -d $sfile</span><br><span class="line">then</span><br><span class="line">echo &quot;文件是目录&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不是目录&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>test命令经常与`-a`和`-o`一起使用，`&&`和`||`只能使用到`[]`中【示例】if中有多条件时候，必须都满足才会执行根据提示输入文件全名和输入写入的数据。判断文件是否有可写权限和输入的数据长度不为0，满足以上2个条件将用户的数据写入到指定的文件中去。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p &quot;请输入文件名：&quot; filename</span><br><span class="line">read -p &quot;请输入写入的内容：&quot; data</span><br><span class="line">echo &quot;文件名：$filename,内容：$data&quot;</span><br><span class="line">if test -w $filename -a -n $data</span><br><span class="line">then</span><br><span class="line">echo $data &gt; $filename</span><br><span class="line">echo &quot;写入内容成功&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;写入内容失败&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>#### case语句`case...esac`为多选择语句，与其他语言中的switch...case语句类似，是一种多分枝选择结构，每个case分支用右圆括号`)`开始，用两个分`;;`表示执行结束，跳出整个case...esac语句，esac(就是case反过来)作为结束标记。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。`case...esac`语法格式如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">case 值 in</span><br><span class="line">    模式1)</span><br><span class="line">        command1</span><br><span class="line">        command2</span><br><span class="line">        ...</span><br><span class="line">        commandN</span><br><span class="line">    ;;</span><br><span class="line">    模式2)</span><br><span class="line">        command1</span><br><span class="line">        command2</span><br><span class="line">        ...</span><br><span class="line">        commandN</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>case工作方式如上所示，取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至`;;`。取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号`*`捕获该值，再执行后面的命令。case、in和esac都是Shell关键字，esac就是case的反写在这里代表结束case。匹配模式：可以是一个数字、一个字符串，甚至是一个简单正则表达式。简单正则表达式支持如下通配符：![image-20240129215703726](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218221.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">case</span>多分支选择结构</span></span><br><span class="line">read -p &quot;请输入一个(0-7)之间的数：&quot; num</span><br><span class="line">case $num in</span><br><span class="line">1)</span><br><span class="line">echo &quot;周一&quot;</span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">echo &quot;周二&quot;</span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">echo &quot;周三&quot;</span><br><span class="line">;;</span><br><span class="line">4)</span><br><span class="line">echo &quot;周四&quot;</span><br><span class="line">;;</span><br><span class="line">5)</span><br><span class="line">echo &quot;周五&quot;</span><br><span class="line">;;</span><br><span class="line">6)</span><br><span class="line">echo &quot;周六&quot;</span><br><span class="line">;;</span><br><span class="line">0|7)</span><br><span class="line">echo &quot;周日&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;输入有误&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">case</span>多分支结构</span></span><br><span class="line">case $1 in</span><br><span class="line">start | S)</span><br><span class="line">echo &quot;启动成功&quot;</span><br><span class="line">;;</span><br><span class="line">stop | T)</span><br><span class="line">echo &quot;停止成功&quot;</span><br><span class="line">;;</span><br><span class="line">restart | R)</span><br><span class="line">echo &quot;重新启动成功&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;输入有误&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>![image-20240129220547110](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401292218222.png)#### while语句##### while循环while循环用于不断执行一系列命令，也用于从输入文件中读取数据。其语法格式为：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">while</span>循环</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">键盘输入一个数</span></span><br><span class="line">read -p &quot;请输入一个整数：&quot; num</span><br><span class="line">i=1</span><br><span class="line">while ((i&lt;=num))</span><br><span class="line">do</span><br><span class="line">echo&quot;当前i的值：$i&quot;</span><br><span class="line">let i++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用whi1e循环求1-100的和</span></span><br><span class="line">i=1</span><br><span class="line">sum=0</span><br><span class="line">while ((i&lt;=100))</span><br><span class="line">do</span><br><span class="line">sum=$((sum+i))</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">sum</span>=`<span class="built_in">expr</span> <span class="variable">$sum</span> + <span class="variable">$i</span>`</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span></span><br><span class="line">let i++</span><br><span class="line">done</span><br><span class="line">echo &quot;sum: $sum&quot; </span><br></pre></td></tr></table></figure>##### 无限循环无限循环语法格式：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while:</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure>或<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while true</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure>![image-20240130154742282](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032034453.png)![image-20240130154802584](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032035634.png)##### 跳出循环在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue**break命令**break命令允许跳出当前整个循环。【示例】break命令退出当前循环，脚本进入死循环直至用户输入数字大于5。要跳出这个循环<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出循环<span class="built_in">break</span>的使用</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">read -p &quot;请输入一个整数：&quot; num</span><br><span class="line">case $num in</span><br><span class="line">1|2|3|4|5)</span><br><span class="line">echo &quot;您输入的数：$num&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;您输入的数不是1 2 3 4 5，退出循环&quot;</span><br><span class="line">break</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure>**continue命令**continue命令允许跳出本次循环。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试退出循坏<span class="built_in">continue</span></span></span><br><span class="line">while</span><br><span class="line">do</span><br><span class="line">read -p &quot;请输入一个数：&quot; num</span><br><span class="line">if ((num==1 || num==2 || num==3 || num==4 || num==5))</span><br><span class="line">then</span><br><span class="line">echo &quot;您输入的数是：$num&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;您输入的数不是1 2 3 4 5&quot;</span><br><span class="line">continue</span><br><span class="line">echo&quot;continue退出本次循环&quot;</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>#### until语句until循环执行一系列命令直至条件为true时停止。until循环与while循环在处理方式上刚好相反。一般while循环优于until循环，但在某些时候一也只是极少数情况下，until循环更加有用。until语法格式：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure>condition一般为条件表达式，如果返回值为false，则继续执行循环体内的语句，否则跳出循环。【示例】使用until命令来输出0~9的数字<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试until循坏</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出0-9的数</span></span><br><span class="line">i=0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">until [[ ! <span class="variable">$i</span> -le 9 ]]</span></span><br><span class="line">until ((i&gt;9))</span><br><span class="line">do</span><br><span class="line">echo &quot;当前i的值：$i&quot;</span><br><span class="line">let i++</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">计算1-100之间的和</span></span><br><span class="line">i=1</span><br><span class="line">sum=0</span><br><span class="line">until ((i&gt;100))</span><br><span class="line">do</span><br><span class="line">sum=$((i+sum))</span><br><span class="line">let i++</span><br><span class="line">done</span><br><span class="line">echo &quot;1-100的和：$sum&quot;</span><br></pre></td></tr></table></figure>#### for语句##### 循环第一种方式与其他编程语言类似，Shell支持for循环。for循环一般格式为：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure>写成一行：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN;do command1;command2... done;</span><br></pre></td></tr></table></figure>【示例】for循环顺序输出当前列表中的数字<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span>循环 <span class="keyword">for</span> <span class="keyword">in</span></span></span><br><span class="line">for i in 1 2 3 10 20 30</span><br><span class="line">do</span><br><span class="line">echo &quot;当前变量的值：$i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for v in hello bai d com baizhai</span><br><span class="line">do</span><br><span class="line">echo &quot;当前变量的值：$v&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>##### 循环第二种方式语法：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for var in &#123;start..end&#125;</span><br><span class="line">do</span><br><span class="line">命令</span><br><span class="line">done</span><br></pre></td></tr></table></figure>start：循环范围的起始值必须为整数end：循环范围的结束值，必须为整数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出1-10的整数</span></span><br><span class="line">for i in &#123;1..10&#125;</span><br><span class="line">do</span><br><span class="line">echo &quot;当前整数：$i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">sum=0</span><br><span class="line">for i in &#123;1..100&#125;</span><br><span class="line">do</span><br><span class="line">sum=$((sum+i))</span><br><span class="line">done</span><br><span class="line">echo &quot;1-100的和：$sum&quot;</span><br></pre></td></tr></table></figure>##### 循环第三种方式语法：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for((i=start;i&lt;=end;i++))</span><br><span class="line">do</span><br><span class="line">命令</span><br><span class="line">done</span><br></pre></td></tr></table></figure>一行写法：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for(i=start;i&lt;=end;i++);do 命令;done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用<span class="keyword">for</span>循环输出10-20之间的数</span></span><br><span class="line">for((i=10;i&lt;=20;i++))</span><br><span class="line">do</span><br><span class="line">echo &quot;当前i的值：$i&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>##### for循环的无限循环for循环的无限循环语法：`for((;;));do 命令;done`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span>无限循环</span></span><br><span class="line">i=1</span><br><span class="line">for((;;))</span><br><span class="line">do</span><br><span class="line">if((i==5))</span><br><span class="line">then</span><br><span class="line">echo &quot;i等于5退出循环&quot;</span><br><span class="line">break</span><br><span class="line">else</span><br><span class="line">echo &quot;当前i的值：$i&quot;</span><br><span class="line">let i++</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>#### select语句select in循环用于增强交互性，它可以显示出带编号的菜单，用于输入不同的编号就可以选择不同的菜单，并执行不同的功能，select in是Shell独有的一种循环，非常适合终端这样的交互场景，其它语言没有。语法格式如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select var in 菜单1 菜单2 ...</span><br><span class="line">do</span><br><span class="line">命令</span><br><span class="line">done</span><br></pre></td></tr></table></figure>注意：select是无限循环（死循环），输入空值，或者输入的值无效，都不会结束循环，只有遇到break语句，或者按下Ctrl+D组合键才能结束循环。执行命令中终端输出`#?`代表可以输入选择的菜单编号 【示例】select in的使用<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试select语句的使用</span></span><br><span class="line">echo &quot;一年四个季节，您最喜欢哪个季节？&quot;</span><br><span class="line">select d in &quot;春大&quot; &quot;夏天&quot; &quot;秋大&quot; &quot;冬天&quot;</span><br><span class="line">do</span><br><span class="line">echo &quot;您最喜欢的季节是：$d&quot;</span><br><span class="line">break</span><br><span class="line">done</span><br></pre></td></tr></table></figure>![image-20240201162643067](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032046256.png)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">select语句与<span class="keyword">case</span>一起使用</span></span><br><span class="line">echo &quot;您最喜欢的老师是哪位？&quot;</span><br><span class="line">select t in 张老师 李老师 王老师 赵老师</span><br><span class="line">do</span><br><span class="line">case $t in</span><br><span class="line">&quot;张老师&quot;)</span><br><span class="line">echo &quot;您最喜欢的老师是张老师&quot;</span><br><span class="line">break</span><br><span class="line">;;</span><br><span class="line">&quot;李老师&quot;)</span><br><span class="line">echo &quot;您最喜欢的老师是李老师&quot;</span><br><span class="line">break</span><br><span class="line">;;</span><br><span class="line">&quot;赵老师&quot;)I</span><br><span class="line">echo &quot;您最喜欢的老师是赵老师&quot;</span><br><span class="line">break</span><br><span class="line">;;</span><br><span class="line">&quot;王老师&quot;)</span><br><span class="line">echo &quot;您最喜欢的老师是王老师&quot;</span><br><span class="line">break</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure>![image-20240201162612012](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032046522.png)### Shell函数Shell函数和其他编程语言一样，函数是由若干条Shell命令组成的语句块，实现Shell脚本代码重用和模块化编程。#### 系统函数#####  basenamebasename返回完整路径最后/的部分，常用于获取文件名，基本语法如下：`basename [pathname] [suffix]`suffix为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉。【示例】basename的使用![image-20240201163354799](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032046408.png)【示例】basename的使用（写入到脚本文件）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统函数<span class="built_in">basename</span></span></span><br><span class="line">filename1=`basename /root/test_shell/test_while.sh`</span><br><span class="line">filename2=$(basename /root/test_shell/test_while.sh .sh)</span><br><span class="line">echo &quot;filenamel:$filename1&quot;</span><br><span class="line">echo &quot;filename2:$filename2&quot;</span><br></pre></td></tr></table></figure>##### dirnamedirname返回完整路径最后V的前面的部分，常用于返回路径部分。dirname文件绝对路径（功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分)，然后返回剩下的路径（目录的部分）)【示例】dirname的使用![image-20240201163823760](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032047339.png)【示例】dirname的使用（写到脚本中）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">dirname</span>系统函数</span></span><br><span class="line">filename=`basename /root/test_shell/test_while.sh`</span><br><span class="line">mydire=$(dirname /root/test_shell/test_while.sh)</span><br><span class="line">echo &quot;文件名：$filename&quot;</span><br><span class="line">echo &quot;文件路径：$mydire&quot;</span><br></pre></td></tr></table></figure>#### 自定义函数##### 函数定义shell中函数的定义格式如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ function ] funname [()]</span><br><span class="line">&#123;</span><br><span class="line">action;</span><br><span class="line">[return int;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>说明：1. 可以带function fun()定义，也可以直接fun()定义，不带任何参数。2. 参数返回，可以显示加：return返回，如果不加，将以最后一条命令运行结果，作为返回值。return后跟数值n(0-255)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自定义函数</span></span><br><span class="line">function test_fun1()&#123;</span><br><span class="line">echo &quot;自定义函数fun1&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用函数之前必须先定义好函数</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">test</span> fun2</span></span><br><span class="line"></span><br><span class="line">test fun2()&#123;</span><br><span class="line">echo &quot;自定义函数fun2&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用函数</span></span><br><span class="line">test_fun1</span><br><span class="line">test_fun2</span><br></pre></td></tr></table></figure>【示例】函数示例（有返回值）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义函数，有返回值</span></span><br><span class="line">test_add()&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">键盘输入两个整数</span></span><br><span class="line">read -p &quot;请输入第一个整数：&quot; num1</span><br><span class="line">read -p &quot;请输入第二个整数：&quot; num2</span><br><span class="line">return $((num1+num2))</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用函数</span></span><br><span class="line">test_add</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取函数的返回值</span></span><br><span class="line">echo &quot;函数的返回值：$?&quot;</span><br></pre></td></tr></table></figure>函数返回值在调用该函数后通过`$?`来获得。注意：**所有函数在使用前必须定义**。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。##### 函数参数在Shell中，调用函数时可以向其传递参数。在函数体内部，通过`$n`的形式来获取参数的值，例如，`$1`表示第一个参数，`$2`表示第二个参数...注意，`$10`不能获取第十个参数，获取第十个参数需要`$&#123;10&#125;`。当n>=10时，需要使用`$&#123;n&#125;`来获取参数。【示例】函数参数的使用<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义函数传递函数参数</span></span><br><span class="line">test_param()&#123;</span><br><span class="line">echo &quot;第一个参数：$1&quot;</span><br><span class="line">echo &quot;第二个参数：$2&quot;</span><br><span class="line">echo &quot;第三个参数：$3&quot;</span><br><span class="line">echo &quot;第10个参数：$&#123;10&#125;&quot;</span><br><span class="line">echo &quot;第11个参数：$&#123;11&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用函数</span></span><br><span class="line">test_param 1 2 3 4 5 6 7 8 9 100 101 102</span><br></pre></td></tr></table></figure>【示例】定义函数绘制图像<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义函数及<span class="keyword">for</span>循环综合练习</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出一个矩形</span></span><br><span class="line">echo &quot;输出一个矩形&quot;</span><br><span class="line">test_fun1()&#123;</span><br><span class="line">for i in &#123;1..5&#125;</span><br><span class="line">do</span><br><span class="line">echo &quot;***&quot;</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">test_fun1</span><br><span class="line"></span><br><span class="line">echo &#x27;输出一个矩形2&#x27;</span><br><span class="line">test_fun2()&#123;</span><br><span class="line">for((i=1;i&lt;=6;i++))</span><br><span class="line">do</span><br><span class="line">for((j=1;j&lt;=4;j++))</span><br><span class="line">do</span><br><span class="line">echo -n &quot;*&quot;</span><br><span class="line">done</span><br><span class="line">echo  # 输出换行</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">test_fun2</span><br><span class="line"></span><br><span class="line">echo &quot;输出直角三角形”</span><br><span class="line">test_fun3()&#123;</span><br><span class="line">for((i=1;i&lt;=5;i++))</span><br><span class="line">do</span><br><span class="line">for((j=1;j&lt;=$i;j++))</span><br><span class="line">do</span><br><span class="line">echo -n &quot;*&quot;</span><br><span class="line">done</span><br><span class="line">echo</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">test_fun3</span><br></pre></td></tr></table></figure>![image-20240201165737019](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032047819.png)#####  Shell程序与函数的区别函数和Shell程序比较相似，区别在于：Shell程序（内置命令和外部脚本文件），外部脚本文件是在子Shell中运行，会开启独立的进程运行。Shell函数在当前Shell的进程中运行。【示例】Shel程序与函数的区别<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">test_fun()&#123;</span><br><span class="line">echo &quot;函数中输出：进程ID$$&quot;</span><br><span class="line">&#125;</span><br><span class="line">test_fun</span><br><span class="line">echo &quot;脚本文件中：进程ID$$&quot;</span><br></pre></td></tr></table></figure>![image-20240201170221887](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032047632.png)### Shell重定向输入输出#### 概念##### 标准输入从键盘读取用户输入的数据，然后再把数据拿到Shell程序中使用。##### 标准输出Shell程序产生的数据，这些数据一般都是呈现到显示器上供用户浏览查看##### 输入输出重定向输入方向就是数据从哪里流向程序。数据默认从键盘流向程序，如果改变了它的方向，数据就从其它地方流入，这就是输入重定向。输出方向就是数据从程序流向哪里。数据默认从程序流向显示器，如果改变了它的方向，数据就流向其它地方，这就是输出重定向。#### 文件描述符linux命令默认从标准输入设备(stdin)获取输入，将结果输出到标准输出设备(stdout)显示。一般情况下，标准输入设备就是键盘，标准输出设备就是终端，即显示器。在linux shell执行命令时，每个进程都和三个打开的文件相联系，并使用文件描述符来引用这些文件。由于文件描述符不容易记忆，shell同时也给出了相应的文件名。![image-20240201170613166](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032056153.png)#### 重定向命令列表![image-20240201170850153](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032056229.png)##### 输出重定向![image-20240201170826698](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032056594.png)![image-20240201171043019](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032056377.png)![image-20240201171347044](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057655.png)##### 输入重定向wC命令可以用来对文本进行统计，包括单词个数、行数、字节数。wc语法格式：`wc [options] [文件名]`options有如下：![image-20240201171621618](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057589.png)![image-20240201171659676](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057891.png)【示例】读取文件每行内容<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入重定间</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">读取文件内容</span></span><br><span class="line">r=1</span><br><span class="line">while read m</span><br><span class="line">do</span><br><span class="line">echo&quot;第$r行，内容是：$m&quot;</span><br><span class="line">let r++</span><br><span class="line">done &lt; log.txt</span><br></pre></td></tr></table></figure>【示例】标记位读取内容![image-20240201172106448](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057992.png)### 文本处理工具#### grep文本搜索grep是一种强大的文本搜索工具，用于根据关键字进行行过滤，并把匹配的行打印出来。grep语法格式：`grep [选项] '关键字' 文件名`它在一个或多个文件中搜索满足模式的文本行。常用的grep选项：![image-20240201172322202](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057131.png)![image-20240203100250887](5、Linux环境编程基础.assets/image-20240203100250887.png)![image-20240203100642812](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057445.png)![image-20240203100718496](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057552.png)![image-20240203100842828](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032057757.png)![image-20240203100940561](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058503.png)![image-20240203101007811](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058498.png)![image-20240203101033123](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058513.png)![image-20240203101429736](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058888.png)#### cut按列切分文本cut译为“剪切、切割”，是一个强大文本处理工具，它可以将文本按列进行划分的文本处理。cut命令逐行读入文本，然后按列划分字段并进行提取、输出等操作。语法格式：`cut [options] 文件名`options参数说明![image-20240203101606240](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058526.png)**提取范围说明**![image-20240203101648085](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058493.png)【示例】cut的使用 准备test_cut.xt文件内容![image-20240203101841005](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058376.png)【示例】cut截取列数据![image-20240203101954943](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058217.png)![image-20240203102100439](5、Linux环境编程基础.assets/image-20240203102100439.png)【示例】cut按字符提取![image-20240203102419788](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058554.png)![image-20240203102450789](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058701.png)![image-20240203102654486](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058545.png)【示例】cut的切割获取指定单词![image-20240203102912665](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058329.png)【示例】cut的切割bash进程的PID号![image-20240203103014436](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032058144.png)【示例】cut的切割当前服务器的IP![image-20240203103108093](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059055.png)#### sed文本编辑器sed是Liux下一款功能强大的非交互流式文本编辑器，可以对文本文件进行增、删改、查等操作，支持按行、按字段、按正则匹配文本内容，灵活方便，特别适合于大文件的编辑。sed工作原理：sed会读取每一行数据到模式空间中，判断当前行是否符合模式心配要求，符合要求就会执行sed程序命令，否则不会执行sed程序命令，如果不写四配模式，那么每一行都会执行sed程序命令。sed的使用语法：`sed [选项参数] [模式匹配 | sed程序命令] [文件名]`sed的常用选项：![image-20240203103614821](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059966.png)![image-20240203103729930](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059899.png)##### 【示例】向文件中添加或插入行1.准备test_sed.txt内容2.`sed '3aworld' test_sed.txt`      #向第三行后面添加world，3表示行号![image-20240203104025459](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059854.png)注意：预览可以看到是添加了，但实际没有添加到文件内容。想要真是的添加到文件，需要加选项 `-i`。![image-20240203104114124](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059368.png)![image-20240203104257274](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059467.png)![image-20240203104426376](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059522.png)![image-20240203104522105](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059686.png)##### 【示例】更改文件中指定的行![image-20240203104708214](5、Linux环境编程基础.assets/image-20240203104708214.png)![image-20240203104822114](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059659.png)##### 【示例】删除文件中的行![image-20240203104914682](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059198.png)![image-20240203105915529](5、Linux环境编程基础.assets/image-20240203105915529.png)2.删除3~5之外的所有行![image-20240203112354974](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059651.png)3.删除从匹配abc的行到最后一行![image-20240203112604351](5、Linux环境编程基础.assets/image-20240203112604351.png)4.删除空行![image-20240203113044347](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059106.png)5.删除不匹配hello或abc的行，`/hello\|abc/`表示匹配hello或abc，`!`表示取反![image-20240203113326358](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059920.png)6.删除`1~3`行中，匹配内容hello的行，1,3表示匹配`1~3`行，`&#123;/hello/d&#125;`表示删除匹配hello的行![image-20240203113512409](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059036.png)#####  【示例】替换文件中的内容1.将文件中的a替换为123，默认只替换每行第一个123![image-20240203114041506](5、Linux环境编程基础.assets/image-20240203114041506.png)![image-20240203114130143](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032059725.png)![image-20240203114235556](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100200.png)4.将每行中所有匹配的a替换为123，并将替换后的内容写入test_sed2.txt![image-20240203114411504](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100447.png)![image-20240203114550942](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100381.png)5.匹配有#号的行，替换匹配行中逗号后的所有内容为空`(,.*)`表示逗号后的所有内容​![image-20240203114715692](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100517.png)6.替换每行中的最后两个字符为空，每个点代表一个字符，`$`表示匹配末尾`(...$)`表示匹配最后两个字符 ![image-20240203114950448](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100562.png)7.在test_sed.txt文件的每一行后面加上"hahha"字段![image-20240203115023685](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100585.png)##### 【示例】打印文件中的行1.打印文件中的第三行内容![image-20240203115325660](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032100507.png)2.从第一行开始，每隔两行打印一行，波浪号后面的2表示步长![image-20240203115508010](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101863.png)3.打印文件的最后一行![image-20240203115338000](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101427.png)4.打印1-3行![image-20240203115345629](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101023.png)5.打印匹配的行![image-20240203115634612](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101129.png)##### 【示例】打印文件的行号1.打印test sed.txt文件最后一行的行号![image-20240203120027153](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101631.png)2.打印匹配abc的行的行号![image-20240203115903879](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101564.png)3.打印空行行号![image-20240203115853510](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101509.png)##### 【示例】从文件中读取内容1.将文件test_sed3.txt中的内容，读入test_sed4.txt中，会在test_sed4.txt中的**每一行**后都读入test_sed3.txt的内容![image-20240203120234360](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101344.png)2.在test_sed.3.txt的第3行之后插入文件test_sed4.txt的内容（可用于向文件中插入内容)![image-20240203120356379](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101635.png)3.在匹配456的行之后插入文件test_sed4.txt的内容，如果test_sed3.txt中有多行匹配456则在每一行之后都会插入![image-20240203120518338](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101391.png)4.在test_sed3.txt的最后一行插入test_sed4.txt的内容![image-20240203120656179](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101346.png)##### 【示例】向文件中写入内容1.将test_sed3.txt文件的内容写入test_sed4.txt文件，如果test_sed3.txt文件不存在则创建，如果test_sed.4.txt存在则覆盖之前的内容![image-20240203120846835](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032101428.png)2.将文件test_sed3.txt中的第2行内容写入到文件test_sed4.txt![image-20240203120958428](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102451.png)3.将test_sed3.txt的第2行和最后一行内容写入test_sed4.txt![image-20240203121202820](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102166.png)-e： 它告诉sed将下一个参数解释为一个sed指令，只有当命令行上给出多个sed指令时才需要使用-e选项4.将test_sed3.txt的第2行和最后一行内容分别写入test_sed4.txt和test_sed5.txt中![image-20240203121409496](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102258.png)5.将test_sed3.txt中匹配789或123的行的内容，写入到test_sed4.txt中![image-20240203121559874](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102030.png)6.将test_sed.3.txt中从匹配123的行到最后行的内容，写入到test_sed.4.txt中`,$`：到最后一行![image-20240203121841438](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102956.png)7.将test_sed3.txt中从匹配456的行及其后2行的内容，写入到test_sed4.txt中![image-20240203121919344](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102573.png)#### awk文本分析工具##### awk概述awk是一种强大的文本分析工具，主要用于在linux/uniⅸ下对文本和数据进行处理。对数据进行分析、统计并生成报表，比如网站的访问量，访问的IP量等等。awk是种编程语言，awk可以定义变量、运算符，使用流程控制语句进行深度加工与分析。awk其名称得自于它的创始人Alfred Aho、Peter Weinberger和Brian Kernighan姓氏的首个字母。awk的处理文本和数据的方式：把文件逐行读入，以空格为默认分隔符将每行切片。切片的部分再进行各种分析处理。##### awk基本使用使用方法：`awk 选项 '命令部分' 文件名`特别说明：引用shell变量需用双引号引起常用命令选项![image-20240203123414316](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032032231.png)AWK内置变量![image-20240203123457651](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102570.png)![image-20240203124203929](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032102006.png)【示例】awk匹配内容整行输出，默认每行空格切割数据，并将这行赋给内部变量$0![image-20240203132304618](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031333107.png)【示例】awk匹配以root开头的行![image-20240203132313537](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031333108.png)【示例】awk使用一行作为输入，默认每行空格切割数据，并将这行赋给内部变量$0![image-20240203132538803](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031333109.png)![image-20240203132644186](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031333110.png)##### 格式化输出print和printfprint函数：类似echo，它是**换行输出**printf函数：类似echo-n，它**不换行输出**，可以使用%s、%d进行占位。其中%s表示字符类型，%d数值类型。`-`：表示左对齐，默认是右对齐例如：`%-15s`                 表示所占15字符，使用左对齐方式显示。【示例】print的使用![image-20240203133124844](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402032103185.png)【示例】printf占位的使用![image-20240203133232646](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031333112.png)![image-20240203133313710](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031337593.png)![image-20240203133422718](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031337594.png)【示例】print打印文件每行属性信息统计passwd文件名，每行的行号，每行的列数，对应的完整行内容![image-20240203133630224](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031337595.png)![image-20240203133722927](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031337596.png)【示例】打印第三行信息![image-20240203133906367](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633788.png)##### awk中BEGIN...END使用BEGIN：表示在程序开始前执行END：表示所有文件处理完后执行用法：`'BEGIN&#123;开始处理之前&#125;;&#123;处理中&#125;;END&#123;处理结束后&#125;'`【示例】添加开始与结束内容![image-20240203134419835](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633789.png)![image-20240203134541005](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633790.png)![image-20240203134628718](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633791.png)##### awk变量定义【示例】-v定义变量![image-20240203134922839](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633792.png)##### awk中流程控制语句![image-20240203135427288](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633793.png)1. if语句语法格式   `&#123; if(表达式) &#123;语句1;语句2;...&#125; &#125;`   准备test_awk.txt文件    ![image-20240203135709752](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633794.png)   ![image-20240203135846364](https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633795.png)2. if else的语法格式   `&#123;if(表达式) &#123;语句;语句;...&#125; else&#123;语句;语句;...&#125;&#125;</code></p><p>   【示例】awk中使用<code>if...else</code></p><p>   <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633796.png" alt="image-20240203140139314"></p><p>   <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633797.png" alt="image-20240203140233114"></p><ol><li><p>if else if else if的语法格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;if(表达式1)&#123;语句；语句；...&#125;</span><br><span class="line">else if(表达式2)&#123;语句;语句; ...&#125;</span><br><span class="line">else if(表达式3)&#123;语句;语句; ...&#125;</span><br><span class="line">else&#123;语句;语句; ...&#125;&#125;</span><br></pre></td></tr></table></figure><p>​    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633798.png" alt="image-20240203140608122"></p></li></ol><h5 id="awk中循环语句的使用"><a href="#awk中循环语句的使用" class="headerlink" title="awk中循环语句的使用"></a>awk中循环语句的使用</h5><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633799.png" alt="image-20240203140922700"></p><p>【示例】使用循环拼接字符串</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633800.png" alt="image-20240203141109009"></p><p>【示例】使用循环计算每行的和</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633801.png" alt="image-20240203141355571"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633802.png" alt="image-20240203141604923"></p><p>【示例】循环中使用break</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633803.png" alt="image-20240203141827328"></p><p> 【示例】操指定数字运算</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633804.png" alt="image-20240203141931217"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633805.png" alt="image-20240203142020130"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633806.png" alt="image-20240203142120705"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633807.png" alt="image-20240203142646024"></p><p>【示例】切割ip</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633808.png" alt="image-20240203143237774"></p><p>【示例】显示空行行号</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633809.png" alt="image-20240203143400833"></p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>sort命令以行为单位对文本进行排序。sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p><h5 id="【示例】sort的使用"><a href="#【示例】sort的使用" class="headerlink" title="【示例】sort的使用"></a>【示例】sort的使用</h5><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633810.png" alt="image-20240203143642200"></p><h5 id="【示例】sort的-u选项"><a href="#【示例】sort的-u选项" class="headerlink" title="【示例】sort的-u选项"></a>【示例】sort的<code>-u</code>选项</h5><p>在输出行中去除重复行。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633811.png" alt="image-20240203143815597"></p><h5 id="【示例】sort的-r选项"><a href="#【示例】sort的-r选项" class="headerlink" title="【示例】sort的-r选项"></a>【示例】sort的<code>-r</code>选项</h5><p>sort默认的排序方式是升序，如果想改成降序，就加个<code>-r</code>就搞定了。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633812.png" alt="image-20240203143917563"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633813.png" alt="image-20240203143939226"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633814.png" alt="image-20240203144003364"></p><h5 id="【示例】sort的-o选项"><a href="#【示例】sort的-o选项" class="headerlink" title="【示例】sort的-o选项"></a>【示例】sort的-o选项</h5><p>由于sort默认是把结果输出到标准输出，所以需要用重定向才能将结果写入文件，形如 <code>sort filename &gt; newfile</code>,</p><p>但是，如果你想把排序结果输出到原文件中，用重定向可就不行了。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633815.png" alt="image-20240203144150945"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633816.png" alt="image-20240203144302692"></p><h5 id="【示例】sort的-n选项"><a href="#【示例】sort的-n选项" class="headerlink" title="【示例】sort的-n选项"></a>【示例】sort的<code>-n</code>选项</h5><p>对数字排序，会出现一种现象，如10比2小的情况。出现这种情况是由于排序程序将这些数字按字符来排序了，排序程序会先比较1和2，显然1小，所以就将10放在2前面。这也是sort的一贯作风。</p><p>如果想改变这种现状，就要使用<code>-n</code>选项，“要以数值来排序”！</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633817.png" alt="image-20240203144525158"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633818.png" alt="image-20240203144609321"></p><h5 id="【示例】sort的-t选项和-k选项"><a href="#【示例】sort的-t选项和-k选项" class="headerlink" title="【示例】sort的-t选项和-k选项"></a>【示例】sort的<code>-t</code>选项和<code>-k</code>选项</h5><p><code>-t</code>选项，后面可以设定间隔符。</p><p><code>-k</code>选项，分割后用来指定列数了。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633819.png" alt="image-20240203144805814"></p><p>这个文件有三列，列与列之间用冒号隔开了，第一列表示水果类型，第二列表示水果数量，第三列表示水果价格。</p><p>现在想以水果数量来排序，也就是以第二列来排序，如何利用sort实现？</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633820.png" alt="image-20240203144931438"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633821.png" alt="image-20240203145022617"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633822.png" alt="image-20240203145603508"></p><h4 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h4><p>tee命令作用把输出的一个副本输送到标准输出，另一个副本拷贝到相应的文件中。如果希望在看到输出的同时，也将其存入一个文件，那么这个命令再合适不过了。</p><p> 它的使用语法格式：</p><p><code>tee [-a] files</code></p><p>其中，-a表示追加到文件末尾。</p><p>当执行某些命令或脚本时，如果希望把输出保存下来，tee命令非常方便。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633823.png" alt="image-20240203150829903"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633824.png" alt="image-20240203150926614"></p><p><code>&gt;/dev/null</code>：不显示在屏幕上</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031633825.png" alt="image-20240203151113026"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="批量修改文件"><a href="#批量修改文件" class="headerlink" title="批量修改文件"></a>批量修改文件</h5><p>将某目录下.txt文件全部修改为.bat。</p><p>1.批量创建文件</p><p><code>mkdir test_filedir</code></p><p><code>touch test_filedir/file&#123;1...10).txt</code></p><p>2.重命名文件语法</p><p><code>rename 旧文件名 新文件名 旧文件所在位置</code></p><p>注意：旧文件所在位置后面加<code>/*</code>     例如：<code>/root/test filedir/*</code>s</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">批量修改文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取所有要修收的文件</span></span><br><span class="line">filenames=$(ls /root/test_shell/test_filedir | grep &#x27;txt&#x27;)</span><br><span class="line">for fname in $filenames</span><br><span class="line">do</span><br><span class="line">echo&quot;文件名：&quot;$fname</span><br><span class="line">newname=$(basename $fname .txt)&quot;.bat&quot;</span><br><span class="line">echo &quot;新文件名：&quot;$newname</span><br><span class="line">rename $fname $newname /root/test_shell/test_filedir/*</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h5 id="批量创建用户"><a href="#批量创建用户" class="headerlink" title="批量创建用户"></a>批量创建用户</h5><p>添加用户的命令</p><p><code>useradd 用户名</code></p><p>给用户设置默认密码</p><p><code>echo &quot;123456&quot; | passwd-stdin 用户名</code></p><p>【示例】批量添加用户</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031806643.png" alt="image-20240203171544440"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">批量创建用户</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取文件中要添加的所有用户名</span></span><br><span class="line">users=$(cat /root/test_shell/test_adduser.txt)</span><br><span class="line">for u in $users</span><br><span class="line">do</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$u</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加用户</span></span><br><span class="line">useradd $u</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">初始化密码</span></span><br><span class="line">echo &quot;123456&quot; | passwd --stdin $u &amp;&gt;/dev/null</span><br><span class="line">[ $? -eq 0 ] &amp;&amp; echo &quot;添加用户&quot;$u&quot;初始化密吗成功”</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031806644.png" alt="image-20240203172705194"></p><h5 id="计算linux系统所有进程占用内存大小的和"><a href="#计算linux系统所有进程占用内存大小的和" class="headerlink" title="计算linux系统所有进程占用内存大小的和"></a>计算linux系统所有进程占用内存大小的和</h5><p>1.查看进程内存大小</p><p><code>ps-aux</code></p><p>2.可以看到有多列，RSS这列表示所占内存大小。提取RSS这列并去掉RSS这行</p><p><code>ps -aux | awk &#39;&#123;print $6&#125;&#39; | grep -v &#39;RSS&#39;</code></p><p>3.统计进程大小之和</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计linux系统中所有进程所占内存大小之和</span></span><br><span class="line">ps_aux=$(ps -aux | awk &#x27;&#123;print $6&#125;&#x27; | grep -v &#x27;RSS&#x27;)</span><br><span class="line">sum=0</span><br><span class="line">for n in $ps_aux</span><br><span class="line">do</span><br><span class="line">sum=$[ $sum + $n ]</span><br><span class="line">done</span><br><span class="line">sum=$[ $sum / 1024 ]</span><br><span class="line">echo &quot;所占内存：$sum&quot;&quot;M&quot;</span><br></pre></td></tr></table></figure><h4 id="【示例】统计系统中各种类型的shell并按降序排序显示"><a href="#【示例】统计系统中各种类型的shell并按降序排序显示" class="headerlink" title="【示例】统计系统中各种类型的shell并按降序排序显示"></a>【示例】统计系统中各种类型的shell并按降序排序显示</h4><p>在awk中数组叫做关联数组(associative arrays)。awk中的<strong>数组不必提前声明，也不必声明大小</strong>。数组元素用0或空字符串来初始化，这根据上下文而定。</p><p>1.awk中的数组赋值并获取</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031806645.png" alt="image-20240203174731249"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031806646.png" alt="image-20240203175457931"></p><p>2.统计系统中各种类型的shell并按降序排序显示</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202402031806647.png" alt="image-20240203180533631"></p>]]></content>
    
    
    <summary type="html">Linux环境编程基础</summary>
    
    
    
    <category term="Liunx" scheme="https://huaiyuechusan.gitee.io/categories/Liunx/"/>
    
    
    <category term="学习技术" scheme="https://huaiyuechusan.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Liunx" scheme="https://huaiyuechusan.gitee.io/tags/Liunx/"/>
    
  </entry>
  
  <entry>
    <title>下载M3U8格式加密视频</title>
    <link href="https://huaiyuechusan.gitee.io/archives/d4b1abad.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/d4b1abad.html</id>
    <published>2024-01-17T09:27:00.000Z</published>
    <updated>2024-10-17T12:02:02.720Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="下载M3U8格式加密视频"><a href="#下载M3U8格式加密视频" class="headerlink" title="下载M3U8格式加密视频"></a>下载M3U8格式加密视频</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>M3U8是一种用于指定多媒体播放列表的格式，通常用于流媒体服务。它是基于文本的文件，其中包含了视频、音频和其他媒体文件的URL链接，以及播放顺序和其他相关信息。M3U8格式广泛用于在线视频流的传输和播放。</p><p>加密视频通常是为了保护内容安全而采取的一种手段。M3U8格式的加密视频使用加密算法来对视频内容进行保护，防止未经授权的访问。这种加密可以通过在M3U8播放列表中使用特定的加密标签和密钥信息来实现。</p><p>在M3U8格式的加密视频中，通常会包含以下元素：</p><ol><li><strong>EXT-X-KEY标签：</strong> 用于指定加密算法和密钥信息。</li><li><strong>密钥URI（Key URI）：</strong> 包含了获取解密密钥的链接。</li><li><strong>IV（Initialization Vector）：</strong> 用于初始化加密算法的向量。</li></ol><p>解密M3U8格式的加密视频需要相应的密钥信息，只有拥有正确密钥的用户才能解密和播放视频内容。这种方式可以有效防止未经授权的用户访问和复制受保护的视频内容。</p><p>总的来说，M3U8格式加密视频通过使用加密算法和密钥信息，提供了一种保护内容安全的方式，确保只有授权用户才能正常播放受保护的视频。</p><h2 id="M3U8格式视频无加密"><a href="#M3U8格式视频无加密" class="headerlink" title="M3U8格式视频无加密"></a>M3U8格式视频无加密</h2><h3 id="在chrome下载拓展插件"><a href="#在chrome下载拓展插件" class="headerlink" title="在chrome下载拓展插件"></a>在chrome下载拓展插件</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715330.png" alt="image-20240117164235165"></p><h3 id="打开视频网站"><a href="#打开视频网站" class="headerlink" title="打开视频网站"></a>打开视频网站</h3><p>右上角插件显示可以下载的资源，点击直接下载</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715332.png" alt="image-20240117164514585"></p><p>下载有进度提醒</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715333.png" alt="image-20240117164549804"></p><h2 id="M3U8格式视频有加密"><a href="#M3U8格式视频有加密" class="headerlink" title="M3U8格式视频有加密"></a>M3U8格式视频有加密</h2><p>若M3U8格式视频有加密，上述插件无法直接下载，需要按照如下步骤操作</p><h3 id="复制网站的带有m3u8的url"><a href="#复制网站的带有m3u8的url" class="headerlink" title="复制网站的带有m3u8的url"></a>复制网站的带有m3u8的url</h3><p>点击插件的复制网址</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715334.png" alt="image-20240117164809444"></p><h3 id="F12调式界面找到key"><a href="#F12调式界面找到key" class="headerlink" title="F12调式界面找到key"></a>F12调式界面找到key</h3><ol><li><p>首先找到网络里xxxVideo.js或xxxPlayer.js文件（具体网站不太，名字可能不太一样），这个js文件可以找到key的值</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715335.png" alt="image-20240117165401679"></p></li><li><p>在源码中打开这个js文件，crtl+f 搜索关键字decryptdata或decrypt（decrypt英文解码的意思），一般都在postMessage方法内，用来接收解密的key</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715336.png" alt="image-20240117165741504"></p></li><li><p>然后打断点，在右侧的作用域中找到decryptdata对用的f变量的key值，在内存检测器中可以看到16进制的key值</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715337.png" alt="image-20240117170016264"></p></li><li><p>将16进制转换为base64格式，即得到字符串key</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715338.png" alt="image-20240117170212954"></p></li></ol><h3 id="使用M3U8批量下载器下载视频"><a href="#使用M3U8批量下载器下载视频" class="headerlink" title="使用M3U8批量下载器下载视频"></a>使用M3U8批量下载器下载视频</h3><p>下载器地址<a href="https://xyyx.lanzouw.com/i9hcAwj48be">https://xyyx.lanzouw.com/i9hcAwj48be</a></p><p>将得到的key和url分别输入 文件/链接后的输入框，点击添加。然后点击全部开始，即开始下载。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715339.png" alt="image-20240117171223258"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715341.png" alt="image-20240117171437386"></p><p>下载后的文件保存在下载器安装位置的output位置</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715342.png" alt="image-20240117171534253"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.52pojie.cn/thread-1823993-1-1.html">https://www.52pojie.cn/thread-1823993-1-1.html</a></p>]]></content>
    
    
    <summary type="html">如何下载M3U8格式加密视频</summary>
    
    
    
    <category term="爬虫" scheme="https://huaiyuechusan.gitee.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://huaiyuechusan.gitee.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="学习技术" scheme="https://huaiyuechusan.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>竞赛总结：智能驾驶汽车虚拟仿真视频数据理解</title>
    <link href="https://huaiyuechusan.gitee.io/archives/283f9737.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/283f9737.html</id>
    <published>2024-01-14T13:59:00.000Z</published>
    <updated>2024-10-17T12:00:16.756Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="竞赛总结：智能驾驶汽车虚拟仿真视频数据理解"><a href="#竞赛总结：智能驾驶汽车虚拟仿真视频数据理解" class="headerlink" title="竞赛总结：智能驾驶汽车虚拟仿真视频数据理解"></a>竞赛总结：智能驾驶汽车虚拟仿真视频数据理解</h1><ul><li>赛题名称：2023全球智能汽车AI挑战赛——赛道二：智能驾驶汽车虚拟仿真视频数据理解赛道</li><li>赛题任务：对视频中的信息进行综合理解，以指定的json文件格式，按照数据说明中的关键词（key）填充描述型的文本信息</li><li>赛题类型：计算机视觉、目标检测</li></ul><blockquote><p>比赛链接：<a href="https://tianchi.aliyun.com/competition/entrance/532155">2023全球智能汽车AI挑战赛——赛道二：智能驾驶汽车虚拟仿真视频数据理解赛道</a></p><p>Datawhale教学视频：<a href="https://space.bilibili.com/431850986/channel/collectiondetail?sid=1901397">二次元的Datawhale的个人空间-二次元的Datawhale个人主页)</a></p></blockquote><h2 id="赛事背景"><a href="#赛事背景" class="headerlink" title="赛事背景"></a>赛事背景</h2><p>当前，全球新一轮科技革命和产业变革蓬勃发展，汽车与人工智能技术加速融合，电动化、网联化、智能化成为汽车产业的发展潮流和趋势，AI技术将更广泛地和汽车产业的各个领域，应用于汽车的智能维护、智能制造、智能驾驶等诸多方面。作为人工智能技术和汽车产业先进技术的倡导者，吉利汽车集团、阿里云、NVIDIA 英伟达一直致力于推动未来出行方式的发展，共同发起了本届2023全球智能汽车AI挑战赛。本届比赛将汇聚来自全球各地的杰出AI领域人才，推动自动驾驶、AI大模型、加速计算、云计算技术三者深度结合，为未来智能出行提供更加安全、高效、舒适的解决方案。</p><h2 id="赛事任务"><a href="#赛事任务" class="headerlink" title="赛事任务"></a>赛事任务</h2><p>输入：元宇宙仿真平台生成的前视摄像头虚拟视频数据（8-10秒左右）；</p><p>输出：对视频中的信息进行综合理解，以指定的json文件格式，按照数据说明中的关键词（key）填充描述型的文本信息（value，中文/英文均可以）；</p><h2 id="数据说明"><a href="#数据说明" class="headerlink" title="数据说明"></a>数据说明</h2><h3 id="文本描述结构树"><a href="#文本描述结构树" class="headerlink" title="文本描述结构树"></a>文本描述结构树</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401142149361.png" alt="image-20240114211932916"></p><h3 id="上传json格式示例"><a href="#上传json格式示例" class="headerlink" title="上传json格式示例"></a>上传json格式示例</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">建议用英文提交：</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span> <span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;time&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;YYMMDD&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;model&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;model_name&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;test_results&quot;</span> <span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;clip_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xxxx_1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scenario&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;cityroad&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;period&quot;</span><span class="punctuation">:</span><span class="string">&quot;night&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;road_structure&quot;</span><span class="punctuation">:</span><span class="string">&quot;ramp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;general_obstacle&quot;</span><span class="punctuation">:</span><span class="string">&quot;nothing&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;abnormal_condition&quot;</span><span class="punctuation">:</span><span class="string">&quot;nothing&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ego_car_behavior&quot;</span><span class="punctuation">:</span><span class="string">&quot;turning right&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;closest_participants_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;passenger car&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;closest_participants_behavior&quot;</span><span class="punctuation">:</span><span class="string">&quot;braking&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;clip_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xxxx_2&quot;</span></span><br><span class="line">    ... ...</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">... ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>为了减少程序编译过程中的问题，提交答案的json文件中的 key &amp; value 请使用英文，key请不要进行更改，value使用以下列表中的元素。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scenario&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;suburbs&quot;</span><span class="punctuation">,</span><span class="string">&quot;city street&quot;</span><span class="punctuation">,</span><span class="string">&quot;expressway&quot;</span><span class="punctuation">,</span><span class="string">&quot;tunnel&quot;</span><span class="punctuation">,</span><span class="string">&quot;parking-lot&quot;</span><span class="punctuation">,</span><span class="string">&quot;gas or charging stations&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;weather&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;clear&quot;</span><span class="punctuation">,</span><span class="string">&quot;cloudy&quot;</span><span class="punctuation">,</span><span class="string">&quot;raining&quot;</span><span class="punctuation">,</span><span class="string">&quot;foggy&quot;</span><span class="punctuation">,</span><span class="string">&quot;snowy&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;period&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;daytime&quot;</span><span class="punctuation">,</span><span class="string">&quot;dawn or dusk&quot;</span><span class="punctuation">,</span><span class="string">&quot;night&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;road_structure&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;normal&quot;</span><span class="punctuation">,</span><span class="string">&quot;crossroads&quot;</span><span class="punctuation">,</span><span class="string">&quot;T-junction&quot;</span><span class="punctuation">,</span><span class="string">&quot;ramp&quot;</span><span class="punctuation">,</span><span class="string">&quot;lane merging&quot;</span><span class="punctuation">,</span><span class="string">&quot;parking lot entrance&quot;</span><span class="punctuation">,</span><span class="string">&quot;round about&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;general_obstacle&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;nothing&quot;</span><span class="punctuation">,</span><span class="string">&quot;speed bumper&quot;</span><span class="punctuation">,</span><span class="string">&quot;traffic cone&quot;</span><span class="punctuation">,</span><span class="string">&quot;water horse&quot;</span><span class="punctuation">,</span><span class="string">&quot;stone&quot;</span><span class="punctuation">,</span><span class="string">&quot;manhole cover&quot;</span><span class="punctuation">,</span><span class="string">&quot;nothing&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;abnormal_condition&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;uneven&quot;</span><span class="punctuation">,</span><span class="string">&quot;oil or water stain&quot;</span><span class="punctuation">,</span><span class="string">&quot;standing water&quot;</span><span class="punctuation">,</span><span class="string">&quot;cracked&quot;</span><span class="punctuation">,</span><span class="string">&quot;nothing&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;ego_car_behavior&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;slow down&quot;</span><span class="punctuation">,</span><span class="string">&quot;go straight&quot;</span><span class="punctuation">,</span><span class="string">&quot;turn right&quot;</span><span class="punctuation">,</span><span class="string">&quot;turn left&quot;</span><span class="punctuation">,</span><span class="string">&quot;stop&quot;</span><span class="punctuation">,</span><span class="string">&quot;U-turn&quot;</span><span class="punctuation">,</span><span class="string">&quot;speed up&quot;</span><span class="punctuation">,</span><span class="string">&quot;lane change&quot;</span><span class="punctuation">,</span><span class="string">&quot;others&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;closest_participants_type&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;passenger car&quot;</span><span class="punctuation">,</span><span class="string">&quot;bus&quot;</span><span class="punctuation">,</span><span class="string">&quot;truck&quot;</span><span class="punctuation">,</span><span class="string">&quot;pedestrian&quot;</span><span class="punctuation">,</span><span class="string">&quot;policeman&quot;</span><span class="punctuation">,</span><span class="string">&quot;nothing&quot;</span><span class="punctuation">,</span><span class="string">&quot;others&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;closest_participants_behavior&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;slow down&quot;</span><span class="punctuation">,</span><span class="string">&quot;go straight&quot;</span><span class="punctuation">,</span><span class="string">&quot;turn right&quot;</span><span class="punctuation">,</span><span class="string">&quot;turn left&quot;</span><span class="punctuation">,</span><span class="string">&quot;stop&quot;</span><span class="punctuation">,</span><span class="string">&quot;U-turn&quot;</span><span class="punctuation">,</span><span class="string">&quot;speed up&quot;</span><span class="punctuation">,</span><span class="string">&quot;lane change&quot;</span><span class="punctuation">,</span><span class="string">&quot;others&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h2 id="评测指标"><a href="#评测指标" class="headerlink" title="评测指标"></a>评测指标</h2><p>初赛阶段：排行榜总分=视频理解准确度分数<br>复赛阶段：复赛总成绩=复赛排行榜视频理解准确度分数（100%）+代码复现时效分数（10%）<br>具体成绩计算方法和晋级标准请参考【赛制介绍】</p><p>视频理解准确度分数评测规则如下：</p><p>参赛者可采用不同的人工智能的模型和算法，推理出对应视频的描述语言，参赛者可以在给定的备选答案中选出一个正确的答案，如果其描述语言不在给定的备选答案中，也可以给出一个最佳的答案。</p><p>系统会针对参赛者提交的json文件，通过描述型的文本信息与真值进行对比，综合得出分数；其中，“距离最近的交通参与者的行为”的题目为2分，其它题目为1分；每个视频的满分为10分。每一个视频结果中的key值，需要参考数据说明的json格式示例，请勿进行修改。</p><p>对于真值部分，组织者会建立对应的中英文近义词作为真值列表，只要在该列表中就获得分数，例如真值“雨天” = [“雨天”， “雨”， “小雨”… , “rainy”, “rain”, “raining”…]，参赛选手可以选择对应的近义词来进行作答，但每一项的真值列表不公开，仅体现在后台程序中。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><ul><li>使用文本与图像进行匹配</li></ul><p>datawhale学习组织将Baseline部署在线上平台百度AI Studio上，可一键fork运行代码：</p><p><a href="https://aistudio.baidu.com/projectdetail/7033846?contributionType=1&amp;sUid=40990&amp;shared=1&amp;ts=1699415726984">https://aistudio.baidu.com/projectdetail/7033846?contributionType=1&amp;sUid=40990&amp;shared=1&amp;ts=1699415726984</a></p><p>baseline代码解读</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入必要的库和模块</span></span><br><span class="line"><span class="keyword">import</span> paddle  <span class="comment"># 导入 PaddlePaddle 深度学习框架</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image  <span class="comment"># 从 PIL 库导入 Image 模块，用于图像处理</span></span><br><span class="line"><span class="keyword">from</span> clip <span class="keyword">import</span> tokenize, load_model  <span class="comment"># 导入 clip 模块，可能用于图像和文本的联合处理</span></span><br><span class="line"><span class="keyword">import</span> glob, json, os  <span class="comment"># 导入文件处理和 JSON 处理的库</span></span><br><span class="line"><span class="keyword">import</span> cv2  <span class="comment"># 导入 OpenCV 库，用于计算机视觉任务</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm_notebook  <span class="comment"># 导入 tqdm_notebook 以在笔记本中显示进度条</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 导入 NumPy 用于数值处理</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> normalize  <span class="comment"># 从 sklearn.preprocessing 导入 normalize 用于数据归一化</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># 导入 matplotlib.pyplot 用于绘图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型和转换工具</span></span><br><span class="line">model, transforms = load_model(<span class="string">&#x27;ViT_B_32&#x27;</span>, pretrained=<span class="literal">True</span>)  <span class="comment"># 加载预训练的 ViT_B_32 模型和其转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为各个类别和相应词汇定义字典</span></span><br><span class="line">en_match_words = &#123;</span><br><span class="line">    <span class="comment"># 各个类别的关键词列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化提交的 JSON 结构</span></span><br><span class="line">submit_json = &#123;</span><br><span class="line">    <span class="string">&quot;author&quot;</span>: <span class="string">&quot;abc&quot;</span>,  <span class="comment"># 作者姓名</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span>: <span class="string">&quot;231011&quot;</span>,  <span class="comment"># 时间戳</span></span><br><span class="line">    <span class="string">&quot;model&quot;</span>: <span class="string">&quot;model_name&quot;</span>,  <span class="comment"># 使用的模型名称</span></span><br><span class="line">    <span class="string">&quot;test_results&quot;</span>: []  <span class="comment"># 测试结果的列表，初始为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取并排序视频路径</span></span><br><span class="line">paths = glob.glob(<span class="string">&#x27;./PreliminaryTestVideos/*&#x27;</span>)  <span class="comment"># 使用 glob 获取指定路径下的所有视频文件</span></span><br><span class="line">paths.sort()  <span class="comment"># 对路径进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每个视频文件进行处理</span></span><br><span class="line"><span class="keyword">for</span> video_path <span class="keyword">in</span> paths:</span><br><span class="line">    <span class="built_in">print</span>(video_path)  <span class="comment"># 打印视频路径</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 从路径中提取视频剪辑的 ID</span></span><br><span class="line">    clip_id = video_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    cap = cv2.VideoCapture(video_path)  <span class="comment"># 使用 OpenCV 读取视频</span></span><br><span class="line">    img = cap.read()[<span class="number">1</span>]  <span class="comment"># 读取视频的第一帧</span></span><br><span class="line">    image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  <span class="comment"># 将图像从 BGR 转换为 RGB 格式</span></span><br><span class="line">    image = Image.fromarray(image)  <span class="comment"># 将数组转换为 PIL 图像</span></span><br><span class="line">    image = transforms(image).unsqueeze(<span class="number">0</span>)  <span class="comment"># 应用预处理转换并添加一个维度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化用于单个视频结果的字典</span></span><br><span class="line">    single_video_result = &#123;</span><br><span class="line">        <span class="comment"># 视频的各种属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 针对特定关键词进行预测</span></span><br><span class="line">    <span class="keyword">for</span> keyword <span class="keyword">in</span> en_match_words.keys():</span><br><span class="line">        <span class="keyword">if</span> keyword <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;weather&quot;</span>, <span class="string">&quot;road_structure&quot;</span>]:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 如果关键词不是 weather 或 road_structure，则跳过</span></span><br><span class="line">        </span><br><span class="line">        texts = np.array(en_match_words[keyword])  <span class="comment"># 将关键词转换为 NumPy 数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> paddle.no_grad():  <span class="comment"># 禁用梯度计算</span></span><br><span class="line">            <span class="comment"># 使用模型进行预测</span></span><br><span class="line">            logits_per_image, logits_per_text = model(image, tokenize(en_match_words[keyword]))</span><br><span class="line">            probs = paddle.nn.functional.softmax(logits_per_image, axis=-<span class="number">1</span>)  <span class="comment"># 应用 softmax 获取概率分布</span></span><br><span class="line"></span><br><span class="line">        probs = probs.numpy()  <span class="comment"># 将概率转换为 NumPy 数组</span></span><br><span class="line">        single_video_result[keyword] = texts[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]]  <span class="comment"># 选择具有最高概率的词汇作为结果</span></span><br><span class="line">        </span><br><span class="line">    submit_json[<span class="string">&quot;test_results&quot;</span>].append(single_video_result)  <span class="comment"># 将结果添加到测试结果列表</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将最终结果写入 JSON 文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;clip_result.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> up:</span><br><span class="line">    json.dump(submit_json, up, ensure_ascii=<span class="literal">False</span>)  <span class="comment"># 以 UTF-8 编码将结果保存到文件中</span></span><br></pre></td></tr></table></figure><h3 id="进阶思路"><a href="#进阶思路" class="headerlink" title="进阶思路"></a>进阶思路</h3><ul><li>使用图像进行视觉问答</li><li>时序视频进行视频问答</li><li>使用多模态大模型（CLIP）进行问答</li></ul><h4 id="多模态大模型CLIP简介"><a href="#多模态大模型CLIP简介" class="headerlink" title="多模态大模型CLIP简介"></a>多模态大模型CLIP简介</h4><p>CLIP（Contrastive Language-Image Pre-training）是一种多模态大模型，由OpenAI开发。它是一种能够同时理解文本和图像的模型，通过对文本和图像进行对比性学习，使其在多模态任务上表现出色。以下是CLIP的一些关键特点和工作原理的简介：</p><ol><li><strong>多模态表示学习：</strong> CLIP的设计目标是使模型能够理解文本和图像之间的语义关系，而不是仅限于特定任务。这使得CLIP在各种任务上都能表现良好，而无需针对每个任务进行专门的微调。</li><li><strong>对比性学习：</strong> CLIP使用对比损失进行训练。这意味着模型学会将相关的文本和图像样本靠近，而不相关的样本分开。这种对比性学习的方法使得CLIP在理解语义关系时更为强大。</li><li><strong>零样本学习：</strong> CLIP在零样本学习方面表现出色。这意味着模型可以在没有特定任务样本的情况下执行任务，因为它已经学会了通用的文本-图像表示。</li><li><strong>大规模预训练：</strong> CLIP是在大规模文本和图像数据上进行预训练的。这使得模型能够捕捉更广泛的语义信息，从而在多种任务上通用。</li><li><strong>应用广泛：</strong> 由于其多模态的性质，CLIP可以用于多种任务，包括图像分类、物体检测、文本检索等。</li></ol><p>总体而言，CLIP代表了一种强大的多模态学习方法，使得模型能够理解文本和图像之间的语义关系，并在各种任务上表现出色。</p><h3 id="大佬代码解读"><a href="#大佬代码解读" class="headerlink" title="大佬代码解读"></a>大佬代码解读</h3><p>大佬代码地址（大家可以关注膜拜一下大佬）：<a href="https://www.kaggle.com/code/peilwang/self-drive">self drive | Kaggle</a></p><h4 id="推理天气，时间和道路结构"><a href="#推理天气，时间和道路结构" class="headerlink" title="推理天气，时间和道路结构"></a>推理天气，时间和道路结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入必要的库</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个JSON格式的字典，包含作者信息、时间戳、模型名称和一个空的测试结果列表</span></span><br><span class="line">submit_json = &#123;</span><br><span class="line">    <span class="string">&quot;author&quot;</span> : <span class="string">&quot;abc&quot;</span> ,</span><br><span class="line">    <span class="string">&quot;time&quot;</span> : <span class="string">&quot;231011&quot;</span>,</span><br><span class="line">    <span class="string">&quot;model&quot;</span> : <span class="string">&quot;model_name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test_results&quot;</span> : []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定路径下的视频文件列表，排序后存储在paths变量中</span></span><br><span class="line">paths = glob.glob(<span class="string">&#x27;/kaggle/input/clip-test/初赛测试视频/*&#x27;</span>)</span><br><span class="line">paths.sort()</span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果设置了debug标志，则只选择一个特定的视频路径用于调试</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    paths = [<span class="string">&#x27;/kaggle/input/clip-test/初赛测试视频/40.avi&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每个视频文件</span></span><br><span class="line"><span class="keyword">for</span> video_path <span class="keyword">in</span> paths:</span><br><span class="line">    <span class="built_in">print</span>(video_path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取视频文件名作为clip_id</span></span><br><span class="line">    clip_id = video_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打开视频文件</span></span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取视频的第一帧图像</span></span><br><span class="line">    img = cap.read()[<span class="number">1</span>]</span><br><span class="line">    img = cap.read()[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取图像的高度、宽度和通道数</span></span><br><span class="line">    height, width, _ = img.shape</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 截取图像的上部分，保留下部分的 75%</span></span><br><span class="line">    end_row = <span class="built_in">int</span>(height * <span class="number">0.75</span>)</span><br><span class="line">    img2 = img[<span class="number">0</span>:end_row, :]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 对图像进行预处理，转换为模型所需的格式</span></span><br><span class="line">    image1 = preprocess(Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">    image2 = preprocess(Image.fromarray(cv2.cvtColor(img2, cv2.COLOR_BGR2RGB))).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建包含初始信息的单个视频结果字典</span></span><br><span class="line">    single_video_result = &#123;</span><br><span class="line">        <span class="string">&quot;clip_id&quot;</span>: clip_id,</span><br><span class="line">        <span class="string">&quot;scerario&quot;</span> : <span class="string">&quot;city street&quot;</span>,</span><br><span class="line">        <span class="string">&quot;weather&quot;</span>:<span class="string">&quot;clear&quot;</span>,</span><br><span class="line">        <span class="string">&quot;period&quot;</span>:<span class="string">&quot;night&quot;</span>,</span><br><span class="line">        <span class="string">&quot;road_structure&quot;</span>:<span class="string">&quot;normal&quot;</span>,</span><br><span class="line">        <span class="string">&quot;general_obstacle&quot;</span>:<span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;abnormal_condition&quot;</span>:<span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ego_car_behavior&quot;</span>:<span class="string">&quot;go straight&quot;</span>,</span><br><span class="line">        <span class="string">&quot;closest_participants_type&quot;</span>:<span class="string">&quot;passenger car&quot;</span>,</span><br><span class="line">        <span class="string">&quot;closest_participants_behavior&quot;</span>:<span class="string">&quot;braking&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历关键词（en_match_words中的关键词）</span></span><br><span class="line">    <span class="keyword">for</span> keyword <span class="keyword">in</span> en_match_words.keys():</span><br><span class="line">        <span class="comment"># 如果关键词不是[&quot;weather&quot;, &quot;period&quot;, &quot;road_structure&quot;]中的一个，跳过</span></span><br><span class="line">        <span class="keyword">if</span> keyword <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;weather&quot;</span>, <span class="string">&quot;period&quot;</span>, <span class="string">&quot;road_structure&quot;</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 获取关键词对应的文本列表</span></span><br><span class="line">        texts = np.array(en_match_words[keyword])</span><br><span class="line">        text = clip.tokenize(texts).to(device)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用torch.no_grad()上下文，避免计算梯度</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="keyword">if</span> keyword == <span class="string">&#x27;period&#x27;</span>:</span><br><span class="line">                <span class="comment"># 检查关键词是否为 &#x27;period&#x27;</span></span><br><span class="line">                <span class="comment"># 对于关键词 &#x27;period&#x27;，根据模型预测白天或夜晚</span></span><br><span class="line">                height, width, _ = img.shape</span><br><span class="line">                end_row = <span class="built_in">int</span>(height * <span class="number">0.5</span>)</span><br><span class="line">                img_day = img[<span class="number">0</span>:end_row, :]</span><br><span class="line">                img_day = preprocess(Image.fromarray(cv2.cvtColor(img_day, cv2.COLOR_BGR2RGB))).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">                <span class="comment"># 预处理 &#x27;period&#x27; 关键词的图像</span></span><br><span class="line">                logits_per_image, logits_per_text = model(img_day, text)</span><br><span class="line">                <span class="comment"># 获取模型预测结果</span></span><br><span class="line">                probs = logits_per_image.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line">                <span class="comment"># 将预测转换为概率</span></span><br><span class="line">                <span class="keyword">if</span> probs[<span class="number">0</span>][<span class="number">0</span>] &lt; <span class="number">0.85</span>:</span><br><span class="line">                    <span class="comment"># 如果是 &#x27;daytime&#x27; 的概率小于 0.85，则分类为 &#x27;night&#x27;</span></span><br><span class="line">                    single_video_result[keyword] = <span class="string">&#x27;night&#x27;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 否则分类为 &#x27;daytime&#x27;</span></span><br><span class="line">                    single_video_result[keyword] = <span class="string">&#x27;daytime&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 对于其他关键词，根据模型预测关键词的可能类别，并选择概率最高的类别作为结果</span></span><br><span class="line">                <span class="comment"># 使用两个不同的图像进行模型预测</span></span><br><span class="line">                logits_per_image1, logits_per_text1 = model(image1, text)</span><br><span class="line">                logits_per_image2, logits_per_text2 = model(image2, text)</span><br><span class="line">                <span class="comment"># 从两个预测中获取预测结果</span></span><br><span class="line">                probs1 = logits_per_image1.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line">                probs2 = logits_per_image2.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line">                <span class="comment"># 将两个预测的概率进行组合</span></span><br><span class="line">                probs = probs1 + probs2</span><br><span class="line">                <span class="comment"># 选择概率最高的类别作为结果</span></span><br><span class="line">                single_video_result[keyword] = texts[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果关键词为 &quot;parking lot entrance&quot;</span></span><br><span class="line">            <span class="keyword">if</span> texts[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]] == <span class="string">&quot;parking lot entrance&quot;</span>:</span><br><span class="line">                <span class="comment"># 再次使用模型预测其他可能的条件</span></span><br><span class="line">                texts = [<span class="string">&quot;uneven&quot;</span>,<span class="string">&quot;水渍&quot;</span>,<span class="string">&quot;油渍&quot;</span>,<span class="string">&quot;积水&quot;</span>,<span class="string">&quot;cracked&quot;</span>]</span><br><span class="line">                text = clip.tokenize(texts).to(device)</span><br><span class="line">                logits_per_image1, logits_per_text1 = model(image2, text)</span><br><span class="line">                probs = logits_per_image1.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line">                <span class="comment"># 根据概率值确定结果</span></span><br><span class="line">                <span class="keyword">if</span> texts[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]] <span class="keyword">in</span> [<span class="string">&quot;水渍&quot;</span>,<span class="string">&quot;油渍&quot;</span>]:</span><br><span class="line">                    single_video_result[<span class="string">&#x27;abnormal_condition&#x27;</span>] = <span class="string">&quot;oil or water stain&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> texts[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]] == <span class="string">&#x27;积水&#x27;</span>:</span><br><span class="line">                    single_video_result[<span class="string">&#x27;abnormal_condition&#x27;</span>] = <span class="string">&quot;standing water&quot;</span></span><br><span class="line">                <span class="keyword">else</span> :</span><br><span class="line">                    single_video_result[<span class="string">&#x27;abnormal_condition&#x27;</span>] = texts[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">                <span class="built_in">print</span>(single_video_result[<span class="string">&#x27;abnormal_condition&#x27;</span>])</span><br><span class="line">                </span><br><span class="line">    <span class="comment"># 调整特定的 &quot;road_structure&quot; 值</span></span><br><span class="line">    <span class="keyword">if</span> single_video_result[<span class="string">&quot;road_structure&quot;</span>] == <span class="string">&quot;Ordinary roads&quot;</span>:</span><br><span class="line">        single_video_result[<span class="string">&quot;road_structure&quot;</span>] = <span class="string">&quot;normal&quot;</span></span><br><span class="line">    <span class="keyword">if</span> single_video_result[<span class="string">&quot;road_structure&quot;</span>] == <span class="string">&#x27;lane merging&#x27;</span>:</span><br><span class="line">        <span class="comment"># 如果 &quot;road_structure&quot; 为 &#x27;lane merging&#x27;，再次使用模型预测并调整结果</span></span><br><span class="line">        texts = np.array([<span class="string">&#x27;车道合并&#x27;</span>,<span class="string">&#x27;普通道路&#x27;</span>])</span><br><span class="line">        text = clip.tokenize(texts).to(device)</span><br><span class="line">        logits_per_image1, logits_per_text1 = model(image1, text)</span><br><span class="line">        probs1 = logits_per_image1.softmax(dim=-<span class="number">1</span>).cpu().detach().numpy()</span><br><span class="line">        <span class="keyword">if</span> texts[probs1[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]] != <span class="string">&#x27;车道合并&#x27;</span>:</span><br><span class="line">            single_video_result[<span class="string">&quot;road_structure&quot;</span>] = <span class="string">&#x27;normal&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将单个视频结果添加到submit_json中的测试结果列表</span></span><br><span class="line">    submit_json[<span class="string">&quot;test_results&quot;</span>].append(single_video_result)</span><br></pre></td></tr></table></figure><h4 id="推理最近交通参与者"><a href="#推理最近交通参与者" class="headerlink" title="推理最近交通参与者"></a>推理最近交通参与者</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入必要的库</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个 JSON 格式的字典，用于存储视频结果</span></span><br><span class="line">submit_json_video = &#123;</span><br><span class="line">    <span class="string">&quot;author&quot;</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;time&quot;</span>: <span class="string">&quot;231011&quot;</span>,</span><br><span class="line">    <span class="string">&quot;model&quot;</span>: <span class="string">&quot;model_name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test_results&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义包含不同场景关键词可能取值的字典</span></span><br><span class="line">en_match_words = &#123;</span><br><span class="line">    <span class="string">&quot;scerario&quot;</span>: [<span class="string">&quot;suburbs&quot;</span>, <span class="string">&quot;city street&quot;</span>, <span class="string">&quot;expressway&quot;</span>, <span class="string">&quot;tunnel&quot;</span>, <span class="string">&quot;parking-lot&quot;</span>, <span class="string">&quot;gas or charging stations&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;weather&quot;</span>: [<span class="string">&quot;clear&quot;</span>, <span class="string">&quot;cloudy&quot;</span>, <span class="string">&quot;raining&quot;</span>, <span class="string">&quot;foggy&quot;</span>, <span class="string">&quot;snowying&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;period&quot;</span>: [<span class="string">&quot;daytime&quot;</span>, <span class="string">&quot;dawn or dusk&quot;</span>, <span class="string">&quot;night&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;road_structure&quot;</span>: [<span class="string">&quot;Ordinary roads&quot;</span>, <span class="string">&quot;crossroads&quot;</span>, <span class="string">&quot;T-junction&quot;</span>, <span class="string">&quot;ramp&quot;</span>, <span class="string">&quot;lane merging&quot;</span>, <span class="string">&quot;parking lot entrance&quot;</span>, <span class="string">&quot;round about&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;general_obstacle&quot;</span>: [<span class="string">&quot;nothing&quot;</span>, <span class="string">&quot;speed bumper&quot;</span>, <span class="string">&quot;traffic cone&quot;</span>, <span class="string">&quot;water horse&quot;</span>, <span class="string">&quot;stone&quot;</span>, <span class="string">&quot;manhole cover&quot;</span>, <span class="string">&quot;nothing&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;abnormal_condition&quot;</span>: [<span class="string">&quot;uneven&quot;</span>, <span class="string">&quot;oil or water stain&quot;</span>, <span class="string">&quot;standing water&quot;</span>, <span class="string">&quot;cracked&quot;</span>, <span class="string">&quot;nothing&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;ego_car_behavior&quot;</span>: [<span class="string">&quot;slow down&quot;</span>, <span class="string">&quot;go straight&quot;</span>, <span class="string">&quot;turn right&quot;</span>, <span class="string">&quot;turn left&quot;</span>, <span class="string">&quot;stop&quot;</span>, <span class="string">&quot;U-turn&quot;</span>, <span class="string">&quot;speed up&quot;</span>, <span class="string">&quot;lane change&quot;</span>, <span class="string">&quot;others&quot;</span>],</span><br><span class="line">    <span class="string">&quot;closest_participants_type&quot;</span>: [<span class="string">&quot;normal car&quot;</span>, <span class="string">&quot;bus&quot;</span>, <span class="string">&quot;truck&quot;</span>, <span class="string">&quot;people&quot;</span>, <span class="string">&quot;police&quot;</span>, <span class="string">&quot;nothing&quot;</span>, <span class="string">&quot;others&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;closest_participants_behavior&quot;</span>: [<span class="string">&quot;slow down&quot;</span>, <span class="string">&quot;go straight&quot;</span>, <span class="string">&quot;turn right&quot;</span>, <span class="string">&quot;turn left&quot;</span>, <span class="string">&quot;stop&quot;</span>, <span class="string">&quot;U-turn&quot;</span>, <span class="string">&quot;speed up&quot;</span>, <span class="string">&quot;lane change&quot;</span>, <span class="string">&quot;others&quot;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取视频文件的路径并进行排序</span></span><br><span class="line">paths = glob.glob(<span class="string">&#x27;/kaggle/input/clip-test/初赛测试视频/*&#x27;</span>)</span><br><span class="line">paths.sort()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定用于分析的关键词（例如，[&#x27;closest_participants_type&#x27;]）</span></span><br><span class="line">keys = [<span class="string">&#x27;closest_participants_type&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置调试标志，以控制是处理所有视频还是只处理特定视频</span></span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果处于调试模式，则使用特定的视频进行测试</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    paths = [<span class="string">&#x27;/kaggle/input/clip-test/初赛测试视频/45.avi&#x27;</span>]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 遍历每个视频路径</span></span><br><span class="line"><span class="keyword">for</span> video_path <span class="keyword">in</span> paths:</span><br><span class="line">    <span class="built_in">print</span>(video_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化一个数组，用于存储每个关键词的概率总和</span></span><br><span class="line">    ans = [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取视频文件名作为 clip_id</span></span><br><span class="line">    clip_id = video_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开视频文件</span></span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">    frame_count = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line"></span><br><span class="line">    results = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义用于帧采样率的变量 &#x27;x&#x27;</span></span><br><span class="line">    x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以基于 &#x27;x&#x27; 的采样率遍历帧</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, frame_count, <span class="built_in">int</span>(fps // x)):</span><br><span class="line">        <span class="comment"># 将帧位置设置为当前索引</span></span><br><span class="line">        cap.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, i)</span><br><span class="line">        ret, img = cap.read()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果帧读取不成功，则中断循环</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从帧底部提取感兴趣区域（ROI）</span></span><br><span class="line">        height, width, _ = img.shape</span><br><span class="line">        start_row = <span class="built_in">int</span>(height * <span class="number">0</span>)</span><br><span class="line">        img = img[start_row:height, :]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对帧图像进行预处理</span></span><br><span class="line">        image = preprocess(Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化一个用于单帧结果的字典</span></span><br><span class="line">        single_frame_result = &#123;</span><br><span class="line">            <span class="string">&quot;clip_id&quot;</span>: clip_id,</span><br><span class="line">            <span class="string">&quot;scerario&quot;</span>: <span class="string">&quot;city street&quot;</span>,</span><br><span class="line">            <span class="string">&quot;weather&quot;</span>: <span class="string">&quot;clear&quot;</span>,</span><br><span class="line">            <span class="string">&quot;period&quot;</span>: <span class="string">&quot;night&quot;</span>,</span><br><span class="line">            <span class="string">&quot;road_structure&quot;</span>: <span class="string">&quot;normal&quot;</span>,</span><br><span class="line">            <span class="string">&quot;general_obstacle&quot;</span>: <span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;abnormal_condition&quot;</span>: <span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ego_car_behavior&quot;</span>: <span class="string">&quot;go straight&quot;</span>,</span><br><span class="line">            <span class="string">&quot;closest_participants_type&quot;</span>: <span class="string">&quot;passenger car&quot;</span>,</span><br><span class="line">            <span class="string">&quot;closest_participants_behavior&quot;</span>: <span class="string">&quot;braking&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历指定的关键词（例如，[&#x27;closest_participants_type&#x27;]）</span></span><br><span class="line">        <span class="keyword">for</span> k, keyword <span class="keyword">in</span> <span class="built_in">enumerate</span>(keys):</span><br><span class="line">            <span class="comment"># 对于特定帧跳过处理 &#x27;closest_participants_type&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> keyword == <span class="string">&quot;closest_participants_type&quot;</span> <span class="keyword">and</span> (i &lt; fps * <span class="number">5</span> // x <span class="keyword">or</span> i &gt; fps * <span class="number">7</span> // x):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取关键词对应的文本</span></span><br><span class="line">            texts = np.array(en_match_words[keyword])</span><br><span class="line">            text = clip.tokenize(texts).to(device)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用无梯度计算推理结果</span></span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                logits_per_image, logits_per_text = model(image, text)</span><br><span class="line">                probs = logits_per_image.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将概率累加到 ans 数组中</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ans[k])):</span><br><span class="line">                ans[k][j] += probs[<span class="number">0</span>][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对 ans 数组中的每个关键词，选择具有最大概率的文本值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ans)):</span><br><span class="line">        single_frame_result[keys[i]] = en_match_words[keys[i]][ans[i].index((<span class="built_in">max</span>(ans[i])))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将单帧结果添加到 JSON 结果列表中</span></span><br><span class="line">    submit_json_video[<span class="string">&quot;test_results&quot;</span>].append(single_frame_result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 释放视频文件资源</span></span><br><span class="line">    cap.release()</span><br></pre></td></tr></table></figure><h4 id="推理自车行为"><a href="#推理自车行为" class="headerlink" title="推理自车行为"></a>推理自车行为</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> tqdm.notebook <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> tensorflow_docs.vis <span class="keyword">import</span> embed</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">format_frames</span>(<span class="params">frame, output_size</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Pad and resize an image from a video.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      frame: Image that needs to resized and padded. </span></span><br><span class="line"><span class="string">      output_size: Pixel size of the output frame image.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Return:</span></span><br><span class="line"><span class="string">      Formatted frame with padding of specified output size.</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">    frame = tf.image.convert_image_dtype(frame, tf.float32)</span><br><span class="line">    frame = tf.image.resize_with_pad(frame, *output_size)</span><br><span class="line">    <span class="keyword">return</span> frame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于从视频文件中提取帧序列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">frames_from_video_file</span>(<span class="params">video_path, n_frames, output_size=(<span class="params"><span class="number">224</span>, <span class="number">224</span></span>), frame_step=<span class="number">15</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从每个视频文件中创建帧序列。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">      video_path：视频文件的文件路径。</span></span><br><span class="line"><span class="string">      n_frames：要从每个视频文件中创建的帧数。</span></span><br><span class="line"><span class="string">      output_size：输出帧图像的像素大小。</span></span><br><span class="line"><span class="string">      frame_step：帧步长，即每隔多少帧采样一次。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回：</span></span><br><span class="line"><span class="string">      一个形状为 (n_frames, height, width, channels) 的 NumPy 数组，包含从视频文件中提取的帧。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 读取每个视频的每一帧</span></span><br><span class="line">    result = []</span><br><span class="line">    src = cv2.VideoCapture(<span class="built_in">str</span>(video_path))  <span class="comment"># 打开视频文件</span></span><br><span class="line"></span><br><span class="line">    video_length = src.get(cv2.CAP_PROP_FRAME_COUNT)  <span class="comment"># 获取视频的总帧数</span></span><br><span class="line"></span><br><span class="line">    need_length = <span class="number">1</span> + (n_frames - <span class="number">1</span>) * frame_step  <span class="comment"># 计算需要的帧序列长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据视频长度和需要的长度计算起始帧的位置</span></span><br><span class="line">    <span class="keyword">if</span> need_length &gt; video_length:</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        max_start = video_length - need_length</span><br><span class="line">        start = random.randint(<span class="number">0</span>, max_start + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    src.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, start)  <span class="comment"># 设置视频的起始帧位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取第一帧</span></span><br><span class="line">    ret, frame = src.read()</span><br><span class="line">    result.append(format_frames(frame, output_size))  <span class="comment"># 将第一帧添加到结果列表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环读取后续帧</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n_frames - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(frame_step):</span><br><span class="line">            ret, frame = src.read()</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            frame = format_frames(frame, output_size)</span><br><span class="line">            result.append(frame)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(np.zeros_like(result[<span class="number">0</span>]))  <span class="comment"># 如果视频读取失败，用零填充</span></span><br><span class="line"></span><br><span class="line">    src.release()  <span class="comment"># 释放视频资源</span></span><br><span class="line">    result = np.array(result)[..., [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]]  <span class="comment"># 将结果转换为 NumPy 数组，并重新排序通道顺序（BGR 到 RGB）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，将图像序列保存为 GIF 文件并返回嵌入的文件链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_gif</span>(<span class="params">images</span>):</span><br><span class="line">    converted_images = np.clip(images * <span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)  <span class="comment"># 将图像值从 [0, 1] 转换为 [0, 255] 并转为整数</span></span><br><span class="line">    imageio.mimsave(<span class="string">&#x27;./animation.gif&#x27;</span>, converted_images, fps=<span class="number">10</span>)  <span class="comment"># 保存为 GIF 文件</span></span><br><span class="line">    <span class="keyword">return</span> embed.embed_file(<span class="string">&#x27;./animation.gif&#x27;</span>)  <span class="comment"># 返回嵌入的文件链接</span></span><br></pre></td></tr></table></figure><h4 id="推理场景"><a href="#推理场景" class="headerlink" title="推理场景"></a>推理场景</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader, Dataset</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, preprocess, image_files, transform=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        自定义数据集类的初始化函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">          preprocess：图像预处理函数。</span></span><br><span class="line"><span class="string">          image_files：包含图像文件路径的列表。</span></span><br><span class="line"><span class="string">          transform：可选的图像转换函数。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.image_files = image_files</span><br><span class="line">        self.transform = transform</span><br><span class="line">        self.preprocess = preprocess</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取数据集的长度。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回：</span></span><br><span class="line"><span class="string">          数据集的长度。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.image_files)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, i</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取数据集中索引为 i 的样本。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">          i：样本的索引。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回：</span></span><br><span class="line"><span class="string">          clip_images：视频片段帧的预处理结果列表。</span></span><br><span class="line"><span class="string">          images：视频片段帧的原始图像列表。</span></span><br><span class="line"><span class="string">          filename：图像文件的基本文件名。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        cap = cv2.VideoCapture(self.image_files[i])  <span class="comment"># 打开视频文件</span></span><br><span class="line">        fps = cap.get(cv2.CAP_PROP_FPS)  <span class="comment"># 获取视频的帧率</span></span><br><span class="line">        frame_count = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))  <span class="comment"># 获取视频的帧数</span></span><br><span class="line">        images = []  <span class="comment"># 存储原始图像列表</span></span><br><span class="line">        clip_images = []  <span class="comment"># 存储预处理后的图像列表</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, frame_count, <span class="built_in">int</span>(fps // <span class="number">1</span>)):  <span class="comment"># 以指定帧率采样视频帧</span></span><br><span class="line">            cap.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, j)  <span class="comment"># 设置当前帧位置</span></span><br><span class="line">            ret, img = cap.read()  <span class="comment"># 读取当前帧</span></span><br><span class="line"></span><br><span class="line">            height, width, _ = img.shape</span><br><span class="line">            start_row = <span class="built_in">int</span>(height * <span class="number">0.20</span>)</span><br><span class="line">            img = img[start_row:height, :]</span><br><span class="line">            img = cv2.fastNlMeansDenoisingColored(img, <span class="literal">None</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">21</span>)  <span class="comment"># 对图像进行去噪处理</span></span><br><span class="line"></span><br><span class="line">            clip_images.append(self.preprocess(Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))).unsqueeze(<span class="number">0</span>))</span><br><span class="line">            img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))</span><br><span class="line"></span><br><span class="line">            image = np.array(img.convert(<span class="string">&#x27;RGB&#x27;</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.transform <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                image = self.transform(image=image)[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">            images.append(image)</span><br><span class="line"></span><br><span class="line">        cap.release()  <span class="comment"># 释放视频资源</span></span><br><span class="line">        <span class="keyword">return</span> clip_images, images, os.path.basename(self.image_files[i])  <span class="comment"># 返回视频片段帧的预处理结果列表、原始图像列表和文件名</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> clip</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化存放测试结果的字典</span></span><br><span class="line">submit_json_scerario = &#123;</span><br><span class="line">    <span class="string">&quot;author&quot;</span> : <span class="string">&quot;abc&quot;</span> ,</span><br><span class="line">    <span class="string">&quot;time&quot;</span> : <span class="string">&quot;231011&quot;</span>,</span><br><span class="line">    <span class="string">&quot;model&quot;</span> : <span class="string">&quot;model_name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test_results&quot;</span> : []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有视频文件的路径</span></span><br><span class="line">paths = glob.glob(<span class="string">&#x27;/kaggle/input/clip-test/初赛测试视频/*&#x27;</span>)</span><br><span class="line">paths.sort()</span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果处于调试模式，只选择一个视频进行处理</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    paths = [<span class="string">&#x27;/kaggle/input/clip-test/初赛测试视频/03.avi&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建自定义数据集</span></span><br><span class="line">datasets = CustomDataset(preprocess, paths)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据加载器</span></span><br><span class="line">dataloaders = DataLoader(datasets, batch_size=<span class="number">1</span>, num_workers=<span class="number">2</span>, pin_memory=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历数据加载器中的每个视频</span></span><br><span class="line"><span class="keyword">for</span> clip_images, datas, clip_id <span class="keyword">in</span> dataloaders:</span><br><span class="line">    <span class="comment"># 初始化单个视频的测试结果字典</span></span><br><span class="line">    single_frame_result = &#123;</span><br><span class="line">        <span class="string">&quot;clip_id&quot;</span>: clip_id,</span><br><span class="line">        <span class="string">&quot;scerario&quot;</span> : <span class="string">&quot;city street&quot;</span>,</span><br><span class="line">        <span class="string">&quot;weather&quot;</span>: <span class="string">&quot;clear&quot;</span>,</span><br><span class="line">        <span class="string">&quot;period&quot;</span>: <span class="string">&quot;night&quot;</span>,</span><br><span class="line">        <span class="string">&quot;road_structure&quot;</span>: <span class="string">&quot;normal&quot;</span>,</span><br><span class="line">        <span class="string">&quot;general_obstacle&quot;</span>: <span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;abnormal_condition&quot;</span>: <span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ego_car_behavior&quot;</span>: <span class="string">&quot;go straight&quot;</span>,</span><br><span class="line">        <span class="string">&quot;closest_participants_type&quot;</span>: <span class="string">&quot;passenger car&quot;</span>,</span><br><span class="line">        <span class="string">&quot;closest_participants_behavior&quot;</span>: <span class="string">&quot;braking&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(clip_id)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化用于存放场景类别统计的列表</span></span><br><span class="line">    clip_ans = [<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(scerario_clip))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历视频的每一帧</span></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(clip_images):</span><br><span class="line">        texts = np.array(scerario_clip)</span><br><span class="line">        text = clip.tokenize(texts).to(device)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="comment"># 使用模型进行推理</span></span><br><span class="line">            logits_per_image, logits_per_text = model(data.squeeze(<span class="number">0</span>).to(device), text)</span><br><span class="line">            probs = logits_per_image.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 统计场景类别的数量</span></span><br><span class="line">            clip_ans[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;clip:&quot;</span>, clip_ans, scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据统计结果确定场景类别</span></span><br><span class="line">    <span class="keyword">if</span> scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))] <span class="keyword">in</span> [<span class="string">&#x27;lush green valley&#x27;</span>, <span class="string">&#x27;car tunnel in the mountains&#x27;</span>, <span class="string">&#x27;snowy mountain valley&#x27;</span>, <span class="string">&#x27;quiet suburban street&#x27;</span>, <span class="string">&#x27;open highway in the countryside&#x27;</span>]:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;suburban&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))] <span class="keyword">in</span> [<span class="string">&#x27;The city highway&#x27;</span>, <span class="string">&#x27;open street in the city&#x27;</span>, <span class="string">&#x27;city street at daylight&#x27;</span>, <span class="string">&#x27;Street on a rainy night&#x27;</span>, <span class="string">&#x27;Street on a snowy night&#x27;</span>, <span class="string">&#x27;busy city street&#x27;</span>, <span class="string">&#x27;city streets at night&#x27;</span>]:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;city street&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))] <span class="keyword">in</span> [<span class="string">&#x27;busy highway with heavy traffic&#x27;</span>]:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;expressway&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))] <span class="keyword">in</span> [<span class="string">&#x27;subway tunnel&#x27;</span>]:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;tunnel&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))] <span class="keyword">in</span> [<span class="string">&#x27;Indoor parking lot&#x27;</span>, <span class="string">&#x27;urban gas station at night&#x27;</span>, <span class="string">&#x27;crowded shopping mall parking lot&#x27;</span>]:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;parking-lot&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))] <span class="keyword">in</span> [<span class="string">&#x27;rural gas station in daylight&#x27;</span>]:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;gas or charging stations&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将单个视频的测试结果添加到总体测试结果中</span></span><br><span class="line">    submit_json_scerario[<span class="string">&quot;test_results&quot;</span>].append(single_frame_result)</span><br></pre></td></tr></table></figure><h4 id="推理其余杂项"><a href="#推理其余杂项" class="headerlink" title="推理其余杂项"></a>推理其余杂项</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">data_processing</span>(<span class="params">results</span>):</span><br><span class="line">    <span class="comment"># 初始化结果字典</span></span><br><span class="line">    ans = &#123;</span><br><span class="line">        <span class="string">&#x27;ans&#x27;</span>: []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> i, result <span class="keyword">in</span> <span class="built_in">enumerate</span>(results):</span><br><span class="line">        <span class="comment"># 初始化当前结果的字典</span></span><br><span class="line">        this = &#123;</span><br><span class="line">            <span class="string">&#x27;frame_count&#x27;</span>: i,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: [names[result[<span class="number">0</span>].boxes.cls.cpu().numpy()[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result[<span class="number">0</span>].boxes.cls.cpu().numpy()))],  <span class="comment"># 标签名称</span></span><br><span class="line">            <span class="string">&#x27;conf&#x27;</span>: result[<span class="number">0</span>].boxes.conf.cpu().numpy(),  <span class="comment"># 标签置信度</span></span><br><span class="line">            <span class="string">&#x27;box&#x27;</span>: result[<span class="number">0</span>].boxes.xyxy.cpu().numpy().astype(<span class="built_in">int</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将当前结果添加到总体结果字典中</span></span><br><span class="line">        ans[<span class="string">&#x27;ans&#x27;</span>].append(this)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_crossroads</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果某个标签为 &#x27;traffic light&#x27; 的数量大于等于 2，返回 True</span></span><br><span class="line">        <span class="keyword">if</span> re[<span class="string">&#x27;name&#x27;</span>].count(<span class="string">&#x27;traffic light&#x27;</span>) &gt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果没有满足条件的结果，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_manhole</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果某个标签为 &#x27;manhole cover&#x27;，并且置信度大于 0.7，返回 True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;manhole cover&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][re[<span class="string">&#x27;name&#x27;</span>].index(<span class="string">&#x27;manhole cover&#x27;</span>)] &gt; <span class="number">0.7</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果没有满足条件的结果，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_box_area</span>(<span class="params">box</span>):</span><br><span class="line">    <span class="comment"># 计算边界框的面积</span></span><br><span class="line">    width = <span class="built_in">abs</span>(box[<span class="number">2</span>] - box[<span class="number">0</span>])</span><br><span class="line">    height = <span class="built_in">abs</span>(box[<span class="number">3</span>] - box[<span class="number">1</span>])</span><br><span class="line">    area = width * height</span><br><span class="line">    <span class="keyword">return</span> area</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_traffic_cone</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 初始化置信度之和</span></span><br><span class="line">    sum_conf = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果结果中包含 &#x27;traffic cone&#x27; 标签</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;traffic cone&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 找到 &#x27;traffic cone&#x27; 在标签列表中的索引</span></span><br><span class="line">            idx = [index <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(re[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">if</span> value == <span class="string">&#x27;traffic cone&#x27;</span>]</span><br><span class="line">            <span class="comment"># 遍历所有 &#x27;traffic cone&#x27; 的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">                <span class="comment"># 打印当前 &#x27;traffic cone&#x27; 的面积和置信度</span></span><br><span class="line">                <span class="built_in">print</span>(calculate_box_area(re[<span class="string">&#x27;box&#x27;</span>][i]), re[<span class="string">&#x27;conf&#x27;</span>][i])</span><br><span class="line">                <span class="comment"># 如果置信度大于 0.5 且面积小于 20000，返回 True</span></span><br><span class="line">                <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][i] &gt; <span class="number">0.5</span> <span class="keyword">and</span> calculate_box_area(re[<span class="string">&#x27;box&#x27;</span>][i]) &lt; <span class="number">20000</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="comment"># 如果面积小于 20000，累加置信度</span></span><br><span class="line">                <span class="keyword">elif</span> calculate_box_area(re[<span class="string">&#x27;box&#x27;</span>][i]) &lt; <span class="number">20000</span>:</span><br><span class="line">                    sum_conf += re[<span class="string">&#x27;conf&#x27;</span>][i]</span><br><span class="line">    <span class="comment"># 如果累加的置信度大于等于 0.5，返回 True；否则返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span> <span class="keyword">if</span> sum_conf &lt; <span class="number">0.5</span> <span class="keyword">else</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_police</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果结果中包含 &#x27;police car&#x27; 标签</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;police car&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 找到 &#x27;police car&#x27; 在标签列表中的索引</span></span><br><span class="line">            idx = [index <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(re[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">if</span> value == <span class="string">&#x27;police car&#x27;</span>]</span><br><span class="line">            <span class="comment"># 遍历所有 &#x27;police car&#x27; 的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">                <span class="comment"># 如果置信度大于 0.5，返回 True</span></span><br><span class="line">                <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][i] &gt; <span class="number">0.5</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果未检测到 &#x27;police car&#x27; 或所有检测到的 &#x27;police car&#x27; 置信度均不大于 0.5，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_truck</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果结果中包含 &#x27;truck&#x27; 标签</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;truck&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 找到 &#x27;truck&#x27; 在标签列表中的索引</span></span><br><span class="line">            idx = [index <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(re[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">if</span> value == <span class="string">&#x27;truck&#x27;</span>]</span><br><span class="line">            <span class="comment"># 遍历所有 &#x27;truck&#x27; 的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">                <span class="comment"># 如果置信度大于 0.5，返回 True</span></span><br><span class="line">                <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][i] &gt; <span class="number">0.5</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果未检测到 &#x27;truck&#x27; 或所有检测到的 &#x27;truck&#x27; 置信度均不大于 0.5，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_bus</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果结果中包含 &#x27;bus&#x27; 标签</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;bus&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 找到 &#x27;bus&#x27; 在标签列表中的索引</span></span><br><span class="line">            idx = [index <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(re[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">if</span> value == <span class="string">&#x27;bus&#x27;</span>]</span><br><span class="line">            <span class="comment"># 遍历所有 &#x27;bus&#x27; 的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">                <span class="comment"># 如果置信度大于 0.6，返回 True</span></span><br><span class="line">                <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][i] &gt; <span class="number">0.6</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果未检测到 &#x27;bus&#x27; 或所有检测到的 &#x27;bus&#x27; 置信度均不大于 0.6，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_other</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果结果中包含 &#x27;others&#x27; 标签</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;others&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 找到 &#x27;others&#x27; 在标签列表中的索引</span></span><br><span class="line">            idx = [index <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(re[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">if</span> value == <span class="string">&#x27;others&#x27;</span>]</span><br><span class="line">            <span class="comment"># 遍历所有 &#x27;others&#x27; 的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">                <span class="comment"># 如果置信度大于 0.3，返回 True</span></span><br><span class="line">                <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][i] &gt; <span class="number">0.3</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果未检测到 &#x27;others&#x27; 或所有检测到的 &#x27;others&#x27; 置信度均不大于 0.3，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_people</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果结果中包含 &#x27;person&#x27; 标签</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;person&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 找到 &#x27;person&#x27; 在标签列表中的索引</span></span><br><span class="line">            idx = [index <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(re[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">if</span> value == <span class="string">&#x27;person&#x27;</span>]</span><br><span class="line">            <span class="comment"># 遍历所有 &#x27;person&#x27; 的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">                <span class="comment"># 如果置信度大于 0.6，返回 True</span></span><br><span class="line">                <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][i] &gt; <span class="number">0.6</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果未检测到 &#x27;person&#x27; 或所有检测到的 &#x27;person&#x27; 置信度均不大于 0.6，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://datawhaler.feishu.cn/docx/L2bodJhfxoU11Yxrm04cY509nOe">2023全球智能汽车AI挑战赛：智能驾驶汽车虚拟仿真视频数据理解 - 飞书云文档 (feishu.cn)</a></p><p><a href="https://blog.csdn.net/qq_52309640/article/details/120940767">Python 计算机视觉（八）—— OpenCV 进行图像增强_opencv图像增强-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">2023全球智能汽车AI挑战赛——赛道二：智能驾驶汽车虚拟仿真视频数据理解赛道</summary>
    
    
    
    <category term="竞赛" scheme="https://huaiyuechusan.gitee.io/categories/%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="深度学习" scheme="https://huaiyuechusan.gitee.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="竞赛" scheme="https://huaiyuechusan.gitee.io/tags/%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="CV" scheme="https://huaiyuechusan.gitee.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程和Python新核心特性</title>
    <link href="https://huaiyuechusan.gitee.io/archives/fab44cdf.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/fab44cdf.html</id>
    <published>2024-01-14T12:24:00.000Z</published>
    <updated>2024-10-17T11:57:53.429Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="函数式编程和Python新核心特性"><a href="#函数式编程和Python新核心特性" class="headerlink" title="函数式编程和Python新核心特性"></a>函数式编程和Python新核心特性</h1><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828629.png" alt="image-20240107144536048"></p><p>函数式编程(functional programming)其实是个很古老的概念，诞生距今快60年啦!</p><p>最古老的函数式编程语言Lisp</p><p>新出现的函数式编程语言：比如Erlang、.Scala、clojure等</p><p>热门语言：Python、java、JavaScript、C++等都增加了函数式编程的一些特性。</p><blockquote><p>:warning:函数式编程在某些时刻，非常方便！但不需大家二选一。</p><p>:warning:我们通过一些常见的函数式编程的内容，先学习，后体会“函数式编程”。</p></blockquote><h2 id="函数式编程核心-高阶函数、闭包等"><a href="#函数式编程核心-高阶函数、闭包等" class="headerlink" title="函数式编程核心(高阶函数、闭包等)"></a>函数式编程核心(高阶函数、闭包等)</h2><h3 id="高阶函数和内存分析"><a href="#高阶函数和内存分析" class="headerlink" title="高阶函数和内存分析"></a>高阶函数和内存分析</h3><h4 id="函数是一等公民"><a href="#函数是一等公民" class="headerlink" title="函数是一等公民"></a>函数是一等公民</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828631.png" alt="image-20240107144947021"></p><p>函数式编程最鲜明的特点就是：函数是一等公民(first class)，指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数或者作为别的函数的返回值。</p><p><strong>一个函数可以接收另一个函数作为参数，这种函数就称之为高阶函数。</strong></p><p>Python内建的高阶函数有<code>map</code>、<code>reduce</code>、<code>filter</code>、<code>sorted</code></p><h4 id="高阶函数-内存状态分析"><a href="#高阶函数-内存状态分析" class="headerlink" title="高阶函数_内存状态分析"></a>高阶函数_内存状态分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test function run!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test3</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;test3,<span class="subst">&#123;a&#125;</span>,<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>(<span class="params">func, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test2 function run!!!&quot;</span>)</span><br><span class="line">    func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = test1</span><br><span class="line">test2(a)</span><br><span class="line">test2(test3, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">test2 function run!!!</span></span><br><span class="line"><span class="string">test function run!!!</span></span><br><span class="line"><span class="string">test2 function run!!!</span></span><br><span class="line"><span class="string">test3,10,20</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828632.png" alt="image-20240107150419769"></p><h3 id="lambda表达式和匿名函数"><a href="#lambda表达式和匿名函数" class="headerlink" title="lambda表达式和匿名函数"></a>lambda表达式和匿名函数</h3><p>详情见Python入门篇的函数和内存分析章节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> a, b, c: a + b + c</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(f))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;function &lt;lambda&gt; at 0x000001AF907F7E50&gt;</span></span><br><span class="line"><span class="string">1853555179088</span></span><br><span class="line"><span class="string">&lt;class &#x27;function&#x27;&gt;</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">g = [<span class="keyword">lambda</span> a: a * <span class="number">2</span>, <span class="keyword">lambda</span> b: b * <span class="number">4</span>, <span class="keyword">lambda</span> c: c * <span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(g[<span class="number">0</span>](<span class="number">1</span>), g[<span class="number">1</span>](<span class="number">2</span>), g[<span class="number">2</span>](<span class="number">3</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2 8 24</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><p>Python的<code>functools</code>模块提供了很多有用的功能，其中一个就是偏函数(Partial function)。要注意，这里的偏函数和数学意义上的偏函数不一样。</p><p>偏函数：作用就是把一个函数某些<strong>参数固定住</strong>（也就是设置默认值），返回一个新的函数，调用这个新的函数会更简单。</p><p>举例如下：</p><p><code>int()</code>函数可以把字符串转换为整数，当仅传入字符串时，<code>int()</code>函数默认按十进制转换，代码如下：</p><p><code>print(int(&#39;12345))</code></p><p>但<code>int()</code>函数还提供额外的base参数，默认值为10。如果传入base参数，就可以做N进制的转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#base参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转换为八进制&#x27;</span>，<span class="built_in">int</span>(<span class="string">&#x27;12345&#x27;</span>,base=<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转换为十六进制&#x27;</span>，<span class="built_in">int</span>(<span class="string">&#x27;12345&#x27;</span>,<span class="number">16</span>))</span><br></pre></td></tr></table></figure><p>假设要转换大量的二进制字符串，每次都传入<code>int(x, base=2)</code>非常麻烦，于是，我们想到，可以定义一个<code>int2()</code>的函数，默认把<code>base=2</code>传进去，现在定义一个<code>int2</code>函数，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">int2</span>(<span class="params">x,base=<span class="number">2</span></span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(x,base)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(int2(<span class="string">&#x27;1000000&#x27;</span>))  <span class="comment">#64</span></span><br><span class="line"><span class="built_in">print</span>(int2(<span class="string">&#x27;1010101&#x27;</span>))  <span class="comment">#85</span></span><br></pre></td></tr></table></figure><p><code>functools.partial</code>就是帮助我们创建一个偏函数的，不需要我们自己定义<code>int2()</code>,可以直接使用下面的代码创建一个新的函数<code>int2</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">int2 = functools.partial(<span class="built_in">int</span>, base=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(int2(<span class="string">&#x27;1000000&#x27;</span>))  <span class="comment"># 64</span></span><br><span class="line"><span class="built_in">print</span>(int2(<span class="string">&#x27;1010101&#x27;</span>))  <span class="comment"># 85</span></span><br><span class="line"><span class="built_in">print</span>(int2(<span class="string">&#x27;1000000&#x27;</span>, base=<span class="number">10</span>))  <span class="comment"># 也可以修改base的值</span></span><br></pre></td></tr></table></figure><h3 id="闭包closure"><a href="#闭包closure" class="headerlink" title="闭包closure"></a>闭包closure</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828633.png" alt="image-20240107152421229"></p><p>根据字面意思，可以形象地把闭包理解为一个封闭的包裹，这个包裹就是一个函数。当然还有函数内部对应的逻辑，包裹里面的东西就是自由变量（外部函数的局部变量），自由变量可以随着包裹到处游荡。</p><blockquote><p>局部变量：如果名称绑定再一个代码块中，则为该代码块的局部变量，除非声明为nonloca或global</p><p>全局变量：如果模块绑定在模块层级，则为全局变量</p><p>自由变章：如果变量在一个代码块中被使用但不是在其中定义，则为自由变量（不会被回收）</p></blockquote><h4 id="闭包概念和第一个闭包程序"><a href="#闭包概念和第一个闭包程序" class="headerlink" title="闭包概念和第一个闭包程序"></a>闭包概念和第一个闭包程序</h4><p>我们知道，函数作用域是独立的、封闭的，外部的执行环境是访问不了的，但是闭包具有这个能力和权限。</p><p>闭包是一个函数，只不过这个函数有超能力，可以访问到另一个函数的作用域。</p><blockquote><p>「函数」和「自由变量」的总和，就是一个闭包。</p></blockquote><p>闭包的特点：</p><p>第一，闭包是一个函数，而且存在于另一个函数当中</p><p>第二，闭包可以访问到父级函数的变量，且该变量不会销毁</p><p><strong>第三，外层函数把内层的这个函数本身当成返回值进行返回</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">闭包的特点：</span></span><br><span class="line"><span class="string">1、存在内外层函数嵌套情况</span></span><br><span class="line"><span class="string">2、内层函数引用了外层函数的变量或者参数（自由变量）</span></span><br><span class="line"><span class="string">3、外层函数把内层的这个函数本身当成返回值进行返回</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;outer&quot;</span>)</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;inner&quot;</span>)</span><br><span class="line">        <span class="comment"># 如果要修改a的值，声明为nonlocal</span></span><br><span class="line">        <span class="keyword">nonlocal</span> a</span><br><span class="line">        <span class="comment"># 闭包是由于函数内部使用了函数外部的变量。</span></span><br><span class="line">        <span class="comment"># 这个函数对象不销毁，则外部函数的局部变量也不会被销毁。</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;a:<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inn = outer()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------&quot;</span>)</span><br><span class="line">inn()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">outer</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">inner</span></span><br><span class="line"><span class="string">a:1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="闭包内存分析"><a href="#闭包内存分析" class="headerlink" title="闭包内存分析"></a>闭包内存分析</h4><ol><li><p>执行完<code>inn=outer()</code>的内存图。<code>outer()</code>栈帧执行完后实际已经消失了，画上去，是为了展现关系。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828634.png" alt="image-20240107164118698"></p></li><li><p>执行完<code>inn=outer()</code>的内存图。由于<code>inner()</code>内部函数的调用，<code>outer()</code>栈帧消失后，局部变量a指向的对象<code>1</code>仍然存在。从而形成了”闭包”。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828635.png" alt="image-20240107164533098"></p></li><li><p>第一次调用<code>inn()</code>,从而调用内部函数，仍然可以拿到以前局部变量指向的对象<code>1</code></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828636.png" alt="image-20240107164729573"></p></li><li><p>第二次调用<code>inn(),</code>仍然可以继续拿到以前局部变量指向的对象<code>1</code>，并将值变为<code>2</code></p></li></ol><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828637.png" alt="image-20240107164746383"></p><blockquote><p>闭包可以当成两个部分组成的整体：</p><ol><li>函数</li><li>自由变量</li></ol></blockquote><h4 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h4><p>作用1：隐藏变量，避免全局污染</p><p>作用2：可以读取函数内部的变量</p><p><strong>同时闭包使用不当，优点就变成了缺点：</strong></p><p>缺点1：导致变量不会被垃圾回收机制回收，造成内存消耗</p><p>缺点2：不恰当的使用闭包可能会造成内存泄漏的问题</p><h4 id="闭包和自由变量"><a href="#闭包和自由变量" class="headerlink" title="闭包和自由变量"></a>闭包和自由变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">需求：实现变量a自增</span></span><br><span class="line"><span class="string">通过自由变量，可以实现递增，也不会污染其他程序</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> a</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a:&quot;</span>, a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> increment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_ten</span>():</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ten!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;全局变量a不等于10&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">increment = add()</span><br><span class="line">increment()</span><br><span class="line">increment()</span><br><span class="line">print_ten()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">a: 11</span></span><br><span class="line"><span class="string">a: 12</span></span><br><span class="line"><span class="string">ten!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="案例：用闭包实现不修改源码添加功能"><a href="#案例：用闭包实现不修改源码添加功能" class="headerlink" title="案例：用闭包实现不修改源码添加功能"></a>案例：用闭包实现不修改源码添加功能</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">本次内容是装饰器的基础</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outfunc</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录,start&quot;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录,end&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能2&quot;</span>, a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(fun1))</span><br><span class="line">fun1 = outfunc(fun1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(fun1))</span><br><span class="line">fun1()</span><br><span class="line">fun2 = outfunc(fun2)</span><br><span class="line">fun2(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1474019303136</span></span><br><span class="line"><span class="string">1474084402656</span></span><br><span class="line"><span class="string">日志记录,start</span></span><br><span class="line"><span class="string">使用功能1</span></span><br><span class="line"><span class="string">日志记录,end</span></span><br><span class="line"><span class="string">日志记录,start</span></span><br><span class="line"><span class="string">使用功能2 10 20 30</span></span><br><span class="line"><span class="string">日志记录,end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="map函数（内置函数）"><a href="#map函数（内置函数）" class="headerlink" title="map函数（内置函数）"></a>map函数（内置函数）</h3><p><code>map()</code>函数接收两种参数，==一个是函数，另一个是序列(可以传入多个序列)==，map将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回。</p><p>比如我们有一个函数<code>f(x)=x2</code>,要把这个函数作用在一个<code>list[1,2,3,4,5,6,7,8,9]</code>上，就可以用<code>map()</code>实现如下：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828638.png" alt="image-20240107172241103"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># map高阶函数使用案例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = <span class="built_in">map</span>(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1, 4, 9, 16]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># map高阶函数使用案例（用匿名函数）</span></span><br><span class="line">L = <span class="built_in">map</span>(<span class="keyword">lambda</span> n: n * n, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1, 4, 9, 16]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># map函数传入两个列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = <span class="built_in">map</span>(f2, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[7, 9, 11, 13]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># map函数传入两个列表（用匿名函数）</span></span><br><span class="line">L = <span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[7, 9, 11, 13]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="reduce函数（位于functools模块）"><a href="#reduce函数（位于functools模块）" class="headerlink" title="reduce函数（位于functools模块）"></a>reduce函数（位于<code>functools</code>模块）</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828639.png" alt="image-20240107174156892"></p><p>reduce位于<code>functools</code>模块</p><p>reduce把一个函数作用在一个序列[x1,x2,x3…]上，这个函数<strong>必须接收两个参数</strong>，<strong>reduce把结果继续和序列的下一个元素做累积计算</strong>，其效果就是：<br>                        <code>reduce(f,[x1,x2,x3,x4]) = f(f(f(x1,x2),x3),x4)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># reduce实现对一个序列求和</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = reduce(add, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h3 id="filter函数（内置函数）"><a href="#filter函数（内置函数）" class="headerlink" title="filter函数（内置函数）"></a>filter函数（内置函数）</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828640.png" alt="image-20240107174734746"></p><p>内置函数<code>filter()</code>用于过滤序列。<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是True还是False,决定保留还是丢弃该元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># filter过滤列表，删除偶数，只保留奇数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_odd</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = <span class="built_in">filter</span>(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter过滤列表，删除偶数，只保留奇数（用匿名函数实现）</span></span><br><span class="line">L = <span class="built_in">filter</span>(<span class="keyword">lambda</span> n: n % <span class="number">2</span> == <span class="number">1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># filter序列中的空字符串删除</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">not_empty</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="comment"># strip()取出字符串首位指定信息</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = <span class="built_in">filter</span>(not_empty, [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">None</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;C&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"><span class="comment"># filter序列中的空字符串删除（用匿名函数实现）</span></span><br><span class="line">L = <span class="built_in">filter</span>(<span class="keyword">lambda</span> s: (s <span class="keyword">and</span> s.strip()), [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">None</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;C&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1, 3, 5]</span></span><br><span class="line"><span class="string">[1, 3, 5]</span></span><br><span class="line"><span class="string">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;C&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;C&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="sorted函数（内置函数）"><a href="#sorted函数（内置函数）" class="headerlink" title="sorted函数（内置函数）"></a>sorted函数（内置函数）</h3><p>排序算法，排序也是在程序中经常用到的算法。无论使用冒泡排序还是快速排序，排序的核心是比较两个元素的大小。</p><ol><li>如果是数字，我们可以直接比较</li><li>如果是自定义对象呢？直接比较数学上的大小是没有意义的，因此，比较的过程必须通过函数抽象出来。通常规定，对于两个元素x和y，如果认为<code>x&lt;y</code>,则返回<code>-1</code>，如果认为<code>x==y</code>，则返回<code>0</code>，如果认为<code>x&gt;y</code>，则返回<code>1</code>，这样，排序算法就不用关心具体的比较过程，而是根据比较结果直接排序。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># sorted对list进行排序</span></span><br><span class="line">sorted1 = <span class="built_in">sorted</span>([<span class="number">1</span>, <span class="number">23</span>, -<span class="number">2</span>, -<span class="number">20</span>, <span class="number">99</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;升序排列：&quot;</span>, <span class="built_in">list</span>(sorted1))</span><br></pre></td></tr></table></figure><p>sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># sorted对list进行排序</span></span><br><span class="line">sorted1 = <span class="built_in">sorted</span>([<span class="number">1</span>, <span class="number">23</span>, -<span class="number">2</span>, -<span class="number">20</span>, <span class="number">99</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;升序排序：&quot;</span>, <span class="built_in">list</span>(sorted1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sorted函数接收一个key自定义排序</span></span><br><span class="line"><span class="comment"># abs按绝对值排序</span></span><br><span class="line">sorted2 = <span class="built_in">sorted</span>([<span class="number">1</span>, <span class="number">23</span>, -<span class="number">2</span>, -<span class="number">20</span>, <span class="number">99</span>], key=<span class="built_in">abs</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;自定义排序：&quot;</span>, <span class="built_in">list</span>(sorted2))</span><br><span class="line"></span><br><span class="line">sorted3 = <span class="built_in">sorted</span>([<span class="number">1</span>, <span class="number">23</span>, -<span class="number">2</span>, -<span class="number">20</span>, <span class="number">99</span>], key=<span class="built_in">abs</span>, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;自定义逆序排序：&quot;</span>, <span class="built_in">list</span>(sorted3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串排序按照ASCII</span></span><br><span class="line">sorted4 = <span class="built_in">sorted</span>([<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ABC&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;d&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串排序：&quot;</span>, <span class="built_in">list</span>(sorted4))</span><br><span class="line"><span class="comment"># 忽略字符串大小写排序</span></span><br><span class="line">sorted5 = <span class="built_in">sorted</span>([<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ABC&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;d&quot;</span>], key=<span class="built_in">str</span>.lower)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;忽略字符串大小写排序：&quot;</span>, <span class="built_in">list</span>(sorted5))</span><br><span class="line"><span class="comment"># 忽略字符串大小写反向排序</span></span><br><span class="line">sorted6 = <span class="built_in">sorted</span>([<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ABC&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;d&quot;</span>], key=<span class="built_in">str</span>.lower, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;忽略字符串大小写反向排序：&quot;</span>, <span class="built_in">list</span>(sorted6))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">升序排序： [-20, -2, 1, 23, 99]</span></span><br><span class="line"><span class="string">自定义排序： [1, -2, -20, 23, 99]</span></span><br><span class="line"><span class="string">自定义逆序排序： [99, 23, -20, -2, 1]</span></span><br><span class="line"><span class="string">字符串排序： [&#x27;ABC&#x27;, &#x27;D&#x27;, &#x27;abc&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"><span class="string">忽略字符串大小写排序： [&#x27;abc&#x27;, &#x27;ABC&#x27;, &#x27;D&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"><span class="string">忽略字符串大小写反向排序： [&#x27;D&#x27;, &#x27;d&#x27;, &#x27;abc&#x27;, &#x27;ABC&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>sorted对自定义对象排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, age, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_sorted</span>(<span class="params">stu1, stu2</span>):</span><br><span class="line">    <span class="keyword">if</span> stu1.age &lt; stu2.age:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stu1.age &gt; stu2.age:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="number">18</span>, <span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">stu2 = Student(<span class="number">28</span>, <span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">stu3 = Student(<span class="number">21</span>, <span class="string">&quot;ccc&quot;</span>)</span><br><span class="line">student_list = <span class="built_in">sorted</span>([stu1, stu2, stu3], key=<span class="keyword">lambda</span> x: x.age)</span><br><span class="line"><span class="keyword">for</span> stu <span class="keyword">in</span> student_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;stu.name&#125;</span>-----<span class="subst">&#123;stu.age&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">student_list = <span class="built_in">sorted</span>([stu1, stu2, stu3], key=cmp_to_key(custom_sorted))</span><br><span class="line"><span class="keyword">for</span> stu <span class="keyword">in</span> student_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;cmp_to_key排序：<span class="subst">&#123;stu.name&#125;</span>-----<span class="subst">&#123;stu.age&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">aaa-----18</span></span><br><span class="line"><span class="string">ccc-----21</span></span><br><span class="line"><span class="string">bbb-----28</span></span><br><span class="line"><span class="string">cmp_to_key排序：aaa-----18</span></span><br><span class="line"><span class="string">cmp_to_key排序：ccc-----21</span></span><br><span class="line"><span class="string">cmp_to_key排序：bbb-----28</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="装饰器深入剖析"><a href="#装饰器深入剖析" class="headerlink" title="装饰器深入剖析"></a>装饰器深入剖析</h2><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401191857328.png" alt="image-20240107183115735"></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>装饰器来自 <code>Decorator</code> 的直译。什么叫装饰，就是装点、提供一些额外的功能。在 Python 中的装饰器则是提供了一些额外的功能。</p><p>装饰器本质上是一个Python函数（其实就是<strong>闭包</strong>），它可以让其他函数在==不需要做任何代码变动的前提下增加额外功能==，装饰器的返回值也是一个函数对象。</p><p>装饰器用于有以下场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。</p><h3 id="装饰器解决日志问题"><a href="#装饰器解决日志问题" class="headerlink" title="装饰器解决日志问题"></a>装饰器解决日志问题</h3><p>闭包解决日志问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mylog</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录,start&quot;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录,end&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能2&quot;</span>, a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1 = mylog(fun1)</span><br><span class="line">fun2 = mylog(fun2)</span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line">fun2(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">日志记录,start</span></span><br><span class="line"><span class="string">使用功能1</span></span><br><span class="line"><span class="string">日志记录,end</span></span><br><span class="line"><span class="string">日志记录,start</span></span><br><span class="line"><span class="string">使用功能2 10 20 30</span></span><br><span class="line"><span class="string">日志记录,end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>装饰器解决日志问题（增加参数处理，可以装饰任意多个参数的函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mylog</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录,start&quot;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录,end&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mylog  </span><span class="comment"># 本质 fun1 = mylog(fun1)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mylog  </span><span class="comment"># 本质 fun2 = mylog(fun2)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能2&quot;</span>, a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line">fun2(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">日志记录,start</span></span><br><span class="line"><span class="string">使用功能1</span></span><br><span class="line"><span class="string">日志记录,end</span></span><br><span class="line"><span class="string">日志记录,start</span></span><br><span class="line"><span class="string">使用功能2 10 20 30</span></span><br><span class="line"><span class="string">日志记录,end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="多个装饰器"><a href="#多个装饰器" class="headerlink" title="多个装饰器"></a>多个装饰器</h3><p>有时候，我们需要多个装饰器修饰一个函数。比如：需要增加日志功能、增加执行效率测试功能。</p><p>装饰器函数的执行顺序是分为（被装饰函数）定义阶段和（被装饰函数）执行阶段的，装饰器函数在被装饰函数定义好后立即执行。</p><blockquote><p>在函数定义阶段：执行顺序是从最靠近函数的装饰器开始，自内而外的执行</p><p>在函数执行阶段：执行顺序由外而内，一层层执行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mylog</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;mylog start&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录开始&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;mylog end&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cost_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cost time start&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始计时&quot;</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;耗费时间：<span class="subst">&#123;end - start&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cost time start&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于 mylog(cost_time(fun2))</span></span><br><span class="line"><span class="meta">@mylog</span></span><br><span class="line"><span class="meta">@cost_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fun2,start&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fun2,end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun2()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">cost time start</span></span><br><span class="line"><span class="string">cost time start</span></span><br><span class="line"><span class="string">mylog start</span></span><br><span class="line"><span class="string">mylog end</span></span><br><span class="line"><span class="string">日志记录开始</span></span><br><span class="line"><span class="string">开始计时</span></span><br><span class="line"><span class="string">fun2,start</span></span><br><span class="line"><span class="string">fun2,end</span></span><br><span class="line"><span class="string">耗费时间：3.014333486557007</span></span><br><span class="line"><span class="string">日志记录结束</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mylog</span>(<span class="params"><span class="built_in">type</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">infunc</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;文件&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;文件中：日志记录&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;控制台：日志记录&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mylog(<span class="params"><span class="string">&quot;文件&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能2:&quot;</span>, a, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fun2(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">文件中：日志记录</span></span><br><span class="line"><span class="string">使用功能2: 100 200</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="wraps装饰器"><a href="#wraps装饰器" class="headerlink" title="wraps装饰器"></a>wraps装饰器</h3><p>一个函数不止有他的执行语句，还有着 <code>__name__</code> （函数名）， <code>__doc__</code>（说明文档）等属性，我们之前的例子会导致这些属性改变。</p><p><code>functool.wraps</code> 可以将原函数对象的指定属性赋值给包装函数对象，默认有module、name、doc，或者通过参数选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mylog</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;函数文档：&quot;</span>, func.__doc__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mylog    </span><span class="comment"># 等价于 fun2 = mylog(fun2)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;强大的功能2&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能2:&quot;</span>, a, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fun2(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数文档---&gt;&quot;</span>, fun2.__doc__)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">日志记录</span></span><br><span class="line"><span class="string">函数文档： 强大的功能2</span></span><br><span class="line"><span class="string">使用功能2: 100 200</span></span><br><span class="line"><span class="string">函数文档---&gt; 强大的功能2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器</h3><p>我们在面向对象学习时，学习过三种装饰器： <code>property</code> 、 <code>staticmethod</code> 、<code>classmethod</code> 。（详见Python入门的面向对象部分）</p><p><strong>property装饰器</strong></p><p><code>property</code> 装饰器用于类中的函数，使得我们可以像访问属性一样来获取一个函数的返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__salary = salary</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property                      </span><span class="comment"># 只能读 print(emp1.salary) 相当于属性的调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;薪资是：&quot;</span>, self.__salary)</span><br><span class="line">        <span class="keyword">return</span> self.__salary</span><br><span class="line"></span><br><span class="line"><span class="meta">    @salary.setter                 </span><span class="comment"># 修改使用这个函数 emp1.salary = 50000</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">salary</span>(<span class="params">self, salary</span>): </span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; salary &lt; <span class="number">100000</span>:</span><br><span class="line">            self.__salary = salary</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;薪资录入错误！只能在0-100000之间&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">emp1 = Employee(<span class="string">&quot;john&quot;</span>, <span class="number">20000</span>)</span><br><span class="line">emp1.salary = <span class="number">50000</span></span><br><span class="line"><span class="built_in">print</span>(emp1.salary)</span><br><span class="line"></span><br><span class="line">emp1.salary = <span class="number">100000000</span></span><br><span class="line"><span class="built_in">print</span>(emp1.salary)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">薪资是： 50000</span></span><br><span class="line"><span class="string">50000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">薪资录入错误！只能在0-100000之间</span></span><br><span class="line"><span class="string">薪资是： 50000</span></span><br><span class="line"><span class="string">50000</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>staticmethod装饰器</strong></p><p><code>staticmethod</code> 装饰器同样是用于类中的方法，这表示这个方法将会是一个静态方法，意味着该方法可以直接被调用无需实例化，但同样意味着它没有 <code>self</code> 参数，也无法访问实例化后的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school = <span class="string">&quot;HNU&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):  <span class="comment"># 静态方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(a, b, a + b))</span><br><span class="line">        <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student.add(<span class="number">30</span>, <span class="number">40</span>)</span><br></pre></td></tr></table></figure><p><strong>classmethod装饰器</strong></p><p><code>classmethod</code> 这个方法是一个类方法。该方法无需实例化，没有 <code>self</code> 参数。相对于 <code>staticmethod</code> 的区别在于它会接收一个指向类本身的 <code>cls</code> 参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school = <span class="string">&quot;HNU&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printSchool</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls.school)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student.printSchool()</span><br></pre></td></tr></table></figure><h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p>上面写的装饰器都是函数来完成的。我们用类也可以实现装饰器。</p><p>类能实现装饰器的功能， 是由于当我们调用一个对象时，实际上调用的是它的 <code>__call__</code> 方法。</p><p>调用对象， <code>__call__</code> 方法的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是Demo&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">demo Demo()</span><br><span class="line">demo()<span class="comment"># 直接调用对象，实质是调用了他的__ca11__()</span></span><br></pre></td></tr></table></figure><p>类装饰器的使用案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 类装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLogDecorator</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyLogDecorator  </span><span class="comment"># fun2 = MyLogDecorator(fun2)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fun2()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">日志记录</span></span><br><span class="line"><span class="string">使用功能2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="缓存装饰器和计时装饰器综合练习"><a href="#缓存装饰器和计时装饰器综合练习" class="headerlink" title="缓存装饰器和计时装饰器综合练习"></a>缓存装饰器和计时装饰器综合练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CacheDecorator</span>():</span><br><span class="line">    __cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 如果缓存中有对应的方法名，则直接返回对应的返回值</span></span><br><span class="line">        <span class="keyword">if</span> self.func.__name__ <span class="keyword">in</span> CacheDecorator.__cache:</span><br><span class="line">            <span class="keyword">return</span> CacheDecorator.__cache[self.func.__name__]</span><br><span class="line">        <span class="comment"># 如果缓存中没有对应的方法名，则进行计算，并将结果缓存</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = self.func(*args, **kwargs)</span><br><span class="line">            CacheDecorator.__cache[self.func.__name__] = result</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cost_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;耗时：<span class="subst">&#123;end - start&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@cost_time</span></span><br><span class="line"><span class="meta">@CacheDecorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1_long_time</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;模拟耗时较长，每次执行返回结果都一样的情况&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start func1&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end func1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第一次执行&quot;</span>)</span><br><span class="line">    r1 = func1_long_time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第二次执行&quot;</span>)</span><br><span class="line">    r2 = func1_long_time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;打印结果：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r1)</span><br><span class="line">    <span class="built_in">print</span>(r2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第一次执行</span></span><br><span class="line"><span class="string">start func1</span></span><br><span class="line"><span class="string">end func1</span></span><br><span class="line"><span class="string">耗时：3.009289264678955</span></span><br><span class="line"><span class="string">第二次执行</span></span><br><span class="line"><span class="string">耗时：0.0</span></span><br><span class="line"><span class="string">打印结果：</span></span><br><span class="line"><span class="string">999</span></span><br><span class="line"><span class="string">999</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="生成器、迭代器、动态性"><a href="#生成器、迭代器、动态性" class="headerlink" title="生成器、迭代器、动态性"></a>生成器、迭代器、动态性</h2><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401191849880.png" alt="image-20240107222700567"></p><h4 id="生成器定义"><a href="#生成器定义" class="headerlink" title="生成器定义"></a>生成器定义</h4><p>在Python中，一边循环一边计算的机制，称为生成器：generator</p><h4 id="为什么要有生成器"><a href="#为什么要有生成器" class="headerlink" title="为什么要有生成器"></a>为什么要有生成器</h4><p>列表所有数据都在内存中，如果有海量数据的话将会非常耗内存。</p><p>如：仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p>如果列表元素按照某种算法推算出来，那我们就可以在循环的过程中不断推算出后续的元素，这样就不必创建完整的list，从而节省大</p><p>量的空间。</p><p><strong>简单说：</strong></p><p>时间换空间！想要得到庞大的数据，又想让它占用空间少，那就用生成器！</p><p>延迟计算！需要的时候，再计算出数据！</p><h4 id="创建生成器的方式一（生成器表达式）"><a href="#创建生成器的方式一（生成器表达式）" class="headerlink" title="创建生成器的方式一（生成器表达式）"></a>创建生成器的方式一（生成器表达式）</h4><p>生成器表达式很简单，只要把一个列表推导式的 <code>[]</code> 改成 <code>()</code> ，就创建了一个生成器(generator)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line"><span class="built_in">print</span>(g.__next__())</span><br><span class="line"><span class="built_in">print</span>(g.__next__())</span><br><span class="line"><span class="built_in">print</span>(g.__next__())</span><br><span class="line"><span class="built_in">print</span>(g.__next__())</span><br><span class="line"><span class="built_in">print</span>(g.__next__())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"><span class="string">&lt;generator object &lt;genexpr&gt; at 0x000002AD5900C430&gt;</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">16</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>创建 L 和 g 的区别仅在于最外层的 <code>[]</code> 和 <code>()</code> ， L 是一个list，而 g 是一个generator。</p><h4 id="创建生成器的方式二（生成器函数）"><a href="#创建生成器的方式二（生成器函数）" class="headerlink" title="创建生成器的方式二（生成器函数）"></a>创建生成器的方式二（生成器函数）</h4><blockquote><p>如果一个函数中包含 <code>yield</code> 关键字，那么这个函数就不再是一个普通函数，调用函数就是创建了一个生成器（generator）对象。</p><p>生成器函数：其实就是利用关键字 <code>yield</code> 一次性返回一个结果，阻塞，重新开始</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.函数有了yield之后，调用它，就会生成一个生成器</span></span><br><span class="line"><span class="string">2.yield的作用：程序挂起，返回相应的值。下次从下一个语句开始执行。</span></span><br><span class="line"><span class="string">3.return在生成器中代表生成器终止，直接报错：StopIteration</span></span><br><span class="line"><span class="string">4.next方法作用：唤醒并继续执行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;i:<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;done&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = demo()</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    a.__next__()</span><br><span class="line">    a.__next__()</span><br><span class="line">    a.__next__()</span><br><span class="line">    a.__next__()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;D:\2022百战Python\函数式编程和核心特性\生成器、迭代器、动态性\生成器函数的创建_yield.py&quot;, line 27, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    a.__next__()</span></span><br><span class="line"><span class="string">StopIteration: done</span></span><br><span class="line"><span class="string">&lt;generator object demo at 0x000001B4F30DC430&gt;</span></span><br><span class="line"><span class="string">start</span></span><br><span class="line"><span class="string">i:0</span></span><br><span class="line"><span class="string">i:1</span></span><br><span class="line"><span class="string">i:2</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="生成器函数的工作原理"><a href="#生成器函数的工作原理" class="headerlink" title="生成器函数的工作原理"></a>生成器函数的工作原理</h4><p>原理是这样的：</p><ol><li>生成器函数返回一个迭代器，for循环对这个迭代器不断调用 <code>__next__()</code> 函数，不断运行到下一个<code>yield</code> 语句，一次一次取得每一个返回值，直到没有 <code>yield</code> 语句为止，最终引发 <code>StopIteration</code> 异常。</li><li><code>yield</code> 相当于 <code>return</code> 返回一个值，并且记住这个返回的位置，下次迭代时，代码从 <code>yield</code> 的<strong>下一条语句(不是下一行)</strong>开始执行。</li><li><code>send()</code> 和 <code>next()</code> 一样，都能让生成器继续往下走一步（下次遇到 <code>yield</code> 停），但 <code>send()</code> 能传一个值，这个值作为 <code>yield</code> 表达式整体的结果</li></ol><blockquote><p>生成器推导式底层原理也是这样的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># send的作用是唤醒并继续执行，发送一个消息到生成器内部</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">        temp = <span class="keyword">yield</span> i</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;temp:<span class="subst">&#123;temp&#125;</span>&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = foo()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))  <span class="comment"># g.__next__()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(g.send(<span class="number">100</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">start</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">**********</span></span><br><span class="line"><span class="string">temp:100</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">temp:None</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>什么是生成器？</p><blockquote><p>生成器仅仅保存了一套生成数值的算法，并且没有让这个算法现在就开始执行，而是我什么时候调它，它什么时候开始</p><p>计算一个新的值，并给你返回。</p></blockquote><p>生成器特点：</p><blockquote><ol><li>生成器函数生成一系列结果。通过 <code>yield</code> 关键字返回一个值后，还能从其退出的地方继续运行，因此可以随时间产生一系列的值。</li><li>生成器和迭代是密切相关的，<strong>迭代器都有一个</strong> <code>__next__()</code> <strong>成员方法，</strong>这个方法要么返回迭代的下一项，要么引起异常结束迭代。</li><li>生成器是一个特殊的程序，可以被用作控制循环的迭代行为，Python中生成器是迭代器的一种，使用<code>yield</code>返回值函数，每次调用<code>yield</code>会暂停，而可以使用 <code>next()</code> 函数和<code>send()</code> 函数恢复生成器。</li><li>生成器看起来像是一个函数，但是表现得却像是迭代器</li></ol></blockquote><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401191850299.png" alt="image-20240109000525212"></p><ol><li>迭代是Python最强大的功能之一，是访问集合元素的一种方式。</li><li>迭代器是一个可以<strong>记住遍历的位置</strong>的对象。</li><li>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。</li><li>迭代器只能往前不会后退。</li><li>迭代器有两个基本的方法： <code>iter()</code> 和 <code>next()</code></li></ol><h4 id="可迭代对象和迭代器区别"><a href="#可迭代对象和迭代器区别" class="headerlink" title="可迭代对象和迭代器区别"></a>可迭代对象和迭代器区别</h4><ol><li>一个实现了 <code>iter</code> 方法的对象，称为”可迭代对象Ieratable”</li><li>一个实现 了<code>next</code> 方法并且是可迭代的对象，称为”迭代器Iterator”</li></ol><blockquote><p>即：实现了 <code>iter</code> 方法和 <code>next</code> 方法的对象就是迭代器。</p><p>:warning:生成器都是 <code>Iterator</code> 对象，但 <code>list</code> 、 <code>dict</code> 、 <code>str</code> 虽然是 <code>Iterable（可迭代对象）</code> ，却不是 <code>Iterator（迭代器）</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># python3.6之前不加.abc，之后的加</span></span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterator</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">isinstance</span>([], Iterable)</span><br><span class="line">a = <span class="built_in">isinstance</span>([], Iterator)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><code>list</code> 、 <code>dict</code> 、 <code>str</code> 等 <code>Iterable</code> 变成 <code>Iterator</code> , 可以使用 <code>iter()</code> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="built_in">iter</span>([]), Iterator)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="built_in">iter</span>(<span class="string">&#x27;abc&#x27;</span>), Iterator)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401191850844.png" alt="image-20240109000916190"></p><p>为什么 <code>list</code> 、 <code>dict</code> 、 <code>str</code> 等数据类型不是 <code>Iterator</code> ？</p><p>Python的 <code>Iterator</code> 对象表示的是一个<strong>数据流</strong>。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过 <code>next()</code> 函数实现按需计算下一个数据，所以 <code>Iterator</code> 的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p><p>所以，生成器一定是迭代器。</p><p><code>Iterator</code> 甚至可以表示一个无限大的数据流，例如全体自然数。而使用<code>list</code>是永远不可能存储全体自然数的。</p><h4 id="for循环的本质"><a href="#for循环的本质" class="headerlink" title="for循环的本质"></a>for循环的本质</h4><p>Python3的 for 循环本质上就是通过不断调用 <code>next()</code> 函数实现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>本质是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先获得Iterator对象:</span></span><br><span class="line">it = <span class="built_in">iter</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># 循环:</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># 获得下一个值:</span></span><br><span class="line">x = <span class="built_in">next</span>(it)</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    <span class="comment"># 遇到StopIteration就退出循环</span></span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="创建一个迭代器"><a href="#创建一个迭代器" class="headerlink" title="创建一个迭代器"></a>创建一个迭代器</h4><p>一个类作为一个迭代器使用需要在类中实现两个方法 <code>__iter__()</code> 与<code>__next__()</code></p><ol><li><code>__iter__()</code> 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 <code>__next__()</code> 方法并通过<code>StopIteration</code> 异常标识迭代的完成。</li><li><code>__next__()</code> 方法会返回下一个迭代器对象。 </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 创建一个依次返回10,20,30,...这样数字的迭代器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNumbers</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        self.num = <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.num &lt; <span class="number">40</span>:</span><br><span class="line">            x = self.num</span><br><span class="line">            self.num += <span class="number">10</span></span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myclass = MyNumbers()</span><br><span class="line">myiter = <span class="built_in">iter</span>(myclass)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">20</span></span><br><span class="line"><span class="string">30</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;D:\2022百战Python\函数式编程和核心特性\生成器、迭代器、动态性\创建一个迭代器.py&quot;, line 22, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(next(myiter))</span></span><br><span class="line"><span class="string">  File &quot;D:\2022百战Python\函数式编程和核心特性\生成器、迭代器、动态性\创建一个迭代器.py&quot;, line 14, in __next__</span></span><br><span class="line"><span class="string">    raise StopIteration</span></span><br><span class="line"><span class="string">StopIteration</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="动态添加属性和方法"><a href="#动态添加属性和方法" class="headerlink" title="动态添加属性和方法"></a>动态添加属性和方法</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401191851313.png" alt="image-20240109002706032"></p><p>动态编程语言是高级程序设计语言的一个类别，在计算机科学领域已被广泛应用。</p><p>它是指在运行时可以改变其结构的语言 ：例如新的函数、 对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。</p><h4 id="给对象动态的添加属性和方法"><a href="#给对象动态的添加属性和方法" class="headerlink" title="给对象动态的添加属性和方法"></a>给对象动态的添加属性和方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">&quot;jhon&quot;</span>, <span class="number">20</span>)</span><br><span class="line">p2 = Person(<span class="string">&quot;parker&quot;</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态给对象添加属性</span></span><br><span class="line">p1.score = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(p1.score)</span><br><span class="line"><span class="comment"># 只给p1添加了属性，p2没有</span></span><br><span class="line"><span class="comment"># print(p2.score)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态给对象添加方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>, running&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># types.MethodType(run,p1)则是告诉解释器，self指的就是p1</span></span><br><span class="line">p1.run = types.MethodType(run, p1)</span><br><span class="line">p1.run()</span><br></pre></td></tr></table></figure><h4 id="type-MethonType的使用"><a href="#type-MethonType的使用" class="headerlink" title="type.MethonType的使用"></a>type.MethonType的使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># types.MethodType(run,p1)则是告诉解释器，self指的就是p1</span></span><br></pre></td></tr></table></figure><h4 id="给类动态的添加属性、静态方法以及类方法"><a href="#给类动态的添加属性、静态方法以及类方法" class="headerlink" title="给类动态的添加属性、静态方法以及类方法"></a>给类动态的添加属性、静态方法以及类方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">staticfunc</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---static method---&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态给类添加静态方法</span></span><br><span class="line">Person.staticfunc = staticfunc</span><br><span class="line">Person.staticfunc()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clsfunc</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---cls method---&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态给类添加类方法</span></span><br><span class="line">Person.clsfunc = clsfunc</span><br><span class="line">Person.clsfunc()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态给类添加属性</span></span><br><span class="line">Person.sorce = <span class="number">100</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="slots-的作用"><a href="#slots-的作用" class="headerlink" title="__slots__ 的作用"></a><code>__slots__</code> 的作用</h4><ol><li><code>__slots__</code> 对==动态添加成员变量、成员方法有限制==。<strong>对动态添加类属性、类方法没有限制</strong>。 </li><li><code>__slots__</code> 只对本类有限制，不限制子类。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    __slots__ = &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;eat!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p1 = Person(<span class="string">&quot;jhon&quot;</span>, <span class="number">21</span>)</span><br><span class="line">    <span class="comment"># p1.gender = &quot;man&quot;</span></span><br><span class="line">    <span class="comment"># AttributeError: &#x27;Person&#x27; object has no attribute &#x27;gender&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="正则表达式概念"><a href="#正则表达式概念" class="headerlink" title="正则表达式概念"></a>正则表达式概念</h3><p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑（可以用来做检索，截取或者替换操作）。</p><p>作用</p><ol><li>给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）。</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分。</li><li>还可以对目标字符串进行替换操作。</li></ol><p>基本函数</p><p>Python语言通过标准库中的<code>re</code>模块支持正则表达式。<code>re</code>模块提供了一些根据正则表达式进行查找、替换、分隔字符串的函数，</p><p>这些函数使用一个正则表达式作为第一个参数。</p><div class="table-container"><table><thead><tr><th><strong>函数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>match(pattern,string,flags=0)</code></td><td>根据pattern从string的头部开始匹配字符串，只返回第1次匹配成功的对象；否则，返回None</td></tr><tr><td><code>findall(pattern,string,flags=0)</code></td><td>根据pattern在string中匹配字符串。如果匹配成功，返回包含匹配结果的列表；否则，返回空列表。当pattern中有分组时，返回包含多个元组的列表，每个元组对应1个分组。flags表示规则选项，规则选项用于辅助匹配。</td></tr><tr><td><code>sub(pattern,repl,string,count=0)</code></td><td>根据指定的正则表达式，替换源字符串中的子串。pattern是一个正则表达式，repl是用于替换的字符串，string是源字符串。如果count等于0，则返回string中匹配的所有结果；如果count大于0，则返回前count个匹配结果</td></tr><tr><td><code>subn(pattern,repl,string,count=0)</code></td><td>作用和sub()相同，返回一个二元的元组。第1个元素是替换结果，第2个元素是替换的次数</td></tr><tr><td><code>search(pattern,string,flags=0)</code></td><td>根据pattern在string中匹配字符串，只返回第1次匹配成功的对象。如果匹配失败，返回None</td></tr><tr><td><code>compile(pattern,flags=0)</code></td><td>编译正则表达式pattern，返回1个pattern的对象</td></tr><tr><td><code>split(pattern,string,maxsplit=0)</code></td><td>根据pattern分隔string，maxsplit表示最大的分隔数</td></tr><tr><td><code>escape(pattern)</code></td><td>匹配字符串中的特殊字符，如*、+、?等</td></tr></tbody></table></div><h3 id="match函数的使用"><a href="#match函数的使用" class="headerlink" title="match函数的使用"></a>match函数的使用</h3><p><code>re.match</code> 尝试从字符串的<strong>起始位置匹配一个模式</strong>，如果不是起始位置匹配成功的话，match()就返回None。语法格式如下：</p><p><code>re.match(pattern, string, flags=0)</code></p><div class="table-container"><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。如下表列出正则表达式修饰符 - 可选标志</td></tr></tbody></table></div><p><strong>正则表达式修饰符</strong></p><div class="table-container"><table><thead><tr><th><strong>修饰符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>re.I</td><td>使匹配对大小写不敏感</td></tr><tr><td>re.L</td><td>做本地化识别（locale-aware）匹配</td></tr><tr><td>re.M</td><td>多行匹配，影响 ^ 和 $</td></tr><tr><td>re.S</td><td>使 . 匹配包括换行在内的所有字符</td></tr><tr><td>re.U</td><td>根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B</td></tr><tr><td>re.X</td><td>该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td></tr></tbody></table></div><p>意义：</p><ol><li><code>re.match</code>是用来进行正则匹配检查的方法，如果字符串开头的0个或多个字符匹配正则表达式模式，则返回相应的match对象。如果字符串不匹配模式，返回None（注意不是空字符串””）</li><li>匹配对象Match Object具有<code>group()</code>方法， 用来返回字符串的匹配部分。具有<code>span()</code>方法，返回匹配字符串的位置（元组存储开始，结束位置）。具有<code>start()</code>，<code>end()</code>方法，存储匹配数据的开始和结束位置。（也可以通过对象的dir(对象查看对象的方法)）</li></ol><blockquote><p>:warning:<strong>注意：</strong></p><p>如果想在目标字符串的==任意位置查找==，需要使用search</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义正则表达式</span></span><br><span class="line">pattern = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 目标字符串</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment"># match函数的使用</span></span><br><span class="line">result = re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(result))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;匹配内容：&quot;</span>, result.group())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;匹配字符串的位置: &quot;</span>, result.span())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 5), match=&#x27;hello&#x27;&gt;</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__class_getitem__&#x27;, &#x27;__copy__&#x27;, &#x27;__deepcopy__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__getitem__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;end&#x27;, &#x27;endpos&#x27;, &#x27;expand&#x27;, &#x27;group&#x27;, &#x27;groupdict&#x27;, &#x27;groups&#x27;, &#x27;lastgroup&#x27;, &#x27;lastindex&#x27;, &#x27;pos&#x27;, &#x27;re&#x27;, &#x27;regs&#x27;, &#x27;span&#x27;, &#x27;start&#x27;, &#x27;string&#x27;]</span></span><br><span class="line"><span class="string">匹配内容： hello</span></span><br><span class="line"><span class="string">匹配字符串的位置:  (0, 5)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义正则表达式</span></span><br><span class="line">pattern = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 目标字符串</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Hello world&quot;</span></span><br><span class="line"><span class="comment"># match函数的使用</span></span><br><span class="line"><span class="comment"># 忽略大小写</span></span><br><span class="line">result = re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>, re.I)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="常用匹配符"><a href="#常用匹配符" class="headerlink" title="常用匹配符"></a>常用匹配符</h3><p>一个正则表达式是由字母、数字和特殊字符（括号、星号、问号等）组成。正则表达式中有许多特殊的字符，这些特殊字符是构成正则表达式的要素。</p><div class="table-container"><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配任何一个字符（除了\n）</td></tr><tr><td>[]</td><td>匹配列表中的字符</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线，即a-z,A-Z,0-9,_</td></tr><tr><td>\W</td><td>匹配不是字母、数字、下划线</td></tr><tr><td>\s</td><td>匹配空白字符，即空格（\n,\t）</td></tr><tr><td>\S</td><td>匹配不是空白的字符</td></tr><tr><td>\d</td><td>匹配数字，即0-9</td></tr><tr><td>\D</td><td>匹配非数字的字符</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用匹配符.的使用：匹配任意一个字符（除了\n）</span></span><br><span class="line">pattern = <span class="string">&quot;.&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;9&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;a&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;B&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 常用匹配符\d的使用：匹配数字</span></span><br><span class="line">pattern = <span class="string">&quot;\d&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;a&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;B&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 常用匹配符\D的使用：匹配非数字</span></span><br><span class="line">pattern = <span class="string">&quot;\D&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;B&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 常用匹配符\s的使用：匹配空白字符,即空格（\n,\t）</span></span><br><span class="line">pattern = <span class="string">&quot;\s&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;\t&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 常用匹配符\S的使用：匹配不是空白的字符</span></span><br><span class="line">pattern = <span class="string">&quot;\S&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;B&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 常用匹配符\w的使用：匹配字母、数字、下划线</span></span><br><span class="line">pattern = <span class="string">&quot;\w&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;8&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 常用匹配符\W的使用：匹配不是字母、数字、下划线</span></span><br><span class="line">pattern = <span class="string">&quot;\W&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;#&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;@&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># []匹配列表中的字符</span></span><br><span class="line">pattern = <span class="string">&quot;[12345]&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;2&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;3&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 匹配手机号码</span></span><br><span class="line">s = <span class="string">&quot;13456788789&quot;</span></span><br><span class="line">pattern = <span class="string">&quot;1[35789]\d\d\d\d\d\d\d\d\d&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;匹配手机号码：&quot;</span>, re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;9&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;0&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;a&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;\n&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;a&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;a&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;#&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;1&#x27;&gt;</span></span><br><span class="line"><span class="string">匹配手机号码： &lt;re.Match object; span=(0, 11), match=&#x27;13456788789&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>其中，匹配符“[]”可以指定一个范围，例如：“[ok]”将匹配包含“o”或“k”的字符。同时“[]”可以与\w、\s、\d等标记等价。例如，<code>[0-9a-zAZ]</code>等价于\w，<code>[ ^0-9 ]</code> 等价于\D。</p><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>从上面示例中可以看到如果要匹配手机号码，需要形如<code>\d\d\d\d\d\d\d\d\d\d\d</code>这样的正则表达式。其中表现了11次<code>\d</code>，表达方式烦琐。正则表达式作为一门小型的语言，还提供了对表达式的一部分进行重复处理的功能。例如，<code>*</code>可以对正则表达式的某个部分重复匹配多次。这种匹配符号称为限定符。</p><div class="table-container"><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配零次或多次</td></tr><tr><td>+</td><td>匹配一次或多次</td></tr><tr><td>?</td><td>匹配一次或零次</td></tr><tr><td>{m}</td><td>重复m次</td></tr><tr><td>{m,n}</td><td>重复m到n次，其中n可以省略，表示m到任意次</td></tr><tr><td>{m,}</td><td>重复至少m次</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限定符 *、+、? 的使用</span></span><br><span class="line"><span class="comment"># * 匹配0次或多次</span></span><br><span class="line">partten = <span class="string">&quot;\d*&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123abc&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;abc&quot;   # re.Match object; span=(0, 0), match=&#x27;&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># + 匹配1次或多次</span></span><br><span class="line">partten = <span class="string">&quot;\d+&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123abc&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;abc&quot;   # None</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># ? 匹配1次或0次</span></span><br><span class="line">partten = <span class="string">&quot;\d?&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123abc&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;abc&quot;   # re.Match object; span=(0, 0), match=&#x27;&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># &#123;m&#125; 重复m次</span></span><br><span class="line">partten = <span class="string">&quot;\d&#123;3&#125;&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;1234abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># &#123;m,n&#125; 重复m到n次</span></span><br><span class="line">partten = <span class="string">&quot;\d&#123;3,5&#125;&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;1234abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># &#123;m,&#125; 重复至少m次</span></span><br><span class="line">partten = <span class="string">&quot;\d&#123;3,&#125;&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123456abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 3), match=&#x27;123&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 3), match=&#x27;123&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;1&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 3), match=&#x27;123&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 4), match=&#x27;1234&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 6), match=&#x27;123456&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="限定符使用实例"><a href="#限定符使用实例" class="headerlink" title="限定符使用实例"></a>限定符使用实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配出一个字符串首字母为大写字符，后边都是小写字符，这些小写字母可有可无</span></span><br><span class="line">partten = <span class="string">&quot;[A-Z][a-z]*&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 匹配出有效的变量名</span></span><br><span class="line"><span class="comment"># partten = &quot;[A-Za-z_][A-Za-z_0-9]*&quot;</span></span><br><span class="line">partten = <span class="string">&quot;[A-Za-z_]\w*&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Abc_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 匹配出1-99之间的数字</span></span><br><span class="line">partten = <span class="string">&quot;[1-9]\d?&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 匹配出一个随机密码8-20位以内 (大写字母 小写字母 下划线 数字)</span></span><br><span class="line">partten = <span class="string">&quot;\w&#123;8,20&#125;&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123abc_12D&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 3), match=&#x27;Abc&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 4), match=&#x27;Abc_&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 2), match=&#x27;12&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 10), match=&#x27;123abc_12D&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="原生字符串"><a href="#原生字符串" class="headerlink" title="原生字符串"></a>原生字符串</h3><p>和大多数编程语言相同，正则表达式里使用<code>\</code>作为转义字符，这就可以能造成反斜杠困扰。</p><p>假如你需要匹配文本中的字符<code>\</code>，那么使用编程语言表示的正则表达式里将需要4个反斜杠<code>\</code>：前面两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。</p><p>Python里的原生字符串很好地解决了这个问题，使用Python的r前缀。例如匹配一个数字的<code>&quot;\d&quot;</code>可以写成<code>r&quot;\d&quot;</code>。有了原生字符串，再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反斜杠作为转义</span></span><br><span class="line">s = <span class="string">&quot;\n123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">s = <span class="string">&quot;\\n123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 使用原生字符串 r</span></span><br><span class="line">s = <span class="string">r&quot;\n123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 在正则表达式中反斜杠作为转义</span></span><br><span class="line">s = <span class="string">&quot;\n123&quot;</span></span><br><span class="line">partten = <span class="string">&quot;\\n\d&#123;3&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, s))</span><br><span class="line"><span class="comment"># 目标字符串多个反斜杠</span></span><br><span class="line">s = <span class="string">&quot;\\n123&quot;</span></span><br><span class="line">partten = <span class="string">&quot;\\\\n\d&#123;3&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, s))</span><br><span class="line"><span class="comment"># 使用原生字符串 r</span></span><br><span class="line">s = <span class="string">&quot;\\\\n123&quot;</span></span><br><span class="line">partten = <span class="string">r&quot;\\\\n\d&#123;3&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, s))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">\n123</span></span><br><span class="line"><span class="string">\n123</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 4), match=&#x27;\n123&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 5), match=&#x27;\\n123&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 6), match=&#x27;\\\\n123&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="边界字符串"><a href="#边界字符串" class="headerlink" title="边界字符串"></a>边界字符串</h3><div class="table-container"><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串开头</td></tr><tr><td>$</td><td>匹配字符串结尾</td></tr><tr><td>\b</td><td>匹配一个单词的边界</td></tr><tr><td>\B</td><td>匹配非单词的边界</td></tr></tbody></table></div><blockquote><p>:warning:<strong>注意：</strong></p><p><code>^</code>与<code>[^m]</code> 中的<code>^</code>的含义并不相同，后者<code>^</code>表示“除了….”的意思</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配字符串结尾 $</span></span><br><span class="line"><span class="comment"># 匹配一个5-10为的qq邮箱</span></span><br><span class="line">pattern = <span class="string">&quot;[1-9]\d&#123;4,9&#125;@qq.com$&quot;</span></span><br><span class="line">qq = <span class="string">&quot;12345@qq.com&quot;</span></span><br><span class="line">qq = <span class="string">&quot;12345@qq.com.cn&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, qq))</span><br><span class="line"><span class="comment"># 匹配字符串开头 ^</span></span><br><span class="line">pattern = <span class="string">&quot;^hello.*&quot;</span></span><br><span class="line">s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"><span class="comment"># 匹配单词边界 \b</span></span><br><span class="line"><span class="comment"># 左边界</span></span><br><span class="line">pattern = <span class="string">r&quot;.*\bqwe&quot;</span></span><br><span class="line">s = <span class="string">&quot;abc qweAB&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"><span class="comment"># 右边界</span></span><br><span class="line">pattern = <span class="string">r&quot;.*ing\b&quot;</span></span><br><span class="line">s = <span class="string">&quot;123 runing&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"><span class="comment"># 匹配非单词边界 \B</span></span><br><span class="line"><span class="comment"># 左边界</span></span><br><span class="line">pattern = <span class="string">r&quot;.*\Bqwe&quot;</span></span><br><span class="line">s = <span class="string">&quot;abc aqweBC&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"><span class="comment"># 右边界</span></span><br><span class="line">pattern = <span class="string">r&quot;.*ing\B&quot;</span></span><br><span class="line">s = <span class="string">&quot;123 runingA&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 11), match=&#x27;hello world&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 7), match=&#x27;abc qwe&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 10), match=&#x27;123 runing&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 8), match=&#x27;abc aqwe&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 10), match=&#x27;123 runing&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="search函数"><a href="#search函数" class="headerlink" title="search函数"></a>search函数</h3><p>search在一个字符串中搜索满足文本模式的字符串。语法格式如下：</p><p><code>re.search(pattern, string, flags=0)</code></p><p>函数参数与match类似</p><div class="table-container"><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。如下表列出正则表达式修饰符 - 可选标志</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义正则表达式</span></span><br><span class="line">pattern = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 目标字符串</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment"># search函数的使用</span></span><br><span class="line">result = re.search(pattern, <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;匹配结果：&quot;</span>, result.group())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 5), match=&#x27;hello&#x27;&gt;</span></span><br><span class="line"><span class="string">匹配结果： hello</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="match和search的区别"><a href="#match和search的区别" class="headerlink" title="match和search的区别"></a>match和search的区别</h4><p><code>re.match</code>只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而<code>re.search</code>匹配整个字符串，直到找到一个匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义正则表达式</span></span><br><span class="line">pattern = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 目标字符串</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Hello world, hello Python&quot;</span></span><br><span class="line"><span class="comment"># search函数的使用</span></span><br><span class="line">result = re.search(pattern, <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;search:&quot;</span>, result)</span><br><span class="line">r = re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;match:&quot;</span>, r)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">search: &lt;re.Match object; span=(13, 18), match=&#x27;hello&#x27;&gt;</span></span><br><span class="line"><span class="string">match: None</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="择一匹配（-）的使用"><a href="#择一匹配（-）的使用" class="headerlink" title="择一匹配（|）的使用"></a>择一匹配（|）的使用</h3><p>search方法搜索一个字符串，要想搜索多个字符串，如搜索aa、bb和cc，最简单的方法是在文本模式字符串中使用择一匹配符号<code>|</code>。择一匹配符号和<strong>逻辑或</strong>类似，只要满足任何一个，就算匹配成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 择一匹配符号（|）的使用</span></span><br><span class="line">pattern = <span class="string">&quot;aa|bb|cc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="string">&quot;aa&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="string">&quot;bb&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="string">&quot;cc&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(re.search(pattern, <span class="string">&quot;where is bb&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配0-100之间所有的数字</span></span><br><span class="line">s = <span class="string">&quot;0&quot;</span></span><br><span class="line">s = <span class="string">&quot;9&quot;</span></span><br><span class="line">s = <span class="string">&quot;91&quot;</span></span><br><span class="line">s = <span class="string">&quot;100&quot;</span></span><br><span class="line">s = <span class="string">&quot;101&quot;</span></span><br><span class="line">s = <span class="string">&quot;1000&quot;</span></span><br><span class="line">pattern = <span class="string">&quot;[1-9]?/d$|100$&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 2), match=&#x27;aa&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 2), match=&#x27;bb&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 2), match=&#x27;cc&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(9, 11), match=&#x27;bb&#x27;&gt;</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>如果待匹配的字符串中，某些字符可以有多个选择，就需要使用字符集<code>[]</code>，也就是一对中括号括起来的字符串。例如，<code>[xyz]</code>表示x、y、z三个字符可以取其中任何一个，相当于<code>x|y|z</code>，所以对单个字符使用或关系时，字符集和择一匹配符的效果是一样的。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">&#x27;[xyz]&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)  <span class="comment"># 匹配成功</span></span><br><span class="line"><span class="built_in">print</span>(m.group())</span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">&#x27;x|y|z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)  <span class="comment"># 匹配成功</span></span><br><span class="line"><span class="built_in">print</span>(m.group())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符集（[]）和择一匹配符(|)的用法，及它们的差异</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以第1个字母是a或者b，第2个字母是c或者d，如ac、bc、ad、bd</span></span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">&#x27;[ab][cd]&#x27;</span>, <span class="string">&#x27;aceg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 匹配以ab开头，第3个字母是c或者d，如abc、abd</span></span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">&#x27;ab[cd]&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 匹配ab或者cd</span></span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">&#x27;ab|cd&#x27;</span>, <span class="string">&#x27;cd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>如果一个模式字符串中有用一对圆括号括起来的部分，那么这部分就会作为一组，可以通过group方法的参数获取指定的组匹配的字</p><p>符串。当然，如果模式字符串中没有任何用圆括号括起来的部分，那么就不会对待匹配的字符串进行分组。</p><div class="table-container"><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>(ab)</td><td>将括号中的字符作为一个分组</td></tr><tr><td>\num</td><td>引用分组num匹配到的字符串</td></tr><tr><td>(?p<name>)</td><td>分别起组名</td></tr><tr><td>(?p=name)</td><td>引用别名为name分组匹配到的字符串</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配座机号码  区号&#123;3，4&#125;-电话号码&#123;5，8&#125;</span></span><br><span class="line">pattern = <span class="string">&quot;/d&#123;3,4&#125;-[1-9]/d&#123;4,7&#125;$&quot;</span></span><br><span class="line">s = <span class="string">&quot;010-1234567&quot;</span></span><br><span class="line">result = re.<span class="keyword">match</span>(pattern, s)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用分组</span></span><br><span class="line">pattern = <span class="string">r&quot;(\d&#123;3,4&#125;)-([1-9]\d&#123;4,7&#125;$)&quot;</span></span><br><span class="line">s = <span class="string">&quot;010-1234567&quot;</span></span><br><span class="line">result = re.<span class="keyword">match</span>(pattern, s)</span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取第一个分组结果：&quot;</span>, result.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取第二个分组结果：&quot;</span>, result.group(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用groups(): &quot;</span>, result.groups())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取第一个分组结果：&quot;</span>, result.groups()[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取第二个分组结果：&quot;</span>, result.groups()[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># \num的使用</span></span><br><span class="line">s = <span class="string">&quot;&lt;html&gt;&lt;head&gt;分组的使用&lt;/head&gt;&lt;/html&gt;&quot;</span></span><br><span class="line">s = <span class="string">&quot;&lt;html&gt;&lt;head&gt;分组的使用&lt;/body&gt;&lt;/h1&gt;&quot;</span></span><br><span class="line">pattern = <span class="string">r&quot;&lt;(.+)&gt;&lt;(.+)&gt;.+&lt;/\2&gt;&lt;/\1&gt;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"><span class="comment"># (?P&lt;别名&gt;)</span></span><br><span class="line"><span class="comment"># 引用 (?P=别名)</span></span><br><span class="line">s = <span class="string">&quot;&lt;html&gt;&lt;head&gt;分组的使用&lt;/head&gt;&lt;/html&gt;&quot;</span></span><br><span class="line">pattern = <span class="string">r&quot;&lt;(?P&lt;k1&gt;.+)&gt;&lt;(?P&lt;k2&gt;.+)&gt;.+&lt;/(?P=k2)&gt;&lt;/(?P=k1)&gt;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">010-1234567</span></span><br><span class="line"><span class="string">获取第一个分组结果： 010</span></span><br><span class="line"><span class="string">获取第二个分组结果： 1234567</span></span><br><span class="line"><span class="string">使用groups():  (&#x27;010&#x27;, &#x27;1234567&#x27;)</span></span><br><span class="line"><span class="string">获取第一个分组结果： 010</span></span><br><span class="line"><span class="string">获取第二个分组结果： 1234567</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 31), match=&#x27;&lt;html&gt;&lt;head&gt;分组的使用&lt;/head&gt;&lt;/html&gt;&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>使用分组要了解如下几点：</p><ol><li>只有圆括号括起来的部分才算一组，如果模式字符串中既有圆括号括起来的部分，也有没有被圆括号括起来的部分，那么只会将被圆括号括起来的部分算作一组，其它的部分忽略。</li><li>用<code>group</code>方法获取指定组的值时，组从1开始，也就是说，<code>group(1)</code>获取第1组的值，<code>group(2)</code>获取第2组的值，以此类推。</li><li><code>groups</code>方法用于获取所有组的值，以<strong>元组</strong>形式返回。所以除了使用group(1)获取第1组的值外，还可以使用<code>groups()[0]</code>获取第1组的值。<code>groups()[1]</code>获取第2组以及其它组的值的方式类似。</li></ol><h3 id="re模块中其他常用的函数"><a href="#re模块中其他常用的函数" class="headerlink" title="re模块中其他常用的函数"></a>re模块中其他常用的函数</h3><h4 id="sub和subn搜索与替换"><a href="#sub和subn搜索与替换" class="headerlink" title="sub和subn搜索与替换"></a>sub和subn搜索与替换</h4><p>sub函数和subn函数用于实现搜索和替换功能。这两个函数的功能几乎完全相同，都是将某个字符串中所有匹配正则表达式的部分替</p><p>换成其他字符串。用来替换的部分可能是一个字符串，也可以是一个函数，该函数返回一个用来替换的字符串。<strong>sub函数返回替换后</strong></p><p><strong>的结果，subn函数返回一个元组，元组的第1个元素是替换后的结果</strong>，第2个元素是替换的总数。语法格式如下：</p><p><code>re.sub(pattern, repl, string, count=0,flags=0)</code></p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>repl</td><td>替换的字符串，也可以是一个函数</td></tr><tr><td>string</td><td>要被查找替换的原始字符串</td></tr><tr><td>count</td><td>模式匹配后替换的最大次数，默认0表示替换所有的匹配</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># sub和subn</span></span><br><span class="line">phone = <span class="string">&quot;2004-959-559 # 这是一个国外电话号码&quot;</span></span><br><span class="line"><span class="comment"># 替换目标字符串中的注释</span></span><br><span class="line">pattern = <span class="string">&quot;#.*&quot;</span></span><br><span class="line">result = re.sub(pattern, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 删除非数字的字符串 \D</span></span><br><span class="line">pattern = <span class="string">&quot;\D&quot;</span></span><br><span class="line">result = re.sub(pattern, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 调用subn</span></span><br><span class="line">result = re.subn(pattern, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;替换的结果：&quot;</span>, result[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;替换的次数：&quot;</span>, result[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2004-959-559 </span></span><br><span class="line"><span class="string">2004959559</span></span><br><span class="line"><span class="string">(&#x27;2004959559&#x27;, 15)</span></span><br><span class="line"><span class="string">替换的结果： 2004959559</span></span><br><span class="line"><span class="string">替换的次数： 15</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="compile函数"><a href="#compile函数" class="headerlink" title="compile函数"></a>compile函数</h4><p>compile 函数用于编译正则表达式，生成一个正则表达式（Pattern）对象，供 <code>match()</code> 和 <code>search()</code> 这两个函数使用。语法格式为：</p><p><code>re.compile(pattern[, flags])</code></p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>pattern</td><td>一个字符串形式的正则表达式</td></tr><tr><td>flags</td><td>可选，表示匹配模式，比如忽略大小写，多行模式等</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile函数的使用</span></span><br><span class="line">s = <span class="string">&#x27;first123 line&#x27;</span></span><br><span class="line">pattern = <span class="string">r&#x27;\w+&#x27;</span></span><br><span class="line">regex = re.<span class="built_in">compile</span>(pattern)  <span class="comment"># 匹配至少一个字母或数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用compile函数:&quot;</span>, regex.<span class="keyword">match</span>(s))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;直接使用re.match:&quot;</span>, re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用compile函数: &lt;re.Match object; span=(0, 8), match=&#x27;first123&#x27;&gt;</span></span><br><span class="line"><span class="string">直接使用re.match: &lt;re.Match object; span=(0, 8), match=&#x27;first123&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="findall函数"><a href="#findall函数" class="headerlink" title="findall函数"></a>findall函数</h4><p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。语法格式如下：</p><p><code>findall(pattern, string, flags=0)</code></p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。如下表列出正则表达式修饰符 - 可选标志</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># findall 函数的使用</span></span><br><span class="line">pattern = <span class="string">r&#x27;\w+&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;first 1 second 2 third 3 _ $$&#x27;</span></span><br><span class="line">o = re.findall(pattern, s)</span><br><span class="line"><span class="built_in">print</span>(o)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;first&#x27;, &#x27;1&#x27;, &#x27;second&#x27;, &#x27;2&#x27;, &#x27;third&#x27;, &#x27;3&#x27;, &#x27;_&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>:warning:<strong>注意：</strong></p><p>match 和 search 是匹配一次, findall 匹配所有</p></blockquote><h4 id="finditer函数"><a href="#finditer函数" class="headerlink" title="finditer函数"></a>finditer函数</h4><p>和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># finditer函数的使用</span></span><br><span class="line">pattern = <span class="string">r&#x27;\w+&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;first 1 second 2 third 3 _ $$&#x27;</span></span><br><span class="line">o = re.finditer(pattern, s)</span><br><span class="line"><span class="built_in">print</span>(o)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> o:</span><br><span class="line">    <span class="built_in">print</span>(i.group())</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;callable_iterator object at 0x000002598770DE50&gt;</span></span><br><span class="line"><span class="string">first</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">second</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">third</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="split函数"><a href="#split函数" class="headerlink" title="split函数"></a>split函数</h4><p>split函数用于根据正则表达式分隔字符串，也就是说，将字符串与模式匹配的子字符串都作为分隔符来分隔这个字符串。split函数返</p><p>回一个列表形式的分隔结果，每一个列表元素都是分隔的子字符串。语法格式如下：</p><p><code>re.split(pattern, string[, maxsplit=0,flags=0])</code></p><div class="table-container"><table><thead><tr><th>数</th><th>描述</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>maxsplit</td><td>分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。</td></tr><tr><td>flags</td><td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># split函数的使用</span></span><br><span class="line">pattern = <span class="string">r&#x27;\d+&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;a 1 b 2 c 3 d&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.split(pattern, s))</span><br><span class="line"><span class="comment"># maxsplit 参数限定分隔的次数，这里限定为1，也就是只分隔一次</span></span><br><span class="line"><span class="built_in">print</span>(re.split(pattern, s, maxsplit=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;a &#x27;, &#x27; b &#x27;, &#x27; c &#x27;, &#x27; d&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;a &#x27;, &#x27; b 2 c 3 d&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h3><p><strong>贪婪模式</strong>指Python里数量词默认是贪婪的，总是尝试<strong>匹配尽可能多的字符</strong>。<strong>非贪婪模式</strong>与贪婪相反，总是尝试<strong>匹配尽可能少的字符</strong>，</p><p>可以使用<code>*</code>，<code>?</code>，<code>+</code>，<code>&#123;m,n&#125;</code>后面加上<code>?</code>，使贪婪变成非贪婪。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;This is mytel:133-1234-1234&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------贪婪模式---------&#x27;</span>)</span><br><span class="line">pattern = <span class="string">r&quot;(.+)(\d+-\d+-\d+)&quot;</span></span><br><span class="line">result = re.<span class="keyword">match</span>(pattern, s)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个分组匹配结果：&quot;</span>, result.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第二个分组匹配结果：&quot;</span>, result.group(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------非贪婪模式---------&#x27;</span>)</span><br><span class="line">pattern = <span class="string">r&quot;(.+?)(\d+-\d+-\d+)&quot;</span></span><br><span class="line">result = re.<span class="keyword">match</span>(pattern, s)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个分组匹配结果：&quot;</span>, result.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第二个分组匹配结果：&quot;</span>, result.group(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;贪婪模式&#x27;</span>)</span><br><span class="line">s = <span class="string">&quot;abc123&quot;</span></span><br><span class="line">v = re.<span class="keyword">match</span>(<span class="string">r&#x27;abc(\d+)&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(v.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;非贪婪模式&#x27;</span>)</span><br><span class="line">v = re.<span class="keyword">match</span>(<span class="string">r&#x27;abc(\d+?)&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(v.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">----------贪婪模式---------</span></span><br><span class="line"><span class="string">This is mytel:133-1234-1234</span></span><br><span class="line"><span class="string">第一个分组匹配结果： This is mytel:13</span></span><br><span class="line"><span class="string">第二个分组匹配结果： 3-1234-1234</span></span><br><span class="line"><span class="string">----------非贪婪模式---------</span></span><br><span class="line"><span class="string">This is mytel:133-1234-1234</span></span><br><span class="line"><span class="string">第一个分组匹配结果： This is mytel:</span></span><br><span class="line"><span class="string">第二个分组匹配结果： 133-1234-1234</span></span><br><span class="line"><span class="string">-------------------------------</span></span><br><span class="line"><span class="string">贪婪模式</span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">非贪婪模式</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Python新特性"><a href="#Python新特性" class="headerlink" title="Python新特性"></a>Python新特性</h2><h3 id="formatted字符串字面值"><a href="#formatted字符串字面值" class="headerlink" title="formatted字符串字面值"></a>formatted字符串字面值</h3><p>formatted字符串是带有<code>f</code>字符前缀的字符串，可以很方便的格式化字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line">name = <span class="string">&quot;jhon&quot;</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name: %s, age: %d&quot;</span> % (name, age))</span><br><span class="line"><span class="comment"># 使用format</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name: &#123;&#125;, age: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;name: <span class="subst">&#123;name&#125;</span>, age: <span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br><span class="line">names = [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;c++&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;name1: <span class="subst">&#123;names[<span class="number">0</span>]&#125;</span>, name2: <span class="subst">&#123;names[<span class="number">1</span>]&#125;</span>, name3: <span class="subst">&#123;names[<span class="number">2</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 表达式</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a+b运算: <span class="subst">&#123;a + b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;表达式运算的结果：<span class="subst">&#123;<span class="number">3</span> * (a + b)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">name: jhon, age: 20</span></span><br><span class="line"><span class="string">name: jhon, age: 20</span></span><br><span class="line"><span class="string">name: jhon, age: 20</span></span><br><span class="line"><span class="string">name1: java, name2: python, name3: c++</span></span><br><span class="line"><span class="string">a+b运算: 30</span></span><br><span class="line"><span class="string">表达式运算的结果：90</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="formatted字符串支持"><a href="#formatted字符串支持" class="headerlink" title="formatted字符串支持 ="></a>formatted字符串支持 <code>=</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># formatted字符串支持 =</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a=&#125;</span>, <span class="subst">&#123;b=&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用指定的字符填充</span></span><br><span class="line"><span class="comment"># 使用 * 居中填充</span></span><br><span class="line">name = <span class="string">&quot;jhon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:*^20&#125;&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name:*^<span class="number">20</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 使用 * 居右填充</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name:*&gt;<span class="number">20</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 使用 * 居左填充</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name:*&lt;<span class="number">20</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对数值变量的格式化</span></span><br><span class="line">price = <span class="number">12.235</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(price))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;price:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">num = <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num=:<span class="number">.1</span>f&#125;</span>&quot;</span>)</span><br><span class="line">pct = <span class="number">0.789</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;%&quot;</span>.<span class="built_in">format</span>(pct*<span class="number">100</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pct*<span class="number">100</span>:<span class="number">.0</span>f&#125;</span>%&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">a=10, b=20</span></span><br><span class="line"><span class="string">*******jhon********</span></span><br><span class="line"><span class="string">********jhon********</span></span><br><span class="line"><span class="string">****************jhon</span></span><br><span class="line"><span class="string">jhon****************</span></span><br><span class="line"><span class="string">12.23</span></span><br><span class="line"><span class="string">12.23</span></span><br><span class="line"><span class="string">num=12.0</span></span><br><span class="line"><span class="string">78.90%</span></span><br><span class="line"><span class="string">79%</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="字符串新方法"><a href="#字符串新方法" class="headerlink" title="字符串新方法"></a>字符串新方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>功能描述</th></tr></thead><tbody><tr><td><code>str.removeprefix()</code></td><td>如果str以它开头的话，将会返回一个修改过前缀的新字符串，否则它将返回原始字符串</td></tr><tr><td><code>str.removesuffix()</code></td><td>如果str以其结尾，则返回带有修改过后缀的新字符串，否则它将返回原始字符串</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">info = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="comment"># 删除前缀</span></span><br><span class="line"><span class="built_in">print</span>(info.removeprefix(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(info.removeprefix(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line"><span class="comment"># 删除后缀</span></span><br><span class="line"><span class="built_in">print</span>(info.removesuffix(<span class="string">&#x27;world&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(info.removesuffix(<span class="string">&#x27;World&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">helloworld</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">helloworld</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="变量类型标注"><a href="#变量类型标注" class="headerlink" title="变量类型标注"></a>变量类型标注</h3><p>变量类型注解是用来对变量和函数的参数返回值类型做注解（暗示），帮助开发者写出更加严谨的代码，让调用方减少类型方面的错误，也可以提高代码的可读性和易用性。</p><p>但是，变量类型注解语法传入的类型表述能力有限，不能说明复杂的类型组成情况，因此引入了 <code>typing</code> 模块，来实现复杂的类型表达。</p><h4 id="常用的数据类型"><a href="#常用的数据类型" class="headerlink" title="常用的数据类型"></a>常用的数据类型</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401191852214.png" alt="image-20240112185445452"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401191852080.png" alt="image-20240112185500423"></p><blockquote><p><strong>注意：</strong></p><ul><li>mypy是Python的可选静态类型检查器</li><li>安装mypy模块</li><li>使用mypy进行静态类型检查 mypy 执行python文件</li></ul></blockquote><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 简化变量类型标注</span></span><br><span class="line">a: <span class="built_in">int</span> = <span class="number">10</span></span><br><span class="line">b: <span class="built_in">str</span> = <span class="string">&quot;hello&quot;</span></span><br><span class="line">c: <span class="built_in">float</span> = <span class="number">3.14</span></span><br><span class="line">d: <span class="built_in">bool</span> = <span class="literal">True</span></span><br><span class="line">e: <span class="built_in">bytes</span> = <span class="string">b&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂类型</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Set</span>, <span class="type">Dict</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line">x: <span class="type">List</span>[<span class="built_in">int</span>] = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y: <span class="type">Set</span>[<span class="built_in">str</span>] = &#123;<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;cd&quot;</span>&#125;</span><br><span class="line">z: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>] = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jhon&quot;</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">h: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">object</span>] = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jhon&quot;</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;male&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;</span><br><span class="line">j: <span class="type">Tuple</span>[<span class="built_in">int</span>] = (<span class="number">3</span>,)</span><br><span class="line">k: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>] = (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">l: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">str</span>, <span class="built_in">float</span>] = (<span class="number">3</span>, <span class="string">&quot;name&quot;</span>, <span class="number">5.1</span>)</span><br><span class="line"><span class="comment"># 定义可变大小的元组，使用省略号</span></span><br><span class="line">m: <span class="type">Tuple</span>[<span class="built_in">int</span>, ...] = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="简化变量类型标注"><a href="#简化变量类型标注" class="headerlink" title="简化变量类型标注"></a>简化变量类型标注</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.10新特性可以直接使用 list,tuple,dict,set</span></span><br><span class="line">n: <span class="built_in">list</span>[<span class="built_in">str</span>] = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line">q: <span class="built_in">tuple</span>[<span class="built_in">int</span>] = (<span class="number">2</span>,)</span><br><span class="line">p: <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>] = (<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 定义可变大小的元组，使用省略号</span></span><br><span class="line">i: <span class="built_in">tuple</span>[<span class="built_in">int</span>, ...] = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">f: <span class="built_in">set</span>[<span class="built_in">str</span>] = &#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>&#125;</span><br><span class="line">u: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">object</span>] = &#123;<span class="string">&quot;k1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;k2&quot;</span>: <span class="string">&quot;aa&quot;</span>, <span class="string">&quot;k3&quot;</span>: <span class="literal">True</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="函数参数返回值添加类型标注"><a href="#函数参数返回值添加类型标注" class="headerlink" title="函数参数返回值添加类型标注"></a>函数参数返回值添加类型标注</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="comment"># 参数 num：int类型</span></span><br><span class="line"><span class="comment"># 返回值：str类型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num_fun</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，两个参数都是int，返回int</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sun_fun</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，参数添加默认值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_test</span>(<span class="params">num1: <span class="built_in">int</span>, num2: <span class="built_in">float</span> = <span class="number">12.34</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fun_test(<span class="number">10</span>, <span class="number">29</span>))  <span class="comment"># 30</span></span><br><span class="line"><span class="built_in">print</span>(fun_test(<span class="number">10</span>))  <span class="comment"># 22.34</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量指向函数</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Callable[[参数类型, 参数类型], 返回值类型]</span></span><br><span class="line">f: <span class="type">Callable</span>[[<span class="built_in">int</span>, <span class="built_in">int</span>], <span class="built_in">int</span>] = sun_fun</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">10</span>, <span class="number">20</span>))  <span class="comment"># 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数，产生整数的生成器，每次返回一个</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">return_fun</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; Iterable[<span class="built_in">int</span>]:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; num:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(return_fun(<span class="number">10</span>))   <span class="comment"># &lt;generator object return_fun at 0x00000241595FC430&gt;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> return_fun(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">7</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="混合类型检查改进"><a href="#混合类型检查改进" class="headerlink" title="混合类型检查改进"></a>混合类型检查改进</h4><p>联合运算符使用<code>|</code>线来代替了旧版本中<code>Union[]</code>方法，使得程序更加简洁。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">oldFunc</span>(<span class="params">para: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>]</span>) -&gt; <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>]:</span><br><span class="line">    <span class="keyword">return</span> para ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">oldFunc(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newFunc</span>(<span class="params">para: <span class="built_in">int</span> | <span class="built_in">float</span></span>) -&gt; <span class="built_in">int</span> | <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> para + <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="built_in">print</span>(newFunc(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(newFunc(<span class="number">10.10</span>))</span><br></pre></td></tr></table></figure><h4 id="类型别名更改"><a href="#类型别名更改" class="headerlink" title="类型别名更改"></a>类型别名更改</h4><p>之前是直接通过不同类型的赋值操作来赋予类型新的名字，在新版本中通过<code>TypeAlias</code>来规定了类型名字的替换。这样操作的优势在于能够让程序开发人员和Python编辑器更加清楚的知道newname是一个变量名还是一个类型的别名，提升程序开发的可靠性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line">oldname = <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">oldFunc</span>(<span class="params">param: oldname</span>) -&gt; oldname:</span><br><span class="line">    <span class="keyword">return</span> param + param</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">oldFunc(<span class="string">&#x27;oldFunc:百战程序员&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeAlias</span><br><span class="line"></span><br><span class="line">newstr: TypeAlias = <span class="built_in">str</span></span><br><span class="line">newint: TypeAlias = <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newFunc</span>(<span class="params">num: newint, msg: newstr</span>) -&gt; newstr:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(num) + msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(newFunc(<span class="number">100</span>, <span class="string">&quot;类型别名更改&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">100类型别名更改</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="二进制表示频率为1的数量统计"><a href="#二进制表示频率为1的数量统计" class="headerlink" title="二进制表示频率为1的数量统计"></a>二进制表示频率为1的数量统计</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401191852931.png" alt="image-20240113170649031"></p><p>通过调用<code>bit_count</code>函数来统计二进制中数字“1”的个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># bit_count()函数</span></span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line">value = <span class="number">5</span></span><br><span class="line"><span class="comment"># bin()转化为二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(value))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;出现1的次数：&quot;</span>, <span class="built_in">bin</span>(value).count(<span class="string">&quot;1&quot;</span>))</span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;出现1的次数：&quot;</span>, value.bit_count())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0b101</span></span><br><span class="line"><span class="string">出现1的次数： 2</span></span><br><span class="line"><span class="string">出现1的次数： 2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="字典的三个方法新增mapping属性"><a href="#字典的三个方法新增mapping属性" class="headerlink" title="字典的三个方法新增mapping属性"></a>字典的三个方法新增mapping属性</h3><p>在Python 3.10中，针对于字典的三个方法，<code>items</code>，<code>keys</code>，和<code>values</code>都增加了一个<code>mapping</code>属性，通过下面的程序可以发现，对三个方法调用<code>mapping</code>属性后都会<strong>返回原字典数据</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">mydict = &#123;<span class="string">&quot;一&quot;</span>: <span class="number">1</span>, <span class="string">&quot;二&quot;</span>: <span class="number">2</span>, <span class="string">&quot;三&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典数据：&quot;</span>, mydict)</span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line"><span class="built_in">print</span>(mydict.keys(), mydict.values(), mydict.items())</span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line">keys = mydict.keys()</span><br><span class="line">values = mydict.values()</span><br><span class="line">items = mydict.items()</span><br><span class="line"><span class="built_in">print</span>(keys.mapping, values.mapping, items.mapping)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字典数据： &#123;&#x27;一&#x27;: 1, &#x27;二&#x27;: 2, &#x27;三&#x27;: 3&#125;</span></span><br><span class="line"><span class="string">dict_keys([&#x27;一&#x27;, &#x27;二&#x27;, &#x27;三&#x27;]) dict_values([1, 2, 3]) dict_items([(&#x27;一&#x27;, 1), (&#x27;二&#x27;, 2), (&#x27;三&#x27;, 3)])</span></span><br><span class="line"><span class="string">&#123;&#x27;一&#x27;: 1, &#x27;二&#x27;: 2, &#x27;三&#x27;: 3&#125; &#123;&#x27;一&#x27;: 1, &#x27;二&#x27;: 2, &#x27;三&#x27;: 3&#125; &#123;&#x27;一&#x27;: 1, &#x27;二&#x27;: 2, &#x27;三&#x27;: 3&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="函数zip-新增strict参数"><a href="#函数zip-新增strict参数" class="headerlink" title="函数zip()新增strict参数"></a>函数zip()新增strict参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line">keys = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;sex&quot;</span>]</span><br><span class="line">values = [<span class="string">&quot;jhon&quot;</span>, <span class="number">23</span>, <span class="string">&quot;man&quot;</span>, <span class="number">12</span>, <span class="string">&quot;nan&quot;</span>]</span><br><span class="line">data_dict = <span class="built_in">dict</span>(<span class="built_in">zip</span>(keys, values))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;创建的字典对象：&quot;</span>, data_dict)</span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line">data_dict2 = <span class="built_in">dict</span>(<span class="built_in">zip</span>(keys, values, strict=<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;新版本添加strict属性：&quot;</span>, data_dict2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建的字典对象： &#123;&#x27;name&#x27;: &#x27;jhon&#x27;, &#x27;age&#x27;: 23, &#x27;sex&#x27;: &#x27;man&#x27;&#125;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;D:\2022百战Python\函数式编程和核心特性\python新特性\函数zip()新增strict参数.py&quot;, line 8, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    data_dict2 = dict(zip(keys,values,strict=True))</span></span><br><span class="line"><span class="string">ValueError: zip() argument 2 is longer than argument 1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>对于<code>zip</code>函数加了<code>strict</code>参数，顾名思义<code>strict</code>参数就是要严格的通过参数长度的匹配原则，在以上代码中，<code>keys</code>和<code>values</code>列表的长度并不一致。旧版本的<code>zip</code>函数会根据长度最短的参数创建字典。新版本的<code>zip</code>函数中，当设定<code>strict</code>参数为<code>True</code>，则要求<code>zip</code>的输入数必须要长度一致，否则报错。</p><h3 id="dataclass"><a href="#dataclass" class="headerlink" title="dataclass"></a>dataclass</h3><h4 id="使用类"><a href="#使用类" class="headerlink" title="使用类"></a>使用类</h4><p>为了支持数据修改, 默认值, 比较等功能。更加好一些的方法是：使用自定义类来实现数据类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name:<span class="built_in">str</span>,number:<span class="built_in">int</span>,postion:<span class="built_in">str</span>,age:<span class="built_in">int</span> = <span class="number">18</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.name = name</span><br><span class="line">        self.number = number</span><br><span class="line">        self.postion = postion</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;Player: <span class="subst">&#123;self.name&#125;</span> <span class="subst">&#123;self.number&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, __o: <span class="built_in">object</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> self.age == __o.age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__gt__</span>(<span class="params">self,__o: <span class="built_in">object</span></span>) -&gt;<span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> self.age &gt; __o.age</span><br><span class="line">    </span><br><span class="line">p1 = Player(<span class="string">&#x27;SXT&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;PG&#x27;</span>,<span class="number">26</span>)</span><br><span class="line"><span class="built_in">print</span>(p1)</span><br></pre></td></tr></table></figure><blockquote><p><strong>缺点</strong></p><ul><li><code>__init__</code> 方法中重复代码 (示例中每个属性都需要写3遍)</li><li>需要自己实现 <code>__repr__</code> 方法, 和比较方法 <code>__eq__</code> , <code>__gt__</code> 等</li></ul></blockquote><h4 id="使用dataclass"><a href="#使用dataclass" class="headerlink" title="使用dataclass"></a>使用dataclass</h4><p><code>dataclass</code> 可以认为是提供了一个简写 <code>__init__</code> 方法的语法糖，类型注释是必填项 (不限制数据类型时, 添加<code>typing.Any</code>为类型注释)，默认值的传递方式和 <code>__init__</code> 方法的参数格式一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    postion: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例对象</span></span><br><span class="line">p = Player(<span class="string">&quot;jhon&quot;</span>, <span class="string">&quot;beijing&quot;</span>, <span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Player(name=&#x27;jhon&#x27;, postion=&#x27;beijing&#x27;, age=21)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>优点</strong></p><p>可以使用 dataclasses 模块中的其它方法，比如：</p><ul><li>转为字典 asdict</li><li>转为元组 astuple</li></ul></blockquote><h5 id="dataclass装饰器上的参数"><a href="#dataclass装饰器上的参数" class="headerlink" title="dataclass装饰器上的参数"></a>dataclass装饰器上的参数</h5><p><code>dataclass</code> 装饰器将根据类属性生成数据类和数据类需要的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataclasses.dataclass(*, init = <span class="literal">True</span>, <span class="built_in">repr</span> = <span class="literal">True</span>, eq = <span class="literal">True</span>, order = <span class="literal">False</span>, unsafe_hash = <span class="literal">False</span>, frozen = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401191852442.png" alt="image-20240113173132614"></p><h5 id="dataclass成员变量额外设置"><a href="#dataclass成员变量额外设置" class="headerlink" title="dataclass成员变量额外设置"></a>dataclass成员变量额外设置</h5><p>可以通过 <code>dataclass.filed</code> 方法设置变量的额外功能</p><ol><li><p><code>defualt</code>:设置默认值</p><p>值为具体的值</p></li><li><p><code>default_factory</code>:设置默认值</p><p>值为类型名，程序会根据类型名创建一个空的对象，若使用<code>defualt</code>设置需要手动创建空对象</p></li><li><p><code>repr</code>设置生成的 <code>__repr__</code> 方法中是否加入此属性，默认是<code>True</code></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass, field</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    postion: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    sex: <span class="built_in">str</span> = field(default=<span class="string">&quot;man&quot;</span>, <span class="built_in">repr</span>=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># msg: str = field(default=&quot;&quot;)</span></span><br><span class="line">    <span class="comment"># 创建空对象</span></span><br><span class="line">    msg: <span class="built_in">str</span> = field(default_factory=<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例对象</span></span><br><span class="line">p = Player(<span class="string">&quot;jhon&quot;</span>, <span class="string">&quot;beijing&quot;</span>, <span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Player(name=&#x27;jhon&#x27;, postion=&#x27;beijing&#x27;, age=21, msg=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="dataclass建立类变量"><a href="#dataclass建立类变量" class="headerlink" title="dataclass建立类变量"></a>dataclass建立类变量</h5><p>在类中建立变量，默认是成员变量，若需要设置类变量，需要设置类型为： <code>ClassVar</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass, field</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> ClassVar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    postion: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    sex: <span class="built_in">str</span> = field(default=<span class="string">&quot;man&quot;</span>, <span class="built_in">repr</span>=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># msg: str = field(default=&quot;&quot;)</span></span><br><span class="line">    <span class="comment"># 创建空对象</span></span><br><span class="line">    msg: <span class="built_in">str</span> = field(default_factory=<span class="built_in">str</span>)</span><br><span class="line">    <span class="comment"># 类变量（类属性）</span></span><br><span class="line">    country: ClassVar[<span class="built_in">str</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例对象</span></span><br><span class="line">p = Player(<span class="string">&quot;jhon&quot;</span>, <span class="string">&quot;beijing&quot;</span>, <span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">Player.country = <span class="string">&quot;China&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类属性：&quot;</span>, Player.country)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Player(name=&#x27;jhon&#x27;, postion=&#x27;beijing&#x27;, age=21, msg=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">类属性： China</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="字典合并"><a href="#字典合并" class="headerlink" title="字典合并"></a>字典合并</h3><p>字典添加两个新的运算符：<code>|</code>和<code>|=</code>。<code>|</code>运算符用于合并字典。<code>|=</code>用于更新字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line">dict1.update(dict2)</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line"><span class="comment"># |合并字典</span></span><br><span class="line">dict3 = dict1 | dict2</span><br><span class="line"><span class="built_in">print</span>(dict3)</span><br><span class="line"><span class="comment"># |= 更新字典</span></span><br><span class="line">dict1 |= dict2  <span class="comment"># 等价于 dict1 = dict1 | dict2</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;2&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;2&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;2&#x27;&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="match语法"><a href="#match语法" class="headerlink" title="match语法"></a>match语法</h3><p><code>match...case</code>结构化模式匹配，可以匹配字典、类以及其他更复杂的结构。<code>match...case</code>的匹配模式匹配于Java或C++中的switch的使用很相似。语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> subject:</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_1&gt;:</span><br><span class="line">        &lt;action_1&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_2&gt;:</span><br><span class="line">        &lt;action_2&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_3&gt;:</span><br><span class="line">        &lt;action_3&gt;</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        &lt;action_wildcard&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">status = <span class="number">404</span></span><br><span class="line"><span class="keyword">match</span> status:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;访问成功&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;访问的资源不存在&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;服务器错误&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;以上都没有匹配成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">p1 = (<span class="string">&quot;superman&quot;</span>, <span class="number">23</span>, <span class="string">&quot;man&quot;</span>)</span><br><span class="line">p2 = (<span class="string">&quot;joker&quot;</span>, <span class="number">21</span>, <span class="string">&quot;woman&quot;</span>)</span><br><span class="line">p3 = (<span class="string">&quot;parker&quot;</span>, <span class="number">20</span>, <span class="string">&quot;male&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_test</span>(<span class="params">person</span>):</span><br><span class="line">    <span class="keyword">match</span> person:</span><br><span class="line">        <span class="keyword">case</span> (name, _, <span class="string">&quot;man&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> is man&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> (name, _, <span class="string">&quot;woman&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> is woman&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> (name, age, sex):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;age&#125;</span>, <span class="subst">&#123;sex&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">func_test(p1)</span><br><span class="line">func_test(p2)</span><br><span class="line">func_test(p3)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">访问的资源不存在</span></span><br><span class="line"><span class="string">superman is man</span></span><br><span class="line"><span class="string">joker is woman</span></span><br><span class="line"><span class="string">parker,20,male</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>上述代码中，<code>case</code>函数通过匹配元组，如果元组第三个参数是<code>female</code>，匹配到第一个<code>case</code>。如果元组第三个参数是<code>male</code>，匹配到第二个<code>case</code>。如果前面两个都不匹配，则输出最后的默认结果。</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h3><ol><li>类也是对象（属于元类的对象）</li><li>使用动态创建类：</li></ol><p>语法：<code>type(类名，由父类名称组成的元组（可以为空），包含属性的字典（名称和值）)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">元类：</span></span><br><span class="line"><span class="string">    什么是元类？</span></span><br><span class="line"><span class="string">        动态创建类</span></span><br><span class="line"><span class="string">        元类-&gt;类</span></span><br><span class="line"><span class="string">        类-&gt;对象</span></span><br><span class="line"><span class="string">    用途？</span></span><br><span class="line"><span class="string">        可以动态创建类</span></span><br><span class="line"><span class="string">    如何使用？</span></span><br><span class="line"><span class="string">    type()</span></span><br><span class="line"><span class="string">        1.查看目标对象的数据类型</span></span><br><span class="line"><span class="string">        2.可以使用type，动态创建类</span></span><br><span class="line"><span class="string">        语法:</span></span><br><span class="line"><span class="string">            类 = type(类名,(父类...),&#123;属性，方法&#125;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 创建一个默认父类，不包含任何属性方法的类</span></span><br><span class="line">Person = <span class="built_in">type</span>(<span class="string">&#x27;Person&#x27;</span>, (), &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否可以用Person创建对象</span></span><br><span class="line">p1 = Person()</span><br><span class="line"><span class="built_in">print</span>(p1)</span><br><span class="line"><span class="comment"># mro()   父类是object</span></span><br><span class="line"><span class="built_in">print</span>(Person.mro())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传统静态方式创建类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, color</span>):</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;动物需要吃东西&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;狗狗趴着睡觉&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用type动态创建一个类，父类就是Animal</span></span><br><span class="line">Dog = <span class="built_in">type</span>(<span class="string">&#x27;Dog&#x27;</span>, (Animal,), &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;sleep&#x27;</span>: sleep&#125;)</span><br><span class="line">dog = Dog(<span class="string">&#x27;Yellow&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dog.age)</span><br><span class="line">dog.sleep()</span><br><span class="line"><span class="comment"># 是否继承了父类中的特性</span></span><br><span class="line"><span class="comment"># 父类中的属性</span></span><br><span class="line"><span class="built_in">print</span>(dog.color)</span><br><span class="line"><span class="comment"># 是否继承了父类的方法</span></span><br><span class="line">dog.eat()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Dog.__name__)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;__main__.Person object at 0x00000183883FFFD0&gt;</span></span><br><span class="line"><span class="string">[&lt;class &#x27;__main__.Person&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">狗狗趴着睡觉</span></span><br><span class="line"><span class="string">Yellow</span></span><br><span class="line"><span class="string">动物需要吃东西</span></span><br><span class="line"><span class="string">Dog</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="类装饰器-1"><a href="#类装饰器-1" class="headerlink" title="类装饰器"></a>类装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">类装饰器：</span></span><br><span class="line"><span class="string">    在不修改函数源代码的前提下，增加新的功能</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AAA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        <span class="comment"># print(&quot;我是AAA.init()&quot;)</span></span><br><span class="line">        self.__func = func</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 报错：TypeError: &#x27;AAA&#x27; object is not callable</span></span><br><span class="line">    <span class="comment"># 要实现call方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在这里可以实现新增任意功能&quot;</span>)</span><br><span class="line">        self.addFunc()</span><br><span class="line">        self.__func()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addFunc</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户权限验证&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志系统处理&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@AAA</span></span><br><span class="line"><span class="comment"># TypeError: __init__() takes 1 positional argument but 2 were given</span></span><br><span class="line"><span class="comment"># @AAA等价于test1 = AAA(test1)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是功能1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test1()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在这里可以实现新增任意功能</span></span><br><span class="line"><span class="string">用户权限验证</span></span><br><span class="line"><span class="string">日志系统处理</span></span><br><span class="line"><span class="string">我是功能1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">对象池</span></span><br><span class="line"><span class="string">    1.数值类型</span></span><br><span class="line"><span class="string">        小整数池</span></span><br><span class="line"><span class="string">            小整数：  [-5,256]</span></span><br><span class="line"><span class="string">                程序开始时，一次性加载到内存</span></span><br><span class="line"><span class="string">                LEGB（局部变量，闭包中的变量，全局变量，内建变量）</span></span><br><span class="line"><span class="string">                全局都是同一个</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                id()：</span></span><br><span class="line"><span class="string">                is:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        大整数池</span></span><br><span class="line"><span class="string">            每创建一个不是小整数范围内的变量，都会被自动存储到大整数池中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    2.字符串</span></span><br><span class="line"><span class="string">        intern机制</span></span><br><span class="line"><span class="string">        每个单词(字符串)，不夹杂空格或者其他符号，默认开启intern机制，共享内存，靠引用计数决定是否销毁</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="小整数池"><a href="#小整数池" class="headerlink" title="小整数池"></a>小整数池</h4><ul><li>系统默认创建好的，等着你使用。</li><li>概述：<br>整数在程序中的使用非常广泛，Python为了优化速度，使用了小整数对象池， 避免为整数频繁申请和销毁内存空间。Python 对小整数的定义是 <code>[-5, 256]</code> 这些整数对象是提前建立好的，不会被垃圾回收。在一个 Python 的程序中，无论这个整数处于LEGB（局部变量，闭包，全局，内建模块）中的哪个位置，所有位于这个范围内的整数使用的都是同一个对象。</li></ul><h4 id="大整数池"><a href="#大整数池" class="headerlink" title="大整数池"></a>大整数池</h4><p>默认创建出来，池内为空的，创建一个就会往池中存储一个</p><h4 id="intern机制"><a href="#intern机制" class="headerlink" title="intern机制"></a>intern机制</h4><p>每个单词(字符串)，不夹杂空格或者其他符号，默认开启intern机制，共享内存，靠引用计数决定是否销毁</p><h3 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>现在的高级语言如Java，C#等，都采用了垃圾收集机制，而不再是C，C++里用户自己管理维护内存的方式。自己管理内存极其自由，可以任意申请内存，但如同一把双刃剑，为大量内存泄露，悬空指针等bug埋下隐患。Python里也同Java一样采用了垃圾收集机制，不过不一样的是：Python采用的是引用计数机制为主，标记-清除和分代收集两种机制为辅的策略。</p><h4 id="引用计数机制"><a href="#引用计数机制" class="headerlink" title="引用计数机制"></a>引用计数机制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">垃圾回收机制：GC机制</span></span><br><span class="line"><span class="string">    Python：</span></span><br><span class="line"><span class="string">    1.引用计数机制为主</span></span><br><span class="line"><span class="string">        如何获取一个对象的引用计数？</span></span><br><span class="line"><span class="string">            sys.getrefcount(a)</span></span><br><span class="line"><span class="string">            刚创建对象引用计数为2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        a.增加引用计数操作</span></span><br><span class="line"><span class="string">            1、如果有新的对象对象使用该对象，+1</span></span><br><span class="line"><span class="string">            2、装进列表 +1</span></span><br><span class="line"><span class="string">            3、作为函数参数</span></span><br><span class="line"><span class="string">        b.减少引用计数操作</span></span><br><span class="line"><span class="string">            1.如果有新的对象对象使用该对象，新对象不在使用-1</span></span><br><span class="line"><span class="string">            2.从列表中移除-1</span></span><br><span class="line"><span class="string">            3.函数调用结束</span></span><br><span class="line"><span class="string">            4.del 显示销毁</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    2.隔代回收为辅助</span></span><br><span class="line"><span class="string">        循环引用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span>():</span><br><span class="line">    <span class="comment"># 创建对象开辟内存时调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开辟内存空间&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(AA, cls).__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建对象at:%s&quot;</span> % <span class="built_in">hex</span>(<span class="built_in">id</span>(self)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对象被系统回之前，会调用该方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s say bye bye&quot;</span> % <span class="built_in">hex</span>(<span class="built_in">id</span>(self)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">aaa</span>):</span><br><span class="line">    <span class="built_in">print</span>(aaa)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = AA()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line">b = a</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line">list1 = [a]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line">test1(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line">list1.remove(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------程序结束-----------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">开辟内存空间</span></span><br><span class="line"><span class="string">创建对象at:0x1dd4d9dfeb0</span></span><br><span class="line"><span class="string">a的引用计数为:2</span></span><br><span class="line"><span class="string">a的引用计数为:3</span></span><br><span class="line"><span class="string">a的引用计数为:4</span></span><br><span class="line"><span class="string">&lt;__main__.AA object at 0x000001DD4D9DFEB0&gt;</span></span><br><span class="line"><span class="string">a的引用计数为:6</span></span><br><span class="line"><span class="string">a的引用计数为:4</span></span><br><span class="line"><span class="string">**************************************************</span></span><br><span class="line"><span class="string">a的引用计数为:3</span></span><br><span class="line"><span class="string">a的引用计数为:2</span></span><br><span class="line"><span class="string">0x1dd4d9dfeb0 say bye bye</span></span><br><span class="line"><span class="string">----------------程序结束-----------------</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>引用计数机制的优点：</p><ul><li>简单</li><li>实时性：一旦没有引用，内存就直接释放了。不用像其他机制等到特定时机。<br>实时性还带来一个好处：处理回收内存的时间分摊到了平时。</li></ul><p>引用计数机制的缺点：</p><ul><li>维护引用计数消耗资源</li><li>循环引用的问题无法解决（DOS窗口，查看内存tasklist，或者内存表，任务管理器）</li></ul><h4 id="隔代回收机制"><a href="#隔代回收机制" class="headerlink" title="隔代回收机制"></a>隔代回收机制</h4><p>分代回收是用来解决交叉引用(循环引用)，并增加数据回收的效率。 </p><p>原理：通过对象存在的时间不同，采用不同的算法来回收垃圾。 形象的比喻，三个链表，零代链表上的对象（新创建的对象都加入到零代链表），引用数都是一，每增加一个指针，引用加一，随后Python会检测列表中的互相引用的对象，根据规则减掉其引用计数。GC算法对链表一的引用减一，引用为0的，清除，不为0的到链表二，链表二也执行GC算法，链表三一样。存在时间越长的数据，越是有用的数据。</p><h5 id="隔代回收触发时间？（GC阈值）"><a href="#隔代回收触发时间？（GC阈值）" class="headerlink" title="隔代回收触发时间？（GC阈值）"></a>隔代回收触发时间？（GC阈值）</h5><p>随着你的程序运行，Python解释器保持对新创建的对象，以及因为引用计数为零而被释放掉的对象的追踪。从理论上说，这两个值应该保持一致，因为程序新建的每个对象都应该最终被释放掉。当然，事实并非如此。因为循环引用的原因，从而被分配对象的计数值与被释放对象的计数值之间的差异在逐渐增长。一旦这个差异累计超过某个阈值，则Python的收集机制就启动了，并且触发上边所说到的零代算法，释放“浮动的垃圾”，并且将剩下的对象移动到一代列表。随着时间的推移，程序所使用的对象逐渐从零代列表移动到一代列表。而Python对于一代列表中对象的处理遵循同样的方法，一旦被分配计数值与被释放计数值累计到达一定阈值，Python会将剩下的活跃对象移动到二代列表。通过这种方法，你的代码所长期使用的对象，那些你的代码持续访问的活跃对象，会从零代链表转移到一代再转移到二代。</p><p>通过不同的阈值设置，Python可以在不同的时间间隔处理这些对象。</p><p>Python处理零代最为频繁，其次是一代然后才是二代。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">垃圾回收机制：</span></span><br><span class="line"><span class="string">    1.引用计数机制</span></span><br><span class="line"><span class="string">        相互引用，引用计数无法删除类似的对象</span></span><br><span class="line"><span class="string">    2.隔代回收机制</span></span><br><span class="line"><span class="string">        原理：</span></span><br><span class="line"><span class="string">            随着时间的推进，程序冗余对象逐渐增多，达到一定数量（阈值），系统进行回收</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            (0代，1代，2代)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        代码：</span></span><br><span class="line"><span class="string">        import gc</span></span><br><span class="line"><span class="string">        gc.get_count()</span></span><br><span class="line"><span class="string">        gc.get_threshold()   -&gt;(700,10,10)</span></span><br><span class="line"><span class="string">        gc.disable()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;new&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(AA, cls).__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;object:born at %s&quot;</span> % <span class="built_in">hex</span>(<span class="built_in">id</span>(self)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 被系统回收&quot;</span> % <span class="built_in">hex</span>(<span class="built_in">id</span>(self)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = AA()</span><br><span class="line">        b = AA()</span><br><span class="line">        a.v = b</span><br><span class="line">        b.v = a</span><br><span class="line">        <span class="keyword">del</span> a</span><br><span class="line">        <span class="keyword">del</span> b</span><br><span class="line">        <span class="built_in">print</span>(gc.get_threshold())</span><br><span class="line">        <span class="built_in">print</span>(gc.get_count())</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动关闭垃圾回收机制</span></span><br><span class="line"><span class="comment"># gc.disable()</span></span><br><span class="line">gc.set_threshold(<span class="number">200</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">start()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafeb0</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafe80</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(2, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafdc0</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafd90</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(4, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafd00</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafcd0</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(6, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafc40</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafc10</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(8, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafb80</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafb50</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(10, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafac0</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafa90</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(12, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafa00</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acaf9d0</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(14, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acaf940</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acaf910</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(16, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acaf880</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acaf850</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(18, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acaf7c00x2442acafeb0 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafe80 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafdc0 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafd90 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafd00 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafcd0 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafc40 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafc10 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafb80 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafb50 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafac0 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafa90 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafa00 被系统回收</span></span><br><span class="line"><span class="string">0x2442acaf9d0 被系统回收</span></span><br><span class="line"><span class="string">0x2442acaf940 被系统回收</span></span><br><span class="line"><span class="string">0x2442acaf910 被系统回收</span></span><br><span class="line"><span class="string">0x2442acaf880 被系统回收</span></span><br><span class="line"><span class="string">0x2442acaf850 被系统回收</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="查看引用计数"><a href="#查看引用计数" class="headerlink" title="查看引用计数"></a>查看引用计数</h5><h6 id="gc模块的使用"><a href="#gc模块的使用" class="headerlink" title="gc模块的使用"></a>gc模块的使用</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用函数：</span></span><br><span class="line"><span class="comment"># 1、获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表</span></span><br><span class="line">gc.get_count()</span><br><span class="line"><span class="comment"># 2、获取gc模块中自动执行垃圾回收的频率</span></span><br><span class="line">gc.get_threshold()</span><br><span class="line"><span class="comment"># 3、设置自动执行垃圾回收的频率</span></span><br><span class="line">gc.set_threshold(threshold0[,threshold1,threshold2])</span><br><span class="line"><span class="comment"># 4、python3默认开启gc机制，可以使用该方法手动关闭gc机制</span></span><br><span class="line">gc.disable()</span><br><span class="line"><span class="comment"># 5、手动调用垃圾回收机制回收垃圾</span></span><br><span class="line">gc.collect()</span><br></pre></td></tr></table></figure><h6 id="增加引用计数的条件"><a href="#增加引用计数的条件" class="headerlink" title="增加引用计数的条件"></a>增加引用计数的条件</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建对象</span></span><br><span class="line">stu = Student()</span><br><span class="line"><span class="comment"># 2.将对象加入列表</span></span><br><span class="line">list1.append(stu)</span><br><span class="line"><span class="comment"># 3.对象被引用</span></span><br><span class="line">stu2 = stu</span><br><span class="line"><span class="comment"># 4.将对象作为参数，传入某个函数</span></span><br><span class="line">func(stu)</span><br></pre></td></tr></table></figure><h6 id="减少对象引用计数的情况"><a href="#减少对象引用计数的情况" class="headerlink" title="减少对象引用计数的情况"></a>减少对象引用计数的情况</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.对象被显示销毁</span></span><br><span class="line"><span class="keyword">del</span> stu</span><br><span class="line"><span class="comment"># 2.对象名指向新的对象</span></span><br><span class="line">stu = Student()</span><br><span class="line"><span class="comment"># 3.从容器中移除，或者显示销毁列表</span></span><br><span class="line">list1.remove(stu)</span><br><span class="line">list1.pop(stu)</span><br><span class="line"><span class="comment"># 4.局部变量对象，作为函数参数</span></span><br><span class="line"><span class="comment"># 函数结束时，引用计数-1</span></span><br></pre></td></tr></table></figure><h6 id="获取某个对象的引用计数"><a href="#获取某个对象的引用计数" class="headerlink" title="获取某个对象的引用计数"></a>获取某个对象的引用计数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">obj = <span class="string">&#x27;Helloworld&#x27;</span></span><br><span class="line">sys.getrefcount(obj)</span><br><span class="line">list1 = []</span><br><span class="line"><span class="built_in">list</span>.append(obj)</span><br><span class="line">sys.getrefcount(obj)</span><br></pre></td></tr></table></figure><h3 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h3><p>什么叫内建函数：启动python解释器后，默认加载的函数称为内建函数</p><h4 id="如何查看内建函数"><a href="#如何查看内建函数" class="headerlink" title="如何查看内建函数"></a>如何查看内建函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两种方式：</span></span><br><span class="line">a. </span><br><span class="line"><span class="built_in">dir</span>(__builtins__)</span><br><span class="line">b. </span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="built_in">dir</span>(builtins)</span><br></pre></td></tr></table></figure><h4 id="常用内建函数"><a href="#常用内建函数" class="headerlink" title="常用内建函数"></a>常用内建函数</h4><h5 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h5><p>Python <code>range()</code> 函数可创建一个整数列表，一般用在 for 循环中。<br>        语法：<code>range(start, stop[, step])</code></p><p>参数说明：</p><p>start: 计数从 start 开始。默认是从 0 开始。例如<code>range(5)</code>等价于<code>range(0, 5)</code>;</p><p>stop: 计数到 stop 结束，但不包括 stop。例如：<code>range(0, 5)</code> 是<code>[0, 1, 2, 3, 4]</code>没有5</p><p>step：步长，默认为1。例如：<code>range(0, 5)</code> 等价于 <code>range(0, 5, 1)</code></p><p>返回：range</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">range(stop)</span></span><br><span class="line"><span class="string">    默认从0开始，直到stop-1</span></span><br><span class="line"><span class="string">    list1 = list(range(10))</span></span><br><span class="line"><span class="string">print(list1)</span></span><br><span class="line"><span class="string">range(start[,stop,step])</span></span><br><span class="line"><span class="string">    start:表示开始</span></span><br><span class="line"><span class="string">    stop：表示结束(不包括该元素)</span></span><br><span class="line"><span class="string">        负值</span></span><br><span class="line"><span class="string">    step:表示迭代的步长</span></span><br><span class="line"><span class="string">        默认为1</span></span><br><span class="line"><span class="string">        负值，表示递减</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 创建列表的时候</span></span><br><span class="line">list1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">list1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>))</span><br><span class="line">list1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="comment"># 打印[1-10]之间的数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, -<span class="number">1</span>, -<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="built_in">range</span>(<span class="number">10</span>), Iterable))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><p><code>map()</code> 会根据提供的函数对指定序列做映射。</p><p>第一个参数 function 以参数序列中的每一个元素调用 function 函数，</p><p>返回包含每次 function 函数返回值的新列表。</p><p>语法：</p><p><code>map(function, iterable, ...)</code></p><p>参数说明：</p><p>function：函数</p><p>iterable：一个或多个序列</p><p>返回：</p><p>Python 2.x 返回列表。</p><p>Python 3.x 返回迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">map()</span></span><br><span class="line"><span class="string">map(func, *iterables) --&gt; map object</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Make an iterator that computes the function using arguments from</span></span><br><span class="line"><span class="string">    each of the iterables.  Stops when the shortest iterable is exhausted.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable, Iterator</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个迭代器</span></span><br><span class="line"><span class="comment"># it1 = map(func1,list1)</span></span><br><span class="line">it1 = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="number">2</span> * x, list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(it1, Iterator))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it1:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------------------&#x27;</span>)</span><br><span class="line"><span class="comment"># it2 = map(func2,list1,list2)</span></span><br><span class="line">it2 = <span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x + y, list1, list2)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it2:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------------------&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h5><p>filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p><p>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判断，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p><p>语法：</p><p><code>filter(function, iterable)</code></p><p>参数说明：</p><p>function：判断函数。</p><p>iterable：可迭代对象。</p><p>返回：</p><p>返回迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">filter()</span></span><br><span class="line"><span class="string">filter(function or None, iterable) --&gt; filter object</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Return an iterator yielding those items of iterable for which function(item)</span></span><br><span class="line"><span class="string">    is true. If function is None, return the items that are true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">25</span>]</span><br><span class="line"><span class="comment"># 遍历列表中不为0的元素</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># it1 = filter(None,list1)</span></span><br><span class="line"><span class="comment"># for i in it1:</span></span><br><span class="line"><span class="comment">#     print(i,end=&#x27; &#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># it1 = filter(lambda x:x != 0,list1)</span></span><br><span class="line"><span class="comment"># for i in it1:</span></span><br><span class="line"><span class="comment">#     print(i,end=&#x27; &#x27;)</span></span><br><span class="line">it1 = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &gt;= <span class="number">5</span>, list1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it1:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h5><p>3.x后，需要先<code>from functools import reduce</code></p><p><code>reduce()</code> 函数会对参数序列中元素进行累积。函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：</p><p>用传给reduce中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p><p>语法：</p><p><code>reduce(function, iterable[, initializer])</code></p><p>参数说明：</p><p>function：函数，有两个参数</p><p>iterable：可迭代对象</p><p>initializer：可选，初始参数</p><p>返回：</p><p>返回函数计算结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">reduce()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">需要先从functools 引入</span></span><br><span class="line"><span class="string">需求：</span></span><br><span class="line"><span class="string">    有一个存储了5个随机整数的列表，求列表中所有元素的和</span></span><br><span class="line"><span class="string">    1.生成随机列表</span></span><br><span class="line"><span class="string">    2.遍历求和/或者用其他方式求和  reduce()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    rand_num = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    list1.append(rand_num)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">sum1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    sum1 += i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;和为:%g&#x27;</span> % sum1)</span><br><span class="line"></span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x, y: x + y, list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;和为:%g&#x27;</span> % result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h5><p>sorted() 函数对所有可迭代的对象进行排序操作。</p><p>sort 与 sorted 区别：</p><p>sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。</p><p>list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</p><p>语法：</p><p><code>sorted(iterable[, key[, reverse]])</code></p><p>参数说明：</p><p>iterable：可迭代对象。</p><p>key：主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</p><p>reverse：排序规则，reverse = True 降序 ， reverse = False 升序（默认）</p><p>返回：</p><p>返回重新排序的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">list.sort()</span></span><br><span class="line"><span class="string">无返回值，对源数据进行排序</span></span><br><span class="line"><span class="string">sorted()</span></span><br><span class="line"><span class="string">有返回值，返回排序备份</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sort(iterable,key=None,reverse=False)</span></span><br><span class="line"><span class="string">Return a new list containing all items from the iterable in ascending order.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A custom key function can be supplied to customize the sort order, and the</span></span><br><span class="line"><span class="string">    reverse flag can be set to request the result in descending order.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">29</span>, <span class="number">3</span>]</span><br><span class="line">list2 = <span class="built_in">sorted</span>(list1)</span><br><span class="line">list3 = <span class="built_in">sorted</span>(list1, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"><span class="comment"># 正数从小到大，负数从大到小</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">0</span>, -<span class="number">9</span>, <span class="number">29</span>, <span class="number">3</span>, -<span class="number">10</span>, -<span class="number">2</span>, -<span class="number">5</span>]</span><br><span class="line">list2 = <span class="built_in">sorted</span>(list1, key=<span class="keyword">lambda</span> x: (x &lt; <span class="number">0</span>, <span class="built_in">abs</span>(x)))</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表中自定义对象的排序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">&#x27;aaa&#x27;</span>, <span class="number">19</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;ccc&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">stu3 = Student(<span class="string">&#x27;bbb&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">list1 = [stu1, stu2, stu3]</span><br><span class="line"><span class="keyword">for</span> stu <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(stu.name, stu.age)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------&quot;</span>)</span><br><span class="line"><span class="comment"># list2 = sorted(list1,key=lambda x:x.age)</span></span><br><span class="line">list2 = <span class="built_in">sorted</span>(list1, key=<span class="keyword">lambda</span> x: x.name)</span><br><span class="line"><span class="keyword">for</span> stu <span class="keyword">in</span> list2:</span><br><span class="line">    <span class="built_in">print</span>(stu.name, stu.age)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="偏函数-1"><a href="#偏函数-1" class="headerlink" title="偏函数"></a>偏函数</h3><p>概念：python 中提供一种用于对函数固定属性的函数</p><p>定义:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">int3 = partial(<span class="built_in">int</span>,base=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(int3(<span class="string">&#x27;1010&#x27;</span>))</span><br></pre></td></tr></table></figure><p>作用：把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">偏函数的使用：</span></span><br><span class="line"><span class="string">partial</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&#x27;1010&#x27;</span></span><br><span class="line">result = <span class="built_in">int</span>(str1, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新定义一个函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int2</span>(<span class="params">n, base=<span class="number">2</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(n, base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># result = int(str1,2)</span></span><br><span class="line">result = int2(str1)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用偏函数完成类似的功能</span></span><br><span class="line">int3 = partial(<span class="built_in">int</span>, base=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># print(type(int3))</span></span><br><span class="line"><span class="built_in">print</span>(int3(str1))</span><br></pre></td></tr></table></figure><h3 id="wraps"><a href="#wraps" class="headerlink" title="wraps"></a>wraps</h3><p>作用：<code>functools.wraps</code> 可以将原函数对象的指定属性复制给包装函数对象, 默认有 <code>__module__</code>、<code>__name__</code>、<code>__doc__</code>,或者通过参数选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">wraps函数的使用</span></span><br><span class="line"><span class="string">from functools import wraps</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">作用：</span></span><br><span class="line"><span class="string">functools.wraps 可以将原函数对象的指定属性</span></span><br><span class="line"><span class="string">复制给包装函数对象, 默认有 module、name、doc,或者通过参数选择</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">with_logging</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s was calling&quot;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> with_logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="comment"># test = log(test)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;求x*x的值&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test.__name__)</span><br><span class="line"><span class="built_in">print</span>(test.__doc__)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">with_logging</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">函数式编程和Python新核心特性</summary>
    
    
    
    <category term="Python" scheme="https://huaiyuechusan.gitee.io/categories/Python/"/>
    
    
    <category term="学习技术" scheme="https://huaiyuechusan.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Python" scheme="https://huaiyuechusan.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 网络与并发编程</title>
    <link href="https://huaiyuechusan.gitee.io/archives/984515cf.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/984515cf.html</id>
    <published>2024-01-06T12:16:00.000Z</published>
    <updated>2024-10-17T11:57:47.423Z</updated>
    
    <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="Python-网络与并发编程"><a href="#Python-网络与并发编程" class="headerlink" title="Python 网络与并发编程"></a>Python 网络与并发编程</h1><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><h3 id="并发编程介绍"><a href="#并发编程介绍" class="headerlink" title="并发编程介绍"></a>并发编程介绍</h3><h4 id="串行-并行-并发的区别"><a href="#串行-并行-并发的区别" class="headerlink" title="串行-并行-并发的区别"></a>串行-并行-并发的区别</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345214.png" alt="image-20231218211529713"></p><ol><li>串行(serial)):一个CPU上，按顺序完成多个任务</li><li>并行(parallelism):指的是任务数小于等于cpu核数，即任务真的是一起执行的</li><li>并发(concurrency):一个CPU采用时间片管理方式，交替的处理多个任务。一般是是任务数多余cu核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换任务的速度相当快，看上去一起执行而已)</li></ol><h4 id="进程-线程-协程的区别"><a href="#进程-线程-协程的区别" class="headerlink" title="进程-线程-协程的区别"></a>进程-线程-协程的区别</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345216.png" alt="image-20231218212430086"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345217.png" alt="image-20231218212524691"></p><ol><li><strong>线程是程序执行的最小单位</strong>，而==进程==是操作系统==分配资源==的最小单位；</li><li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；</li><li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间（包括代码段、数据集、堆等)及一些进程级的资源（如打开文件和信号），某进程内的线程在其它进程不可见；</li><li>调度和切换：线程上下文切换比进程上下文切换要快得多。</li></ol><blockquote><p>进程(Process):拥有自己独立的堆和栈，既不共享堆，也不共享栈，进程由操作系统调度；进程切换需要的资源很最大，效率低</p><p>线程(Thread):拥有自己独立的栈和共享的堆，共享堆，不共享栈，标准线程由操作系统调度；线程切换需要的资源一般，效率一般（当然了在不考虑GL的情况下）</p><p>协程(coroutine):拥有自己独立的栈和共享的堆，共享堆，不共享栈，协程由程序员在协程的代码里显示调度；协程切换任务资源很小，效率高</p></blockquote><p><strong>进程是什么？</strong></p><p><strong>进程（Process）</strong>是一个具有一定独立功能的程序关于某个数据集合的一次运行活动</p><p><strong>线程是什么？</strong></p><p><strong>线程（Thread）</strong>是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</p><p>==<strong>并发编程解决方案：</strong>==</p><p>多任务的实现有3种方式：</p><ol><li>多进程模式</li><li>多线程模式</li><li>多进程+多线程模式</li></ol><p><strong>协程是什么？</strong></p><p>协程，Coroutines，也叫作纤程(Fiber)，是一种在线程中，比线程更加轻量级的存在，由程序员自己写程序来管理。</p><p>当出现IO阻塞时，CPU一直等待IO返回，处于空转状态。这时候用协程，可以执行其他任务。当IO返回结果后，再回来处理数据。充</p><p>分利用了IO等待的时间，提高了效率。</p><h4 id="同步和异步通信机制的区别"><a href="#同步和异步通信机制的区别" class="headerlink" title="同步和异步通信机制的区别"></a>同步和异步通信机制的区别</h4><p>同步和异步强调的是消息通信机制 (synchronous communication/asynchronous communication)。</p><p>同步(synchronous)：A调用B，等待B返回结果后，A继续执行</p><p>异步(asynchronous )：A调用B，A继续执行，不等待B返回结果；B有结果了，通知A，A再做处理。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345218.png" alt="image-20231219163757077"></p><blockquote><p>同步方式通信：</p><p>1 高淇买一本书《Python实战笔记》。</p><p>2 书店老板说：等三分钟啊，我帮你查查。</p><p>3 高淇等一小时</p><p>4 老板说，找到书了，发给你</p><p>异步方式通信：</p><p>1 高淇买一本电子书《Python实战笔记》。</p><p>2 书店老板说：我查一下，有结果了告诉你。</p><p>3 高淇刷抖音一小时</p><p>4 老板说，找到书了，发给你</p></blockquote><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345219.png" alt="image-20231219172145633"></p><p>线程(Thread)特点：</p><p>1 <strong>线程（Thread）</strong>是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位</p><p>2 线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；</p><p>3 一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；</p><p>4 拥有自己独立的栈和共享的堆，共享堆，不共享栈，标准线程由操作系统调度；</p><p>5 调度和切换：线程上下文切换比进程上下文切换要快得多。</p><h4 id="线程的创建方式"><a href="#线程的创建方式" class="headerlink" title="线程的创建方式"></a>线程的创建方式</h4><p>Python的标准库提供了两个模块： <code>_thread</code> 和 <code>threading</code> ， <code>_thread</code> 是低级模块， <code>threading</code> 是高级模块，对 <code>_thread</code> 进行了封装。绝大多数情况下，我们只需要使用 <code>threading</code> 这个高级模块。</p><p>线程的创建可以通过分为两种方式：</p><ol><li>方法包装</li><li>类包装</li></ol><p>线程的执行统一通过 <code>start()</code> 方法</p><h5 id="方法包装创建线程"><a href="#方法包装创建线程" class="headerlink" title="方法包装创建线程"></a>方法包装创建线程</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">方法包装建立线程</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;name&#125;</span>, start&quot;</span>)  <span class="comment"># format</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线程：<span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;name&#125;</span>, end&quot;</span>)  <span class="comment"># format</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，start&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建线程</span></span><br><span class="line">    t1 = Thread(target=function1, args=(<span class="string">&quot;t1&quot;</span>,))</span><br><span class="line">    t2 = Thread(target=function1, args=(<span class="string">&quot;t2&quot;</span>,))</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">运行结果可能会出现换行问题，是因为多个线程抢夺控制台输出的IO流。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">主线程，start</span></span><br><span class="line"><span class="string">线程t1, start</span></span><br><span class="line"><span class="string">线程：t1, 0</span></span><br><span class="line"><span class="string">线程t2, start</span></span><br><span class="line"><span class="string">线程：t2, 0</span></span><br><span class="line"><span class="string">主线程，end</span></span><br><span class="line"><span class="string">线程：t2, 1线程：t1, 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">线程：t2, 2</span></span><br><span class="line"><span class="string">线程：t1, 2</span></span><br><span class="line"><span class="string">线程t1, end线程t2, end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>    </span><br></pre></td></tr></table></figure><h5 id="类包装创建线程"><a href="#类包装创建线程" class="headerlink" title="类包装创建线程"></a>类包装创建线程</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">类包装创建线程</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写run方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;self.name&#125;</span>, start&quot;</span>)  <span class="comment"># format</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;线程：<span class="subst">&#123;self.name&#125;</span>, <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;self.name&#125;</span>, end&quot;</span>)  <span class="comment"># format</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，start&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建线程</span></span><br><span class="line">    t1 = MyThread(<span class="string">&quot;t1&quot;</span>)</span><br><span class="line">    t2 = MyThread(<span class="string">&quot;t2&quot;</span>)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，end&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="join-和守护线程"><a href="#join-和守护线程" class="headerlink" title="join()和守护线程"></a>join()和守护线程</h4><p><strong>join()</strong></p><p>之前的代码，主线程不会等待子线程结束。</p><p>如果需要==等待子线程结束后，再结束主线程==，可使用join()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;name&#125;</span>, start&quot;</span>)  <span class="comment"># format</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线程：<span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;name&#125;</span>, end&quot;</span>)  <span class="comment"># format</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，start&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建线程</span></span><br><span class="line">    t1 = Thread(target=function1, args=(<span class="string">&quot;t1&quot;</span>,))</span><br><span class="line">    t2 = Thread(target=function1, args=(<span class="string">&quot;t2&quot;</span>,))</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="comment"># 主线程会等待t1,t2结束后，再往下执行</span></span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，end&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>守护线程</strong></p><p>在行为上还有一种叫守护线程，主要的特征是它的生命周期。==主线程死亡，它也就随之死亡==。在python中，线程通过 <code>setDaemon(True|False)</code>来设置是否为守护线程。</p><p>守护线程的作用：</p><p>守护线程作用是为其他线程提供便利服务，守护线程最典型的应用就是 GC (垃圾收集器)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写run方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;self.name&#125;</span>, start&quot;</span>)  <span class="comment"># format</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;线程：<span class="subst">&#123;self.name&#125;</span>, <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;self.name&#125;</span>, end&quot;</span>)  <span class="comment"># format</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，start&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建线程(类的方式)</span></span><br><span class="line">    t1 = MyThread(<span class="string">&quot;t1&quot;</span>)</span><br><span class="line">    <span class="comment"># t1设置为守护线程</span></span><br><span class="line">    t1.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    t1.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，end&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="全局解释器锁GIL问题"><a href="#全局解释器锁GIL问题" class="headerlink" title="全局解释器锁GIL问题"></a>全局解释器锁GIL问题</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345220.png" alt="image-20231220203021256"></p><p>在python中，无论你有多少核，在Cpython解释器中永远都是假象。无论你是4核，8核，还是16核…….不好意思，==同一时间执行的线程只有一个线程==，它就是这个样子的。这个是python的一个开发时候，设计的一个缺陷，所以说python中的线程是“含有水分的线程”。</p><p><strong>Python GIL(Global Interpreter Lock)</strong></p><p>Python代码的执行由Python 虚拟机(也叫解释器主循环，CPython版本)来控制，Python 在设计之初就考虑到要在解释器的主循环中，同时只有一个线程在执行，即在任意时刻，只有一个线程在解释器中运行。对Python 虚拟机的访问由全局解释器锁（GIL）来控制，正是这个锁能保证同一时刻只有一个线程在运行。</p><blockquote><p>:warning:GIL并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念,同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行,就没有GIL的问题。然而因为CPython是大部分环境下默认的Python执行环境。所以在很多人的概念里CPython就是Python，也就想当然的把GIL归结为Python语言的缺陷。</p></blockquote><h4 id="线程同步和互斥锁资源冲突案例"><a href="#线程同步和互斥锁资源冲突案例" class="headerlink" title="线程同步和互斥锁资源冲突案例"></a>线程同步和互斥锁资源冲突案例</h4><p><strong>线程同步的概念</strong></p><p>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象。 这时候，我们就需要用到“线程同步”。 线程同步其实就是一种==等待机制==，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面的线程使用完毕后，下一个线程再使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">未使用线程同步和互斥锁的情况</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, money, name</span>):</span><br><span class="line">        self.money = money</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟提款操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Drawing</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, drawingNum, account</span>):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.drawingNum = drawingNum</span><br><span class="line">        self.account = account</span><br><span class="line">        self.expenseTotal = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.account.money &lt; self.drawingNum:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        sleep(<span class="number">1</span>)  <span class="comment"># 判断完后阻塞</span></span><br><span class="line">        self.account.money -= self.drawingNum</span><br><span class="line">        self.expenseTotal += self.drawingNum</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;账户<span class="subst">&#123;self.account.name&#125;</span>，余额<span class="subst">&#123;self.account.money&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;账户<span class="subst">&#123;self.account.name&#125;</span>，总共取了<span class="subst">&#123;self.expenseTotal&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a1 = Account(<span class="number">100</span>, <span class="string">&quot;gaoqi&quot;</span>)</span><br><span class="line">    draw1 = Drawing(<span class="number">80</span>, a1)  <span class="comment"># 定义取钱线程对象；</span></span><br><span class="line">    draw2 = Drawing(<span class="number">80</span>, a1)  <span class="comment"># 定义取钱线程对象；</span></span><br><span class="line">    draw1.start()  <span class="comment"># 你取钱</span></span><br><span class="line">    draw2.start()  <span class="comment"># 你老婆取钱</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">账户gaoqi，余额20账户gaoqi，余额-60</span></span><br><span class="line"><span class="string">账户gaoqi，总共取了80</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">账户gaoqi，总共取了80</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="互斥锁典型案例"><a href="#互斥锁典型案例" class="headerlink" title="互斥锁典型案例"></a>互斥锁典型案例</h4><p>我们可以通过“<strong>锁机制</strong>”来实现线程同步问题，锁机制有如下几个要点：</p><ol><li>必须使用同一个锁对象</li><li>互斥锁的作用就是保证同一时刻只能有一个线程去操作共享数据，保证共享数据不会出现错误问题</li><li>使用互斥锁的好处确保某段关键代码只能由一个线程从头到尾完整地去执行</li><li>使用互斥锁会影响代码的执行效率</li><li>同时持有多把锁，容易出现死锁的情况</li></ol><p><strong>互斥锁是什么？</strong></p><p>互斥锁: 对共享数据进行锁定，保证同一时刻只能有一个线程去操作。</p><p>注意: 互斥锁是<strong>==多个线程一起去抢==</strong>，抢到锁的线程先执行，没有抢到锁的线程需要等待，等互斥锁使用完释放后，其它等待的线程再去抢这个锁</p><p><code>threading</code> 模块中定义了 <code>Lock</code> 变量，这个变量本质上是一个函数，通过调用这个函数可以获取一把互斥锁。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">互斥锁典型案例</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, money, name</span>):</span><br><span class="line">        self.money = money</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟提款操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Drawing</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, drawingNum, account</span>):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.drawingNum = drawingNum</span><br><span class="line">        self.account = account</span><br><span class="line">        self.expenseTotal = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        lock1.acquire()</span><br><span class="line">        <span class="keyword">if</span> self.account.money &lt; self.drawingNum:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;账户余额不足&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        sleep(<span class="number">1</span>)  <span class="comment"># 判断完后阻塞</span></span><br><span class="line">        self.account.money -= self.drawingNum</span><br><span class="line">        self.expenseTotal += self.drawingNum</span><br><span class="line">        lock1.release()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;账户<span class="subst">&#123;self.account.name&#125;</span>，余额<span class="subst">&#123;self.account.money&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;账户<span class="subst">&#123;self.account.name&#125;</span>，总共取了<span class="subst">&#123;self.expenseTotal&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a1 = Account(<span class="number">100</span>, <span class="string">&quot;gaoqi&quot;</span>)</span><br><span class="line">    lock1 = Lock()</span><br><span class="line">    draw1 = Drawing(<span class="number">80</span>, a1)  <span class="comment"># 定义取钱线程对象；</span></span><br><span class="line">    draw2 = Drawing(<span class="number">80</span>, a1)  <span class="comment"># 定义取钱线程对象；</span></span><br><span class="line">    draw1.start()  <span class="comment"># 你取钱</span></span><br><span class="line">    draw2.start()  <span class="comment"># 你老婆取钱</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="死锁问题和解决方案"><a href="#死锁问题和解决方案" class="headerlink" title="死锁问题和解决方案"></a>死锁问题和解决方案</h4><p><strong>死锁</strong></p><p>在多线程程序中，死锁问题很大一部分是由于一个线程同时获取多个锁造成的。</p><p><strong>死锁的解决方法</strong></p><p>死锁是由于“同步块需要同时持有多个锁造成”的，要解决这个问题，思路很简单，就是：同一个代码块，不要同时持有两个对象锁。</p><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p>互斥锁使用后，一个资源同时只有一个线程访问。如果某个资源，我们同时想让N个(定数值）线程访问？这时候，可以使用信号量。信号量控制同时访问资源的数量。信号量和锁相似，锁同一时间只允许一个对象(进程)通过，信号量同一时间允许多个对象(进程)通过。</p><p><strong>应用场景</strong></p><ol><li>在读写文件的时候，一般只能只有一个线程在写，而读可以有多个线程同时进行，如果需要限制同时读文件的线程个数，这时候就可以用到信号量了（如果用互斥锁，就是限制同一时刻只能有一个线程读取文件）。</li><li>在做爬虫抓取数据时。</li></ol><p><strong>底层原理</strong></p><p>信号量底层就是一个内置的计数器。每当资源获取时（调用acquire）计数器-1，资源释放时（调用release）计数器+1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">信号量的使用案例</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Semaphore</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一个房间一次只允许两个人通过</span></span><br><span class="line"><span class="string">若不使用信号量，会造成所有人都进入这个房子</span></span><br><span class="line"><span class="string">若只允许一人通过可以用锁-Lock()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name, se</span>):</span><br><span class="line">    se.acquire()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>进入房间&quot;</span>)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;***<span class="subst">&#123;name&#125;</span>走出房间&quot;</span>)</span><br><span class="line">    se.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    se = Semaphore(<span class="number">2</span>)  <span class="comment"># 信号量对象</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        t = Thread(target=home, args=(<span class="string">f&quot;tom<span class="subst">&#123;i&#125;</span>&quot;</span>, se))</span><br><span class="line">        t.start()</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tom0进入房间</span></span><br><span class="line"><span class="string">tom1进入房间</span></span><br><span class="line"><span class="string">***tom0走出房间***tom1走出房间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tom3进入房间</span></span><br><span class="line"><span class="string">tom2进入房间</span></span><br><span class="line"><span class="string">***tom3走出房间***tom2走出房间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tom4进入房间</span></span><br><span class="line"><span class="string">tom5进入房间</span></span><br><span class="line"><span class="string">***tom5走出房间</span></span><br><span class="line"><span class="string">***tom4走出房间</span></span><br><span class="line"><span class="string">tom6进入房间</span></span><br><span class="line"><span class="string">***tom6走出房间</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="事件Event对象"><a href="#事件Event对象" class="headerlink" title="事件Event对象"></a>事件Event对象</h4><p>事件Event主要用于唤醒正在阻塞等待状态的线程。</p><blockquote><p><strong>原理</strong></p><p>Event 对象包含一个可由线程设置的信号标志，它允许线程等待某些事件的发生。在初始情况下，event 对象中的信号标志被设置假。如果有线程等待一个 event 对象，而这个 event 对象的标志为假，那么这个线程将会被一直阻塞直至该标志为真。一个线程如果将一个 event 对象的信号标志设置为真，它将唤醒所有等待个 event 对象的线程。如果一个线程等待一个已经被设置为真的 event 对象，那么它将忽略这个事件，继续执行</p></blockquote><p><code>Event()</code> 可以创建一个事件管理标志，该标志（event）默认为False，event对象主要有四种方法可以调用：</p><div class="table-container"><table><thead><tr><th><strong>方法名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>event.wait(timeout=None)</code></td><td>调用该方法的线程会被阻塞，如果设置了timeout参数，超时后，线程会停止阻塞继续执行</td></tr><tr><td><code>event.set()</code></td><td>将event的标志设置为True，调用wait方法的所有线程将被唤醒</td></tr><tr><td><code>event.clear()</code></td><td>将event的标志设置为False，调用wait方法的所有线程将被阻塞</td></tr><tr><td><code>event.is_set()</code></td><td>判断event的标志是否为True</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">小伙伴们，围着吃火锅，当菜上齐了，请客的主人说：开吃！</span></span><br><span class="line"><span class="string">于是小伙伴一起动筷子，这种场景如何实现</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chihuoguo</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="comment"># 等待事件，进入等待阻塞状态</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>已经启动&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;小伙伴<span class="subst">&#123;name&#125;</span>已经进入就餐状态！&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    event.wait()</span><br><span class="line">    <span class="comment"># 收到事件后进入运行状态</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>收到通知了.&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;小伙伴<span class="subst">&#123;name&#125;</span>开始吃咯！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    <span class="comment"># 创建新线程</span></span><br><span class="line">    thread1 = threading.Thread(target=chihuoguo, args=(<span class="string">&quot;tom&quot;</span>,))</span><br><span class="line">    thread2 = threading.Thread(target=chihuoguo, args=(<span class="string">&quot;cherry&quot;</span>,))</span><br><span class="line">    <span class="comment"># 开启线程</span></span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 发送事件通知</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----&gt;&gt;&gt;主线程通知小伙伴开吃咯！&#x27;</span>)</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tom已经启动</span></span><br><span class="line"><span class="string">小伙伴tom已经进入就餐状态！</span></span><br><span class="line"><span class="string">cherry已经启动</span></span><br><span class="line"><span class="string">小伙伴cherry已经进入就餐状态！</span></span><br><span class="line"><span class="string">----&gt;&gt;&gt;主线程通知小伙伴开吃咯！</span></span><br><span class="line"><span class="string">tom收到通知了.</span></span><br><span class="line"><span class="string">小伙伴tom开始吃咯！</span></span><br><span class="line"><span class="string">cherry收到通知了.</span></span><br><span class="line"><span class="string">小伙伴cherry开始吃咯！</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="生产者-消费者模式"><a href="#生产者-消费者模式" class="headerlink" title="生产者-消费者模式"></a>生产者-消费者模式</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345221.png" alt="image-20231221222417350"></p><p>多线程环境下，我们经常需要<strong>多个线程的并发和协作</strong>。这个时候，就需要了解一个重要的多线程并发协作模型“生产者/消费者模式”。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345222.png" alt="image-20231221222800905"></p><p><strong>什么是生产者？</strong></p><p>生产者指的是负责生产数据的模块（这里模块可能是：方法、对象、线程、进程）。</p><p><strong>什么是消费者？</strong></p><p>消费者指的是负责处理数据的模块（这里模块可能是：方法、对象、线程、进程）</p><p><strong>什么是缓冲区？</strong></p><p>消费者不能直接使用生产者的数据，它们之间有个“缓冲区”。生产者将生产好的数据放入“缓冲区”，消费者从“缓冲区”拿要处理的数据。</p><blockquote><p>缓冲区是实现并发的核心，缓冲区的设置有3个好处：</p><ol><li><p><strong>实现线程的并发协作</strong></p><p>有了缓冲区以后，生产者线程只需要往缓冲区里面放置数据，而不需要管消费者消费的情况；同样，消费者只需要从缓冲区拿数据处理即可，也不需要管生产者生产的情况。 这样，就从逻辑上实现了“生产者线程”和“消费者线程”的分离。</p></li><li><p><strong>解耦了生产者和消费者</strong></p><p>生产者不需要和消费者直接打交道。</p></li><li><p><strong>解决忙闲不均，提高效率</strong></p></li></ol><p>生产者生产数据慢时，缓冲区仍有数据，不影响消费者消费；消费者处理数据慢时，生产者仍然可以继续往缓冲区里面放置数据。</p></blockquote><p><strong>缓冲区和queue对象</strong></p><p>从一个线程向另一个线程发送数据最安全的方式可能就是使用queue 库中的队列了。创建一个被多个线程共享的 Queue 对象，这些线程通过使用 <code>put()</code> 和 <code>get()</code> 操作来向队列中添加或者删除元素。Queue 对象已经包含了必要的锁，所以你可以通过它在多个线程间多安全地共享数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>():</span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> queue.qsize() &lt; <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;生产<span class="subst">&#123;num&#125;</span>号，大馒头&quot;</span>)</span><br><span class="line">            queue.put(<span class="string">f&quot;大馒头: <span class="subst">&#123;num&#125;</span>号&quot;</span>)</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;馒头框满了，等待来人消费&quot;</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;获取馒头：<span class="subst">&#123;queue.get()&#125;</span>&quot;</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    queue = Queue()</span><br><span class="line">    t1 = Thread(target=producer)</span><br><span class="line">    t2 = Thread(target=consumer)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">生产1号，大馒头</span></span><br><span class="line"><span class="string">获取馒头：大馒头: 1号</span></span><br><span class="line"><span class="string">生产2号，大馒头</span></span><br><span class="line"><span class="string">获取馒头：大馒头: 2号</span></span><br><span class="line"><span class="string">生产3号，大馒头</span></span><br><span class="line"><span class="string">获取馒头：大馒头: 3号</span></span><br><span class="line"><span class="string">生产4号，大馒头</span></span><br><span class="line"><span class="string">获取馒头：大馒头: 4号</span></span><br><span class="line"><span class="string">生产5号，大馒头</span></span><br><span class="line"><span class="string">获取馒头：大馒头: 5号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345223.png" alt="image-20231221223750713"></p><p>进程(Process)：==拥有自己独立的堆和栈，既不共享堆，也不共享栈==，进程由操作系统调度；进程切换需要的资源很最大，效率低。</p><p>对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程，就启动了一个记事本进程，打开两个记事本就启动了两个记事本进程，打开一个Word就启动了一个Word进程。</p><p><strong>进程的优缺点</strong></p><p>进程的<strong>优点</strong>：</p><ol><li>可以使用计算机多核，进行任务的并行执行，提高执行效率</li><li>运行不受其他进程影响，创建方便</li><li>空间独立，数据安全</li></ol><p>进程的<strong>缺点</strong>：</p><p>进程的创建和删除消耗的系统资源较多</p><p><strong>进程的创建方式(方法模式)</strong></p><p>Python的标准库提供了个模块： <code>multiprocessing</code></p><p>进程的创建可以通过分为两种方式：</p><ol><li>方法包装</li><li>类包装</li></ol><p>创建进程后，使用start()启动进程</p><h4 id="方法模式创建进程"><a href="#方法模式创建进程" class="headerlink" title="方法模式创建进程"></a>方法模式创建进程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 方法包装-多进程实现</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前进程ID：&quot;</span>, os.getpid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;父进程ID：&quot;</span>, os.getppid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Process:<span class="subst">&#123;name&#125;</span> start&quot;</span>)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Process:<span class="subst">&#123;name&#125;</span> end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是一个关于windows上多进程实现的bug。</span></span><br><span class="line"><span class="string">在windows上，子进程会自动import启动它的这个文件，而在import的时候是会自动执行这些语句的。</span></span><br><span class="line"><span class="string">如果不加__main__限制的话，就会无限递归创建子进程，进而报错。</span></span><br><span class="line"><span class="string">于是import的时候使用 __name__ ==&quot;__main__&quot; 保护起来就可以了。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前进程ID：&quot;</span>, os.getpid())</span><br><span class="line">    <span class="comment"># 创建进程</span></span><br><span class="line">    p1 = Process(target=func1, args=(<span class="string">&#x27;p1&#x27;</span>,))</span><br><span class="line">    p2 = Process(target=func1, args=(<span class="string">&#x27;p2&#x27;</span>,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">当前进程ID： 8132</span></span><br><span class="line"><span class="string">当前进程ID： 2100</span></span><br><span class="line"><span class="string">当前进程ID： 4468</span></span><br><span class="line"><span class="string">父进程ID： 8132</span></span><br><span class="line"><span class="string">Process:p1 start</span></span><br><span class="line"><span class="string">父进程ID： 8132</span></span><br><span class="line"><span class="string">Process:p2 start</span></span><br><span class="line"><span class="string">Process:p1 end</span></span><br><span class="line"><span class="string">Process:p2 end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="windows-多进程的一个bug"><a href="#windows-多进程的一个bug" class="headerlink" title="windows:多进程的一个bug"></a>windows:多进程的一个bug</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这是一个关于windows上多进程实现的bug。</span><br><span class="line">在windows上，子进程会自动import启动它的这个文件，而在import的时候是会自动执行这些语句的。</span><br><span class="line">如果不加__main__限制的话，就会无限递归创建子进程，进而报错。</span><br><span class="line">于是import的时候使用 __name__ ==&quot;__main__&quot; 保护起来就可以了。</span><br></pre></td></tr></table></figure><h4 id="类模式创建进程"><a href="#类模式创建进程" class="headerlink" title="类模式创建进程"></a>类模式创建进程</h4><p>和使用Thread 类创建子线程的方式非常类似，使用 Process 类创建实例化对象，其本质是调用该类的构造方法创建新进程。Process类的构造方法格式如下：</p><p><code>def __init__(self,group=None,target=None,name=None,args=(),kwargs=&#123;&#125;)</code></p><p>其中，各个参数的含义为：</p><p><code>group</code> ：该参数未进行实现，不需要传参；</p><p><code>target</code> ：为新建进程指定执行任务，也就是指定一个函数；</p><p><code>name</code> ：为新建进程设置名称；</p><p><code>args</code> ：为 target 参数指定的参数传递非关键字参数；</p><p><code>kwargs</code> ：为 target 参数指定的参数传递关键字参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyProcess</span>(<span class="title class_ inherited__">Process</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        Process.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;process:<span class="subst">&#123;self.name&#125;</span>,start&quot;</span>)</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;process:<span class="subst">&#123;self.name&#125;</span>,end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建进程</span></span><br><span class="line">    p1 = MyProcess(<span class="string">&quot;p1&quot;</span>)</span><br><span class="line">    p1.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Queue实现进程通信"><a href="#Queue实现进程通信" class="headerlink" title="Queue实现进程通信"></a>Queue实现进程通信</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345224.png" alt="image-20231230153859622"></p><p>前面讲解了使用 <code>Queue</code> 模块中的 <code>Queue</code> 类实现==线程==间通信，但要实现进程间通信，需要使用 <code>multiprocessing</code> 模块中的 <code>Queue</code> 类。简单的理解 <code>Queue</code> 实现==进程==间通信的方式，就是使用了操作系统给开辟的一个队列空间，各个进程可以把数据放到该队列中，当然也可以从队列中把自己需要的信息取走。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyProcess</span>(<span class="title class_ inherited__">Process</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, mq</span>):</span><br><span class="line">        Process.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.mq = mq</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;process:<span class="subst">&#123;self.name&#125;</span>,start&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;get data:<span class="subst">&#123;self.mq.get()&#125;</span>&quot;</span>)</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;process:<span class="subst">&#123;self.name&#125;</span>,end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mq = Queue()</span><br><span class="line">    mq.put(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    mq.put(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    mq.put(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进程列表</span></span><br><span class="line">    p_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        p = MyProcess(<span class="string">f&quot;p<span class="subst">&#123;i&#125;</span>&quot;</span>, mq)</span><br><span class="line">        p_list.append(p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> p_list:</span><br><span class="line">        p.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Pipe管道实现进程通信"><a href="#Pipe管道实现进程通信" class="headerlink" title="Pipe管道实现进程通信"></a>Pipe管道实现进程通信</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345225.png" alt="image-20231230213855878"></p><p>Pipe 直译过来的意思是“管”或“管道”，和实际生活中的管（管道）是非常类似的。</p><p>Pipe方法返回<code>（conn1， conn2）</code>代表一个管道的两个端。</p><blockquote><p>Pipe方法有duplex参数，如果duplex参数为True（默认值），那么这个参数是全双工模式，也就是说<code>conn1</code>和<code>conn2</code>均可收发。若duplex为False，<code>conn1</code>只负责接收消息，<code>conn2</code>只负责发送消息。send和recv方法分别是发送和接受消息的方法。例如，在全双工模式下，可以调用<code>conn1.send</code>发送消息，<code>conn1.recv</code>接收消息。如果没有消息可接收，recv方法会一直阻塞。如果管道已经被关闭，那么recv方法会抛出EOFError。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">conn1</span>):</span><br><span class="line">    sub_info = <span class="string">&quot;Hello!&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;进程1--<span class="subst">&#123;multiprocessing.current_process().pid&#125;</span>发送数据：<span class="subst">&#123;sub_info&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    conn1.send(sub_info)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;来自进程2:<span class="subst">&#123;conn1.recv()&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">conn2</span>):</span><br><span class="line">    sub_info = <span class="string">&quot;你好!&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;进程2--<span class="subst">&#123;multiprocessing.current_process().pid&#125;</span>发送数据：<span class="subst">&#123;sub_info&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    conn2.send(sub_info)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;来自进程1:<span class="subst">&#123;conn2.recv()&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建管道</span></span><br><span class="line">    conn1, conn2 = multiprocessing.Pipe()</span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    process1 = multiprocessing.Process(target=func1, args=(conn1,))</span><br><span class="line">    process2 = multiprocessing.Process(target=func2, args=(conn2,))</span><br><span class="line">    <span class="comment"># 启动子进程</span></span><br><span class="line">    process1.start()</span><br><span class="line">    process2.start()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">进程1--22424发送数据：Hello!</span></span><br><span class="line"><span class="string">进程2--17168发送数据：你好!</span></span><br><span class="line"><span class="string">来自进程1:Hello!来自进程2:你好!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Manager管理器实现进程通信"><a href="#Manager管理器实现进程通信" class="headerlink" title="Manager管理器实现进程通信"></a>Manager管理器实现进程通信</h4><p>管理器提供了一种创建共享数据的方法，从而可以在不同进程中共享。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, current_process</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name, m_list, m_dict</span>):</span><br><span class="line">    m_dict[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;尚学堂&#x27;</span></span><br><span class="line">    m_list.append(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> Manager() <span class="keyword">as</span> mgr:</span><br><span class="line">        m_list = mgr.<span class="built_in">list</span>()</span><br><span class="line">        m_dict = mgr.<span class="built_in">dict</span>()</span><br><span class="line">        m_list.append(<span class="string">&#x27;Hello!!&#x27;</span>)</span><br><span class="line">        <span class="comment"># 两个进程不能直接互相使用对象，需要互相传递</span></span><br><span class="line">        p1 = Process(target=func, args=(<span class="string">&#x27;p1&#x27;</span>, m_list, m_dict))</span><br><span class="line">        p1.start()</span><br><span class="line">        p1.join()  <span class="comment"># 等p1进程结束，主进程继续执行</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;主进程：<span class="subst">&#123;m_list&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;主进程：<span class="subst">&#123;m_dict&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="进程池-Pool-管理进程的两种典型案例"><a href="#进程池-Pool-管理进程的两种典型案例" class="headerlink" title="进程池(Pool)管理进程的两种典型案例"></a>进程池(Pool)管理进程的两种典型案例</h4><p>Python提供了更好的管理多个进程的方式，就是使用进程池。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345226.png" alt="image-20231230215358880"></p><p>进程池可以提供指定数量的进程给用户使用，即当有新的请求提交到进程池中时，如果池未满，则会创建一个新的进程用来执行该请求；反之，如果池中的进程数已经达到规定最大值，那么该请求就会等待，只要池中有进程空闲下来，该请求就能得到执行。</p><p>使用进程池的优点：</p><ol><li>提高效率，节省开辟进程和开辟内存空间的时间及销毁进程的时间</li><li>节省内存空间</li></ol><div class="table-container"><table><thead><tr><th><strong>类/方法</strong></th><th><strong>功能</strong></th><th><strong>参数</strong></th></tr></thead><tbody><tr><td><code>Pool(processes)</code></td><td>创建进程池对象</td><td>processes表示进程池中有多少进程</td></tr><tr><td><code>pool.apply_async(func,args,kwds)</code></td><td>异步执行；将事件放入到进程池队列</td><td>func 事件函数 args 以元组形式给func传参kwds 以字典形式给func传参 返回值：返回一个代表进程池事件的对象，通过返回值的get方法可以得到事件函数的返回值</td></tr><tr><td><code>pool.apply(func,args,kwds)</code></td><td>同步执行；将事件放入到进程池队列</td><td>func 事件函数 args 以元组形式给func传参kwds 以字典形式给func传参</td></tr><tr><td><code>pool.close()</code></td><td>关闭进程池</td><td></td></tr><tr><td><code>pool.join()</code></td><td>回收进程池</td><td></td></tr><tr><td><code>pool.map(func,iter)</code></td><td>类似于python的map函数，将要做的事件放入进程</td><td>func 要执行的函数 iter 迭代对象</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;打印当前进程的id:<span class="subst">&#123;os.getpid()&#125;</span>,<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = Pool(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt1&quot;</span>,), callback=func2)</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt2&quot;</span>,), callback=func2)</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt3&quot;</span>,), callback=func2)</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt4&quot;</span>,))</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt5&quot;</span>,))</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt6&quot;</span>,))</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt7&quot;</span>,))</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt8&quot;</span>,))</span><br><span class="line"></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">打印当前进程的id:26676,sxt1</span></span><br><span class="line"><span class="string">打印当前进程的id:15944,sxt2</span></span><br><span class="line"><span class="string">打印当前进程的id:1352,sxt3</span></span><br><span class="line"><span class="string">打印当前进程的id:27176,sxt4</span></span><br><span class="line"><span class="string">打印当前进程的id:22592,sxt5</span></span><br><span class="line"><span class="string">打印当前进程的id:26676,sxt6</span></span><br><span class="line"><span class="string">sxt1</span></span><br><span class="line"><span class="string">打印当前进程的id:22592,sxt7</span></span><br><span class="line"><span class="string">打印当前进程的id:27176,sxt8</span></span><br><span class="line"><span class="string">sxt2</span></span><br><span class="line"><span class="string">sxt3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>使用with管理进程池</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;打印当前进程的id:<span class="subst">&#123;os.getpid()&#125;</span>,<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> Pool(<span class="number">5</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        args = pool.<span class="built_in">map</span>(func1, (<span class="string">&quot;sxt1,&quot;</span>, <span class="string">&quot;sxt2,&quot;</span>, <span class="string">&quot;sxt3,&quot;</span>, <span class="string">&quot;sxt4,&quot;</span>, <span class="string">&quot;sxt5,&quot;</span>, <span class="string">&quot;sxt6,&quot;</span>, <span class="string">&quot;sxt7,&quot;</span>, <span class="string">&quot;sxt8,&quot;</span>))</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> args:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345227.png" alt="image-20231230221221571"></p><h4 id="核心概念面试重点"><a href="#核心概念面试重点" class="headerlink" title="核心概念面试重点"></a>核心概念面试重点</h4><p>协程，Coroutines，也叫作纤程(Fiber)协程，全称是“协同程序”，用来实现任务协作。是一种在线程中，比线程更加轻量级的存在，由<strong>程序员自己写程序来管理</strong>。</p><p>当出现IO阻塞时，CPU一直等待IO返回，处于空转状态。这时候用协程，可以执行其他任务。当IO返回结果后，再回来处理数据。充分利用了IO等待的时间，提高了效率。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345228.png" alt="image-20231230231457305"></p><p><strong>协程的核心(控制流的让出和恢复)</strong></p><ol><li>每个协程有自己的执行栈，可以保存自己的执行现场</li><li>可以由用户程序按需创建协程（比如：遇到io操作）</li><li>协程“主动让出（yield）”执行权时候,会保存执行现场(保存中断时的寄存器上下文和栈)，然后切换到其他协程</li><li>协程恢复执行（resume）时，根据之前保存的执行现场恢复到中断前的状态，继续执行，这样就通过协程实现了轻量的由用户态调度的多任务模型</li></ol><p><strong>协程和多线程比较</strong></p><p>比如，有3个任务需要完成，每个任务都在等待I/O操作时阻塞自身。阻塞在I/O操作上所花费的时间已经用灰色框标示出来了。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345229.png" alt="image-20231230231731772"></p><ol><li>在单线程同步模型中，任务按照顺序执行。如果某个任务因为I/O而阻塞，其他所有的任务都必须等待，直到它完成之后它们才能依次执行。</li><li>多线程版本中，这3个任务分别在独立的线程中执行。这些线程由操作系统来管理，在多处理器系统上可以并行处理，或者在单处理器系统上交错执行。这使得当某个线程阻塞在某个资源的同时其他线程得以继续执行。</li><li>协程版本的程序中，3个任务交错执行，但仍然在一个单独的线程控制中。当处理I/O或者其他昂贵的操作时，注册一个回调到事件循环中，然后当I/O操作完成时继续执行。回调描述了该如何处理某个事件。事件循环轮询所有的事件，当事件到来时将它们分配给等待处理事件的回调函数。</li></ol><p><strong>协程的优点</strong></p><ol><li>由于自身带有上下文和栈，无需线程上下文切换的开销,属于程序级别的切换，操作系统完全感知不到，因而更加==轻量级==；</li><li>无需原子操作的锁定及同步的开销</li><li>方便切换控制流，简化编程模型</li><li>单线程内就可以实现并发的效果，最大限度地利用cpu，且可扩展性高，成本低（注：一个CPU支持上万的协程都不是问题。所以很适合用于高并发处理）</li></ol><blockquote><p>asyncio协程是写爬虫比较好的方式。比多线程和多进程都好.</p><p>开辟新的线程和进程是非常耗时的。</p></blockquote><p><strong>协程的缺点</strong></p><ol><li>无法利用多核资源：协程的本质是个单线程,它不能同时将 单个CPU 的多个核用上,协程需要和进程配合才能运行在多CPU上。</li><li>当然我们日常所编写的绝大部分应用都没有这个必要，除非是cpu密集型应用。</li></ol><h4 id="yield方式实现（已淘汰，了解即可）"><a href="#yield方式实现（已淘汰，了解即可）" class="headerlink" title="yield方式实现（已淘汰，了解即可）"></a>yield方式实现（已淘汰，了解即可）</h4><p>Python中的协程经历了很长的一段发展历程。其大概经历了如下三个阶段：</p><ol><li>最初的生成器变形 <code>yield/send</code></li><li>引入 <code>@asyncio.coroutine</code> 和 <code>yield from</code></li><li>Python3.5版本后，引入 <code>async/await</code> 关键字</li></ol><h4 id="asyncio异步IO实现协程-重点）"><a href="#asyncio异步IO实现协程-重点）" class="headerlink" title="asyncio异步IO实现协程(重点）"></a>asyncio异步IO实现协程(重点）</h4><ol><li>正常的函数执行时是不会中断的，所以你要写一个能够中断的函数，就需要加 <code>async</code></li><li><code>async</code> 用来声明一个函数为异步函数，异步函数的特点是能在函数执行过程中挂起，去执行其他异步函数，等到挂起条件（假设挂起条件是 <code>sleep(5)</code> ）消失后，也就是5秒到了再回来执行</li><li><code>await</code> 用来用来声明程序挂起，比如异步程序执行到某一步时需要等待的时间很长，就将此挂起，去执行其他的异步程序。</li><li><code>asyncio</code> 是python3.5之后的协程模块，是python实现并发重要的包，这个包使用<strong>事件循环</strong>驱动实现并发。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():  <span class="comment"># async表示方法是异步的</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;北京：第<span class="subst">&#123;i&#125;</span>次打印啦&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;func1执行完毕&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;上海：第<span class="subst">&#123;k&#125;</span>次打印了&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;func2执行完毕&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    res = <span class="keyword">await</span> asyncio.gather(func1(), func2())</span><br><span class="line">    <span class="comment"># await异步执行func1方法</span></span><br><span class="line">    <span class="comment"># 返回值为函数的返回值列表,本例为[&quot;func1执行完毕&quot;, &quot;func2执行完毕&quot;]</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;耗时<span class="subst">&#123;end_time - start_time&#125;</span>&quot;</span>)  <span class="comment"># 耗时3秒,效率极大提高</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">北京：第0次打印啦</span></span><br><span class="line"><span class="string">上海：第0次打印了</span></span><br><span class="line"><span class="string">北京：第1次打印啦</span></span><br><span class="line"><span class="string">上海：第1次打印了</span></span><br><span class="line"><span class="string">北京：第2次打印啦</span></span><br><span class="line"><span class="string">上海：第2次打印了</span></span><br><span class="line"><span class="string">[&#x27;func1执行完毕&#x27;, &#x27;func2执行完毕&#x27;]</span></span><br><span class="line"><span class="string">耗时3.0080811977386475</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923216.png" alt="image-20231230234542948"></p><p>IP是Internet Protocol Address，即”互联网协议地址”。</p><p>用来标识网络中的一个通信实体的地址。通信实体可以是计算机、路由器等。 比如互联网的每个服务器都要有自己的IP地址，而每个局域网的计算机要通信也要配置IP地址。</p><p>路由器是连接两个或多个网络的网络设备。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923217.png" alt="image-20231230234844602"></p><p>IP地址实际上是一个32位整数（称为IPv4），以字符串表示的IP地址如 <code>192.168.0.1</code> 实际上是把32位整数按8位分组后的数字表示，目的是便于阅读。</p><p>IPv6地址实际上是一个128位整数，它是目前使用的IPv4的升级版，以字符串表示类似于 <code>2001:0db8:85a3:0042:1000:8a2e:0370:7334</code></p><p><strong>公有地址</strong></p><p>公有地址（Public address）由Inter NIC（Internet NetworkInformation Center互联网信息中心）负责。这些IP地址分配给注册并向Inter NIC提出申请的组织机构。通过它直接访问互联网。</p><p><strong>私有地址</strong></p><p>私有地址（Private address）属于非注册地址，专门为组织机构内部使用。</p><p>以下列出留用的内部私有地址</p><p>A类 10.0.0.0—10.255.255.255</p><p>B类 172.16.0.0—172.31.255.255</p><p>C类 192.168.0.0—192.168.255.255</p><h4 id="端口port"><a href="#端口port" class="headerlink" title="端口port"></a>端口port</h4><p>端口号用来识别计算机中进行通信的应用程序。因此，它也被称为程序地址。</p><p>一台计算机上同时可以运行多个程序。传输层协议正是利用这些端口号识别本机中正在进行通信的应用程序，并准确地进行数据传输。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923218.png" alt="image-20231230235342700"></p><p><strong>端口分配</strong></p><p>端口是虚拟的概念，并不是说在主机上真的有若干个端口。通过端口，可以在一个主机上运行多个网络应用程序。 端口的表示是一个16位的二进制整数，对应十进制的0-65535。操作系统中一共提供了0~65535可用端口范围。</p><p>按端口号分类：</p><p><strong>公认端口（Well Known Ports）：</strong>从0到1023，它们紧密绑定（binding）于一些服务。通常这些端口的通讯明确表明了某种服务</p><p>的协议。例如：80端口实际上总是HTTP通讯</p><p><strong>注册端口（Registered Ports）：</strong>从1024到65535。它们松散地绑定于一些服务。也就是说有许多服务绑定于这些端口，这些        端        口同样用于许多其它目的。例如：许多系统处理动态端口从1024左右开始。</p><h4 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h4><p>国际标准化组织(ISO，即International Organization forStandardization)定义了网络通信协议的基本框架，被称为OSI（Open System Interconnect，即开放系统互联）模型。</p><p>OSI模型制定的七层标准模型，分别是：应用层，表示层，会话层，传输层，网络层，数据链路层，物理层。</p><p>OSI七层协议模型如图所示：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923219.png" alt="image-20231230235839168"></p><h4 id="网络通信协议的分层-ISO分层模型"><a href="#网络通信协议的分层-ISO分层模型" class="headerlink" title="网络通信协议的分层-ISO分层模型"></a>网络通信协议的分层-ISO分层模型</h4><p>虽然国际标准化组织制定了这样一个网络通信协议的模型，但是实际上互联网通讯使用最多的网络通信协议是TCP/IP网络通信协议。</p><p>TCP/IP 是一个协议族，也是按照层次划分，共四层：应用层，传输层，互连网络层，网络接口层（物理+数据链路层）。</p><p>把用户应用程序作为最高层，把物理通信线路作为最低层，将其间的协议处理分为若干层，规定每层处理的任务，也规定每层的接口标准。</p><p>ISO模型与TCP/IP模型的对应关系如图所示。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923220.png" alt="image-20231230235947847"></p><h4 id="TCP和UDP传输数据的区别"><a href="#TCP和UDP传输数据的区别" class="headerlink" title="TCP和UDP传输数据的区别"></a>TCP和UDP传输数据的区别</h4><p>TCP 和 UDP 的优缺点无法简单地、绝对地去做比较：</p><p>TCP 用于在传输层有必要实现<strong>可靠</strong>传输的情况；</p><p>UDP 主要用于那些对高速传输和实时性有较高要求的通信或广播通信。</p><p>TCP 和 UDP 应该根据应用的目的按需使用。</p><p><strong>TCP</strong></p><p>TCP（Transmission Control Protocol，传输控制协议）。TCP方式就类似于拨打电话，使用该种方式进行网络通讯时，需要建立专门的虚拟连接，然后进行可靠的数据传输，如果数据发送失败，则客户端会自动重发该数据。</p><p><strong>UDP</strong></p><p>UDP（User Data Protocol，用户数据报协议）</p><p>UDP是一个非连接的协议，传输数据之前源端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。 在发送端，UDP传送数据的速度仅仅是受应用程序生成数据的速度、 计算机的能力和传输带宽的限制； 在接收端，UDP把每个消息段放在队列中，应用程序每次从队列中读一个消息段。</p><p>UDP方式就类似于发送短信，使用这种方式进行网络通讯时，不需要建立专门的虚拟连接，传输也不是很可靠，如果发送失败则客户端无法获得。</p><p>UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p><p><strong>TCP和UDP区别</strong></p><p>这两种传输方式都在实际的网络编程中使用，重要的数据一般使用TCP方式进行数据传输，而大量的非核心数据则可以通过UDP方式进行传递，在一些程序中甚至结合使用这两种方式进行数据传递。由于TCP需要建立专用的虚拟连接以及确认传输是否正确，所以使用TCP方式的速度稍微慢一些，而且传输时产生的数据量要比UDP稍微大一些。</p><div class="table-container"><table><thead><tr><th></th><th><strong>UDP</strong></th><th><strong>TCP</strong></th></tr></thead><tbody><tr><td>是否连接</td><td>无连接</td><td>面向连接</td></tr><tr><td>是否可靠</td><td>不可靠传输，不使用流量控制和拥塞控制</td><td>可靠传输，使用流量控制和拥塞控制</td></tr><tr><td>连接对象个数</td><td>支持一对一，一对多，多对一和多对多交互通信</td><td>只能是一对一通信</td></tr><tr><td>传输方式</td><td>面向报文</td><td>面向字节流</td></tr><tr><td>首部开销</td><td>首部开销小，仅8字节</td><td>首部最小20字节，最大60字节</td></tr><tr><td>适用场景</td><td>适用于实时应用（IP电话、视频会议、直播等）</td><td>适用于要求可靠传输的应用，例如文件传输</td></tr></tbody></table></div><blockquote><p><strong>总结</strong></p><p>TCP是面向连接的，传输数据安全，稳定，效率相对较低。</p><p>UDP是面向无连接的，传输数据不安全，效率较高。</p></blockquote><h4 id="TCP建立连接的三次握手"><a href="#TCP建立连接的三次握手" class="headerlink" title="TCP建立连接的三次握手"></a>TCP建立连接的三次握手</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923222.png" alt="image-20231231164116510"></p><p>TCP是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接。 一个TCP连接必须要经过三次“对话”才能建立起来，其中的过程非常复杂， 只简单的描述下这三次对话的简单过程：</p><p>1）主机A向主机B发出连接请求：“我想给你发数据，可以吗？”，这是第一次对话；</p><p>2）主机B向主机A发送同意连接和要求同步 （同步就是两台主机一个在发送，一个在接收，协调工作）的数据包 ：“可以，你什么时              候发？”，这是第二次对话；</p><p>3）主机A再发出一个数据包确认主机B的要求同步：“我现在就发，你接着吧！”， 这是第三次握手。三次“对话”的目的是使数据包              的发送和接收同步， 经过三次“对话”之后，主机A才向主机B正式发送数据。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923223.png" alt="image-20231231164057483"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923224.png" alt="image-20231231164208963"></p><ol><li>第一步，客户端发送一个包含SYN即同步（Synchronize）标志的TCP报文，SYN同步报文会指明客户端使用的端口以及TCP连接的初始序号。</li><li>第二步，服务器在收到客户端的SYN报文后，将返回一个SYN+ACK的报文，表示客户端的请求被接受，同时TCP序号被加一，ACK即确认（Acknowledgement）</li><li>第三步，客户端也返回一个确认报文ACK给服务器端，同样TCP序列号被加一，到此一个TCP连接完成。然后才开始通信的第二步：数据处理。</li></ol><p>这就是所说的TCP的三次握手（Three-way Handshake）。</p><blockquote><p>为什么TCP协议有三次握手,而UDP协议没有？</p><p>因为三次握手的目的是在client端和server端建立可靠的连接。保证双方发送的数据对方都能接受到，这也是TCP协议的被</p><p>称为可靠的数据传输协议的原因。而UDP就不一样，UDP不提供可靠的传输模式，发送端并不需要得到接收端的状态，因此</p><p>UDP协议就用不着使用三次握手。</p></blockquote><h4 id="TCP断开连接的四次挥手"><a href="#TCP断开连接的四次挥手" class="headerlink" title="TCP断开连接的四次挥手"></a>TCP断开连接的四次挥手</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923225.png" alt="image-20231231164341302"></p><p><strong>TCP建立连接要进行3次握手，而断开连接要进行4次：</strong></p><p>第一次： 当主机A完成数据传输后,将控制位FIN置1，提出停止TCP连接的请求 ；</p><p>第二次： 主机B收到FIN后对其作出响应，确认这一方向上的TCP连接将关闭,将ACK置1；</p><p>第三次： 由B 端再提出反方向的关闭请求,将FIN置1；</p><p>第四次： 主机A对主机B的请求进行确认，将ACK置1，双方向的关闭结束。</p><p>由TCP的三次握手和四次断开可以看出，TCP使用面向连接的通信方式， 大大提高了数据通信的可靠性，使发送数据端和接收端在数据</p><p>正式传输前就有了交互， 为数据正式传输打下了可靠的基础。</p><h4 id="数据包与处理流程"><a href="#数据包与处理流程" class="headerlink" title="数据包与处理流程"></a>数据包与处理流程</h4><p><strong>什么是数据包</strong></p><p>通信传输中的数据单位，一般也称“数据包”。在数据包中包括：</p><p>包、帧、数据包、段、消息。</p><p>网络中传输的数据包由两部分组成：一部分是协议所要用到的首部，另一部分是上一层传过来的数据。首部的结构由协议的具体规</p><p>范详细定义。在数据包的首部，明确标明了协议应该如何读取数据。反过来说，看到首部，也就能够了解该协议必要的信息以及所</p><p>要处理的数据。包首部就像协议的脸。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923226.png" alt="image-20231231164541622"></p><p><strong>数据包处理流程</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923227.png" alt="image-20231231204815467"></p><h3 id="套接字编程实战"><a href="#套接字编程实战" class="headerlink" title="套接字编程实战"></a>套接字编程实战</h3><h4 id="socket编程介绍"><a href="#socket编程介绍" class="headerlink" title="socket编程介绍"></a>socket编程介绍</h4><p>TCP协议和UDP协议是传输层的两种协议。Socket是==传输层供给应用层的编程接口==，所以Socket编程就分为TCP编程和UDP编程两类。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923228.png" alt="image-20231231205201674"></p><p>Socket编程封装了常见的TCP、UDP操作，可以实现非常方便的网络编程。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923229.png" alt="image-20231231205316288"></p><h4 id="socket-函数介绍"><a href="#socket-函数介绍" class="headerlink" title="socket()函数介绍"></a>socket()函数介绍</h4><p>在Python语言标准库中，通过使用socket模块提供的socket对象，可以在计算机网络中建立可以互相通信的服务器与客户端。在服务</p><p>器端需要建立一个socket对象，并等待客户端的连接。客户端使用socket对象与服务器端进行连接，一旦连接成功，客户端和服务器</p><p>端就可以进行通信了。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923230.png" alt="image-20231231205344694"></p><blockquote><p>:warning:上图中，我们可以看出socket通讯中，发送和接收数据，都是通过操作系统控制网卡来进行。因此，我们在使用之后，必须关闭socket。</p></blockquote><p>在Python 中，通常用一个Socket表示“打开了一个网络连接”，语法格式如下：</p><p><code>socket.socket([family[, type[, proto]]])</code></p><p><code>family</code> : 套接字家族可以使 <code>AF_UNIX</code> 或者 <code>AF_INET</code> ；</p><blockquote><p>AF 表示ADDRESS FAMILY 地址族</p><p>AF_INET（又称 PF_INET）是 IPv4 网络协议的套接字类型；而AF_UNIX 则是 Unix 系统本地通信。</p></blockquote><p><code>type</code> : 套接字类型可以根据是面向连接的还是非连接分为 <code>SOCK_STREAM</code>或 <code>SOCK_DGRAM</code> ； </p><p><code>protocol</code> : 一般不填，默认为0。</p><p>Socket主要分为面向连接的Socket和无连接的Socket。</p><p>无连接Socket的主要协议是用户数据报协议，也就是常说的UDP，UDP Socket的名字是 <code>SOCK_DGRAM</code> 。创建套接字UDP/IP套接字，可以调用 <code>socket.socket()</code> 。示例代码如下    ：</p><p><code>udpSocket=socket.socket (AF_INET,SOCK_DGRAM)</code></p><h4 id="socket对象的内置函数和属性"><a href="#socket对象的内置函数和属性" class="headerlink" title="socket对象的内置函数和属性"></a>socket对象的内置函数和属性</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923231.png" alt="image-20240101001210654"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923232.png" alt="image-20240101001227868"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923233.png" alt="image-20240101001236545"></p><h4 id="UDP编程介绍"><a href="#UDP编程介绍" class="headerlink" title="UDP编程介绍"></a>UDP编程介绍</h4><p>UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。</p><p>创建Socket时， <code>SOCK_DGRAM</code> 指定了这个Socket的类型是UDP。绑定端口和TCP一样，但是不需要调用 <code>listen()</code> 方法，而是直接接收来自任何客户端的数据。 <code>recvfrom()</code> 方法返回数据和客户端的地址与端口，这样，服务器收到数据后，直接调用 <code>sendto()</code> 就可以把数据用UDP发给客户端。</p><h4 id="UDP编程的实现"><a href="#UDP编程的实现" class="headerlink" title="UDP编程的实现"></a>UDP编程的实现</h4><p>UDP接收数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最简化的UDP服务端代码</span></span><br><span class="line">s = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建UDP类型的套接字</span></span><br><span class="line">s.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>))  <span class="comment"># 绑定端口，IP可以不写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;等待接收的数据！&quot;</span>)</span><br><span class="line">recv_data = s.recvfrom(<span class="number">1024</span>)  <span class="comment"># 1024表示本次接受的最大字节数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;收到的远程信息：<span class="subst">&#123;recv_data[<span class="number">0</span>].decode(<span class="string">&#x27;gbk&#x27;</span>)&#125;</span>, form<span class="subst">&#123;recv_data[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>UDP发送数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最简化的UDP客户端发送消息代码</span></span><br><span class="line">s = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建UDP类型的套接字</span></span><br><span class="line">addr = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>)</span><br><span class="line">data = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line">s.sendto(data.encode(<span class="string">&quot;gbk&quot;</span>), addr)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h4 id="UDP持续通信"><a href="#UDP持续通信" class="headerlink" title="UDP持续通信"></a>UDP持续通信</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># UDP服务端持续接收消息代码</span></span><br><span class="line">s = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建UDP类型的套接字</span></span><br><span class="line">s.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>))  <span class="comment"># 绑定端口，IP可以不写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;等待接收的数据！&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    recv_data = s.recvfrom(<span class="number">1024</span>)  <span class="comment"># 1024表示本次接受的最大字节数</span></span><br><span class="line">    recv_content = recv_data[<span class="number">0</span>].decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;收到的远程信息：<span class="subst">&#123;recv_content&#125;</span>, form<span class="subst">&#123;recv_data[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> recv_content == <span class="string">&quot;88&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;结束聊天&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># UDP客户端持续发送消息代码</span></span><br><span class="line">s = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建UDP类型的套接字</span></span><br><span class="line">addr = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line">    s.sendto(data.encode(<span class="string">&quot;gbk&quot;</span>), addr)</span><br><span class="line">    <span class="keyword">if</span> data == <span class="string">&quot;88&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;结束聊天&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h4 id="结合多线程实现UDP双向自由通信"><a href="#结合多线程实现UDP双向自由通信" class="headerlink" title="结合多线程实现UDP双向自由通信"></a>结合多线程实现UDP双向自由通信</h4><blockquote><p>UDP 不同于 TCP，不存在请求连接和受理过程，因此在某种意义上无法明确区分服务器端和客户端，只是因为其提供服务而</p><p>称为服务器端。</p></blockquote><p>如下服务端、客户端代码几乎一模一样，注意接收和发送端口对应，即可。</p><p><strong>UDP实现多线程服务端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># UDP实现多线程服务端代码</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        recv_data = s.recvfrom(<span class="number">1024</span>)  <span class="comment"># 1024表示本次接受的最大字节数</span></span><br><span class="line">        recv_content = recv_data[<span class="number">0</span>].decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;收到的远程信息：<span class="subst">&#123;recv_content&#125;</span>, form<span class="subst">&#123;recv_data[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> recv_content == <span class="string">&quot;88&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束聊天&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>():</span><br><span class="line">    addr = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line">        s.sendto(data.encode(<span class="string">&quot;gbk&quot;</span>), addr)</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">&quot;88&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束聊天&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建UDP类型的套接字</span></span><br><span class="line">    s.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>))  <span class="comment"># 绑定端口，IP可以不写</span></span><br><span class="line">    <span class="comment"># 创建两个线程</span></span><br><span class="line">    t1 = Thread(target=recv_data)</span><br><span class="line">    t2 = Thread(target=send_data)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><p><strong>UDP实现多线程客户端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># UDP实现多线程客户端代码</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        recv_data = s.recvfrom(<span class="number">1024</span>)  <span class="comment"># 1024表示本次接受的最大字节数</span></span><br><span class="line">        recv_content = recv_data[<span class="number">0</span>].decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;收到的远程信息：<span class="subst">&#123;recv_content&#125;</span>, form<span class="subst">&#123;recv_data[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> recv_content == <span class="string">&quot;88&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束聊天&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>():</span><br><span class="line">    addr = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line">        s.sendto(data.encode(<span class="string">&quot;gbk&quot;</span>), addr)</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">&quot;88&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束聊天&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建UDP类型的套接字</span></span><br><span class="line">    s.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>))  <span class="comment"># 绑定端口，IP可以不写</span></span><br><span class="line">    <span class="comment"># 创建两个线程</span></span><br><span class="line">    t1 = Thread(target=recv_data)</span><br><span class="line">    t2 = Thread(target=send_data)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><h4 id="TCP编程介绍"><a href="#TCP编程介绍" class="headerlink" title="TCP编程介绍"></a>TCP编程介绍</h4><p>面向连接的Socket使用的协议是TCP协议。TCP的Socket名称是<code>SOCK_STREAM</code> 。创建套接字TCP套接字，可以调用 <code>socket.socket()</code> 。示例代码如下：</p><p><code>tcpSocket=socket.socket(AF_INET,SOCK_STREAM)</code></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923234.png" alt="image-20240106181134943"></p><h4 id="TCP编程的实现"><a href="#TCP编程的实现" class="headerlink" title="TCP编程的实现"></a>TCP编程的实现</h4><p>在Python语言中创建Socket服务端程序，需要使用socket模块中的socket类。创建Socket服务器程序的步骤如下：</p><p>（1） 创建Socket对象。</p><p>（2） 绑定端口号。</p><p>（3） 监听端口号。</p><p>（4） 等待客户端Socket的连接。</p><p>（5） 读取客户端发送过来的数据。</p><p>（6） 向客户端发送数据。</p><p>（7） 关闭客户端Socket连接。</p><p>（8） 关闭服务端Socket连接。</p><p><strong>TCP服务器端接收数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">server_socket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建TCP类型的套接字</span></span><br><span class="line">server_socket.bind(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>)  <span class="comment"># 本机监听8899端口</span></span><br><span class="line">server_socket.listen(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;等待接收连接！&quot;</span>)</span><br><span class="line">client_socket, client_info = server_socket.accept()</span><br><span class="line">recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 最大接收1024字节</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;收到信息，<span class="subst">&#123;recv_data.decode(<span class="string">&#x27;gbk&#x27;</span>)&#125;</span>,来自:<span class="subst">&#123;client_info&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">client_socket.close()</span><br><span class="line">server_socket.close()</span><br></pre></td></tr></table></figure><p><strong>TCP客户端发送数据到服务端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client_socket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建TCP类型的套接字</span></span><br><span class="line">client_socket.connect((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>))</span><br><span class="line">client_socket.send(<span class="string">&quot;hello&quot;</span>.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure><h4 id="TCP双向持续通信"><a href="#TCP双向持续通信" class="headerlink" title="TCP双向持续通信"></a>TCP双向持续通信</h4><p><strong>TCP：双向通信Socket之服务器端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">server_socket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建TCP类型的套接字</span></span><br><span class="line">server_socket.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>))  <span class="comment"># 本机监听8899端口</span></span><br><span class="line">server_socket.listen(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;等待接收连接！&quot;</span>)</span><br><span class="line">client_socket, client_info = server_socket.accept()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一个客户端建立成功&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 最大接收1024字节</span></span><br><span class="line">    recv_content = recv_data.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;客户端说：<span class="subst">&#123;recv_content&#125;</span>,来自:<span class="subst">&#123;client_info&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> recv_content == <span class="string">&quot;end&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    client_socket.send(msg.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"></span><br><span class="line">client_socket.close()</span><br><span class="line">server_socket.close()</span><br></pre></td></tr></table></figure><p><strong>TCP：双向通信Socke之客户端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client_socket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建TCP类型的套接字</span></span><br><span class="line">client_socket.connect((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 给服务端发消息</span></span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    client_socket.send(msg.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">&quot;end&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 接收服务端消息</span></span><br><span class="line">    recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 最大接收1024字节</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;服务端说：<span class="subst">&#123;recv_data.decode(<span class="string">&#x27;gbk&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure><h4 id="结合多线程实现TCP双向传送-自由聊天"><a href="#结合多线程实现TCP双向传送-自由聊天" class="headerlink" title="结合多线程实现TCP双向传送(自由聊天)"></a>结合多线程实现TCP双向传送(自由聊天)</h4><p><strong>TCP服务端结合多线程实现自由收发信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">双向通信Socket之服务器端</span></span><br><span class="line"><span class="string">    读取客户端发送的数据，将内容输出到控制台</span></span><br><span class="line"><span class="string">    将控制台输入的信息发送给客户器端</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 读取客户端的消息</span></span><br><span class="line">        recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 最大接收1024字节</span></span><br><span class="line">        recv_content = recv_data.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将消息输出到控制台</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;客户端说：<span class="subst">&#123;recv_content&#125;</span>,来自:<span class="subst">&#123;client_info&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> recv_content == <span class="string">&quot;end&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束接收消息！&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 获取控制台信息</span></span><br><span class="line">        msg = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">        client_socket.send(msg.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> msg == <span class="string">&quot;end&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束发送消息！&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建Socket对象</span></span><br><span class="line">    server_socket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建TCP类型的套接字</span></span><br><span class="line">    <span class="comment"># 绑定端口</span></span><br><span class="line">    server_socket.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>))  <span class="comment"># 本机监听8899端口</span></span><br><span class="line">    <span class="comment"># 监听客户端的连接</span></span><br><span class="line">    server_socket.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;等待接收连接！&quot;</span>)</span><br><span class="line">    <span class="comment"># 接收客户端连接</span></span><br><span class="line">    client_socket, client_info = server_socket.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;一个客户端建立成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">    t1 = Thread(target=recv_data)</span><br><span class="line">    t2 = Thread(target=send_data)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    client_socket.close()</span><br><span class="line">    server_socket.close()</span><br></pre></td></tr></table></figure><p><strong>TCP客户端结合多线程实现自由收发信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">双向通信Socket之客户端</span></span><br><span class="line"><span class="string">    将控制台输入的信息发送给服务器端</span></span><br><span class="line"><span class="string">    读取服务器端的数据，将内容输出到控制台</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 接收服务端消息</span></span><br><span class="line">        recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 最大接收1024字节</span></span><br><span class="line">        recv_content = recv_data.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;服务端说：<span class="subst">&#123;recv_content&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> recv_content == <span class="string">&quot;end&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束接收消息！&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 给服务端发消息</span></span><br><span class="line">        msg = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">        client_socket.send(msg.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> msg == <span class="string">&quot;end&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束发送消息！&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client_socket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建TCP类型的套接字</span></span><br><span class="line">    client_socket.connect((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>))</span><br><span class="line"></span><br><span class="line">    t1 = Thread(target=recv_data)</span><br><span class="line">    t2 = Thread(target=send_data)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    client_socket.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Python 网络与并发编程</summary>
    
    
    
    <category term="Python" scheme="https://huaiyuechusan.gitee.io/categories/Python/"/>
    
    
    <category term="学习技术" scheme="https://huaiyuechusan.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Python" scheme="https://huaiyuechusan.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python深入和提高</title>
    <link href="https://huaiyuechusan.gitee.io/archives/8df5f8b9.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/8df5f8b9.html</id>
    <published>2023-12-12T13:44:00.000Z</published>
    <updated>2024-10-17T11:57:36.906Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Python深入和提高"><a href="#Python深入和提高" class="headerlink" title="Python深入和提高"></a>Python深入和提高</h1><h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><h3 id="异常的本质-调试错误的核心理念"><a href="#异常的本质-调试错误的核心理念" class="headerlink" title="异常的本质-调试错误的核心理念"></a>异常的本质-调试错误的核心理念</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555906.png" alt="image-20231119182040284"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555908.png" alt="image-20231121150902973"></p><h3 id="try-except基本结构"><a href="#try-except基本结构" class="headerlink" title="try_except基本结构"></a>try_except基本结构</h3><p><strong>try…一个except结构</strong></p><p>try…except是最常见的异常处理结构。结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被监控可能发生引起异常的语句块</span><br><span class="line"><span class="keyword">except</span> BaseException [<span class="keyword">as</span> e]:</span><br><span class="line">    异常处理语句</span><br></pre></td></tr></table></figure><ol><li><code>try</code>块包含着可能引发异常的代码，<code>except</code>块则用来捕捉和处理发生的异常。</li><li>执行的时候，如果<code>try</code>块中没有引发异常，则跳过<code>except</code>块继续执行后续代码；</li><li>执行的时候，如果<code>try</code>块中发生了异常，则跳过<code>try</code>块中的后续代码，跳到相应的<code>except</code></li><li>块中处理异常；异常处理完后，继续执行后续代码。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">    a = <span class="number">2</span> / <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step2&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step3&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;step4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">step1</span></span><br><span class="line"><span class="string">step3</span></span><br><span class="line"><span class="string">division by zero</span></span><br><span class="line"><span class="string">step4</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="try-多个except结构"><a href="#try-多个except结构" class="headerlink" title="try_多个except结构"></a>try_多个except结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;请输入被除数：&quot;</span>)</span><br><span class="line">    b = <span class="built_in">input</span>(<span class="string">&quot;请输入除数：&quot;</span>)</span><br><span class="line">    c = <span class="built_in">float</span>(a)/<span class="built_in">float</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;异常，除数不能为0&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;异常：除数和被除数都应该为数值类型&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请输入被除数：1</span></span><br><span class="line"><span class="string">请输入除数：dd</span></span><br><span class="line"><span class="string">could not convert string to float: &#x27;dd&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;ValueError&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="try…except…else结构"><a href="#try…except…else结构" class="headerlink" title="try…except…else结构"></a>try…except…else结构</h3><p><code>try..except...else</code>结构增加了<code>else</code>块。如果<code>try</code>块中没有抛出异常，则执行<code>else</code>块。如果<code>try</code>块中抛出异常，则执行<code>except</code>块，不执行<code>else</code>块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;请输入被除数：&quot;</span>)</span><br><span class="line">    b = <span class="built_in">input</span>(<span class="string">&quot;请输入除数：&quot;</span>)</span><br><span class="line">    c = <span class="built_in">float</span>(a)/<span class="built_in">float</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;除的结果为：&quot;</span>, c)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请输入被除数：3</span></span><br><span class="line"><span class="string">请输入除数：4</span></span><br><span class="line"><span class="string">0.75</span></span><br><span class="line"><span class="string">除的结果为： 0.75</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="try…except…finally结构和return语句位置"><a href="#try…except…finally结构和return语句位置" class="headerlink" title="try…except…finally结构和return语句位置"></a>try…except…finally结构和return语句位置</h3><p><code>try...except..finally</code>结构中，<code>finally</code>块无论是否发生异常都会被执行；通常用来释放<code>try</code>块中申请的资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;请输入被除数：&quot;</span>)</span><br><span class="line">    b = <span class="built_in">input</span>(<span class="string">&quot;请输入除数：&quot;</span>)</span><br><span class="line">    c = <span class="built_in">float</span>(a)/<span class="built_in">float</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;除的结果为：&quot;</span>, c)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是finally语句，无论是否发生异常我都会被执行&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请输入被除数：3</span></span><br><span class="line"><span class="string">请输入除数：0</span></span><br><span class="line"><span class="string">float division by zero</span></span><br><span class="line"><span class="string">&lt;class &#x27;ZeroDivisionError&#x27;&gt;</span></span><br><span class="line"><span class="string">我是finally语句，无论是否发生异常我都会被执行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>return语句和异常处理问题</strong></p><p>由于<code>return</code>有两种作用：结束方法运行、返回值。我们一般不把<code>return</code>放到异常处理结构中，而是放到方法最后。</p><h3 id="常见异常汇总说明"><a href="#常见异常汇总说明" class="headerlink" title="常见异常汇总说明"></a>常见异常汇总说明</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555909.png" alt="image-20231120213240849"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555910.png" alt="image-20231120213330316"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555911.png" alt="image-20231120213358038"></p><div class="table-container"><table><thead><tr><th><strong>异常名称</strong></th><th style="text-align:center"><strong>说明</strong></th></tr></thead><tbody><tr><td>ArithmeticError</td><td style="text-align:center">所有数值计算错误的基类</td></tr><tr><td>AssertionError</td><td style="text-align:center">断言语句失败</td></tr><tr><td>AttributeError</td><td style="text-align:center">对象没有这个属性</td></tr><tr><td>BaseException</td><td style="text-align:center">所有异常的基类</td></tr><tr><td>DeprecationWarning</td><td style="text-align:center">关于被弃用的特征的警告</td></tr><tr><td>EnvironmentError</td><td style="text-align:center">操作系统错误的基类</td></tr><tr><td>EOFError</td><td style="text-align:center">没有内建输入,到达EOF 标记</td></tr><tr><td>Exception</td><td style="text-align:center">常规错误的基类</td></tr><tr><td>FloatingPointError</td><td style="text-align:center">浮点计算错误</td></tr><tr><td>FutureWarning</td><td style="text-align:center">关于构造将来语义会有改变的警告</td></tr><tr><td>GeneratorExit</td><td style="text-align:center">生成器(generator)发生异常来通知退出</td></tr><tr><td>ImportError</td><td style="text-align:center">导入模块/对象失败</td></tr><tr><td>IndentationError</td><td style="text-align:center">缩进错误</td></tr><tr><td>IndexError</td><td style="text-align:center">序列中没有此索引(index)</td></tr><tr><td>IOError</td><td style="text-align:center">输入/输出操作失败</td></tr><tr><td>KeyboardInterrupt</td><td style="text-align:center">用户中断执行(通常是输入^C)</td></tr><tr><td>KeyError</td><td style="text-align:center">映射中没有这个键</td></tr><tr><td>LookupError</td><td style="text-align:center">无效数据查询的基类</td></tr><tr><td>MemoryError</td><td style="text-align:center">内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td>NameError</td><td style="text-align:center">未声明/初始化对象 (没有属性)</td></tr><tr><td>NotImplementedError</td><td style="text-align:center">尚未实现的方法</td></tr><tr><td>OSError</td><td style="text-align:center">操作系统错误</td></tr><tr><td>OverflowError</td><td style="text-align:center">数值运算超出最大限制</td></tr><tr><td>OverflowWarning</td><td style="text-align:center">旧的关于自动提升为长整型(long)的警告</td></tr><tr><td>PendingDeprecationWarning</td><td style="text-align:center">关于特性将会被废弃的警告</td></tr><tr><td>ReferenceError</td><td style="text-align:center">弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td>RuntimeError</td><td style="text-align:center">一般的运行时错误</td></tr><tr><td>RuntimeWarning</td><td style="text-align:center">可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td>StandardError</td><td style="text-align:center">所有的内建标准异常的基类</td></tr><tr><td>StopIteration</td><td style="text-align:center">迭代器没有更多的值</td></tr><tr><td>SyntaxError</td><td style="text-align:center">Python 语法错误</td></tr><tr><td>SyntaxWarning</td><td style="text-align:center">可疑的语法的警告</td></tr><tr><td>SystemError</td><td style="text-align:center">一般的解释器系统错误</td></tr><tr><td>SystemExit</td><td style="text-align:center">解释器请求退出</td></tr><tr><td>TabError</td><td style="text-align:center">Tab 和空格混用</td></tr><tr><td>TypeError</td><td style="text-align:center">对类型无效的操作</td></tr><tr><td>UnboundLocalError</td><td style="text-align:center">访问未初始化的本地变量</td></tr><tr><td>UnicodeDecodeError</td><td style="text-align:center">Unicode 解码时的错误</td></tr><tr><td>UnicodeEncodeError</td><td style="text-align:center">Unicode 编码时错误</td></tr><tr><td>UnicodeError</td><td style="text-align:center">Unicode 相关的错误</td></tr><tr><td>UnicodeTranslateError</td><td style="text-align:center">Unicode 转换时错误</td></tr><tr><td>UserWarning</td><td style="text-align:center">用户代码生成的警告</td></tr><tr><td>ValueError</td><td style="text-align:center">传入无效的参数</td></tr><tr><td>Warning</td><td style="text-align:center">警告的基类</td></tr><tr><td>WindowsError</td><td style="text-align:center">系统调用失败</td></tr><tr><td>ZeroDivisionError</td><td style="text-align:center">除(或取模)零 (所有数据类型)</td></tr></tbody></table></div><h3 id="with上下文管理资源"><a href="#with上下文管理资源" class="headerlink" title="with上下文管理资源"></a>with上下文管理资源</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555912.png" alt="image-20231121151122084"></p><p>​    </p><p><code>finally</code>块由于是否发生异常都会执行，通常我们放释放资源的代码。其实，我们可以通过<code>with</code>上下文管理，更方便的实现释放资源的操作。</p><p><code>with</code>上下文管理的语法结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> context_expr [ <span class="keyword">as</span> var]:</span><br><span class="line">    语句块</span><br></pre></td></tr></table></figure><blockquote><p><code>with</code>上下文管理可以自动管理资源，在<code>with</code>代码块执行完毕后自动还原进入该代码之前的现场或上下文。不论何种原因跳出<code>with</code>块，不论是否有异常，==总能保证资源正常释放==。极大的简化了工作，在文件操作、网络通信相关的场合非常常用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;d:/test.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    context = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(context)</span><br></pre></td></tr></table></figure><h3 id="traceback模块的使用-异常写入日志文件"><a href="#traceback模块的使用-异常写入日志文件" class="headerlink" title="traceback模块的使用-异常写入日志文件"></a>traceback模块的使用-异常写入日志文件</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555913.png" alt="image-20231121152312711"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">    num = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    traceback.print_exc()  <span class="comment"># 打印异常信息</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">    num = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="comment"># 将异常信息输出到文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;d:/test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        traceback.print_exc(file=f)</span><br></pre></td></tr></table></figure><h3 id="自定义异常-raise抛出异常"><a href="#自定义异常-raise抛出异常" class="headerlink" title="自定义异常-raise抛出异常"></a>自定义异常-raise抛出异常</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555914.png" alt="image-20231121153406627"></p><p>程序开发中，有时候我们也需要自己定义异常类。自定义异常类一般都是运行时异常，通常继承<code>Exception</code>或其子类即可。命名一般以<code>Error</code>、<code>Exception</code>为后缀。</p><p><strong>自定义异常由<code>raise</code>语句主动抛出。</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义异常类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, errorinfo</span>):</span><br><span class="line">        Exception.__init__(self)</span><br><span class="line">        self.errorinfo = errorinfo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.errorinfo) + <span class="string">&quot;,年龄错误，应该在1-150之间&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  <span class="comment"># 如果是true，则模块是作独立文件执行，下面可以写测试代码</span></span><br><span class="line">    age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个年龄：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="number">1</span> <span class="keyword">or</span> age &gt; <span class="number">150</span>:</span><br><span class="line">        <span class="keyword">raise</span> AgeError(age)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正常的年龄：&quot;</span>, age)</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入一个年龄：170</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;D:\2022百战Python\Python深入和提高\异常机制\practice.py&quot;, line 86, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    raise AgeError(age)</span></span><br><span class="line"><span class="string">__main__.AgeError: 170,年龄错误，应该在1-150之间</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Pycharm调试模式debug视图"><a href="#Pycharm调试模式debug视图" class="headerlink" title="Pycharm调试模式debug视图"></a>Pycharm调试模式debug视图</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555915.png" alt="image-20231121155153724"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555917.png" alt="image-20231121155224700"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555918.png" alt="image-20231121155244514"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555919.png" alt="image-20231121155300946"></p><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><h3 id="fle文件操作-操作系统底层关系-写入文件"><a href="#fle文件操作-操作系统底层关系-写入文件" class="headerlink" title="fle文件操作-操作系统底层关系-写入文件"></a>fle文件操作-操作系统底层关系-写入文件</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220078.png" alt="image-20231121161102367"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220080.png" alt="image-20231121161205752"></p><p>Python标准库中，如下是文件操作相关的模块:</p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>io模块</td><td>文件流的输入和输出操作 input output</td></tr><tr><td>os模块</td><td>基本操作系统功能，包括文件操作</td></tr><tr><td>glob模块</td><td>查找符合特定规则的文件路径名</td></tr><tr><td>fnmatch模块</td><td>使用模式来匹配文件路径名</td></tr><tr><td>fileinput模块</td><td>处理多个输入文件</td></tr><tr><td>filecmp模块</td><td>用于文件的比较</td></tr><tr><td>csv模块</td><td>用于csv文件处理</td></tr><tr><td>pickle和cPickle</td><td>用于序列化和反序列化</td></tr><tr><td>xml包</td><td>用于XML数据处理</td></tr><tr><td>bz2、gzip、zipfile、zlib、tarfile</td><td>用于处理压缩和解压缩文件（分别对应不同的算法）</td></tr></tbody></table></div><p><strong>创建文件对象open()</strong></p><p>open0函数用于创建文件对象，基本语法格式如下：</p><p><code>open(文件名[打开方式])</code></p><p>如果只是文件名，代表在当前目录下的文件。文件名可以录入全路径，比如：<code>D:\a\b.txt</code></p><p>为了减少<code>\</code>的输入，可以使用原始字符串：<code>r &quot;d:\b.txt”</code>示例如下：</p><p><code>f = open(r&quot;d:\b.txt&quot;, &quot;w&quot;)</code></p><p>打开方式有如下几种：</p><div class="table-container"><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>读read模式</td></tr><tr><td>w</td><td>写wite模式。如果文件不存在则创建；如果文件存在，则重写新内容</td></tr><tr><td>a</td><td>追加append模式。如果文件不存在则创建；如果文件存在，则在文件<strong>末尾追加内容</strong></td></tr><tr><td>b</td><td>二进制binary模式（可与其他模式组合使用）</td></tr><tr><td>+</td><td>读、写模式（可与其他模式组合使用）</td></tr></tbody></table></div><blockquote><p>文本文件对象和二进制文件对象的创建：</p><ol><li>如果没有增加模式<code>b</code>,则<strong>默认创建的是文本文件对象</strong>，处理的基本单元是“字符”。</li><li>如果是二进制模式<code>b</code>,则创建的是二进制文件对象，处理的基本单元是“字节”。</li></ol></blockquote><p><strong>基本的文件写入操作</strong></p><p>文本文件的写入一般就是三个步骤：</p><ol><li>创建文件对象</li><li>写入数据</li><li>关闭文件对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="编码知识-中文乱码问题解决"><a href="#编码知识-中文乱码问题解决" class="headerlink" title="编码知识-中文乱码问题解决"></a>编码知识-中文乱码问题解决</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220081.png" alt="image-20231121194831439"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220082.png" alt="image-20231121195124583"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定文件编码解决中文乱码问题</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;你好&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>write()/writelines()写入数据</strong></p><p><code>write(a)</code>:把字符串a写入到文件中</p><p><code>writelines(b)</code>：把字符串列表事入文件中，不添加换行符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># f.write(&quot;你好&quot;)</span></span><br><span class="line">    s = [<span class="string">&quot;年龄\n&quot;</span>, <span class="string">&quot;姓名\n&quot;</span>, <span class="string">&quot;学校\n&quot;</span>]</span><br><span class="line">    f.writelines(s)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220083.png" alt="image-20231121195750398"></p><h3 id="关闭流要点"><a href="#关闭流要点" class="headerlink" title="关闭流要点"></a>关闭流要点</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220084.png" alt="image-20231121195847695"></p><p>由于文件底层是由操作系统控制，所以我们打开的文件对象必须<strong>显式调用</strong><code>close()</code>方法关闭文件对象。当调用<code>close()</code>方法时，首先会把缓冲区数据写入文件（也可以直接调用<code>flush()</code>方法），再关闭文件，释放文件对象。</p><p>为了确保打开的文件对象正常关闭，一般结合异常机制的<code>finally</code>或者<code>with</code>关键字实现无论何种情况都能关闭打开的文件对象。</p><h4 id="finally异常管理"><a href="#finally异常管理" class="headerlink" title="finally异常管理"></a>finally异常管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结合异常机制的finally,确保关闭文件对象</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    f.write(s)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h4 id="with上下文管理"><a href="#with上下文管理" class="headerlink" title="with上下文管理"></a>with上下文管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用with管理文件写入操作</span></span><br><span class="line">s = [<span class="string">&quot;年龄\n&quot;</span>, <span class="string">&quot;姓名\n&quot;</span>, <span class="string">&quot;学校\n&quot;</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(s)</span><br></pre></td></tr></table></figure><h3 id="文本文件的读取"><a href="#文本文件的读取" class="headerlink" title="文本文件的读取"></a>文本文件的读取</h3><p>文件的读取一般使用如下三个方法：</p><ol><li><p><code>read([size])</code></p><p>从文件中读取<code>size</code>个字符，并作为结果返回。<strong>如果没有<code>size</code>参数，则读取整个文件。</strong></p><p>读取到文件末尾，会返回空字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.read(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    s2 = f.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第二次读的：&quot;</span>, s2)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">年龄</span></span><br><span class="line"><span class="string">姓名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第二次读的： 学校</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p><code>readline()</code></p><p>读取一行内容作为结果返回。读取到文件末尾，会返回空字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">年龄</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p><code>readlines()</code></p><p>文本文件中，每一行作为一个字符串存入列表中，返回该列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.readlines()</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;年龄\n&#x27;, &#x27;姓名\n&#x27;, &#x27;学校\n&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">年龄</span></span><br><span class="line"><span class="string">姓名</span></span><br><span class="line"><span class="string">学校</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = f.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(line, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">                     </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">年龄</span></span><br><span class="line"><span class="string">姓名</span></span><br><span class="line"><span class="string">学校</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="文本文件操作-为每行的末尾添加行号"><a href="#文本文件操作-为每行的末尾添加行号" class="headerlink" title="文本文件操作-为每行的末尾添加行号"></a>文本文件操作-为每行的末尾添加行号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为文本文件每行的末尾添加行号</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    <span class="built_in">print</span>(lines)</span><br><span class="line">    lines2 = [lines.rstrip() + <span class="string">&quot;#&quot;</span> + <span class="built_in">str</span>(index) + <span class="string">&quot;\n&quot;</span> <span class="keyword">for</span> index, lines <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(lines) + <span class="number">1</span>), lines)]</span><br><span class="line">    <span class="built_in">print</span>(lines2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(lines2)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;年龄\n&#x27;, &#x27;姓名\n&#x27;, &#x27;学校\n&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;年龄#1\n&#x27;, &#x27;姓名#2\n&#x27;, &#x27;学校#3\n&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="二进制文件的读写-图片文件的拷贝"><a href="#二进制文件的读写-图片文件的拷贝" class="headerlink" title="二进制文件的读写-图片文件的拷贝"></a>二进制文件的读写-图片文件的拷贝</h3><p>二进制文件的处理流程和文本文件流程一致。首先还是要创建文件对象，不过，我们需要指定二进制模式，从而创建出二进制文件对象。例如：</p><p><code>f=open(r&quot;d:\a.txt&quot;,wb)</code>        #可写的、重写模式的二进制文件对象</p><p><code>f=open(r&quot;d\a.txt&quot;,&#39;ab&#39;)</code>      #可写的、追加模式的二进制文件对象</p><p><code>f=open(r&quot;d:\a.txt&quot;,&#39;rb&#39;)</code>     #可读的二进制文件对象</p><p>创建好二进制文件对象后，仍然可以使用<code>wite()</code>、<code>read()</code>实现文件的读写操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;src.png&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> srcFile, <span class="built_in">open</span>(<span class="string">r&quot;dist.png&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> distFile:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> srcFile:</span><br><span class="line">        distFile.write(line)</span><br></pre></td></tr></table></figure><h3 id="文件对象常用方法和属性总结-seek-任意位置操作"><a href="#文件对象常用方法和属性总结-seek-任意位置操作" class="headerlink" title="文件对象常用方法和属性总结-seek()任意位置操作"></a>文件对象常用方法和属性总结-seek()任意位置操作</h3><p><strong>文件对象的属性</strong></p><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>返回文件名字</td></tr><tr><td>mode</td><td>返回文件的打开模式</td></tr><tr><td>closed</td><td>若文件被关闭，则返回True</td></tr></tbody></table></div><p><strong>文件对象的打开方式</strong></p><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>读模式</td></tr><tr><td>w</td><td>写模式</td></tr><tr><td>a</td><td>追加模式</td></tr><tr><td>b</td><td>二进制模式（可与其他模式组合）</td></tr><tr><td>+</td><td>读写模式（可与其他模式组合）</td></tr></tbody></table></div><p><strong>文件对象的常用方法</strong></p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>read([size])</td><td>从文件中读取size个字节或字符的内容返回。若省略[size],则读取到文件末尾，即一次读取文件所有内容</td></tr><tr><td>readline()</td><td>从文本文件中读取一行内容</td></tr><tr><td>readlines()</td><td>把文本文件中每一行都作为独立的字符串对象，并将这些对象放入列表返回</td></tr><tr><td>write(str)</td><td>将字符串str内容写入文件</td></tr><tr><td>writelines(s)</td><td>将字符串列表s写入文件文件，不添加换行符</td></tr><tr><td>seek(offset [,whence])</td><td>把文件指针移动到新的位置，offset表示相对于whencet的多少个字节的偏移量。offset: off为正往结束方向移动，为负往开始方向移动                                            whence不同的值代表不同含义：0:从文件头开始计算（默认值）1：从当前位置开始计算2：从文件尾开始计算</td></tr><tr><td>tell()</td><td>返回文件指针的当前位置</td></tr><tr><td>truncate([size])</td><td>不论指针在什么位置，只留下指针前sz个字节的内容，其余全部删除；如果没有传入size,则当指针当前位置到文件末尾内容全部删除</td></tr><tr><td>flush()</td><td>把缓冲区的内容写入文件，但不关闭文件</td></tr><tr><td>close()</td><td>把缓冲区内容写入文件，同时关闭文件，释放文件对象相关资源</td></tr></tbody></table></div><h3 id="使用pickle实现序列化和反序列化"><a href="#使用pickle实现序列化和反序列化" class="headerlink" title="使用pickle实现序列化和反序列化"></a>使用pickle实现序列化和反序列化</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220085.png" alt="image-20231121220236689"></p><p>序列化指的是：将对象转化成“串行化”数据形式，存储到硬盘或通过网络传输到其他地方。</p><p>反序列化是指相反的过程，将读取到的“串行化数据”转化成对象。</p><p>我们可以使用pickle模块中的函数，实现序列化和反序列操作。</p><blockquote><p>Python中，一切皆对象，对象本质上就是一个“存储数据的内存块”。有时候，我们需要将“内存块的数据”保存到硬盘上，或者通过网络传输到其他的计算机上。这时候，就需要“对象的序列化和反序列化”。对象的序列化机制广泛的应用在分布式、并行系统上。</p></blockquote><p>序列化我们使用：</p><p><code>pickle.dump(obj, file)</code>   <code>obj</code>就是要被序列化的对象，<code>file</code>指的是存储的文件</p><p><code>pickle.load(file)</code>  从<code>file</code>读取数据，反序列化成对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    name = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">    age = <span class="number">20</span></span><br><span class="line">    sorce = [<span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>]</span><br><span class="line">    resume = &#123;<span class="string">&#x27;name&#x27;</span>: name, <span class="string">&#x27;age&#x27;</span>: age, <span class="string">&#x27;sorce&#x27;</span>: sorce&#125;</span><br><span class="line">    pickle.dump(resume, f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.dat&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    resume2 = pickle.load(f)</span><br><span class="line">    <span class="built_in">print</span>(resume2)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;&#x27;name&#x27;: &#x27;jack&#x27;, &#x27;age&#x27;: 20, &#x27;sorce&#x27;: [70, 80, 90]&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="csv文件的读取和写入"><a href="#csv文件的读取和写入" class="headerlink" title="csv文件的读取和写入"></a>csv文件的读取和写入</h3><p>csv是逗号分隔符文本格式，常用于数据交换、Ec文件和数据库数据的导入和导出。</p><blockquote><p>与excel文件不同，csv文件中：</p><ul><li>值没有类型，所有值都是字符串</li><li>不能指定字体颜色等样式</li><li>不能指定单元格的宽高，不能合并单元格</li><li>没有多个工作表</li><li>不能嵌入图像图表</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 写csv文件</span></span><br><span class="line">headers = [<span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;姓名&quot;</span>]</span><br><span class="line">rows = [(<span class="number">20</span>, <span class="string">&#x27;jack&#x27;</span>), (<span class="number">40</span>, <span class="string">&#x27;john&#x27;</span>)]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 创建csv对象</span></span><br><span class="line">    b_csv = csv.writer(f)</span><br><span class="line">    <span class="comment"># 写入一行（标题）</span></span><br><span class="line">    b_csv.writerow(headers)</span><br><span class="line">    <span class="comment"># 写入多行（数据）</span></span><br><span class="line">    b_csv.writerows(rows)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 读取csv文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 创建csv对象，他是一个包含所有数据的列表，每一行为一个元素</span></span><br><span class="line">    a_csv = csv.reader(f)</span><br><span class="line">    <span class="comment"># 获得列表对象，它包含标题列的信息</span></span><br><span class="line">    headers = <span class="built_in">next</span>(a_csv)</span><br><span class="line">    <span class="comment"># 循环打印各行内容</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> a_csv:</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220086.png" alt="image-20231122135649592"></p><p>os模块可以帮助我们直接对操作系统进行操作。我们可以直接调用操作系统的可执行文件、命令，直接操作文件、目录等等。</p><blockquote><p>:warning:os模块是做系统运维非常重要的基础。</p></blockquote><h4 id="调用操作系统可执行文件-控制台乱码问题"><a href="#调用操作系统可执行文件-控制台乱码问题" class="headerlink" title="调用操作系统可执行文件-控制台乱码问题"></a>调用操作系统可执行文件-控制台乱码问题</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220087.png" alt="image-20231122140107241"></p><p><strong>控制台乱码问题</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220088.png" alt="image-20231122140130581"></p><h4 id="获取文件信息-创建和删除文件夹"><a href="#获取文件信息-创建和删除文件夹" class="headerlink" title="获取文件信息-创建和删除文件夹"></a>获取文件信息-创建和删除文件夹</h4><p>我们可以通过前面讲的文件对象实现对于文件内容的读写操作。如果，还需要对文件和目录做其他操作，可以使用<code>os</code>和<code>os.path</code>模块。</p><p><strong><code>os</code>模块下常用操作文件的方法</strong></p><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>remove(path)</td><td>删除指定的文件</td></tr><tr><td>rename(src,dest)</td><td>重命名文件或目录</td></tr><tr><td>stat(path)</td><td>返回文件的所有属性</td></tr><tr><td>listdir(path)</td><td>返回path目录下的文件和目录列表</td></tr></tbody></table></div><p><code>os</code>模块下关于目录操作的相关方法，汇总如下：</p><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>mkdir(path)</td><td>创建目录</td></tr><tr><td>makedirs(path1/path2/path3/…)</td><td>创建多级目录</td></tr><tr><td>rmdir(path)</td><td>删除目录</td></tr><tr><td>removedirs(path1/path2…)</td><td>删除多级目录</td></tr><tr><td>getcwd()</td><td>返回当前工作目录：current work dir</td></tr><tr><td>chdir(path)</td><td>把path设为当前工作目录</td></tr><tr><td>walk()</td><td>遍历目录树</td></tr><tr><td>sep</td><td>当前操作系统所使用的路径分隔符</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印基本信息</span></span><br><span class="line"><span class="built_in">print</span>(os.name)  <span class="comment"># windows--nt  linux--&gt;posix</span></span><br><span class="line"><span class="built_in">print</span>(os.sep)  <span class="comment"># windows--&gt;\  linux--&gt;/</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(os.linesep))  <span class="comment"># windows--&gt;\r\n  linux--&gt;\n</span></span><br><span class="line">a = <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(a))  <span class="comment"># repr可显示数据信息</span></span><br><span class="line"><span class="comment"># 获取文件和文件夹的相关信息</span></span><br><span class="line"><span class="built_in">print</span>(os.stat(<span class="string">&quot;practice.py&quot;</span>))</span><br><span class="line"><span class="comment"># 关于工作目录的操作</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd())  <span class="comment"># 获取当前工作目录</span></span><br><span class="line">os.chdir(<span class="string">&quot;d:&quot;</span>)  <span class="comment"># 当前工作目录就变成了d: 的根目录</span></span><br><span class="line"><span class="comment"># 创建目录，删除目录</span></span><br><span class="line">os.mkdir(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">os.rmdir(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="comment"># 创建多级目录</span></span><br><span class="line">os.makedirs(<span class="string">&quot;test1/test2/test3&quot;</span>)</span><br><span class="line"><span class="comment"># 更改目录名字</span></span><br><span class="line">os.rename(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;测试&quot;</span>)</span><br><span class="line"><span class="comment"># 列出子目录</span></span><br><span class="line">dirs = os.listdir(<span class="string">&quot;test1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dirs)</span><br></pre></td></tr></table></figure><h4 id="os-path模块-常用方法"><a href="#os-path模块-常用方法" class="headerlink" title="os.path模块-常用方法"></a>os.path模块-常用方法</h4><p>os.path模块提供了目录相关（路径判断、路径切分、路径连接、文件夹遍历）的操作</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>isabs(path)</td><td>判断path是否绝对路径</td></tr><tr><td>isdir(path)</td><td>判断path是否为目录</td></tr><tr><td>isfile(path)</td><td>判断path是否为文件</td></tr><tr><td>exists(path)</td><td>判断指定路径的文件是否存在</td></tr><tr><td>getsize(filename)</td><td>返回文件的大小</td></tr><tr><td>abspath(path)</td><td>返回绝对路径</td></tr><tr><td>dirname(p)</td><td>返回目录的路径</td></tr><tr><td>getatime(filename)</td><td>返回文件的最后访问时间</td></tr><tr><td>getmtime(filename)</td><td>返回文件的最后修改时间</td></tr><tr><td>walk(top,func,arg)</td><td>递归方式遍历目录</td></tr><tr><td>join(path,*paths)</td><td>连接多个path</td></tr><tr><td>split(path)</td><td>对路径进行分割，以列表形式返回</td></tr><tr><td>splitext(path)</td><td>从路径中分割文件的扩展名</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line">path = os.getcwd()</span><br><span class="line"><span class="comment"># 列出子目录和子文件</span></span><br><span class="line">file_list = os.listdir(path)</span><br><span class="line"><span class="comment"># 只打印以.py结尾的文件名</span></span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</span><br><span class="line">    pos = file_name.rfind(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> file_name[pos + <span class="number">1</span>:] == <span class="string">&quot;py&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(file_name)</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">practice.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*********************************&quot;</span>)</span><br><span class="line"><span class="comment"># 用推导式列出目录下所有的.py文件</span></span><br><span class="line">file_list2 = [file_name <span class="keyword">for</span> file_name <span class="keyword">in</span> os.listdir(path) <span class="keyword">if</span> file_name.endswith(<span class="string">&quot;.py&quot;</span>)]</span><br><span class="line"><span class="built_in">print</span>(file_list2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;practice.py&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="使用walk递归遍历所有子目录和子文件"><a href="#使用walk递归遍历所有子目录和子文件" class="headerlink" title="使用walk递归遍历所有子目录和子文件"></a>使用walk递归遍历所有子目录和子文件</h4><p>os.walk()方法是一个简单易用的文件、目录遍历器，可以帮助我们高效的处理文件、目录方面的事情。格式如下：</p><p><code>os.walk(top[,topdown=True[,onerror=None[,followlinks=False]]])</code></p><p>其中，<code>top</code>:是要遍历的目录。<code>topdown</code>:可选，<code>True</code>, 先遍历<code>top</code>目录再遍历子目录。</p><p>返回三元组<code>(root、dirs、files)</code>:</p><p><code>root</code>: 当前正在遍历的文件夹本身</p><p><code>dirs</code>: 一个列表，该文件夹中所有的目录的名字</p><p><code>files</code>: 一个列表，该文件夹中所有的文件的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = os.getcwd()</span><br><span class="line"><span class="comment"># topdown=False:先遍历子目录再遍历top目录</span></span><br><span class="line">list_files = os.walk(path, topdown=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> list_files:</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(root, name))</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(root, name))</span><br></pre></td></tr></table></figure><h3 id="shutil模块"><a href="#shutil模块" class="headerlink" title="shutil模块"></a>shutil模块</h3><h4 id="shutil模块（拷贝和压缩）"><a href="#shutil模块（拷贝和压缩）" class="headerlink" title="shutil模块（拷贝和压缩）"></a>shutil模块（拷贝和压缩）</h4><p><code>shutil</code>模块是python<strong>标准库</strong>中提供的，主要用来做文件和文件夹的<strong>拷贝、移动、删除</strong>等；还可以做文件和文件夹的<strong>压缩、解压缩</strong>操作。</p><p><code>os</code>模块提供了对目录或文件的一般操作。<code>shutil</code>模块作为补充，提供了移动、复制、压缩、解压等操作，这些os模块都没有提供。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">shutil.copyfile(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test_copy.tet&quot;</span>)</span><br><span class="line"><span class="comment"># 递归拷贝  忽略所有的html,htm文件</span></span><br><span class="line">shutil.copytree(<span class="string">&quot;source&quot;</span>, <span class="string">&quot;destination&quot;</span>, ignore=shutil.ignore_patterns(<span class="string">&quot;*.html&quot;</span>, <span class="string">&quot;*.htm&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="shutil和zipfile模块-压缩和解压缩"><a href="#shutil和zipfile模块-压缩和解压缩" class="headerlink" title="shutil和zipfile模块-压缩和解压缩"></a>shutil和zipfile模块-压缩和解压缩</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩某个文件</span></span><br><span class="line">shutil.make_archive(<span class="string">&quot;d:/destination&quot;</span>, <span class="string">&quot;zip&quot;</span>, <span class="string">&quot;d:/source&quot;</span>)</span><br><span class="line"><span class="comment"># 压缩：将指定多个文件压缩到一个zip文件</span></span><br><span class="line">z = zipfile.ZipFile(<span class="string">&quot;test.zip&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">z.write(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line">z.write(<span class="string">&quot;b.txt&quot;</span>)</span><br><span class="line">z.write(<span class="string">&quot;c.txt&quot;</span>)</span><br><span class="line">z.close()</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">z2 = zipfile.ZipFile(<span class="string">&quot;test.zip&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment"># 解压到的位置</span></span><br><span class="line">z2.extractall(<span class="string">&quot;d:/&quot;</span>)</span><br><span class="line">z2.close()</span><br></pre></td></tr></table></figure><h3 id="递归算法原理-自己复习前面讲过的算法原理"><a href="#递归算法原理-自己复习前面讲过的算法原理" class="headerlink" title="递归算法原理-自己复习前面讲过的算法原理"></a>递归算法原理-自己复习前面讲过的算法原理</h3><h3 id="递归算法-目录树结构的展示"><a href="#递归算法-目录树结构的展示" class="headerlink" title="递归算法-目录树结构的展示"></a>递归算法-目录树结构的展示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归遍历目录树</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_print_file</span>(<span class="params">path, level</span>):</span><br><span class="line">    child_files = os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> child_files:</span><br><span class="line">        file_path = os.path.join(path, file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> * level + file_path[file_path.rfind(os.sep) + <span class="number">1</span>:])</span><br><span class="line">        <span class="comment"># 如果是文件夹，递归打印</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">            my_print_file(file_path, level + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_print_file(<span class="string">&quot;test1&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">test2 </span></span><br><span class="line"><span class="string">test3</span></span><br><span class="line"><span class="string">test.txt</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="模块化编程理念-什么是模块-哲学思想"><a href="#模块化编程理念-什么是模块-哲学思想" class="headerlink" title="模块化编程理念-什么是模块-哲学思想"></a>模块化编程理念-什么是模块-哲学思想</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220089.png" alt="image-20231123153943364"></p><ol><li><p>Python程序由模块组成。一个模块对应python源文件，一般后缀名是：<code>.py</code></p></li><li><p>模块由语句组成。运行Python程序时，按照模块中语句的顺序依次执行</p></li><li><p>语句是Python程序的构造单元，用于创建对象、变量赋值、调用函数、控制语句等</p></li></ol><p><strong>标准库模块(standard library)</strong></p><p>与函数类似，模块也分为标准库模块和用户自定义模块。</p><p>Python标准库提供了操作系统功能、网络通信、文本处理、文件处理、数学运算等基本的功能。比如：random(随机数)、math(数学运算)、time(时间处理)、file(文件处理)、os(和操作系统交互)、sys(和解释器交互)等。</p><p>另外，Pythor还提供了海量的第三方模块，使用方式和标准库类似。功能覆盖了我们能想象到的所有领域，比如：科学计算、WEB开发、大数据、人工智能、图形系统等。</p><p><strong>为什么需要模块化编程</strong></p><p>模块(module)对应于Python源代码文件(.py文件)。模块中可以定义变量、函数、类、普通语句。这样，我们可以将一个Pythona程序分解成多个模块，便于后期的重复应用。</p><p>模块化编程(Modular Programming)将一个任务分解成多个模块。每个模块就像一个积木一样，便于后期的反复使用、反复搭建。</p><p><strong>模块化编程有如下几个重要优势：</strong></p><ol><li>便于将一个任务分解成多个模块，实现团队协同开发，完成大规模程序</li><li>实现代码复用。一个模块实现后，可以被反复调用</li><li>可维护性增强</li></ol><h3 id="模块化编程的流程-设计和实现分离的思想"><a href="#模块化编程的流程-设计和实现分离的思想" class="headerlink" title="模块化编程的流程-设计和实现分离的思想"></a>模块化编程的流程-设计和实现分离的思想</h3><p><strong>模块化编程的流程</strong></p><p>模块化编程的一般流程：</p><p>①设计API，进行功能描述。</p><p>②编码实现API中描述的功能。</p><p>③在模块中编写测试代码，并消除全局代码。</p><p>④使用私有函数实现不被外部客户端调用的模块函数。</p><p><strong>模块的API和功能描述要点</strong></p><p>API(Application Programming Interface应用程序编程接口)是用于描述模块中提供的函数和类的功能描述和使用方式描述。</p><p>模块化编程中，首先设计的就是模块的AP!(即要实现的功能描述)，然后开始编码实现API中描述的功能。最后，在其他模块中导入本模块进行调用。</p><p>可以通过help(模块名)查看模块的API。一般使用时先导入模块然后通过help函数查看。</p><p> 【示例】设计计算薪水模块的API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">本模块是用来计算公司员工的薪资</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">company = <span class="string">&quot;ailbaba&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yearSalary</span>(<span class="params">monthSalary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据传入的月薪，计算年薪</span></span><br><span class="line"><span class="string">    :param monthSalary: 月薪</span></span><br><span class="line"><span class="string">    :return: 年薪</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">daySalary</span>(<span class="params">monthSalary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据传入的月薪，计算日薪(按照一个月22.5天计算)</span></span><br><span class="line"><span class="string">    :param monthSalary: 月薪</span></span><br><span class="line"><span class="string">    :return: 日薪</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在别的模块中使用</span></span><br><span class="line"><span class="keyword">import</span> salary</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary.__doc__)</span><br><span class="line"><span class="built_in">print</span>(salary.yearSalary.__doc__)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>模块的创建和测试代码</strong></p><p>每个模块都有一个名称，通过特殊变量<code>__name__</code>可以获取模块的名称。在正常情况下，模块名字对应源文件名。仅有一个例外，就是当<strong>一个模块被作为程序入口时（主程序、交互式提示符下)</strong>，它的<code>__name__</code>的值为<code>__main__</code>。我们可以根据这个特点，将模块源代码文件中的测试代码进行独立的处理。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">本模块是用来计算公司员工的薪资</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">company = <span class="string">&quot;ailbaba&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yearSalary</span>(<span class="params">monthSalary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据传入的月薪，计算年薪</span></span><br><span class="line"><span class="string">    :param monthSalary: 月薪</span></span><br><span class="line"><span class="string">    :return: 年薪</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> monthSalary * <span class="number">12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">daySalary</span>(<span class="params">monthSalary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据传入的月薪，计算日薪(按照一个月22.5天计算)</span></span><br><span class="line"><span class="string">    :param monthSalary: 月薪</span></span><br><span class="line"><span class="string">    :return: 日薪</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> monthSalary / <span class="number">22.5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 这是一个测试</span></span><br><span class="line">    <span class="built_in">print</span>(yearSalary(<span class="number">6000</span>))</span><br></pre></td></tr></table></figure><p><strong>模块文档字符串和API设计</strong></p><p>我们可以在模块的第一行增加一个文档字符串，用于描述模块的相关功能。然后，通过<code>__doc__</code>可以获得文档字符串的内容。</p><h3 id="模块导入-import和from-import详解和区别"><a href="#模块导入-import和from-import详解和区别" class="headerlink" title="模块导入-import和from_import详解和区别"></a>模块导入-import和from_import详解和区别</h3><p>模块化设计的好处之一就是“代码复用性高”。写好的模块可以被反复调用，重复使用。模块的导入就是“在本模块中使用其他模块”。</p><p><strong>import语句导入</strong></p><p><code>import</code>语句的基本语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名             <span class="comment"># 导入一个模块</span></span><br><span class="line"><span class="keyword">import</span> 模块<span class="number">1</span>, 模块<span class="number">2</span>       <span class="comment"># 导入多个模块</span></span><br><span class="line"><span class="keyword">import</span> 模块名 <span class="keyword">as</span> 模块名<span class="comment"># 导入模块并使用新名字</span></span><br></pre></td></tr></table></figure><p> <code>import</code>加载的模块分为四种类型：</p><ol><li>使用python编写的代码<code>.py</code>文件</li><li>已被编译为共享库或<code>DLL</code>的C或C++扩展</li><li>一组模块的包</li><li>使用C编写并链接到python解释器的内置模块</li></ol><p>我们一般通过<code>import</code>语句实现模块的导入和使用，import本质上是使用了内置函数<code>__import__()</code>。</p><p>当我们通过<code>import</code>导入一个模块时，python解释器进行执行，最终会生成一个对象，这个对象就代表了被加载的模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(m))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m))</span><br><span class="line"><span class="built_in">print</span>(m.sqrt(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1630061747552</span></span><br><span class="line"><span class="string">&lt;class &#x27;module&#x27;&gt;</span></span><br><span class="line"><span class="string">2.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>由上，我们可以看到<code>math</code>模块被加载后，实际会生成一个<code>module</code>类的对象，该对象被<code>math</code>变量引用。我们可以通过<code>math</code>变量引用模块中所有的内容。</p><p>我们通过<code>import</code>导入多个模块，本质上也是生成多个<code>module</code>类的对象而已。</p><p>有时候，我们也需要给模块起个别名，本质上，这个别名仅仅是新创建一个变量引用加载的模块对象而已。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(m))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m))</span><br><span class="line"><span class="built_in">print</span>(m.sqrt(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">m2 = math</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m2))</span><br><span class="line"><span class="built_in">print</span>(m2.sqrt(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1769170820448</span></span><br><span class="line"><span class="string">&lt;class &#x27;module&#x27;&gt;</span></span><br><span class="line"><span class="string">2.0</span></span><br><span class="line"><span class="string">&lt;class &#x27;module&#x27;&gt;</span></span><br><span class="line"><span class="string">2.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>from…import导入</strong></p><p>Python中可以使用<code>from...import</code>导入<strong>模块中的成员</strong>。基本语法格式如下：</p><p><code>from 模块名 import 成员1，成员2，…</code></p><p>如果希望导入一个模块中的所有成员，则可以采用如下方式：</p><p><code>from 模块名 import *</code></p><blockquote><p>:warning:尽量避免 <code>from 模块名 import *</code>这种写法。<code>*</code>它表示导入模块中所有的不是以下划线<code>_</code>开头的名字都导入到当前位置。但你不知道你导入什么名字，很有可能会覆盖掉你之前已经定义的名字。而且可读性极其的差。一般生产环境中尽量避免使用，学习时没有关系。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt, sin</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">9</span>))</span><br><span class="line"><span class="built_in">print</span>(sin(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">3.0</span></span><br><span class="line"><span class="string">0.479425538604203</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>import语句和from…importi语句的区别</strong></p><p><code>import</code>导入的是模块。<code>from...import</code>导入的是<strong>模块中的一个函数/一个类</strong>。</p><blockquote><p>如果进行类比的话，<code>import</code>导入的是“文件””，我们要使用该“文件”下的内容，必须前面加“文件名称”。<code>from...import</code>导入的是文件下的“内容”，我们直接使用这些内容”即可，前面再也不需要加“文件名称”了。</p></blockquote><h3 id="import加载底层原理-importlib实现动态导入"><a href="#import加载底层原理-importlib实现动态导入" class="headerlink" title="import加载底层原理-importlib实现动态导入"></a>import加载底层原理-importlib实现动态导入</h3><p><strong><code>__import__()</code>动态导入</strong></p><p><code>import</code>语句本质上就是调用内置函数<code>__import__()</code>,我们可以通过它实现动态导入。给<code>__import__()</code>动态传递不同的的参数值，就能导入不同的模块</p><p>注意：一般不建议我们自行使用<em>`<em>import</em></em>()<code>导入，其行为在python.2和python.3中有差异，会导致意外错误。如果需要动态导入可以使用</code>importlib`模块</p><p><strong>模块的加载问题</strong></p><p>当导入一个模块时，模块中的代码都会被执行。不过，如果再次导入这个模块，则不会再次执行。</p><p>Python的设计者为什么这么设计？因为，导入模块更多的时候需要的是定义模块中的变量、函数、对象等。这些并不需要反复定义和执行。“只导入一次<code>import-only-once</code>“就成了一种优化。</p><blockquote><p>一个模块无论导入多少次，这个模块在整个解释器进程内有且仅有一个实例对象。</p></blockquote><p><strong>重新加载</strong></p><p>有时候我们确实需要重新加载一个模块，这时候可以使用：<code>importlib.reload()</code>方法</p><h3 id="包的概念-创建包-导入包"><a href="#包的概念-创建包-导入包" class="headerlink" title="包的概念-创建包-导入包"></a>包的概念-创建包-导入包</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220090.png" alt="image-20231123204236853"></p><p> 包(package)的概念和结构</p><p>当一个项目中有很多个模块时，需要再进行组织。我们将功能类似的模块放到一起，形成了“包”。==本质上，“包”就是一个必须有<code>__init__.py</code>的文件夹==。典型结构如下：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220092.png" alt="image-20231123204807813"></p><p>包下面可以包含“模块(module)”,也可以再包含“子包(subpackage)”。就像文件夹下面可以有文件，也可以有子文件夹一样。</p><p><strong>Pycharm里建包：</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220093.png" alt="image-20231123204627446"></p><p><strong>导入包操作和本质</strong></p><p>上一节中的包结构，我们需要导入<code>module_AA.py</code>。方式如下：</p><ol><li><p><code>import a.aa.module_AA</code></p><p>在使用时，必须加完整名称来引用，比如：<code>a.aa.module_AA.fun_AA()</code></p></li><li><p><code>from a.aa import module_AA</code></p><p>在使用时，直接可以使用模块名。比如：<code>module_AA.fun_AA()</code></p></li><li><p><code>from a.aa.module_AA import fun_AA</code> 直接导入函数</p></li></ol><p>在使用时，直接可以使用函数名。比如：<code>fun_AA()</code></p><blockquote><ol><li><code>from package import item</code>这种语法中，item可以是包、模块，也可以是函数、类、变量。</li><li><code>import item1.item2</code>这种语法中，item必须是包或模块，不能是其他。</li></ol></blockquote><p><strong>导入包的本质</strong>其实是“==导入了包的<code>__init__.py</code>“文件==。也就是说，<code>import pack1</code>意味着执行了包<code>pack1</code>下面的<code>__init__.py</code>文件。这样，可以在<code>__init__.py</code>中批量导入我们需要的模块，而不再需要一个个导入。</p><p><code>__init__.py</code>的三个核心作用：</p><p>①作为包的标识，不能删除。</p><p>②导入包实质是执行<code>__init__.py</code>文件，可以在<code>__init__.py</code>文件中做这个<strong>包的初始化、以及需要统一执行代码、批量导入</strong></p><blockquote><p>如上测试我们可以看出python的设计者非常巧妙的通过<code>__init__.py</code>文件将包转成了模块的操作。</p></blockquote><h3 id="包的模糊导入"><a href="#包的模糊导入" class="headerlink" title="包的模糊导入"></a>包的模糊导入</h3><p>用<code>*</code>导入包</p><p><code>import *</code> 这样的语句理论上是希望文件系统找出包中所有的子模块，然后导入它们。这可能会花长时间等。Python解决方案是提供一个明确的包索引。</p><p>这个索引由<code>__init__.py</code>定义<code>__all__</code>变量，该变量为一个列表，如上例<code>a</code>包下的<code>__init__.py</code>中，可定义<code>__all__= [&quot;module_A&quot;,&quot;module_A2&quot;]</code></p><p>这意味着，<code>from sound.effects import *</code>会从对应的包中导入以上两个子模块</p><blockquote><p>:warning:尽管提供<code>import *</code>的方法，仍不建议在生产代码中使用这种写法。</p></blockquote><h3 id="PIP安装第三方库"><a href="#PIP安装第三方库" class="headerlink" title="PIP安装第三方库"></a>PIP安装第三方库</h3><p><strong>库(Library)</strong></p><p>Python中库是借用其他编程语言的概念，没有特别具体的定义。</p><p>模块和包侧重于代码组织，有明确的定义。库强调的是功能性，而不是代码组织。</p><p>我们通常将某个功能的“模块的集合”，称为库。</p><p><strong>标准库(Standard Library)</strong></p><p>Python拥有一个强大的标准库。Python语言的核心只包含数字、字符串、列表、字典、文件等常见类型和函数，而由Python标准库提供了系统管理、网络通信、文本处理、数据库接口、图形系统、ML处理等额外的功能。</p><p>Python标准库的主要功能有：</p><p>①文本处理，包含文本格式化、正则表达式匹配、文本差异计算与合并、Unicode支持，二进制数据处理等功能</p><p>②文件处理，包含文件操作、创建临时文件、文件压缩与归档、操作配置文件等功能</p><p>③操作系统功能，包含线程与进程支持、IO复用、日期与时间处理、调用系统函数、日志(logging)等功能</p><p>④网络通信，包含网络套接字，SSL加密通信、异步网络通信等功能</p><p>⑤网络协议，支持HTTP，FTP，SMTP，POP，IMAP，NNTP，XMLRPC等多种网络协议，并提供了编写网络服务器的框架</p><p>⑥W3C格式支持，包含HTML，SGML，XML的处理。</p><p>⑦其它功能，包括国际化支持、数学运算、HASH、Tkinter等</p><blockquote><p>目前学过的有：random、math、time、file、os、sys等模块。</p><p>①random模块实现随机数处理</p><p>②math模块实现数学相关的运算</p><p>③time模块实现时间的处理</p><p>④file模块实现对文件的操作</p><p>⑤os模块实现和操作系统的交互</p><p>⑥sys模块实现和解释器的交互</p></blockquote><p><strong>PIP模块管理工具</strong></p><p>pip是一个现代的，通用的Python包管理工具。提供了对Python包的查找、下载、安装、卸载的功能。</p><p><strong>安装第三方扩展库的2种方式</strong></p><p>第三方库有数十万种之多，以pymysql库为例讲解第三方扩展库的安装。</p><p><strong>第一种方式：命令行下远程安装</strong></p><p>以安装第三方pymysql库为例，在命令行提示符下输入：<code>pip install pymysql</code>即可。</p><p><strong>第二种方式：Pycharm中直接安装到项目中</strong></p><p>在Pycharm中，依次点击：<code>file-&gt;setting-&gt;Project 本项目名-&gt;Project Interpreter</code></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220094.png" alt="image-20231123211713736"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220095.png" alt="image-20231123211743087"></p><h2 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程</h2><h3 id="GUI编程和tkinter介绍-第一个GUI程序"><a href="#GUI编程和tkinter介绍-第一个GUI程序" class="headerlink" title="GUI编程和tkinter介绍-第一个GUI程序"></a>GUI编程和tkinter介绍-第一个GUI程序</h3><p>我们前面实现的都是基于控制台的程序，程序和用户的交互通过控制台来完成。</p><p>本章，我们将学习 GUI（Graphics User Interface），即<strong>图形用户界面编程</strong>，我们可以通过 python 提供的丰富的组件，快速的实现使用图形界面和用户交互。</p><p>GUI 编程类似于“搭积木”，将一个个组件(Widget)放到窗口中。如下是 windows 中的画图软件，就是一个典型的 GUI 程序</p><p><strong>常用的 GUI 库</strong></p><ol><li><p>Tkinter</p><p>tkinter（Tk interface）是 Python 的标准 GUI 库，支持跨平台的 GUI 程序开发。tkinter适合小型的 GUI 程序编写，也特别适合初学者学习 GUI 编程。本书以 tkinter 为核心进行讲解。</p></li><li><p>wxPython</p><p>wxPython 是比较流行的 GUI 库，适合大型应用程序开发，功能强于 tkinter，整体设计框架类似于 MFC(Microsoft Foundation Classes 微软基础类库)。</p></li><li><p>PyQT</p></li></ol><p>Qt 是一种开源的 GUI 库，适合大型 GUI 程序开发，PyQT 是 Qt 工具包标准的 Python 实现。我们也可以使用 Qt Desginer 界面设计器快速开发 GUI 应用程序。</p><p><strong>基于 tkinter 模块创建 GUI 程序包含如下 4 个核心步骤：</strong></p><ol><li>创建应用程序主窗口对象（也称：根窗口）</li><li>在主窗口中，添加各种可视化组件，比如：按钮（Button）、文本框（Label）等。</li><li>通过几何布局管理器，管理组件的大小和位置</li><li>事件处理</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.创建应用程序主窗口对象（也称：根窗口）</span></span><br><span class="line">root = Tk()</span><br><span class="line"><span class="comment"># 2.在主窗口中，添加各种可视化组件，比如：按钮（Button）、文本框（Label）等。</span></span><br><span class="line">btn01 = Button(root)</span><br><span class="line">btn01[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;点击送花&quot;</span></span><br><span class="line"><span class="comment"># 3.通过几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">btn01.pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.事件处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">songhua</span>(<span class="params">e</span>):  <span class="comment"># e就是事件对象</span></span><br><span class="line">    messagebox.showinfo(<span class="string">&quot;Message&quot;</span>, <span class="string">&quot;送你花&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;送花&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">btn01.bind(<span class="string">&quot;&lt;Button-1&gt;&quot;</span>, songhua)</span><br><span class="line"></span><br><span class="line">root.mainloop()  <span class="comment"># 调用组件的mainloop()方法，进入事件循环</span></span><br></pre></td></tr></table></figure><h3 id="PEP8编码规范-窗口大小和位置"><a href="#PEP8编码规范-窗口大小和位置" class="headerlink" title="PEP8编码规范-窗口大小和位置"></a>PEP8编码规范-窗口大小和位置</h3><p><strong>主窗口位置和大小</strong></p><p>通过 <code>geometry(&#39;wxh±x±y&#39;)</code>进行设置。<code>w</code> 为宽度，<code>h</code> 为高度。<code>+x</code> 表示距屏幕左边的距离；<code>-x</code> 表示距屏幕右边的距离；<code>+y</code> 表示距屏幕上边的距离；<code>-y</code> 表示距屏幕下边的距离。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.title(<span class="string">&quot;测试主窗口的位置和大小&quot;</span>)</span><br><span class="line">root.geometry(<span class="string">&quot;500x400+100+200&quot;</span>)  <span class="comment"># 宽度 500，高度 400；距屏幕左边 100，距屏幕上边200</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h3 id="GUI编程整体描述-常用组件汇总"><a href="#GUI编程整体描述-常用组件汇总" class="headerlink" title="GUI编程整体描述-常用组件汇总"></a>GUI编程整体描述-常用组件汇总</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113910.png" alt="image-20231124174304488"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113911.png" alt="image-20231124174456418">                                                                                            </p><p>​                                                                                        <strong>常用组件汇总列表</strong></p><div class="table-container"><table><thead><tr><th><strong>Tkinter 类</strong></th><th style="text-align:center"><strong>名称</strong></th><th><strong>简介</strong></th></tr></thead><tbody><tr><td>Toplevel</td><td style="text-align:center">顶层</td><td>容器类，可用于为其他组件提供单独的容器；Toplevel 有点类似于窗口</td></tr><tr><td>Button</td><td style="text-align:center">按钮</td><td>代表按钮组件</td></tr><tr><td>Canvas</td><td style="text-align:center">画布</td><td>提供绘图功能，包括直线、矩形、椭圆、多边形、位图等</td></tr><tr><td>Checkbutton</td><td style="text-align:center">复选框</td><td>可供用户勾选的复选框</td></tr><tr><td>Entry</td><td style="text-align:center">单行输入框</td><td>用户可输入内容</td></tr><tr><td>Frame</td><td style="text-align:center">容器</td><td>用于装载其它 GUI 组件</td></tr><tr><td>Label</td><td style="text-align:center">标签</td><td>用于显示不可编辑的文本或图标</td></tr><tr><td>LabelFrame</td><td style="text-align:center">容器</td><td>也是容器组件，类似于 Frame，但它支持添加标题</td></tr><tr><td>Listbox</td><td style="text-align:center">列表框</td><td>列出多个选项，供用户选择</td></tr><tr><td>Menu</td><td style="text-align:center">菜单</td><td>菜单组件</td></tr><tr><td>Menubutton</td><td style="text-align:center">菜单按钮</td><td>用来包含菜单的按钮（包括下拉式、层叠式等）</td></tr><tr><td>OptionMenu</td><td style="text-align:center">菜单按钮</td><td>Menubutton 的子类，也代表菜单按钮，可通过按钮打开一个菜单</td></tr><tr><td>Message</td><td style="text-align:center">消息框</td><td>类似于标签，但可以显示多行文本；后来当 Label 也能显示多行文本之后，该组件基本处于废弃状态</td></tr><tr><td>PanedWindow</td><td style="text-align:center">分区窗口</td><td>该容器会被划分成多个区域，每添加一个组件占一个区域，用户可通过拖动分隔线来改变各区域的大小</td></tr><tr><td>Radiobutton</td><td style="text-align:center">单选钮</td><td>可供用户点边的单选钮</td></tr><tr><td>Scale</td><td style="text-align:center">滑动条</td><td>拖动滑块可设定起始值和结束值，可显示当前位置的精确值</td></tr><tr><td>Spinbox</td><td style="text-align:center">微调选择器</td><td>用户可通过该组件的向上、向下箭头选择不同的值</td></tr><tr><td>Scrollbar</td><td style="text-align:center">滚动条</td><td>用于为组件（文本域、画布、列表框、文本框）提供滚动功能</td></tr><tr><td>Text</td><td style="text-align:center">多行文本框</td><td>显示多行文本</td></tr></tbody></table></div><h3 id="GUI程序的经典面向对象写法"><a href="#GUI程序的经典面向对象写法" class="headerlink" title="GUI程序的经典面向对象写法"></a>GUI程序的经典面向对象写法</h3><p>本节程序也是 GUI 应用程序编写的一个主要结构，采用了==面向对象==的方式，更加合理的组织代码。</p><p>通过类 <code>Application</code> 组织整个 GUI 程序，类 <code>Application</code> 继承了 <code>Frame</code> 及通过继承拥有了父类的特性。通过构造函数<code>__init__()</code>初始化窗口中的对象，通过 <code>createWidgets()</code>方法创建窗口中的对象。</p><p><code>Frame</code> 框架是一个 <code>tkinter</code> 组件，表示一个矩形的区域。<code>Frame</code> 一般作为容器使用，可以放置其他组件，从而实现复杂的布局。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试一个经典的GUI程序的写法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个经典的GUI程序类的写法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        <span class="comment"># 几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建组件&quot;&quot;&quot;</span></span><br><span class="line">        self.btn01 = Button(self)</span><br><span class="line">        self.btn01[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;点击送花&quot;</span></span><br><span class="line">        self.btn01.pack()</span><br><span class="line">        self.btn01[<span class="string">&quot;command&quot;</span>] = self.songhua</span><br><span class="line">        <span class="comment"># 创建一个退出按钮</span></span><br><span class="line">        self.btnQuit = Button(self, text=<span class="string">&quot;退出&quot;</span>, command=root.destroy)</span><br><span class="line">        <span class="comment"># 将组件放入application里</span></span><br><span class="line">        self.btnQuit.pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">songhua</span>(<span class="params">self</span>):</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;送花&quot;</span>, <span class="string">&quot;送你花&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x100+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;一个经典的GUI程序类的测试&quot;</span>)</span><br><span class="line">    app = Application(master=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113912.png" alt="image-20231124220642885" style="zoom:50%;" /></p><h3 id="简单组件"><a href="#简单组件" class="headerlink" title="简单组件"></a>简单组件</h3><h4 id="Label标签-tkinter中图像正确显示全局变量写法"><a href="#Label标签-tkinter中图像正确显示全局变量写法" class="headerlink" title="Label标签-tkinter中图像正确显示全局变量写法"></a>Label标签-tkinter中图像正确显示全局变量写法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个经典的GUI程序类的写法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        <span class="comment"># 几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建组件&quot;&quot;&quot;</span></span><br><span class="line">        self.label01 = Label(self, text=<span class="string">&quot;label test&quot;</span>, width=<span class="number">10</span>, height=<span class="number">2</span>,</span><br><span class="line">                             bg=<span class="string">&quot;black&quot;</span>, fg=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">        self.label01.pack()</span><br><span class="line">        <span class="comment"># 设置字体</span></span><br><span class="line">        self.label02 = Label(self, text=<span class="string">&quot;字体测试&quot;</span>, width=<span class="number">10</span>, height=<span class="number">2</span>,</span><br><span class="line">                             bg=<span class="string">&quot;blue&quot;</span>, fg=<span class="string">&quot;white&quot;</span>, font=(<span class="string">&quot;黑体&quot;</span>, <span class="number">10</span>))</span><br><span class="line">        self.label02.pack()</span><br><span class="line">        <span class="comment"># 显示图片</span></span><br><span class="line">        <span class="keyword">global</span> photo   <span class="comment"># photo声明为全局变量，如果是局部变量，本方法执行完毕后，图像对象会被销毁，窗口显示不出图像</span></span><br><span class="line">        photo = PhotoImage(file=<span class="string">&quot;../images/logo.gif&quot;</span>)</span><br><span class="line">        self.label03 = Label(self, image=photo)</span><br><span class="line">        self.label03.pack()</span><br><span class="line">        <span class="comment"># 显示多行文本</span></span><br><span class="line">        self.label04 = Label(self, text=<span class="string">&quot;这是第一行\n这是第二行\n这是第三行\n&quot;</span>,</span><br><span class="line">                             borderwidth=<span class="number">1</span>, relief=<span class="string">&quot;solid&quot;</span>, justify=<span class="string">&quot;center&quot;</span>)</span><br><span class="line">        self.label04.pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x250+500+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;Label的测试&quot;</span>)</span><br><span class="line">    app = Application(master=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113914.png" alt="image-20231130152234046"></p><h4 id="Options选项详解-底层源码分析和阅读-可变参数和运算符重载复习"><a href="#Options选项详解-底层源码分析和阅读-可变参数和运算符重载复习" class="headerlink" title="Options选项详解-底层源码分析和阅读-可变参数和运算符重载复习"></a>Options选项详解-底层源码分析和阅读-可变参数和运算符重载复习</h4><p>通过学习 Label 组件，我们发现可以通过 Options 设置组件的属性，从而控制组件的各种状态。比如：宽度、高度、颜色、位置等等。</p><p>我们可以通过三种方式设置 Options 选项，这在各种 GUI 组件中用法都一致。</p><ol><li><p>创建对象时，使用可变参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fred = Button(self, fg=<span class="string">&quot;red&quot;</span>, bg=<span class="string">&quot;blue&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建对象后，使用字典索引方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fred[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;red&quot;</span></span><br><span class="line">fred[<span class="string">&quot;bg&quot;</span>] = <span class="string">&quot;blue&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>创建对象后，使用 config()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fred.config(fg=<span class="string">&quot;red&quot;</span>, bg=<span class="string">&quot;blue&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Button-anchor位置控制"><a href="#Button-anchor位置控制" class="headerlink" title="Button-anchor位置控制"></a>Button-anchor位置控制</h4><p>Button（按钮）用来执行用户的单击操作。Button 可以包含文本，也可以包含图像。按钮被单击后会自动调用对应事件绑定的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个经典的GUI程序类的写法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        <span class="comment"># 几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建组件&quot;&quot;&quot;</span></span><br><span class="line">        self.btn01 = Button(root, text=<span class="string">&quot;登录&quot;</span>, anchor=E, command=self.login)  <span class="comment"># anchor控制字体位置</span></span><br><span class="line">        self.btn01.pack()</span><br><span class="line">        <span class="comment"># 显示图片</span></span><br><span class="line">        <span class="keyword">global</span> photo   <span class="comment"># photo声明为全局变量，如果是局部变量，本方法执行完毕后，图像对象会被销毁，窗口显示不出图像</span></span><br><span class="line">        photo = PhotoImage(file=<span class="string">&quot;../images/start.gif&quot;</span>)</span><br><span class="line">        self.btn02 = Button(root, image=photo, command=self.login)</span><br><span class="line">        self.btn02.pack()</span><br><span class="line">        self.btn02.config(state=<span class="string">&quot;disabled&quot;</span>)  <span class="comment"># 设置按钮为禁用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x250+500+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;Button的测试&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Entry单行文本框-StringVar-登录界面设计和功实现"><a href="#Entry单行文本框-StringVar-登录界面设计和功实现" class="headerlink" title="Entry单行文本框-StringVar-登录界面设计和功实现"></a>Entry单行文本框-StringVar-登录界面设计和功实现</h4><p>Entry 用来接收一行字符串的控件。如果用户输入的文字长度长于 Entry 控件的宽度时, 文字会自动向后滚动。如果想输入多行文本, 需要使用 Text 控件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个经典的GUI程序类的写法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        <span class="comment"># 几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建组件&quot;&quot;&quot;</span></span><br><span class="line">        self.label01 = Label(self, text=<span class="string">&quot;用户名&quot;</span>)</span><br><span class="line">        self.label01.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># StringVar变量绑定到指定的组件</span></span><br><span class="line">        <span class="comment"># StringVar变量的值发生变化，组件内容也发生变化</span></span><br><span class="line">        <span class="comment"># 组件内容发生变化，StringVar变量的值也发生变化</span></span><br><span class="line">        username = StringVar()</span><br><span class="line">        self.entry01 = Entry(self, textvariable=username)</span><br><span class="line">        self.entry01.pack()</span><br><span class="line">        username.<span class="built_in">set</span>(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(username.get())       <span class="comment"># admin</span></span><br><span class="line">        <span class="built_in">print</span>(self.entry01.get())   <span class="comment"># admin</span></span><br><span class="line"></span><br><span class="line">        password = StringVar()</span><br><span class="line">        self.entry02 = Entry(self, textvariable=password, show=<span class="string">&quot;*&quot;</span>)  <span class="comment"># 密码以*显示</span></span><br><span class="line">        self.entry02.pack()</span><br><span class="line"></span><br><span class="line">        Button(root, text=<span class="string">&quot;登录&quot;</span>, anchor=E, command=self.login).pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        username = self.entry01.get()</span><br><span class="line">        password = self.entry02.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;去数据库对比用户名密码&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户名：&quot;</span> + username)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;密码：&quot;</span> + password)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> password == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;登录系统&quot;</span>, <span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;登录系统&quot;</span>, <span class="string">&quot;登陆失败，用户名或密码错误&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x250+500+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;Entry 的测试&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113915.png" alt="image-20231130161750672"></p><h4 id="Text多行文本框详解-复杂tag标记"><a href="#Text多行文本框详解-复杂tag标记" class="headerlink" title="Text多行文本框详解-复杂tag标记"></a>Text多行文本框详解-复杂tag标记</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Text 多行文本框组件的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 宽度 20 个字母(10 个汉字)，高度一个行高</span></span><br><span class="line">        self.w1 = Text(root, width=<span class="number">40</span>, height=<span class="number">12</span>, bg=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line">        self.w1.pack()</span><br><span class="line">        self.w1.insert(<span class="number">1.0</span>, <span class="string">&quot;0123456789\nabcdefg&quot;</span>)  <span class="comment"># 1.0 第一行第一列  行号以 1 开始 列号以 0 开始</span></span><br><span class="line">        self.w1.insert(<span class="number">2.3</span>, <span class="string">&quot;锄禾日当午，汗滴禾下土。谁知盘中餐，粒粒皆辛苦\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">        Button(self, text=<span class="string">&quot;重复插入文本&quot;</span>, command=self.insertText).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;返回文本&quot;</span>, command=self.returnText).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;添加图片&quot;</span>, command=self.addImage).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;添加组件&quot;</span>, command=self.addWidget).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;通过 tag 精确控制文本&quot;</span>, command=self.testTag).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertText</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># INSERT 索引表示在光标处插入</span></span><br><span class="line">        self.w1.insert(INSERT, <span class="string">&#x27; Gaoqi &#x27;</span>)</span><br><span class="line">        <span class="comment"># END 索引号表示在最后插入</span></span><br><span class="line">        self.w1.insert(END, <span class="string">&#x27;[sxt]&#x27;</span>)</span><br><span class="line">        self.w1.insert(<span class="number">1.8</span>, <span class="string">&quot;gaoqi&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">returnText</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Indexes(索引)是用来指向 Text 组件中文本的位置，Text 的组件索引也是对应实际字符之间的位置。</span></span><br><span class="line">        <span class="comment"># 核心：行号以 1 开始 列号以 0 开始</span></span><br><span class="line">        <span class="built_in">print</span>(self.w1.get(<span class="number">1.2</span>, <span class="number">1.6</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;所有文本内容：\n&quot;</span> + self.w1.get(<span class="number">1.0</span>, END))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addImage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># global photo</span></span><br><span class="line">        self.photo = PhotoImage(file=<span class="string">&quot;../images/logo.gif&quot;</span>)</span><br><span class="line">        self.w1.image_create(END, image=self.photo)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addWidget</span>(<span class="params">self</span>):</span><br><span class="line">        b1 = Button(self.w1, text=<span class="string">&#x27;爱尚学堂&#x27;</span>)</span><br><span class="line">        <span class="comment"># 在 text 创建组件的命令</span></span><br><span class="line">        self.w1.window_create(INSERT, window=b1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testTag</span>(<span class="params">self</span>):</span><br><span class="line">        self.w1.delete(<span class="number">1.0</span>, END)</span><br><span class="line">        self.w1.insert(INSERT, <span class="string">&quot;good good study,day day up!\n 北京尚学堂\n 百战程序员\n百度，搜一下就知道&quot;</span>)</span><br><span class="line">        self.w1.tag_add(<span class="string">&quot;good&quot;</span>, <span class="number">1.0</span>, <span class="number">1.9</span>)</span><br><span class="line">        self.w1.tag_config(<span class="string">&quot;good&quot;</span>, background=<span class="string">&quot;yellow&quot;</span>, foreground=<span class="string">&quot;red&quot;</span>)  <span class="comment"># 改变tag的背景，字体颜色</span></span><br><span class="line">        self.w1.tag_add(<span class="string">&quot;baidu&quot;</span>, <span class="number">4.0</span>, <span class="number">4.2</span>)</span><br><span class="line">        self.w1.tag_config(<span class="string">&quot;baidu&quot;</span>, underline=<span class="literal">True</span>)  <span class="comment"># tag加下划线</span></span><br><span class="line">        self.w1.tag_bind(<span class="string">&quot;baidu&quot;</span>, <span class="string">&quot;&lt;Button-1&gt;&quot;</span>, self.webshow)  <span class="comment"># tag绑定事件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">webshow</span>(<span class="params">self, event</span>):</span><br><span class="line">        webbrowser.<span class="built_in">open</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;450x300+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><blockquote><p><strong>利用 Tags 实现更加强大的文本显示和控制</strong></p><p>Tags 通常用于改变 Text 组件中内容的样式和功能。你可以修改文本的字体、尺寸和颜色。另外，Tags 还允许你将文本、嵌入的组件和图片与鼠标和键盘等事件相关联。</p></blockquote><h4 id="Radiobutton单选按钮"><a href="#Radiobutton单选按钮" class="headerlink" title="Radiobutton单选按钮"></a>Radiobutton单选按钮</h4><p><strong>Radiobutton 控件用于选择同一组单选按钮中的一个。Radiobutton 可以显示文本，也可以显示图像。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Radiobutton 组件的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)   <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        self.v = StringVar()</span><br><span class="line">        self.v.<span class="built_in">set</span>(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">        self.r1 = Radiobutton(self, text=<span class="string">&quot;男性&quot;</span>, value=<span class="string">&quot;M&quot;</span>, variable=self.v)</span><br><span class="line">        self.r2 = Radiobutton(self, text=<span class="string">&quot;女性&quot;</span>, value=<span class="string">&quot;F&quot;</span>, variable=self.v)</span><br><span class="line">        self.r1.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        self.r2.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;确定&quot;</span>, command=self.confirm).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">confirm</span>(<span class="params">self</span>):</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;选择的性别:&quot;</span> + self.v.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x50+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Checkbutton复选按钮"><a href="#Checkbutton复选按钮" class="headerlink" title="Checkbutton复选按钮"></a>Checkbutton复选按钮</h4><p><strong>Checkbutton 控件用于选择多个按钮的情况。Checkbutton 可以显示文本，也可以显示图像。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Checkbutton 组件的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        self.codeHobby = IntVar()</span><br><span class="line">        self.videoHobby = IntVar()</span><br><span class="line">        <span class="built_in">print</span>(self.codeHobby.get())  <span class="comment"># 默认值是 0</span></span><br><span class="line">        self.c1 = Checkbutton(self, text=<span class="string">&quot;敲代码&quot;</span>, variable=self.codeHobby, onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>)</span><br><span class="line">        self.c2 = Checkbutton(self, text=<span class="string">&quot;看视频&quot;</span>, variable=self.videoHobby, onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>)</span><br><span class="line">        self.c1.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        self.c2.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;确定&quot;</span>, command=self.confirm).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">confirm</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.videoHobby.get() == <span class="number">1</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;看视频，都是正常人有的爱好！你喜欢看什么类型？&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.codeHobby.get() == <span class="number">1</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;抓获野生程序猿一只，赶紧送给他尚学堂的视频充饥&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x50+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="Canvasl画布组件"><a href="#Canvasl画布组件" class="headerlink" title="Canvasl画布组件"></a>Canvasl画布组件</h4><p>canvas（画布）是一个矩形区域，可以放置图形、图像、组件等。本节我们简单介绍canvas 的使用，更加详细和深入的内容将在后面的“图形绘制”章节讲解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Canvas 组件的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        self.canvas = Canvas(self, width=<span class="number">300</span>, height=<span class="number">200</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">        self.canvas.pack()</span><br><span class="line">        <span class="comment"># 画一条直线</span></span><br><span class="line">        line = self.canvas.create_line(<span class="number">10</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">50</span>)  <span class="comment"># 三个点 (x, y)</span></span><br><span class="line">        <span class="comment"># 画一个矩形.</span></span><br><span class="line">        rect = self.canvas.create_rectangle(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>)  <span class="comment"># 对角坐标，左上角和右下角坐标</span></span><br><span class="line">        <span class="comment"># 画一个椭圆.坐标两双。为椭圆的外切矩形左上角和底部右下角</span></span><br><span class="line">        oval = self.canvas.create_oval(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="keyword">global</span> photo</span><br><span class="line">        photo = PhotoImage(file=<span class="string">&quot;../images/logo.gif&quot;</span>)</span><br><span class="line">        self.canvas.create_image(<span class="number">150</span>, <span class="number">170</span>, image=photo)</span><br><span class="line">        Button(self, text=<span class="string">&quot;画 10 个矩形&quot;</span>, command=self.draw50Recg).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw50Recg</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="comment"># 左上角坐标</span></span><br><span class="line">            x1 = random.randrange(<span class="built_in">int</span>(self.canvas[<span class="string">&quot;width&quot;</span>]) / <span class="number">2</span>)</span><br><span class="line">            y1 = random.randrange(<span class="built_in">int</span>(self.canvas[<span class="string">&quot;height&quot;</span>]) / <span class="number">2</span>)</span><br><span class="line">            <span class="comment"># 右下角坐标</span></span><br><span class="line">            x2 = x1 + random.randrange(<span class="built_in">int</span>(self.canvas[<span class="string">&quot;width&quot;</span>]) / <span class="number">2</span>)</span><br><span class="line">            y2 = y1 + random.randrange(<span class="built_in">int</span>(self.canvas[<span class="string">&quot;height&quot;</span>]) / <span class="number">2</span>)</span><br><span class="line">            self.canvas.create_rectangle(x1, y1, x2, y2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x300+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h3><p>一个 GUI 应用程序必然有大量的组件，这些组件如何排布？这时候，就需要使用 tkinter提供的布局管理器帮助我们组织、管理在父组件中子组件的布局方式。tkinter 提供了三种管理器：<code>pack</code>、<code>grid</code>、<code>place</code>。</p><h4 id="Grid布局管理器详解"><a href="#Grid布局管理器详解" class="headerlink" title="Grid布局管理器详解"></a>Grid布局管理器详解</h4><p>grid 表格布局，采用==表格结构==组织组件。子组件的位置由行和列的单元格来确定，并且可以跨行和跨列，从而实现复杂的布局。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113916.png" alt="image-20231208162956284"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Grid 布局管理器的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过 grid 布局实现登录界面&quot;&quot;&quot;</span></span><br><span class="line">        self.label01 = Label(self, text=<span class="string">&quot;用户名&quot;</span>)</span><br><span class="line">        self.label01.grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">        self.entry01 = Entry(self)</span><br><span class="line">        self.entry01.grid(row=<span class="number">0</span>, column=<span class="number">1</span>)</span><br><span class="line">        Label(self, text=<span class="string">&quot;用户名为手机号&quot;</span>).grid(row=<span class="number">0</span>, column=<span class="number">2</span>)</span><br><span class="line">        Label(self, text=<span class="string">&quot;密码&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">0</span>)</span><br><span class="line">        Entry(self, show=<span class="string">&quot;*&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">1</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;登录&quot;</span>).grid(row=<span class="number">2</span>, column=<span class="number">1</span>, sticky=EW)  <span class="comment"># 东西两边对齐，拉长</span></span><br><span class="line">        Button(self, text=<span class="string">&quot;取消&quot;</span>).grid(row=<span class="number">2</span>, column=<span class="number">2</span>, sticky=E)   <span class="comment"># 东边对齐</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x90+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="计算器软件界面的设计"><a href="#计算器软件界面的设计" class="headerlink" title="计算器软件界面的设计"></a>计算器软件界面的设计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;计算器软件界面的设计&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)    <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过 grid 布局实现计算器软件的界面&quot;&quot;&quot;</span></span><br><span class="line">        btnText = ((<span class="string">&quot;MC&quot;</span>, <span class="string">&quot;M+&quot;</span>, <span class="string">&quot;M-&quot;</span>, <span class="string">&quot;MR&quot;</span>),</span><br><span class="line">                   (<span class="string">&quot;C&quot;</span>, <span class="string">&quot;±&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;✖&quot;</span>),</span><br><span class="line">                   (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="string">&quot;-&quot;</span>),</span><br><span class="line">                   (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&quot;+&quot;</span>),</span><br><span class="line">                   (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;=&quot;</span>),</span><br><span class="line">                   (<span class="number">0</span>, <span class="string">&quot;.&quot;</span>))</span><br><span class="line">        Entry(self).grid(row=<span class="number">0</span>, column=<span class="number">0</span>, columnspan=<span class="number">4</span>, pady=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">for</span> rindex, r <span class="keyword">in</span> <span class="built_in">enumerate</span>(btnText):</span><br><span class="line">            <span class="keyword">for</span> cindex, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(r):</span><br><span class="line">                <span class="keyword">if</span> c == <span class="string">&quot;=&quot;</span>:                      <span class="comment"># rowspan跨行，columnspan跨列</span></span><br><span class="line">                    Button(self, text=c, width=<span class="number">2</span>)\</span><br><span class="line">                        .grid(row=rindex + <span class="number">1</span>, column=cindex, rowspan=<span class="number">2</span>, sticky=EW)</span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">0</span>:</span><br><span class="line">                    Button(self, text=c, width=<span class="number">2</span>)\</span><br><span class="line">                        .grid(row=rindex + <span class="number">1</span>, column=cindex, columnspan=<span class="number">2</span>, sticky=EW)</span><br><span class="line">                <span class="keyword">elif</span> c == <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                    Button(self, text=c, width=<span class="number">2</span>)\</span><br><span class="line">                        .grid(row=rindex + <span class="number">1</span>, column=cindex+<span class="number">1</span>, sticky=EW)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    Button(self, text=c, width=<span class="number">2</span>)\</span><br><span class="line">                        .grid(row=rindex+<span class="number">1</span>, column=cindex, sticky=EW)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;200x300+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113917.png" alt="image-20231208171458029"></p><h4 id="Pack布局管理器"><a href="#Pack布局管理器" class="headerlink" title="Pack布局管理器"></a>Pack布局管理器</h4><p>pack 按照组件的创建顺序将子组件添加到父组件中，按照垂直或者水平的方向自然排布。如果不指定任何选项，默认在父组件中自顶向下垂直添加组件。</p><p>pack 是代码量最少，最简单的一种，可以用于快速生成界面。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113918.png" alt="image-20231208171547373"></p><h4 id="钢琴软件界面设计"><a href="#钢琴软件界面设计" class="headerlink" title="钢琴软件界面设计"></a>钢琴软件界面设计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 pack 布局管理</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;700x220&quot;</span>)</span><br><span class="line"><span class="comment"># Frame 是一个矩形区域，就是用来防止其他子组件</span></span><br><span class="line">f1 = Frame(root)</span><br><span class="line">f1.pack()</span><br><span class="line">f2 = Frame(root)</span><br><span class="line">f2.pack()</span><br><span class="line">btnText = (<span class="string">&quot;流行风&quot;</span>, <span class="string">&quot;中国风&quot;</span>, <span class="string">&quot;日本风&quot;</span>, <span class="string">&quot;重金属&quot;</span>, <span class="string">&quot;轻音乐&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> txt <span class="keyword">in</span> btnText:</span><br><span class="line">    Button(f1, text=txt).pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">        Button(f2, width=<span class="number">5</span>, height=<span class="number">10</span>, bg=<span class="string">&quot;black&quot;</span> <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;white&quot;</span>).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113919.png" alt="image-20231208171932560"></p><h4 id="Place管理器"><a href="#Place管理器" class="headerlink" title="Place管理器"></a>Place管理器</h4><p>place 布局管理器可以通过坐标精确控制组件的位置，适用于一些布局更加灵活的场景。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113920.png" alt="image-20231208172220911"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;500x300&quot;</span>)</span><br><span class="line">root.title(<span class="string">&quot;布局管理 place&quot;</span>)</span><br><span class="line">root[<span class="string">&quot;bg&quot;</span>] = <span class="string">&quot;white&quot;</span></span><br><span class="line">f1 = Frame(root, width=<span class="number">200</span>, height=<span class="number">200</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">f1.place(x=<span class="number">30</span>, y=<span class="number">30</span>) </span><br><span class="line">Button(root, text=<span class="string">&quot;尚学堂&quot;</span>).place(relx=<span class="number">0.5</span>, rely=<span class="number">0</span>,        <span class="comment"># 相对宽度和相对高度</span></span><br><span class="line">                               x=<span class="number">100</span>, y=<span class="number">200</span>, relwidth=<span class="number">0.2</span>, relheight=<span class="number">0.2</span>)  </span><br><span class="line">Button(f1, text=<span class="string">&quot;百战程序员&quot;</span>).place(relx=<span class="number">0.6</span>, rely=<span class="number">0.7</span>)</span><br><span class="line">Button(f1, text=<span class="string">&quot;高淇老师&quot;</span>).place(relx=<span class="number">0.2</span>, rely=<span class="number">0.2</span>)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113922.png" alt="image-20231208172552488"></p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="扑克游戏界面设计-增加事件操作"><a href="#扑克游戏界面设计-增加事件操作" class="headerlink" title="扑克游戏界面设计-增加事件操作"></a>扑克游戏界面设计-增加事件操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;扑克牌游戏的界面设计&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.place()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过place布局管理器实现扑克牌位置控制&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 显示一张扑克</span></span><br><span class="line">        <span class="comment"># self.photo = PhotoImage(file=&quot;../images/puke/puke1.gif&quot;)</span></span><br><span class="line">        <span class="comment"># self.puke1 = Label(self.master, image=self.photo)</span></span><br><span class="line">        <span class="comment"># self.puke1.place(x=10, y=50)</span></span><br><span class="line">        <span class="comment"># 用列表推导式显示所有图片</span></span><br><span class="line">        self.photos = [PhotoImage(file=<span class="string">&quot;../images/puke/puke&quot;</span> + <span class="built_in">str</span>(i+<span class="number">1</span>) + <span class="string">&quot;.gif&quot;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">        self.pukes = [Label(self.master, image=self.photos[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            self.pukes[i].place(x=<span class="number">10</span>+i*<span class="number">40</span>, y=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为所有Label增加事件处理</span></span><br><span class="line">        self.pukes[<span class="number">0</span>].bind_class(<span class="string">&quot;Label&quot;</span>, <span class="string">&quot;&lt;Button-1&gt;&quot;</span>, self.chupai)  <span class="comment"># 绑定左键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chupai</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="built_in">print</span>(event.widget.winfo_geometry())</span><br><span class="line">        <span class="built_in">print</span>(event.widget.winfo_y())   <span class="comment"># 获得y坐标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> event.widget.winfo_y() == <span class="number">50</span>:</span><br><span class="line">            event.widget.place(y=<span class="number">30</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.widget.place(y=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;600x300+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113923.png" alt="image-20231208191429645"></p><h4 id="lambda表达式-事件传参应用"><a href="#lambda表达式-事件传参应用" class="headerlink" title="lambda表达式-事件传参应用"></a>lambda表达式-事件传参应用</h4><p>lambda 表达式定义的是一个匿名函数，只适合简单输入参数，简单计算返回结果，不适合功能复杂情况。</p><p>lambda 定义的匿名函数也有输入、也有输出，只是没有名字。语法格式如下：</p><p>​                                                                    <code>lambda 参数值列表：表达式</code></p><p>参数值列表即为输入。</p><p>表达式计算的结构即为输出。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113924.png" alt="image-20231208192609616"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 测试 command 属性绑定事件，测试 lambda 表达式帮助传参</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;270x50&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;command 方式，简单情况：不涉及获取 event 对象，可以使用&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a=&#123;0&#125;,b=&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;测试 command1&quot;</span>,</span><br><span class="line">       command=mouseTest1).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">Button(root, text=<span class="string">&quot;测试 command2&quot;</span>, </span><br><span class="line">       command=<span class="keyword">lambda</span>: mouseTest2(<span class="string">&quot;gaoqi&quot;</span>, <span class="string">&quot;xixi&quot;</span>)).pack(side=<span class="string">&quot;left&quot;</span>) <span class="comment"># lambda 表达式帮助传参</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="三种事件绑定方式总结"><a href="#三种事件绑定方式总结" class="headerlink" title="三种事件绑定方式总结"></a>三种事件绑定方式总结</h4><p><strong>多种事件绑定方式汇总</strong></p><p><strong>组件对象的绑定</strong></p><ol><li>通过 <code>command</code> 属性绑定（适合简单不需获取 event 对象）</li></ol><p><code>Button(root,text=&quot;登录&quot;,command=login)</code></p><ol><li>通过 <code>bind()</code>方法绑定（适合需要获取 event 对象）</li></ol><p><code>c1 = Canvas(); c1.bind(&quot;&lt;Button-1&gt;&quot;,drawLine)</code> </p><p><strong>组件类的绑定</strong></p><p>调用对象的 <code>bind_class</code> 函数，将该组件类所有的组件绑定事件：</p><p><code>w.bind_class(&quot;Widget&quot;,&quot;event&quot;,eventhanler)</code></p><p>比如：<code>btn01.bind_class(“Button”,&quot;&lt;Button-1&gt;&quot;,func)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 多种事件绑定方式汇总</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;270x30&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest1</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bind()方式绑定，可以获取 event 对象&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(event.widget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a=&#123;0&#125;,b=&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;command 方式绑定，不能直接获取 event 对象&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest3</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;右键单击事件，绑定给所有按钮啦！！&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(event.widget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b1 = Button(root, text=<span class="string">&quot;测试 bind()绑定&quot;</span>)</span><br><span class="line">b1.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"><span class="comment"># bind 方式绑定事件</span></span><br><span class="line">b1.bind(<span class="string">&quot;&lt;Button-1&gt;&quot;</span>, mouseTest1)</span><br><span class="line"><span class="comment"># command 属性直接绑定事件</span></span><br><span class="line">b2 = Button(root, text=<span class="string">&quot;测试 command2&quot;</span>,</span><br><span class="line">            command=<span class="keyword">lambda</span>: mouseTest2(<span class="string">&quot;gaoqi&quot;</span>, <span class="string">&quot;xixi&quot;</span>))</span><br><span class="line">b2.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"><span class="comment"># 给所有 Button 按钮都绑定右键单击事件&lt;Button-2&gt;</span></span><br><span class="line">b1.bind_class(<span class="string">&quot;Button&quot;</span>, <span class="string">&quot;&lt;Button-2&gt;&quot;</span>, mouseTest3)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h3 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h3><h4 id="optionmenu选项菜单"><a href="#optionmenu选项菜单" class="headerlink" title="optionmenu选项菜单"></a>optionmenu选项菜单</h4><p>OptionMenu（选择项）用来做多选一，选中的项在顶部显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;optionmenu 的使用测试&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;200x100&quot;</span>)</span><br><span class="line">v = StringVar(root)</span><br><span class="line">v.<span class="built_in">set</span>(<span class="string">&quot;百战程序员&quot;</span>)</span><br><span class="line">om = OptionMenu(root, v, <span class="string">&quot;尚学堂&quot;</span>, <span class="string">&quot;百战程序员&quot;</span>, <span class="string">&quot;卓越班[保底 18 万]&quot;</span>)</span><br><span class="line">om[<span class="string">&quot;width&quot;</span>] = <span class="number">10</span></span><br><span class="line">om.pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最喜爱的机构:&quot;</span>, v.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># v.set(&quot;尚学堂&quot;)    # 直接修改了 optionmenu 中选中的值</span></span><br><span class="line">Button(root, text=<span class="string">&quot;确定&quot;</span>, command=test1).pack()</span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113925.png" alt="image-20231208195755098"></p><h4 id="scale滑块"><a href="#scale滑块" class="headerlink" title="scale滑块"></a>scale滑块</h4><p>Scale（移动滑块）用于在指定的数值区间，通过滑块的移动来选择值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; Scale(移动滑块)的使用测试：使用Scale控制字体大小变化&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x150&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;滑块的值:&quot;</span>, value)</span><br><span class="line">    newFont = (<span class="string">&quot;宋体&quot;</span>, value)</span><br><span class="line">    a.config(font=newFont)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Scale(root, from_=<span class="number">10</span>, to=<span class="number">50</span>, length=<span class="number">200</span>, tickinterval=<span class="number">5</span>, orient=HORIZONTAL, command=test1)</span><br><span class="line">s1.pack()</span><br><span class="line">a = Label(root, text=<span class="string">&quot;百战程序员&quot;</span>, width=<span class="number">10</span>, height=<span class="number">1</span>, bg=<span class="string">&quot;black&quot;</span>, fg=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">a.pack()</span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113926.png" alt="image-20231208200121685"></p><h4 id="颜色框"><a href="#颜色框" class="headerlink" title="颜色框"></a>颜色框</h4><p>颜色选择框可以帮助我们设置背景色、前景色、画笔颜色、字体颜色等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;askcolor 颜色选择框的测试，改变背景色&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x150&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    s1 = askcolor(color=<span class="string">&quot;red&quot;</span>, title=<span class="string">&quot;选择背景色&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(s1)</span><br><span class="line">    <span class="comment"># s1 的值是：((0.0, 0.0, 255.99609375), &#x27;#0000ff&#x27;)</span></span><br><span class="line">    root.config(bg=s1[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;选择背景色&quot;</span>, command=test1).pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113927.png" alt="image-20231208201753386"></p><h4 id="文件选择框"><a href="#文件选择框" class="headerlink" title="文件选择框"></a>文件选择框</h4><p>文件对话框帮助我们实现可视化的==操作目录、操作文件==。最后，将文件、目录的信息传入到程序中。文件对话框包含如下一些常用函数：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113928.png" alt="image-20231208203352425"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113929.png" alt="image-20231208203403744"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;文件对话框获取文件&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk();</span><br><span class="line">root.geometry(<span class="string">&quot;400x100&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    f = askopenfilename(title=<span class="string">&quot;上传文件&quot;</span>,</span><br><span class="line">                        initialdir=<span class="string">&quot;d:/&quot;</span>, filetypes=[(<span class="string">&quot;视频文件&quot;</span>, <span class="string">&quot;.mp4&quot;</span>)])</span><br><span class="line">    <span class="comment"># print(f)</span></span><br><span class="line">    show[<span class="string">&quot;text&quot;</span>] = f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;选择编辑的视频文件&quot;</span>, command=test1).pack()</span><br><span class="line">show = Label(root, width=<span class="number">40</span>, height=<span class="number">3</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">show.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># askcolor 颜色选择框的测试，改变背景色</span></span><br><span class="line"><span class="comment"># 打开指定 txt 文件，并读出文件内容到窗口</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x100&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">with</span> askopenfile(title=<span class="string">&quot;上传文件&quot;</span>,</span><br><span class="line">                     initialdir=<span class="string">&quot;d:&quot;</span>, filetypes=[(<span class="string">&quot;文本文件&quot;</span>, <span class="string">&quot;.txt&quot;</span>)]) <span class="keyword">as</span> f:</span><br><span class="line">        show[<span class="string">&quot;text&quot;</span>] = f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;选择读取的文本文件&quot;</span>, command=test1).pack()</span><br><span class="line">show = Label(root, width=<span class="number">40</span>, height=<span class="number">3</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">show.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="简单对话框"><a href="#简单对话框" class="headerlink" title="简单对话框"></a>简单对话框</h4><p>simpledialog（简单对话框）包含如下常用函数：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113930.png" alt="image-20231208204359332"></p><p>参数中，title 表示窗口标题；</p><p>prompt 是提示信息；</p><p>命名参数 kw 为各种选项：initialvalue（初始值）、minvalue（最小值）、maxvalue（最大值）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;简单对话框&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter.simpledialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x100&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    a = askinteger(title=<span class="string">&quot;输入年龄&quot;</span>, prompt=<span class="string">&quot;请输入年龄&quot;</span>, initialvalue=<span class="number">18</span>, minvalue=<span class="number">1</span>, maxvalue=<span class="number">150</span>)</span><br><span class="line">    <span class="comment"># askstring、askfloat 框使用方式一样</span></span><br><span class="line">    show[<span class="string">&quot;text&quot;</span>] = a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;你多大了? 请输入&quot;</span>, command=test1).pack()</span><br><span class="line">show = Label(root, width=<span class="number">40</span>, height=<span class="number">3</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">show.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113931.png" alt="image-20231208205056943"></p><h4 id="通用消息框"><a href="#通用消息框" class="headerlink" title="通用消息框"></a>通用消息框</h4><p>messagebox（通用消息框）用于和用户简单的交互，用户点击确定、取消。如下列出了</p><p>messagebox 的常见函数：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113932.png" alt="image-20231208204952327"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113933.png" alt="image-20231208205010396"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;简单对话框&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.messagebox <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x100&quot;</span>)</span><br><span class="line">a1 = showinfo(title=<span class="string">&quot;尚学堂&quot;</span>, message=<span class="string">&quot;Python400 集从零开始，深入底层，\</span></span><br><span class="line"><span class="string">                                      深入算法，打好基础。还手写神经网络&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a1)</span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="ttk子模块问题"><a href="#ttk子模块问题" class="headerlink" title="ttk子模块问题"></a>ttk子模块问题</h4><p>我们再前面学的组件是 tkinter 模块下的组件，整体风格较老较丑。为了弥补这点不足，推出了 ttk 组件。ttk 组件更加美观、功能更加强大。 新增了 LabeledScale（带标签的Scale）、Notebook（多文档窗口）、Progressbar（进度条）、Treeview（树）等组件。</p><p>使用 ttk 组件与使用普通的 Tkinter 组件并没有多大的区别，只要导入 ttk 模块即可。</p><blockquote><p>:warning:此处我们不展开细讲 ttk。如果你的项目确实需要用到复杂的界面，推荐大家使用<code>wxpython</code> 或者 <code>pyQt</code>.</p></blockquote><h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><h4 id="主菜单"><a href="#主菜单" class="headerlink" title="主菜单"></a>主菜单</h4><p>主菜单一般包含：文件、编辑、帮助等，位于 GUI 窗口的上面。创建主菜单一般有如下 4步：</p><ol><li>创建主菜单栏对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menubar = tk.Menu(root)</span><br></pre></td></tr></table></figure><ol><li>创建菜单，并添加到主菜单栏对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_menu = tk.Menu(menubar)</span><br><span class="line">menubar.add_cascade(label=<span class="string">&quot;文件&quot;</span>,menu=file_menu)</span><br></pre></td></tr></table></figure><ol><li>添加菜单项到 2 步中的菜单</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file_menu.add_command(label=<span class="string">&quot;打开&quot;</span>)</span><br><span class="line">file_menu.add_command(label=<span class="string">&quot;保存&quot;</span>,accelerator=<span class="string">&quot;ctrl + s&quot;</span> command=mySaveFile)</span><br><span class="line">file_menu.add_separator()</span><br><span class="line">file_menu.add_command(label=<span class="string">&quot;退出&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>将主菜单栏添加到根窗口</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root[<span class="string">&quot;menu&quot;</span>]=menubar</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;开发记事本软件的菜单&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)    <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.textpad = <span class="literal">None</span>         <span class="comment"># textpad 表示 Text 文本框对象</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建主菜单栏</span></span><br><span class="line">        menubar = Menu(root)</span><br><span class="line">        <span class="comment"># 创建子菜单</span></span><br><span class="line">        menuFile = Menu(menubar)</span><br><span class="line">        menuEdit = Menu(menubar)</span><br><span class="line">        menuHelp = Menu(menubar)</span><br><span class="line">        <span class="comment"># 将子菜单加入到主菜单栏</span></span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;文件(F)&quot;</span>, menu=menuFile)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;编辑(E)&quot;</span>, menu=menuEdit)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;帮助(H)&quot;</span>, menu=menuHelp)</span><br><span class="line">        <span class="comment"># 添加菜单项</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;新建&quot;</span>, accelerator=<span class="string">&quot;ctrl+n&quot;</span>,</span><br><span class="line">                             command=self.test)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;打开&quot;</span>, accelerator=<span class="string">&quot;ctrl+o&quot;</span>,</span><br><span class="line">                             command=self.test)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;保存&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+s&quot;</span>, command=self.test)</span><br><span class="line">        menuFile.add_separator()  <span class="comment"># 添加分割线</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;退出&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+q&quot;</span>, command=self.test)</span><br><span class="line">        <span class="comment"># 将主菜单栏加到根窗口</span></span><br><span class="line">        root[<span class="string">&quot;menu&quot;</span>] = menubar</span><br><span class="line">        <span class="comment"># 文本编辑区</span></span><br><span class="line">        self.textpad = Text(root, width=<span class="number">50</span>, height=<span class="number">30</span>)</span><br><span class="line">        self.textpad.pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;450x300+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;简易记事本&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="上下文菜单"><a href="#上下文菜单" class="headerlink" title="上下文菜单"></a>上下文菜单</h4><p>快捷菜单（上下文菜单）是通过鼠标右键单击组件而弹出的菜单，一般是和这个组件相关的操作，比如：剪切、复制、粘贴、属性等。创建快捷菜单步骤如下：</p><ol><li>创建菜单</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menubar = tk.Menu(root)</span><br><span class="line">menubar.add_command(label=<span class="string">&quot;字体&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>绑定鼠标右键单击事件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">event</span>):</span><br><span class="line">    menubar.post(event.x_root,event.y_root)  <span class="comment">#在鼠标右键单击坐标处显示菜单</span></span><br><span class="line">    root.bind(<span class="string">&quot;&lt;Button-3&gt;&quot;</span>,test)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;开发记事本软件的菜单&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)    <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.textpad = <span class="literal">None</span>         <span class="comment"># textpad 表示 Text 文本框对象</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建主菜单栏</span></span><br><span class="line">        menubar = Menu(root)</span><br><span class="line">        <span class="comment"># 创建子菜单</span></span><br><span class="line">        menuFile = Menu(menubar)</span><br><span class="line">        menuEdit = Menu(menubar)</span><br><span class="line">        menuHelp = Menu(menubar)</span><br><span class="line">        <span class="comment"># 将子菜单加入到主菜单栏</span></span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;文件(F)&quot;</span>, menu=menuFile)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;编辑(E)&quot;</span>, menu=menuEdit)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;帮助(H)&quot;</span>, menu=menuHelp)</span><br><span class="line">        <span class="comment"># 添加菜单项</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;新建&quot;</span>, accelerator=<span class="string">&quot;ctrl+n&quot;</span>,</span><br><span class="line">                             command=self.test)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;打开&quot;</span>, accelerator=<span class="string">&quot;ctrl+o&quot;</span>,</span><br><span class="line">                             command=self.test)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;保存&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+s&quot;</span>, command=self.test)</span><br><span class="line">        menuFile.add_separator()  <span class="comment"># 添加分割线</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;退出&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+q&quot;</span>, command=self.test)</span><br><span class="line">        <span class="comment"># 将主菜单栏加到根窗口</span></span><br><span class="line">        root[<span class="string">&quot;menu&quot;</span>] = menubar</span><br><span class="line">        <span class="comment"># 文本编辑区</span></span><br><span class="line">        self.textpad = Text(root, width=<span class="number">50</span>, height=<span class="number">30</span>)</span><br><span class="line">        self.textpad.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建上下文菜单</span></span><br><span class="line">        self.contextMenu = Menu(root)</span><br><span class="line">        self.contextMenu.add_command(label=<span class="string">&quot;背景颜色&quot;</span>,  command=self.test)</span><br><span class="line">        <span class="comment"># 为右键绑定事件</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Button-3&gt;&quot;</span>, self.createContextMenu)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createContextMenu</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># 菜单在鼠标右键单击的坐标显示</span></span><br><span class="line">        self.contextMenu.post(event.x_root, event.y_root)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;450x300+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;简易记事本&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312122142441.png" alt="image-20231209170627199"></p><h3 id="记事本项目"><a href="#记事本项目" class="headerlink" title="记事本项目"></a>记事本项目</h3><p>结合所学 GUI 知识，开发一款模仿 windows 记事本的软件。包含了基本的功能：</p><ol><li><p>新建文本文件</p></li><li><p>保存文件</p></li><li><p>修改文件内容</p></li><li><p>退出</p></li><li><p>各种快捷键处理</p></li><li><p>修改文本区域背景色</p></li></ol><h4 id="【01】打开和保存修改文件的实现"><a href="#【01】打开和保存修改文件的实现" class="headerlink" title="【01】打开和保存修改文件的实现"></a>【01】打开和保存修改文件的实现</h4><h4 id="【02】新建文件-背景色改变-快捷键功能"><a href="#【02】新建文件-背景色改变-快捷键功能" class="headerlink" title="【02】新建文件-背景色改变-快捷键功能"></a>【02】新建文件-背景色改变-快捷键功能</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">开发一个简单的记事本。</span></span><br><span class="line"><span class="string">包含：新建、保存、修改文本内容、退出</span></span><br><span class="line"><span class="string">包含：各种快捷键的处理</span></span><br><span class="line"><span class="string">version 1.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.textpad = <span class="literal">None</span>  <span class="comment"># textpad 表示 Text 文本框对象</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建主菜单栏</span></span><br><span class="line">        menubar = Menu(root)</span><br><span class="line">        <span class="comment"># 创建子菜单</span></span><br><span class="line">        menuFile = Menu(menubar)</span><br><span class="line">        menuEdit = Menu(menubar)</span><br><span class="line">        menuHelp = Menu(menubar)</span><br><span class="line">        <span class="comment"># 将子菜单加入到主菜单栏</span></span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;文件(F)&quot;</span>, menu=menuFile)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;编辑(E)&quot;</span>, menu=menuEdit)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;帮助(H)&quot;</span>, menu=menuHelp)</span><br><span class="line">        <span class="comment"># 添加菜单项</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;新建&quot;</span>, accelerator=<span class="string">&quot;ctrl+n&quot;</span>,</span><br><span class="line">                             command=self.newfile)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;打开&quot;</span>, accelerator=<span class="string">&quot;ctrl+o&quot;</span>,</span><br><span class="line">                             command=self.openfile)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;保存&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+s&quot;</span>, command=self.savefile)</span><br><span class="line">        menuFile.add_separator()  <span class="comment"># 添加分割线</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;退出&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+q&quot;</span>, command=self.exit)</span><br><span class="line">        <span class="comment"># 将主菜单栏加到根窗口</span></span><br><span class="line">        root[<span class="string">&quot;menu&quot;</span>] = menubar</span><br><span class="line">        <span class="comment"># 增加快捷键的处理</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Control-n&gt;&quot;</span>, <span class="keyword">lambda</span> event: self.newfile())   <span class="comment"># 新建文件快捷键</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Control-o&gt;&quot;</span>, <span class="keyword">lambda</span> event: self.openfile())  <span class="comment"># 打开新文件快捷键</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Control-s&gt;&quot;</span>, <span class="keyword">lambda</span> event: self.savefile())  <span class="comment"># 保存文件快捷键</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Control-q&gt;&quot;</span>, <span class="keyword">lambda</span> event: self.exit())      <span class="comment"># 退出快捷键</span></span><br><span class="line">        <span class="comment"># 文本编辑区</span></span><br><span class="line">        self.textpad = Text(root, width=<span class="number">50</span>, height=<span class="number">30</span>)</span><br><span class="line">        self.textpad.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建上下文菜单</span></span><br><span class="line">        self.contextMenu = Menu(root)</span><br><span class="line">        self.contextMenu.add_command(label=<span class="string">&quot;背景颜色&quot;</span>, command=self.openAskColor)</span><br><span class="line">        <span class="comment"># 为右键绑定事件</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Button-3&gt;&quot;</span>, self.createContextMenu)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">newfile</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 每次打开文件之前清空text控件之前的内容</span></span><br><span class="line">        self.textpad.delete(<span class="number">1.0</span>, END)</span><br><span class="line">        self.filename = asksaveasfilename(title=<span class="string">&quot;另存为&quot;</span>, initialfile=<span class="string">&quot;未命名.txt&quot;</span>,</span><br><span class="line">                                          filetypes=[(<span class="string">&quot;文本文档&quot;</span>, <span class="string">&quot;*.txt&quot;</span>)],</span><br><span class="line">                                          defaultextension=<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">        self.savefile()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">openfile</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 每次打开文件之前清空text控件之前的内容</span></span><br><span class="line">        self.textpad.delete(<span class="number">1.0</span>, END)</span><br><span class="line">        <span class="keyword">with</span> askopenfile(title=<span class="string">&quot;打开文本文件&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.textpad.insert(INSERT, f.read())</span><br><span class="line">            self.filename = f.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">savefile</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.filename, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            c = self.textpad.get(<span class="number">1.0</span>, END)</span><br><span class="line">            f.write(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exit</span>(<span class="params">self</span>):</span><br><span class="line">        root.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">openAskColor</span>(<span class="params">self</span>):</span><br><span class="line">        color = askcolor(color=<span class="string">&quot;red&quot;</span>, title=<span class="string">&quot;选择背景颜色&quot;</span>)</span><br><span class="line">        <span class="comment"># 返回格式 ((0,0,0,255),&quot;0000ff&quot;)</span></span><br><span class="line">        self.textpad.config(bg=color[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createContextMenu</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># 菜单在鼠标右键单击的坐标显示</span></span><br><span class="line">        self.contextMenu.post(event.x_root, event.y_root)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;450x300+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;简易记事本&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="【03】python项目打包成exe可执行文件"><a href="#【03】python项目打包成exe可执行文件" class="headerlink" title="【03】python项目打包成exe可执行文件"></a>【03】python项目打包成exe可执行文件</h4><p>我们可以使用 pyinstaller 模块实现将 python 项目打包成 exe 文件。操作步骤如下：</p><ol><li><p>安装 pyinstaller 模块</p><p>在 pycharm 中操作：file—&gt;setting—&gt;Project：xxx —&gt;Project interpretor，再点击+即可。</p></li><li><p>在 pycharm 的 Terminal 终端输入如下命令：</p><p><code>pyinstaller  -F  xxxx.py</code></p><blockquote><p>:warning:相关参数如下：</p><p>—icon= 图标路径（<code>pyinstaller -F --icon=my.ico XXXX.py</code>）</p><p>-F 打包成一个 exe 文件</p><p>-w 使用窗口，无控制台</p><p>-c 使用控制台，无窗口</p><p>-D 创建一个目录，里面包含 exe 以及其他一些依赖性文件</p></blockquote></li><li><p>在项目的 dist 目录下可以看到生成了 exe 文件，直接在 windows 系统中使用即可</p></li></ol><blockquote><p>:warning:==exe 文件本质是将 python 解释器和程序打包到了一起，这样我们执行程序时就不用管 windows 系统是不是有 python 解释器。==</p></blockquote><h3 id="画图项目"><a href="#画图项目" class="headerlink" title="画图项目"></a>画图项目</h3><p>开发一款简单的画图软件, 包含如下功能：</p><ol><li><p>画笔</p></li><li><p>矩形/椭圆绘制</p></li><li><p>清屏</p></li><li><p>橡皮擦</p></li><li><p>直线/带箭头的直线</p></li><li><p>修改画笔颜色、背景颜色</p></li></ol><h4 id="【01】界面实现"><a href="#【01】界面实现" class="headerlink" title="【01】界面实现"></a>【01】界面实现</h4><h4 id="【02】绘制直线-拖动删除上一个图形"><a href="#【02】绘制直线-拖动删除上一个图形" class="headerlink" title="【02】绘制直线-拖动删除上一个图形"></a>【02】绘制直线-拖动删除上一个图形</h4><h4 id="【03】箭头直线-矩形绘制"><a href="#【03】箭头直线-矩形绘制" class="headerlink" title="【03】箭头直线-矩形绘制"></a>【03】箭头直线-矩形绘制</h4><h4 id="【04】画笔和橡皮擦实现"><a href="#【04】画笔和橡皮擦实现" class="headerlink" title="【04】画笔和橡皮擦实现"></a>【04】画笔和橡皮擦实现</h4><h4 id="【05】清屏-颜色框-快捷键处理"><a href="#【05】清屏-颜色框-快捷键处理" class="headerlink" title="【05】清屏-颜色框-快捷键处理"></a>【05】清屏-颜色框-快捷键处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">开发画图软件的菜单</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 　窗口的高度和宽度</span></span><br><span class="line">win_heigth = <span class="number">450</span></span><br><span class="line">win_width = <span class="number">900</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span>, bgcolor=<span class="string">&quot;#000000&quot;</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.bgcolor = bgcolor</span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line">        self.y = <span class="number">0</span></span><br><span class="line">        self.fgcolor = <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line">        <span class="comment"># 表示最后绘制图像的id</span></span><br><span class="line">        self.lastDraw = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 最初的绘画标记</span></span><br><span class="line">        self.startDrawFlag = <span class="literal">False</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建绘图区</span></span><br><span class="line">        self.drawpad = Canvas(root, width=win_width, height=win_heigth * <span class="number">0.9</span>, bg=self.bgcolor)</span><br><span class="line">        self.drawpad.pack()</span><br><span class="line">        <span class="comment"># 创建按钮</span></span><br><span class="line">        btn_start = Button(root, text=<span class="string">&quot;开始&quot;</span>, name=<span class="string">&quot;start&quot;</span>)</span><br><span class="line">        btn_start.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_pen = Button(root, text=<span class="string">&quot;画笔&quot;</span>, name=<span class="string">&quot;pen&quot;</span>)</span><br><span class="line">        btn_pen.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_rect = Button(root, text=<span class="string">&quot;矩形&quot;</span>, name=<span class="string">&quot;rect&quot;</span>)</span><br><span class="line">        btn_rect.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_clear = Button(root, text=<span class="string">&quot;清屏&quot;</span>, name=<span class="string">&quot;clear&quot;</span>)</span><br><span class="line">        btn_clear.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_eraser = Button(root, text=<span class="string">&quot;橡皮擦&quot;</span>, name=<span class="string">&quot;eraser&quot;</span>)</span><br><span class="line">        btn_eraser.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_lineArrow = Button(root, text=<span class="string">&quot;箭头直线&quot;</span>, name=<span class="string">&quot;lineArrow&quot;</span>)</span><br><span class="line">        btn_lineArrow.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_color = Button(root, text=<span class="string">&quot;颜色&quot;</span>, name=<span class="string">&quot;color&quot;</span>)</span><br><span class="line">        btn_color.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 事件处理</span></span><br><span class="line">        btn_pen.bind_class(<span class="string">&quot;Button&quot;</span>, <span class="string">&quot;&lt;1&gt;&quot;</span>, self.event_Manager)</span><br><span class="line">        self.drawpad.bind(<span class="string">&quot;ButtonRelease-1&quot;</span>, self.stopDraw)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 增加颜色切换的快捷键</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;KeyPress-r&gt;&quot;</span>,self.kuaijiejian)</span><br><span class="line">        root.bind(<span class="string">&quot;&lt;KeyPress-g&gt;&quot;</span>,self.kuaijiejian)</span><br><span class="line">        root.bind(<span class="string">&quot;&lt;KeyPress-y&gt;&quot;</span>,self.kuaijiejian)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">event_Manager</span>(<span class="params">self, event</span>):</span><br><span class="line">        name = event.widget.winfo_name()</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&quot;line&quot;</span>:</span><br><span class="line">            <span class="comment"># 绑定拖动鼠标</span></span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myLine)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;lineArrow&quot;</span>:</span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myLineArrow)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;rect&quot;</span>:</span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myRect)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;pen&quot;</span>:</span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myPen)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;eraser&quot;</span>:</span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myEraser)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;clear&quot;</span>:</span><br><span class="line">            self.drawpad.delete(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;color&quot;</span>:</span><br><span class="line">            c = askcolor(color=self.fgcolor, title=<span class="string">&quot;选择画笔颜色&quot;</span>)</span><br><span class="line">            <span class="comment"># [(255,0,0),&quot;#ff0000&quot;]</span></span><br><span class="line">            self.fgcolor = c[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stopDraw</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDrawFlag = <span class="literal">False</span></span><br><span class="line">        self.lastDraw = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startDraw</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.drawpad.delete(self.lastDraw)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.startDrawFlag:</span><br><span class="line">            self.startDrawFlag = <span class="literal">True</span></span><br><span class="line">            self.x = event.x</span><br><span class="line">            self.y = event.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myLine</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.lastDraw = self.drawpad.create_line(self.x, self.y, event.x, event.y, fill=self.fgcolor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myLineArrow</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.lastDraw = self.drawpad.create_line(self.x, self.y, event.x, event.y, arrow=LAST, fill=self.fgcolor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myRect</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.lastDraw = self.drawpad.create_rectangle(self.x, self.y, event.x, event.y, outline=self.fgcolor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myPen</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.drawpad.create_line(self.x, self.y, event.x, event.y, fill=self.fgcolor)</span><br><span class="line">        self.x = event.x</span><br><span class="line">        self.y = event.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myEraser</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.drawpad.create_rectangle(event.x - <span class="number">4</span>, event.y - <span class="number">4</span>, event.x + <span class="number">4</span>, event.y + <span class="number">4</span>, fill=self.bgcolor)</span><br><span class="line">        self.x = event.x</span><br><span class="line">        self.y = event.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kuaijiejian</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="keyword">if</span> event.char == <span class="string">&quot;r&quot;</span>:</span><br><span class="line">            self.fgcolor = <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line">        <span class="keyword">if</span> event.char == <span class="string">&quot;g&quot;</span>:</span><br><span class="line">            self.fgcolor = <span class="string">&quot;#00ff00&quot;</span></span><br><span class="line">        <span class="keyword">if</span> event.char == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">            self.fgcolor = <span class="string">&quot;#ffff00&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="built_in">str</span>(win_width) + <span class="string">&quot;x&quot;</span> + <span class="built_in">str</span>(win_heigth) + <span class="string">&quot;+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;画图软件&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312122142443.png" alt="image-20231212214159088"></p><h2 id="游戏开发-坦克大战"><a href="#游戏开发-坦克大战" class="headerlink" title="游戏开发-坦克大战"></a>游戏开发-坦克大战</h2><h3 id="pygame模块的安装"><a href="#pygame模块的安装" class="headerlink" title="pygame模块的安装"></a>pygame模块的安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pygame</span><br></pre></td></tr></table></figure><h3 id="面向对象分析项目需求"><a href="#面向对象分析项目需求" class="headerlink" title="面向对象分析项目需求"></a>面向对象分析项目需求</h3><p>坦克大战游戏的需求</p><p>1.顶目中有哪些类</p><p>2.每个类中有哪些方法</p><p>（1）坦克类（我方坦克、敌方坦克）</p><p>​            射击<br>​                    移动类<br>​                    显示坦克的方法</p><p>（2）子弹类</p><p>​            移动<br>​                    显示子弹的方法</p><p>（3）墙壁类</p><p>​            属性：是否可以通过</p><p>（4）爆炸效果类</p><p>​            展示爆炸效果</p><p>（5）音效类</p><p>​            播放音乐</p><p>（6）主类</p><p>​            开始游戏</p><p>​            结束游戏</p><h3 id="坦克大战项目框架搭建"><a href="#坦克大战项目框架搭建" class="headerlink" title="坦克大战项目框架搭建"></a>坦克大战项目框架搭建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainGame</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startGame</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">endGame</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tank</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 射击</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示坦克的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我方坦克</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTank</span>(<span class="title class_ inherited__">Tank</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 敌方坦克</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EnemyTank</span>(<span class="title class_ inherited__">Tank</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子弹类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示子弹的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayBullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 墙壁类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wall</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示墙壁的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆炸类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Expode</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示爆炸效果的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayExpode</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 音效类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Music</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 播放音乐的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="加载主窗口"><a href="#加载主窗口" class="headerlink" title="加载主窗口"></a>加载主窗口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    加载主窗口</span><br><span class="line">    pygame官方网址：www.pygame.org</span><br></pre></td></tr></table></figure><h3 id="坦克大战之事件处理"><a href="#坦克大战之事件处理" class="headerlink" title="坦克大战之事件处理"></a>坦克大战之事件处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    添加事件</span><br><span class="line">    1.点击关闭 关闭窗口</span><br><span class="line">    2.按下键盘时候，判断键盘按下的是什么键，分别对不同的键做处理</span><br></pre></td></tr></table></figure><h3 id="左上角文字的绘制"><a href="#左上角文字的绘制" class="headerlink" title="左上角文字的绘制"></a>左上角文字的绘制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    左上角文字绘制：</span><br><span class="line">    左上角输出敌方坦克的数量6</span><br></pre></td></tr></table></figure><h3 id="加载我方坦克"><a href="#加载我方坦克" class="headerlink" title="加载我方坦克"></a>加载我方坦克</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    加载我方坦克</span><br></pre></td></tr></table></figure><h3 id="我方坦克切换方向移动"><a href="#我方坦克切换方向移动" class="headerlink" title="我方坦克切换方向移动"></a>我方坦克切换方向移动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    1.我方坦克切换方向</span><br><span class="line">    2.我方坦克移动</span><br></pre></td></tr></table></figure><h3 id="我方坦克移动优化"><a href="#我方坦克移动优化" class="headerlink" title="我方坦克移动优化"></a>我方坦克移动优化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    优化我方坦克移动的方法</span><br></pre></td></tr></table></figure><h3 id="我方坦克优化2"><a href="#我方坦克优化2" class="headerlink" title="我方坦克优化2"></a>我方坦克优化2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    优化:按下方向键，坦克一直移动</span><br><span class="line">         松开方向键，坦克停止</span><br></pre></td></tr></table></figure><h3 id="加载敌方坦克"><a href="#加载敌方坦克" class="headerlink" title="加载敌方坦克"></a>加载敌方坦克</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    1.完善敌方坦克初始化方法</span><br><span class="line">    2.创建敌方坦克并展示</span><br></pre></td></tr></table></figure><h3 id="敌方坦克随机移动"><a href="#敌方坦克随机移动" class="headerlink" title="敌方坦克随机移动"></a>敌方坦克随机移动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    1.优化左上角 文字的显示，将敌方坦克的数量进行修改</span><br><span class="line">    2.敌方坦克随机移动</span><br><span class="line">      思路：新增加一个变量步数，当移动时候步数进行递减</span><br><span class="line">            当步数&lt;=0时候修改敌方坦克的方向,并将步数复位</span><br></pre></td></tr></table></figure><h3 id="完善子弹类"><a href="#完善子弹类" class="headerlink" title="完善子弹类"></a>完善子弹类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     完善子弹类</span><br></pre></td></tr></table></figure><h3 id="我方坦克发射子弹"><a href="#我方坦克发射子弹" class="headerlink" title="我方坦克发射子弹"></a>我方坦克发射子弹</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     完成我方坦克发射子弹</span><br></pre></td></tr></table></figure><h3 id="子弹移动"><a href="#子弹移动" class="headerlink" title="子弹移动"></a>子弹移动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     完成我方坦克发射子弹,并完成子弹的移动</span><br></pre></td></tr></table></figure><h3 id="子弹消亡及数量控制"><a href="#子弹消亡及数量控制" class="headerlink" title="子弹消亡及数量控制"></a>子弹消亡及数量控制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     优化：1.如果子弹碰到墙壁，让子弹消失</span><br><span class="line">           2.最多可以发射3颗子弹，不能一直发射</span><br></pre></td></tr></table></figure><h3 id="敌方坦克发射子弹"><a href="#敌方坦克发射子弹" class="headerlink" title="敌方坦克发射子弹"></a>敌方坦克发射子弹</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     优化：1.如果子弹碰到墙壁，让子弹消失</span><br><span class="line">           2.最多可以发射3颗子弹，不能一直发射</span><br></pre></td></tr></table></figure><h3 id="我方子弹与敌方坦克的碰撞"><a href="#我方子弹与敌方坦克的碰撞" class="headerlink" title="我方子弹与敌方坦克的碰撞"></a>我方子弹与敌方坦克的碰撞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     我方子弹与敌方坦克的碰撞</span><br><span class="line">       精灵类 Sprite类</span><br></pre></td></tr></table></figure><h3 id="实现爆炸效果"><a href="#实现爆炸效果" class="headerlink" title="实现爆炸效果"></a>实现爆炸效果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.完善爆炸效果类</span><br><span class="line">     2.在窗口中展示爆炸效果</span><br></pre></td></tr></table></figure><h3 id="我方坦克的消亡"><a href="#我方坦克的消亡" class="headerlink" title="我方坦克的消亡"></a>我方坦克的消亡</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.敌方子弹与我方坦克的碰撞</span><br><span class="line">     2.添加爆炸效果</span><br></pre></td></tr></table></figure><h3 id="我方坦克无限重生"><a href="#我方坦克无限重生" class="headerlink" title="我方坦克无限重生"></a>我方坦克无限重生</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    让我方坦克无限重生</span><br><span class="line">      1.按下键盘的Esc让重生</span><br><span class="line">      2.重生及重新创建我方坦克</span><br></pre></td></tr></table></figure><h3 id="加载墙壁"><a href="#加载墙壁" class="headerlink" title="加载墙壁"></a>加载墙壁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     添加墙壁</span><br><span class="line">     1.完善墙壁类，初始化方法</span><br><span class="line">     2.初始化墙壁，并将墙壁存储到列表中，在窗口中加载墙壁</span><br></pre></td></tr></table></figure><h3 id="子弹不穿墙"><a href="#子弹不穿墙" class="headerlink" title="子弹不穿墙"></a>子弹不穿墙</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.子弹不能穿墙</span><br><span class="line">        子弹碰撞到墙壁时候，让子弹消失</span><br><span class="line">     2.墙壁被击中，墙壁的生命值处理</span><br></pre></td></tr></table></figure><h3 id="坦克不能穿墙"><a href="#坦克不能穿墙" class="headerlink" title="坦克不能穿墙"></a>坦克不能穿墙</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.坦克不能穿墙</span><br><span class="line">        坦克碰撞到墙壁，不能再移动</span><br><span class="line">        不能再移动及坐标不能发生变化</span><br></pre></td></tr></table></figure><h3 id="敌我双方坦克发生碰撞"><a href="#敌我双方坦克发生碰撞" class="headerlink" title="敌我双方坦克发生碰撞"></a>敌我双方坦克发生碰撞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.我方坦克与敌方坦克发生碰撞</span><br><span class="line">       让我方坦克不能再继续移动   stay()</span><br><span class="line">     2.敌方坦克与我方坦克发生碰撞</span><br><span class="line">       让地方坦克不能再移动   stay()</span><br></pre></td></tr></table></figure><h3 id="音效处理"><a href="#音效处理" class="headerlink" title="音效处理"></a>音效处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.完善音效类</span><br><span class="line">     2.添加开场音效</span><br><span class="line">     3.我方坦克发射子弹添加音效</span><br></pre></td></tr></table></figure><h3 id="坦克大战完整代码"><a href="#坦克大战完整代码" class="headerlink" title="坦克大战完整代码"></a>坦克大战完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">pygame模块的安装</span></span><br><span class="line"><span class="string">面向对象分析项目需求</span></span><br><span class="line"><span class="string">坦克大战项目框架搭建</span></span><br><span class="line"><span class="string">加载主窗口</span></span><br><span class="line"><span class="string">坦克大战之事件处理</span></span><br><span class="line"><span class="string">左上角文字的绘制</span></span><br><span class="line"><span class="string">加载我方坦克</span></span><br><span class="line"><span class="string">我方坦克切换方向移动</span></span><br><span class="line"><span class="string">我方坦克移动优化</span></span><br><span class="line"><span class="string">我方坦克优化2</span></span><br><span class="line"><span class="string">加载敌方坦克</span></span><br><span class="line"><span class="string">敌方坦克随机移动</span></span><br><span class="line"><span class="string">完善子单类</span></span><br><span class="line"><span class="string">我方坦克发射子弹</span></span><br><span class="line"><span class="string">子弹移动</span></span><br><span class="line"><span class="string">子弹消亡及数量控制</span></span><br><span class="line"><span class="string">敌方坦克发射子弹</span></span><br><span class="line"><span class="string">我方子弹与敌方坦克的碰撞</span></span><br><span class="line"><span class="string">实现爆炸效果</span></span><br><span class="line"><span class="string">我方坦克的消亡</span></span><br><span class="line"><span class="string">我方坦克无限重生</span></span><br><span class="line"><span class="string">加载墙壁</span></span><br><span class="line"><span class="string">子弹不穿墙</span></span><br><span class="line"><span class="string">坦克不能穿墙</span></span><br><span class="line"><span class="string">敌我双方坦克发生碰撞</span></span><br><span class="line"><span class="string">音效处理</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> pygame, time, random</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line">SCREEN_WIDTH = <span class="number">800</span></span><br><span class="line">SCREEN_HEIGHT = <span class="number">500</span></span><br><span class="line">BG_COLOR = pygame.Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">TEXT_COLOR = pygame.Color(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseItem</span>(<span class="title class_ inherited__">Sprite</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, color, width, height</span>):</span><br><span class="line">        pygame.sprite.Sprite.__init__(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainGame</span>():</span><br><span class="line">    window = <span class="literal">None</span></span><br><span class="line">    my_tank = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 存储敌方坦克的列表</span></span><br><span class="line">    enemyTankList = []</span><br><span class="line">    <span class="comment"># 定义生成敌方坦克的数量</span></span><br><span class="line">    enemyTankCount = <span class="number">5</span></span><br><span class="line">    <span class="comment"># 存储我方子弹的列表</span></span><br><span class="line">    myBulletList = []</span><br><span class="line">    <span class="comment"># 存储敌方子弹的列表</span></span><br><span class="line">    enemyBulletList = []</span><br><span class="line">    <span class="comment"># 存储爆炸效果的列表</span></span><br><span class="line">    explodeList = []</span><br><span class="line">    <span class="comment"># 存储墙壁的列表</span></span><br><span class="line">    wallList = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startGame</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 加载主窗口</span></span><br><span class="line">        <span class="comment"># 初始化窗口</span></span><br><span class="line">        pygame.display.init()</span><br><span class="line">        <span class="comment"># 设置窗口的大小和显示</span></span><br><span class="line">        MainGame.window = pygame.display.set_mode([SCREEN_WIDTH, SCREEN_HEIGHT])</span><br><span class="line">        <span class="comment"># 初始化我方坦克</span></span><br><span class="line">        self.createMyTank()</span><br><span class="line">        <span class="comment"># 初始化敌方坦克，并将敌方坦克添加到列表中</span></span><br><span class="line">        self.createEnemyTank()</span><br><span class="line">        <span class="comment"># 初始化墙壁</span></span><br><span class="line">        self.createWall()</span><br><span class="line">        <span class="comment"># 设置窗口的标题</span></span><br><span class="line">        pygame.display.set_caption(<span class="string">&quot;坦克大战&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 使坦克移动的速度慢一点</span></span><br><span class="line">            time.sleep(<span class="number">0.02</span>)</span><br><span class="line">            <span class="comment"># 给窗口设置填充色</span></span><br><span class="line">            MainGame.window.fill(BG_COLOR)</span><br><span class="line">            <span class="comment"># 获取事件</span></span><br><span class="line">            self.getEvent()</span><br><span class="line">            <span class="comment"># 绘制文字</span></span><br><span class="line">            MainGame.window.blit(self.getTextSuface(<span class="string">&quot;敌方坦克剩余数量%d&quot;</span> % <span class="built_in">len</span>(MainGame.enemyTankList)), (<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">            <span class="comment"># 调用显示坦克的方法</span></span><br><span class="line">            <span class="comment"># 判断我方坦克是否是存活</span></span><br><span class="line">            <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                MainGame.my_tank.displayTank()</span><br><span class="line">            <span class="comment"># 删否则除我方坦克</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">del</span> MainGame.my_tank</span><br><span class="line">                MainGame.my_tank = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 循环遍历敌方坦克列表，展示敌方坦克</span></span><br><span class="line">            self.blitEnemyTank()</span><br><span class="line">            <span class="comment"># 循环遍历显示我方坦克的子弹</span></span><br><span class="line">            self.blitMyBullet()</span><br><span class="line">            <span class="comment"># 循环遍历显示敌方坦克的子弹</span></span><br><span class="line">            self.blitEnemyBullet()</span><br><span class="line">            <span class="comment"># 循环遍历爆炸列表,展示爆炸效果</span></span><br><span class="line">            self.blitExplode()</span><br><span class="line">            <span class="comment"># 循环遍历墙壁列表,展示墙壁</span></span><br><span class="line">            self.blitWall()</span><br><span class="line">            <span class="comment"># 调用坦克移动的方法</span></span><br><span class="line">            <span class="comment"># 如果坦克的开关是开启,才可以移动</span></span><br><span class="line">            <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> MainGame.my_tank.stop:</span><br><span class="line">                    MainGame.my_tank.move()</span><br><span class="line">                    <span class="comment"># 检查我方坦克是否与墙壁发生碰撞</span></span><br><span class="line">                    MainGame.my_tank.hitWall()</span><br><span class="line">                    <span class="comment"># 检测我方坦克是否与敌方坦克发生碰撞</span></span><br><span class="line">                    MainGame.my_tank.myTank_hit_enemyTank()</span><br><span class="line"></span><br><span class="line">            pygame.display.update()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化我方坦克</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createMyTank</span>(<span class="params">self</span>):</span><br><span class="line">        MainGame.my_tank = MyTank(<span class="number">350</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="comment"># 创建music对象</span></span><br><span class="line">        music = Music(<span class="string">&quot;./img/start.wav&quot;</span>)</span><br><span class="line">        <span class="comment"># 播放音乐</span></span><br><span class="line">        music.play()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化敌方坦克，并将敌方坦克添加到列表中</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createEnemyTank</span>(<span class="params">self</span>):</span><br><span class="line">        top = <span class="number">100</span></span><br><span class="line">        <span class="comment"># 循环生成敌方坦克</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MainGame.enemyTankCount):</span><br><span class="line">            left = random.randint(<span class="number">0</span>, <span class="number">600</span>)</span><br><span class="line">            speed = random.randint(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">            enemy = EnemyTank(left, top, speed)</span><br><span class="line">            MainGame.enemyTankList.append(enemy)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化墙壁</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">            <span class="comment"># 初始化墙壁</span></span><br><span class="line">            wall = Wall(i * <span class="number">130</span>, <span class="number">220</span>)</span><br><span class="line">            <span class="comment"># 将墙壁添加到列表中</span></span><br><span class="line">            MainGame.wallList.append(wall)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历敌方坦克列表，展示敌方坦克</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitEnemyTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> enemyTank <span class="keyword">in</span> MainGame.enemyTankList:</span><br><span class="line">            <span class="comment"># 判断敌方坦克是否活着</span></span><br><span class="line">            <span class="keyword">if</span> enemyTank.live:</span><br><span class="line">                enemyTank.displayTank()</span><br><span class="line">                enemyTank.randMove()</span><br><span class="line">                <span class="comment"># 调用检测敌方坦克是否和墙壁碰撞</span></span><br><span class="line">                enemyTank.hitWall()</span><br><span class="line">                <span class="comment"># 检测敌方坦克是否和我方坦克发生碰撞</span></span><br><span class="line">                <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                    enemyTank.enemyTank_hit_myTank()</span><br><span class="line">                <span class="comment"># 发射子弹</span></span><br><span class="line">                enemyBullet = enemyTank.shot()</span><br><span class="line">                <span class="comment"># 敌方子弹是否为None,如果不为None则添加到敌方子弹列表</span></span><br><span class="line">                <span class="keyword">if</span> enemyBullet:</span><br><span class="line">                    <span class="comment"># 将敌方坦克子弹存储到敌方子弹列表中</span></span><br><span class="line">                    MainGame.enemyBulletList.append(enemyBullet)</span><br><span class="line">            <span class="comment"># 从敌方坦克列表移除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.enemyTankList.remove(enemyTank)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历我方坦克的子弹存储列表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitMyBullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> myBullet <span class="keyword">in</span> MainGame.myBulletList:</span><br><span class="line">            <span class="comment"># 判断当前子弹是否是活着的状态，如果是则进行显示及移动</span></span><br><span class="line">            <span class="keyword">if</span> myBullet.live:</span><br><span class="line">                myBullet.displayBullet()</span><br><span class="line">                <span class="comment"># 调用子弹的移动方法</span></span><br><span class="line">                myBullet.move()</span><br><span class="line">                <span class="comment"># 调用检测我方子弹是否和敌方坦克发生碰撞</span></span><br><span class="line">                myBullet.myBullet_hit_enemyTank()</span><br><span class="line">                <span class="comment"># 检测我方子弹是否和墙壁碰撞</span></span><br><span class="line">                myBullet.hitWall()</span><br><span class="line">            <span class="comment"># 否则在列表中删除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.myBulletList.remove(myBullet)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历显示敌方坦克的子弹</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitEnemyBullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> enemyBullet <span class="keyword">in</span> MainGame.enemyBulletList:</span><br><span class="line">            <span class="comment"># 判断当前子弹是否是活着的状态，如果是则进行显示及移动</span></span><br><span class="line">            <span class="keyword">if</span> enemyBullet.live:</span><br><span class="line">                enemyBullet.displayBullet()</span><br><span class="line">                <span class="comment"># 调用子弹的移动方法</span></span><br><span class="line">                enemyBullet.move()</span><br><span class="line">                <span class="comment"># 调用检测敌方子弹是否和我方坦克发生碰撞</span></span><br><span class="line">                enemyBullet.enemyBullet_hit_myTank()</span><br><span class="line">                <span class="comment"># 检测敌方子弹是否和墙壁碰撞</span></span><br><span class="line">                enemyBullet.hitWall()</span><br><span class="line">            <span class="comment"># 否则在列表中删除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.enemyBulletList.remove(enemyBullet)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历爆炸列表,展示爆炸效果</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitExplode</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> explode <span class="keyword">in</span> MainGame.explodeList:</span><br><span class="line">            <span class="comment"># 判断是否是活着的状态，如果是则进行显示</span></span><br><span class="line">            <span class="keyword">if</span> explode.live:</span><br><span class="line">                explode.displayExplode()</span><br><span class="line">                <span class="comment"># 添加爆炸音效</span></span><br><span class="line">                music = Music(<span class="string">&quot;./img/fire.wav&quot;</span>)</span><br><span class="line">                music.play()</span><br><span class="line">            <span class="comment"># 否则在爆炸列表中删除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.explodeList.remove(explode)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历墙壁列表,展示墙壁</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> wall <span class="keyword">in</span> MainGame.wallList:</span><br><span class="line">            <span class="comment"># 判断墙壁是否存活</span></span><br><span class="line">            <span class="keyword">if</span> wall.live:</span><br><span class="line">                <span class="comment"># 调用墙壁展示方法</span></span><br><span class="line">                wall.displayWall()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 从墙壁列表移除</span></span><br><span class="line">                MainGame.wallList.remove(wall)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">endGame</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;感谢使用，欢迎再次使用&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 左上角文字绘制</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getTextSuface</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="comment"># 初始化字体模块</span></span><br><span class="line">        pygame.font.init()</span><br><span class="line">        <span class="comment"># 查看所有字体名称</span></span><br><span class="line">        <span class="comment"># print(pygame.font.get_fonts())</span></span><br><span class="line">        <span class="comment"># 获取字体font对象</span></span><br><span class="line">        font = pygame.font.SysFont(<span class="string">&quot;adobe宋体stdl&quot;</span>, <span class="number">18</span>)</span><br><span class="line">        <span class="comment"># 绘制字体信息</span></span><br><span class="line">        textSurface = font.render(text, <span class="literal">True</span>, TEXT_COLOR)</span><br><span class="line">        <span class="keyword">return</span> textSurface</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getEvent</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取事件</span></span><br><span class="line">        eventList = pygame.event.get()</span><br><span class="line">        <span class="comment"># 遍历事件</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> eventList:</span><br><span class="line">            <span class="comment"># 判断按下的键是关闭还是键盘按下</span></span><br><span class="line">            <span class="comment"># 如果按的是退出，关闭窗口</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                self.endGame()</span><br><span class="line">            <span class="comment"># 如果是键盘的按下</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">                <span class="comment"># 当坦克死亡或不存在</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> MainGame.my_tank:</span><br><span class="line">                    <span class="comment"># 如果按下的是ESC键,让我方坦克重生</span></span><br><span class="line">                    <span class="keyword">if</span> event.key == pygame.K_ESCAPE:</span><br><span class="line">                        <span class="comment"># 让我方坦克重生及调用创建坦克的方法</span></span><br><span class="line">                        self.createMyTank()</span><br><span class="line">                <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                    <span class="comment"># 判断的是按下的上、下、左、右</span></span><br><span class="line">                    <span class="keyword">if</span> event.key == pygame.K_LEFT:</span><br><span class="line">                        <span class="comment"># 切换方向</span></span><br><span class="line">                        MainGame.my_tank.direction = <span class="string">&quot;L&quot;</span></span><br><span class="line">                        <span class="comment"># MainGame.my_tank.move()</span></span><br><span class="line">                        <span class="comment"># 修改坦克的的开关</span></span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">False</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;按下左键，坦克左移&quot;</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                        <span class="comment"># 切换方向</span></span><br><span class="line">                        MainGame.my_tank.direction = <span class="string">&quot;R&quot;</span></span><br><span class="line">                        <span class="comment"># MainGame.my_tank.move()</span></span><br><span class="line">                        <span class="comment"># 修改坦克的的开关</span></span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">False</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;按下右键，坦克右移&quot;</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key == pygame.K_UP:</span><br><span class="line">                        <span class="comment"># 切换方向</span></span><br><span class="line">                        MainGame.my_tank.direction = <span class="string">&quot;U&quot;</span></span><br><span class="line">                        <span class="comment"># MainGame.my_tank.move()</span></span><br><span class="line">                        <span class="comment"># 修改坦克的的开关</span></span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">False</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;按下上键，坦克上移&quot;</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">                        <span class="comment"># 切换方向</span></span><br><span class="line">                        MainGame.my_tank.direction = <span class="string">&quot;D&quot;</span></span><br><span class="line">                        <span class="comment"># 修改坦克的的开关</span></span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">False</span></span><br><span class="line">                        <span class="comment"># MainGame.my_tank.move()</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;按下下键，坦克下移&quot;</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;发射子弹&quot;</span>)</span><br><span class="line">                        <span class="comment"># 如果当前我方子弹列表的大小&lt;3时候才可以创建</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">len</span>(MainGame.myBulletList) &lt; <span class="number">3</span>:</span><br><span class="line">                            <span class="comment"># 创建我方坦克发射的子弹</span></span><br><span class="line">                            myBullet = Bullet(MainGame.my_tank)</span><br><span class="line">                            MainGame.myBulletList.append(myBullet)</span><br><span class="line">                            <span class="comment"># 我方坦克发射子弹添加音效</span></span><br><span class="line">                            music = Music(<span class="string">&quot;./img/hit.wav&quot;</span>)</span><br><span class="line">                            music.play()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 松开方向键,坦克移动停止,修改坦克开关状态</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.KEYUP:</span><br><span class="line">                <span class="comment"># 判断松开的键是上、下、左、右的时候才停止坦克移动</span></span><br><span class="line">                <span class="keyword">if</span> event.key == pygame.K_LEFT <span class="keyword">or</span> event.key == pygame.K_RIGHT <span class="keyword">or</span> event.key == pygame.K_UP <span class="keyword">or</span> event.key == pygame.K_DOWN:</span><br><span class="line">                    <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 坦克类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tank</span>(<span class="title class_ inherited__">BaseItem</span>):</span><br><span class="line">    <span class="comment"># 添加距离左边left 距离上边top</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, left, top</span>):</span><br><span class="line">        <span class="comment"># 加载保存的图片</span></span><br><span class="line">        self.images = &#123;</span><br><span class="line">            <span class="string">&quot;U&quot;</span>: pygame.image.load(<span class="string">&quot;./img/p1tankU.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;D&quot;</span>: pygame.image.load(<span class="string">&quot;./img/p1tankD.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;L&quot;</span>: pygame.image.load(<span class="string">&quot;./img/p1tankL.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;R&quot;</span>: pygame.image.load(<span class="string">&quot;./img/p1tankR.gif&quot;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 方向</span></span><br><span class="line">        self.direction = <span class="string">&quot;U&quot;</span></span><br><span class="line">        <span class="comment"># 根据当前图片的方向获取图片</span></span><br><span class="line">        self.image = self.images[self.direction]</span><br><span class="line">        <span class="comment"># 根据图片获取区域</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment"># 设置区域的left和top</span></span><br><span class="line">        self.rect.left = left</span><br><span class="line">        self.rect.top = top</span><br><span class="line">        <span class="comment"># 速度决定移动的快慢</span></span><br><span class="line">        self.speed = <span class="number">5</span></span><br><span class="line">        <span class="comment"># 坦克移动的开关</span></span><br><span class="line">        self.stop = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 是否存活</span></span><br><span class="line">        self.live = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 新增属性原来坐标</span></span><br><span class="line">        self.oldLeft = self.rect.left</span><br><span class="line">        self.oldTop = self.rect.top</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 移动后记录原始的坐标</span></span><br><span class="line">        self.oldLeft = self.rect.left</span><br><span class="line">        self.oldTop = self.rect.top</span><br><span class="line">        <span class="comment"># 判断坦克的方向进行移动</span></span><br><span class="line">        <span class="keyword">if</span> self.direction == <span class="string">&quot;L&quot;</span>:</span><br><span class="line">            <span class="comment"># 判断是否超过边界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">                self.rect.left -= self.speed</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">            <span class="comment"># 判断是否超过边界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.left + self.rect.height &lt; SCREEN_WIDTH:</span><br><span class="line">                self.rect.left += self.speed</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;U&quot;</span>:</span><br><span class="line">            <span class="comment"># 判断是否超过边界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.top &gt; <span class="number">0</span>:</span><br><span class="line">                self.rect.top -= self.speed</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">            <span class="comment"># 判断是否超过边界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.top + self.rect.height &lt; SCREEN_HEIGHT:</span><br><span class="line">                self.rect.top += self.speed</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 射击</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Bullet(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stay</span>(<span class="params">self</span>):</span><br><span class="line">        self.rect.left = self.oldLeft</span><br><span class="line">        self.rect.top = self.oldTop</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查坦克是否和墙壁发生碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hitWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> wall <span class="keyword">in</span> MainGame.wallList:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(self, wall):</span><br><span class="line">                <span class="comment"># 将坐标设置移动之前的坐标</span></span><br><span class="line">                self.stay()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示坦克的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取展示对象</span></span><br><span class="line">        self.image = self.images[self.direction]</span><br><span class="line">        <span class="comment"># 调用blit方法展示</span></span><br><span class="line">        MainGame.window.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我方坦克</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTank</span>(<span class="title class_ inherited__">Tank</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, left, top</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyTank, self).__init__(left, top)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测我方坦克是否与敌方坦克发生碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myTank_hit_enemyTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 循环遍历敌方坦克列表</span></span><br><span class="line">        <span class="keyword">for</span> enemyTank <span class="keyword">in</span> MainGame.enemyTankList:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(self, enemyTank):</span><br><span class="line">                self.stay()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 敌方坦克</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EnemyTank</span>(<span class="title class_ inherited__">Tank</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, left, top, speed</span>):</span><br><span class="line">        <span class="comment"># 调用父类的初始化方法</span></span><br><span class="line">        <span class="built_in">super</span>(EnemyTank, self).__init__(left, top)</span><br><span class="line">        <span class="comment"># 加载啊图片集</span></span><br><span class="line">        self.images = &#123;</span><br><span class="line">            <span class="string">&quot;U&quot;</span>: pygame.image.load(<span class="string">&quot;./img/enemy1U.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;D&quot;</span>: pygame.image.load(<span class="string">&quot;./img/enemy1D.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;R&quot;</span>: pygame.image.load(<span class="string">&quot;./img/enemy1R.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;L&quot;</span>: pygame.image.load(<span class="string">&quot;./img/enemy1L.gif&quot;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 方向，随机生成敌方坦克的方向</span></span><br><span class="line">        self.direction = self.randDirection()</span><br><span class="line">        <span class="comment"># 根据方向获取图片</span></span><br><span class="line">        self.image = self.images[self.direction]</span><br><span class="line">        <span class="comment"># 根据图片获取区域</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment"># 设置区域的left和top</span></span><br><span class="line">        self.rect.left = left</span><br><span class="line">        self.rect.top = top</span><br><span class="line">        <span class="comment"># 速度决定移动的快慢</span></span><br><span class="line">        self.speed = <span class="number">5</span></span><br><span class="line">        <span class="comment"># 坦克移动的开关</span></span><br><span class="line">        self.stop = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 新增加一个步数变量 step</span></span><br><span class="line">        self.step = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机生成敌方坦克的方向</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randDirection</span>(<span class="params">self</span>):</span><br><span class="line">        num = random.randint(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;U&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;D&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> num == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;L&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> num == <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;R&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randMove</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.step &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 修改方向</span></span><br><span class="line">            self.direction = self.randDirection()</span><br><span class="line">            <span class="comment"># 让步数复位</span></span><br><span class="line">            self.step = <span class="number">50</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.move()</span><br><span class="line">            <span class="comment"># 让步数递减</span></span><br><span class="line">            self.step -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写shot()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 随机生成100以内的数</span></span><br><span class="line">        num = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> Bullet(self)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测敌方坦克是否和我方坦克发生碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enemyTank_hit_myTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> pygame.sprite.collide_rect(self, MainGame.my_tank):</span><br><span class="line">            self.stay()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子弹类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>(<span class="title class_ inherited__">BaseItem</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, tank</span>):</span><br><span class="line">        <span class="comment"># 加载图片</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&quot;./img/enemymissile.gif&quot;</span>)</span><br><span class="line">        <span class="comment"># 坦克的方向决定子弹的方向</span></span><br><span class="line">        self.direction = tank.direction</span><br><span class="line">        <span class="comment"># 获取区域</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment"># 子弹的left和top和方向有关</span></span><br><span class="line">        <span class="keyword">if</span> self.direction == <span class="string">&quot;U&quot;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left + tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">            self.rect.top = tank.rect.top - self.rect.height</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left + tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">            self.rect.top = tank.rect.top + self.rect.height</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left + self.rect.width</span><br><span class="line">            self.rect.top = tank.rect.top + tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;L&quot;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left - tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">            self.rect.top = tank.rect.top + tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">        <span class="comment"># 子弹的速度</span></span><br><span class="line">        self.speed = <span class="number">6</span></span><br><span class="line">        <span class="comment"># 子弹的状态，是否碰到墙壁，如果碰到墙壁，修改此状态</span></span><br><span class="line">        self.live = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 子弹的移动和方向有关</span></span><br><span class="line">        <span class="keyword">if</span> self.direction == <span class="string">&quot;U&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.top &gt; <span class="number">0</span>:</span><br><span class="line">                self.rect.top -= self.speed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 修改子弹状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.top + self.rect.height &lt; SCREEN_HEIGHT:</span><br><span class="line">                self.rect.top += self.speed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 修改子弹状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.left + self.rect.width &lt; SCREEN_WIDTH:</span><br><span class="line">                self.rect.left += self.speed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 修改子弹状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;L&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">                self.rect.left -= self.speed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 修改子弹状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 展示子弹的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子弹是否碰撞墙壁</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hitWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> wall <span class="keyword">in</span> MainGame.wallList:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(self, wall):</span><br><span class="line">                <span class="comment"># 修改子弹的生存状态,让子弹消失</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 墙壁的生命值减小</span></span><br><span class="line">                wall.hp -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> wall.hp &lt; <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 修改墙壁的生存状态</span></span><br><span class="line">                    wall.live = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayBullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 将图片surface加载到窗口</span></span><br><span class="line">        MainGame.window.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 我方子弹和敌方坦克碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myBullet_hit_enemyTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 循环遍历敌方坦克列表,判断是否发生碰撞</span></span><br><span class="line">        <span class="keyword">for</span> enemyTank <span class="keyword">in</span> MainGame.enemyTankList:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(enemyTank, self):</span><br><span class="line">                <span class="comment"># 修改敌方坦克和我方子弹的状态</span></span><br><span class="line">                enemyTank.live = <span class="literal">False</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 创建爆炸对象</span></span><br><span class="line">                explode = Expode(enemyTank)</span><br><span class="line">                <span class="comment"># 将爆炸对象添加到爆炸列表中</span></span><br><span class="line">                MainGame.explodeList.append(explode)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 敌方子弹和我方坦克碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enemyBullet_hit_myTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(MainGame.my_tank, self):</span><br><span class="line">                <span class="comment"># 创建爆炸对象</span></span><br><span class="line">                explode = Expode(MainGame.my_tank)</span><br><span class="line">                <span class="comment"># 将爆炸对象添加到爆炸列表中</span></span><br><span class="line">                MainGame.explodeList.append(explode)</span><br><span class="line">                <span class="comment"># 修改敌方子弹和我方坦克的状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">                MainGame.my_tank.live = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 墙壁类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wall</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, left, top</span>):</span><br><span class="line">        <span class="comment"># 加载墙壁图片</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&quot;./img/steels.gif&quot;</span>)</span><br><span class="line">        <span class="comment"># 获取墙壁区域</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment"># 设置位置left和top</span></span><br><span class="line">        self.rect.left = left</span><br><span class="line">        self.rect.top = top</span><br><span class="line">        <span class="comment"># 是否存活</span></span><br><span class="line">        self.live = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 设置生命值</span></span><br><span class="line">        self.hp = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示墙壁的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayWall</span>(<span class="params">self</span>):</span><br><span class="line">        MainGame.window.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆炸类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Expode</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, tank</span>):</span><br><span class="line">        <span class="comment"># 爆炸位置由当前子弹打中的坦克位置决定</span></span><br><span class="line">        self.rect = tank.rect</span><br><span class="line">        self.images = [</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast0.gif&quot;</span>),</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast1.gif&quot;</span>),</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast2.gif&quot;</span>),</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast3.gif&quot;</span>),</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast4.gif&quot;</span>),</span><br><span class="line">        ]</span><br><span class="line">        self.step = <span class="number">0</span></span><br><span class="line">        self.image = self.images[self.step]</span><br><span class="line">        <span class="comment"># 是否活着</span></span><br><span class="line">        self.live = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示爆炸效果的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayExplode</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.step &lt; <span class="built_in">len</span>(self.images):</span><br><span class="line">            <span class="comment"># 根据索引获取爆炸对象</span></span><br><span class="line">            self.image = self.images[self.step]</span><br><span class="line">            self.step += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 添加到主窗口</span></span><br><span class="line">            MainGame.window.blit(self.image, self.rect)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 修改活着的状态</span></span><br><span class="line">            self.live = <span class="literal">False</span></span><br><span class="line">            self.step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 音效类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Music</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        self.filename = filename</span><br><span class="line">        <span class="comment"># 初始化音乐混合器</span></span><br><span class="line">        pygame.mixer.init()</span><br><span class="line">        <span class="comment"># 加载音乐</span></span><br><span class="line">        pygame.mixer.music.load(self.filename)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 播放音乐的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        pygame.mixer.music.play()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    MainGame().startGame()</span><br><span class="line">    <span class="comment"># MainGame().getTextSuface()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Python深入和提高</summary>
    
    
    
    <category term="Python" scheme="https://huaiyuechusan.gitee.io/categories/Python/"/>
    
    
    <category term="学习技术" scheme="https://huaiyuechusan.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Python" scheme="https://huaiyuechusan.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>通过nginx访问tomcat中SpringMVC应用</title>
    <link href="https://huaiyuechusan.gitee.io/archives/7cb9f0a8.html"/>
    <id>https://huaiyuechusan.gitee.io/archives/7cb9f0a8.html</id>
    <published>2023-11-22T13:39:00.000Z</published>
    <updated>2024-10-17T12:02:23.321Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="通过nginx访问tomcat中SpringMVC应用"><a href="#通过nginx访问tomcat中SpringMVC应用" class="headerlink" title="通过nginx访问tomcat中SpringMVC应用"></a>通过nginx访问tomcat中SpringMVC应用</h1><h1 id="amp-同一tomcat中部署多个SpringMVC应用"><a href="#amp-同一tomcat中部署多个SpringMVC应用" class="headerlink" title="&amp;同一tomcat中部署多个SpringMVC应用"></a>&amp;同一tomcat中部署多个SpringMVC应用</h1><h2 id="nginx简介"><a href="#nginx简介" class="headerlink" title="nginx简介"></a>nginx简介</h2><p>Nginx，也被称为”engine x”，是一个开源并且支持高性能和高并发的Web服务和代理服务软件。这款软件由俄罗斯人Igor Sysoev开发并首次在俄罗斯的大型网站www.rambler.ru上应用。它不仅可以作为HTTP服务器运行，还可以作为反向代理服务器使用，同时还提供了IMAP/POP3/SMTP等服务。Nginx因其轻量级和高效性在全球范围内得到了广泛的应用。</p><h2 id="Linux-安装-nginx"><a href="#Linux-安装-nginx" class="headerlink" title="Linux 安装 nginx"></a>Linux 安装 nginx</h2><p>这里安装nginx就不多说了，参考文档：<a href="https://blog.csdn.net/u013737132/article/details/134271857">Linux 安装 Nginx 并配置为系统服务（超详细）-CSDN博客</a></p><h2 id="tomcat部署SpringMVC应用"><a href="#tomcat部署SpringMVC应用" class="headerlink" title="tomcat部署SpringMVC应用"></a>tomcat部署SpringMVC应用</h2><ol><li><p>将SpringMVC应用打war包，通过idea的maven打包项目</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115659.png" alt="image-20231122204557462"></p></li><li><p>将 打包好的war包放到tomcat根目录下的webapp</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115660.png" alt="image-20231122204926969"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115661.png" alt="image-20231122204910265"></p></li><li><p>若在==同一个tomcat部署多个项目==，首先把webapp文件夹拷贝一份取名为webapp2，然后修改conf/server.xml文件</p></li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.startup.VersionLoggerListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="attr">SSLEngine</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">&quot;UserDatabase&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;Container&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">&quot;User database that can be updated and saved&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">factory</span>=<span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">pathname</span>=<span class="string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这是第一个webapp项目--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span>  <span class="comment">&lt;!--两个webapp项目Service name要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;18080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">maxParameterCount</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">               /&gt;</span>  <span class="comment">&lt;!--两个webapp项目的port要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/opt/moiveproject/tomcat9/webapps/Movie&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!--docBase的内容是你war包的位置, MovieManager是war包的名字,不带.war--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这是第二个webapp项目--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina2&quot;</span>&gt;</span>   <span class="comment">&lt;!--两个webapp项目Service name要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span>  </span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span>  <span class="comment">&lt;!--两个webapp项目的port要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8010&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8445&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span>  <span class="comment">&lt;!--appBase的内容要与你的文件名一致--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/opt/moiveproject/tomcat9/webapps2/MovieManager&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--docBase的内容是你war包的位置, MovieManager是war包的名字,不带.war--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115662.png" alt="image-20231122205930617"></p><ol><li><code>/tomcat9/bin/startup.sh</code> 启动tomcat访问对应端口号即可访问应用</li></ol><h2 id="nginx访问SpringMVC应用"><a href="#nginx访问SpringMVC应用" class="headerlink" title="nginx访问SpringMVC应用"></a>nginx访问SpringMVC应用</h2><ol><li><p>在nginx的配置文件目录下修改<code>/nginx/conf/nginx.conf</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    root /opt/moiveproject/moive_webapp;</span><br><span class="line">    index Home.jsp Home.jspx Home.do;</span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    </span><br><span class="line">    log_format  main &#x27;$status $http_referer&#x27;;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  niit01;</span><br><span class="line"></span><br><span class="line">        location /assets/  #静态分离</span><br><span class="line">        &#123;</span><br><span class="line">            root /opt/moiveproject/moive_webapp;  # 静态资源所放位置</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">         location /</span><br><span class="line">        &#123;</span><br><span class="line">            #==========Nginx提供的代理============</span><br><span class="line">            proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">            proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            #=== 如果遇到.jsp .jspx .do .action 的请求就进入该服务器(tomcat)===</span><br><span class="line">            proxy_pass http://niit01:18080;</span><br><span class="line">            # 日志文件位置</span><br><span class="line">       access_log /opt/moiveproject/movieLog/access.log main;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启nginx,访问<code>niit01:80/</code>即可访问应用</p></li></ol><p>参考文档:</p><p><a href="https://www.cnblogs.com/acm-bingzi/p/nginx-springmvc.html">springmvc搭配nginx 实现动静分离 - 贾树丙 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/starcraft501/article/details/82830152">通过nginx访问tomcat中web应用的jsp网页_nginx配置jsp首页-CSDN博客</a></p><p><a href="https://blog.csdn.net/shidebin/article/details/83746839">nginx安装和简单部署java web项目_nginx部署web项目-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43651277/article/details/107060581">服务器使用Nginx部署Springboot项目（jar包）-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_38494341/article/details/102624462">Nginx部署JavaWeb项目-CSDN博客</a></p><p><a href="https://www.cnblogs.com/jalja/p/6117523.html">Nginx服务器之Nginx与tomcat结合访问jsp - 小禾点点 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">通过nginx访问tomcat中SpringMVC应用&amp;同一tomcat中部署多个SpringMVC应用</summary>
    
    
    
    <category term="学习总结" scheme="https://huaiyuechusan.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="学习技术" scheme="https://huaiyuechusan.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
