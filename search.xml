<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>通过nginx访问tomcat中SpringMVC应用</title>
      <link href="/archives/7cb9f0a8.html"/>
      <url>/archives/7cb9f0a8.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="通过nginx访问tomcat中SpringMVC应用"><a href="#通过nginx访问tomcat中SpringMVC应用" class="headerlink" title="通过nginx访问tomcat中SpringMVC应用"></a>通过nginx访问tomcat中SpringMVC应用</h1><h1 id="amp-同一tomcat中部署多个SpringMVC应用"><a href="#amp-同一tomcat中部署多个SpringMVC应用" class="headerlink" title="&amp;同一tomcat中部署多个SpringMVC应用"></a>&amp;同一tomcat中部署多个SpringMVC应用</h1><h2 id="nginx简介"><a href="#nginx简介" class="headerlink" title="nginx简介"></a>nginx简介</h2><p>Nginx，也被称为”engine x”，是一个开源并且支持高性能和高并发的Web服务和代理服务软件。这款软件由俄罗斯人Igor Sysoev开发并首次在俄罗斯的大型网站www.rambler.ru上应用。它不仅可以作为HTTP服务器运行，还可以作为反向代理服务器使用，同时还提供了IMAP/POP3/SMTP等服务。Nginx因其轻量级和高效性在全球范围内得到了广泛的应用。</p><h2 id="Linux-安装-nginx"><a href="#Linux-安装-nginx" class="headerlink" title="Linux 安装 nginx"></a>Linux 安装 nginx</h2><p>这里安装nginx就不多说了，参考文档：<a href="https://blog.csdn.net/u013737132/article/details/134271857">Linux 安装 Nginx 并配置为系统服务（超详细）-CSDN博客</a></p><h2 id="tomcat部署SpringMVC应用"><a href="#tomcat部署SpringMVC应用" class="headerlink" title="tomcat部署SpringMVC应用"></a>tomcat部署SpringMVC应用</h2><ol><li><p>将SpringMVC应用打war包，通过idea的maven打包项目</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115659.png" alt="image-20231122204557462"></p></li><li><p>将 打包好的war包放到tomcat根目录下的webapp</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115660.png" alt="image-20231122204926969"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115661.png" alt="image-20231122204910265"></p></li><li><p>若在==同一个tomcat部署多个项目==，首先把webapp文件夹拷贝一份取名为webapp2，然后修改conf/server.xml文件</p></li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.startup.VersionLoggerListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="attr">SSLEngine</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">&quot;UserDatabase&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;Container&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">&quot;User database that can be updated and saved&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">factory</span>=<span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">pathname</span>=<span class="string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这是第一个webapp项目--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span>  <span class="comment">&lt;!--两个webapp项目Service name要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;18080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">maxParameterCount</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">               /&gt;</span>  <span class="comment">&lt;!--两个webapp项目的port要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/opt/moiveproject/tomcat9/webapps/Movie&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!--docBase的内容是你war包的位置, MovieManager是war包的名字,不带.war--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这是第二个webapp项目--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina2&quot;</span>&gt;</span>   <span class="comment">&lt;!--两个webapp项目Service name要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span>  </span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span>  <span class="comment">&lt;!--两个webapp项目的port要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8010&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8445&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span>  <span class="comment">&lt;!--appBase的内容要与你的文件名一致--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/opt/moiveproject/tomcat9/webapps2/MovieManager&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--docBase的内容是你war包的位置, MovieManager是war包的名字,不带.war--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115662.png" alt="image-20231122205930617"></p><ol><li><code>/tomcat9/bin/startup.sh</code> 启动tomcat访问对应端口号即可访问应用</li></ol><h2 id="nginx访问SpringMVC应用"><a href="#nginx访问SpringMVC应用" class="headerlink" title="nginx访问SpringMVC应用"></a>nginx访问SpringMVC应用</h2><ol><li><p>在nginx的配置文件目录下修改<code>/nginx/conf/nginx.conf</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    root /opt/moiveproject/moive_webapp;</span><br><span class="line">    index Home.jsp Home.jspx Home.do;</span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    </span><br><span class="line">    log_format  main &#x27;$status $http_referer&#x27;;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  niit01;</span><br><span class="line"></span><br><span class="line">        location /assets/  #静态分离</span><br><span class="line">        &#123;</span><br><span class="line">            root /opt/moiveproject/moive_webapp;  # 静态资源所放位置</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">         location /</span><br><span class="line">        &#123;</span><br><span class="line">            #==========Nginx提供的代理============</span><br><span class="line">            proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">            proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            #=== 如果遇到.jsp .jspx .do .action 的请求就进入该服务器(tomcat)===</span><br><span class="line">            proxy_pass http://niit01:18080;</span><br><span class="line">            # 日志文件位置</span><br><span class="line">       access_log /opt/moiveproject/movieLog/access.log main;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启nginx,访问<code>niit01:80/</code>即可访问应用</p></li></ol><p>参考文档:</p><p><a href="https://www.cnblogs.com/acm-bingzi/p/nginx-springmvc.html">springmvc搭配nginx 实现动静分离 - 贾树丙 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/starcraft501/article/details/82830152">通过nginx访问tomcat中web应用的jsp网页_nginx配置jsp首页-CSDN博客</a></p><p><a href="https://blog.csdn.net/shidebin/article/details/83746839">nginx安装和简单部署java web项目_nginx部署web项目-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43651277/article/details/107060581">服务器使用Nginx部署Springboot项目（jar包）-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_38494341/article/details/102624462">Nginx部署JavaWeb项目-CSDN博客</a></p><p><a href="https://www.cnblogs.com/jalja/p/6117523.html">Nginx服务器之Nginx与tomcat结合访问jsp - 小禾点点 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python入门</title>
      <link href="/archives/d9ef328.html"/>
      <url>/archives/d9ef328.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="Python入门"><a href="#Python入门" class="headerlink" title="Python入门"></a>Python入门</h1><h2 id="编程基本概念"><a href="#编程基本概念" class="headerlink" title="编程基本概念"></a>编程基本概念</h2><h3 id="Python程序的构成"><a href="#Python程序的构成" class="headerlink" title="Python程序的构成"></a>Python程序的构成</h3><ol><li>连接符  \    一行代码过长，变成多行时使用  </li><li>强制使用缩进，四个空格表示一个缩进</li></ol><h3 id="对象的基本组成和内存示意图"><a href="#对象的基本组成和内存示意图" class="headerlink" title="对象的基本组成和内存示意图"></a>对象的基本组成和内存示意图</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102017825.png" alt="image-20231110201745676"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102019862.png" alt="image-20231110201950773"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102022690.png" alt="image-20231110202237621"></p><h3 id="引用的本质-栈内存和堆内存-内存示意图"><a href="#引用的本质-栈内存和堆内存-内存示意图" class="headerlink" title="引用的本质-栈内存和堆内存-内存示意图"></a>引用的本质-栈内存和堆内存-内存示意图</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102025811.png" alt="image-20231110202507724"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102026455.png" alt="image-20231110202618382"></p><p><strong>==Python是动态类型语言==：变量不需要显式声明类型。根据变量引用的对象，Python解释器自动确定数据类型</strong></p><h3 id="标识符-帮助系统简单使用-命名规则"><a href="#标识符-帮助系统简单使用-命名规则" class="headerlink" title="标识符-帮助系统简单使用-命名规则"></a>标识符-帮助系统简单使用-命名规则</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102030659.png" alt="image-20231110203017623"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102031531.png" alt="image-20231110203126470"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102034233.png" alt="image-20231110203446167"></p><h3 id="变量的声明-初始化-垃圾回收机制"><a href="#变量的声明-初始化-垃圾回收机制" class="headerlink" title="变量的声明-初始化-垃圾回收机制"></a>变量的声明-初始化-垃圾回收机制</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102041345.png" alt="image-20231110204145297"></p><h3 id="常量-链式赋值-系列解包赋值"><a href="#常量-链式赋值-系列解包赋值" class="headerlink" title="常量-链式赋值-系列解包赋值"></a>常量-链式赋值-系列解包赋值</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102042669.png" alt="image-20231110204256608"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102047432.png" alt="image-20231110204725378"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102050729.png" alt="image-20231110205028675"></p><p><strong>使用系列解包复制可以轻松实现变量值交换</strong></p><h3 id="内置数据类型-基本算术运算符"><a href="#内置数据类型-基本算术运算符" class="headerlink" title="内置数据类型-基本算术运算符"></a>内置数据类型-基本算术运算符</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102103657.png" alt="image-20231110210320597"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102105449.png" alt="image-20231110210508378"></p><h3 id="整数-不同进制-其他类型转成整数"><a href="#整数-不同进制-其他类型转成整数" class="headerlink" title="整数-不同进制-其他类型转成整数"></a>整数-不同进制-其他类型转成整数</h3><p>==<strong>Python的整数可以无限大，任意大</strong>==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102107064.png" alt="image-20231110210750024"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102109168.png" alt="image-20231110210944115"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102110784.png" alt="image-20231110211017712"></p><h3 id="浮点数-自动转换强制转换-增强赋值运算符"><a href="#浮点数-自动转换强制转换-增强赋值运算符" class="headerlink" title="浮点数-自动转换强制转换-增强赋值运算符"></a>浮点数-自动转换强制转换-增强赋值运算符</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102114124.png" alt="image-20231110211408060"></p><p>==<strong>round(value))</strong>可以返回<strong>四舍五入</strong>的值==。但<strong>不会改变原有值</strong>，而是产生新的值</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102116576.png" alt="image-20231110211636512"></p><h3 id="时间的表示-unix时间点-毫秒微妙-time模块"><a href="#时间的表示-unix时间点-毫秒微妙-time模块" class="headerlink" title="时间的表示-unix时间点-毫秒微妙-time模块"></a>时间的表示-unix时间点-毫秒微妙-time模块</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102121561.png" alt="image-20231110212157494"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102124175.png" alt="image-20231110212401113"></p><h3 id="多点坐标-绘制折线图-计算两点距离"><a href="#多点坐标-绘制折线图-计算两点距离" class="headerlink" title="多点坐标-绘制折线图-计算两点距离"></a>多点坐标-绘制折线图-计算两点距离</h3><h3 id="布尔值本质-逻辑运算符-位运算符-比较运算符-短路问题"><a href="#布尔值本质-逻辑运算符-位运算符-比较运算符-短路问题" class="headerlink" title="布尔值本质-逻辑运算符-位运算符-比较运算符-短路问题"></a>布尔值本质-逻辑运算符-位运算符-比较运算符-短路问题<img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102153527.png" alt="image-20231110213752664"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102153409.png" alt="image-20231110213917617"></h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102154007.png" alt="image-20231110214203652"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102154153.png" alt="image-20231110214628683"></p><p><strong>关系运算符可以连用   如： <code>2&lt;a&lt;10</code></strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222183.png" alt="image-20231110214823887"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222184.png" alt="image-20231110220532227"></p><p><strong>字符串拼接 <code>&quot;3&quot;+&quot;4&quot;</code>   结果 <code>&quot;34&quot;</code></strong></p><p><strong>列表，元组等合并  <code>[1,2,3]+[4,5,6]</code>   结果  <code>[1,2,3,4,5,6]</code></strong></p><p><strong>字符串复制  <code>&quot;abc&quot;* 3</code>     结果  <code>&quot;abcabcabc&quot;</code></strong></p><p><strong>列表，元组等复制  <code>[1,2,3] * 3</code>     结果 <code>[1,2,3,1,2,3,1,2,3]</code></strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222185.png" alt="image-20231110220550583"></p><p><strong>与C和AVA不一样，Python不支持自增(++)和自减(—)</strong></p><h3 id="同一运算符-身份运算符-优先级问题"><a href="#同一运算符-身份运算符-优先级问题" class="headerlink" title="同一运算符-身份运算符-优先级问题"></a>同一运算符-身份运算符-优先级问题</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222186.png" alt="image-20231110220915376"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222187.png" alt="image-20231110221003673"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222188.png" alt="image-20231110221419620"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222189.png" alt="image-20231110221607995"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222190.png" alt="image-20231110221752500"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222191.png" alt="image-20231110221929772"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222192.png" alt="image-20231110222043769"></p><h3 id="类型转换总结"><a href="#类型转换总结" class="headerlink" title="类型转换总结"></a>类型转换总结</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327707.png" alt="image-20231111205424806"></p><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608618.png" alt="image-20231112203832984"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608619.png" alt="image-20231112204030526"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608620.png" alt="image-20231112204122105"></p><p>==序列中存储的是整数对象的地址，而不是整数对象的值==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608621.png" alt="image-20231112204257128"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="unicode字符集-三种创建字符串的方式-len"><a href="#unicode字符集-三种创建字符串的方式-len" class="headerlink" title="unicode字符集-三种创建字符串的方式-len()"></a>unicode字符集-三种创建字符串的方式-len()</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327671.png" alt="image-20231111165047001"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327672.png" alt="image-20231111165027593"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327673.png" alt="image-20231111165127201"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327675.png" alt="image-20231111165242915"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327676.png" alt="image-20231111165439485"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327677.png" alt="image-20231111165530787"></p><h4 id="转义字符-字符串拼接-字符串复制-input-获取键盘输入"><a href="#转义字符-字符串拼接-字符串复制-input-获取键盘输入" class="headerlink" title="转义字符-字符串拼接-字符串复制-input()获取键盘输入"></a>转义字符-字符串拼接-字符串复制-input()获取键盘输入</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327678.png" alt="image-20231111165827750"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327679.png" alt="image-20231111165929426"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327680.png" alt="image-20231111170036120"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327681.png" alt="image-20231111170117738"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327682.png" alt="image-20231111170146635"></p><h4 id="str-字符提取-replace-替换-内存分析"><a href="#str-字符提取-replace-替换-内存分析" class="headerlink" title="str()-字符提取-replace()替换-内存分析"></a>str()-字符提取-replace()替换-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327683.png" alt="image-20231111170618209"></p><p>==<strong>字符串是不可变的</strong>==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327684.png" alt="image-20231111170815318"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327685.png" alt="image-20231111170925169"></p><h4 id="切片slice操作-逆序"><a href="#切片slice操作-逆序" class="headerlink" title="切片slice操作-逆序"></a>切片slice操作-逆序</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327686.png" alt="image-20231111171200785"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327687.png" alt="image-20231111171239402"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327688.png" alt="image-20231111172118356"></p><p><strong>字符串逆序  <code>[::-1]</code></strong></p><h4 id="split-分割-join-合并-代码效率测试"><a href="#split-分割-join-合并-代码效率测试" class="headerlink" title="split()分割-join()合并-代码效率测试"></a>split()分割-join()合并-代码效率测试</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327689.png" alt="image-20231111172645302"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327690.png" alt="image-20231111172819686"></p><p>==<strong>join拼接字符串效率高</strong>==</p><h4 id="驻留机制-同一判断-值相等判断"><a href="#驻留机制-同一判断-值相等判断" class="headerlink" title="驻留机制-同一判断-值相等判断"></a>驻留机制-同一判断-值相等判断</h4><p><strong>常量字符串只保留一次</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327691.png" alt="image-20231111174312835"></p><p><strong>== 和!=比较是否含有相同字符</strong></p><p><strong>is和not is判断是否同一对象</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327692.png" alt="image-20231111175131889"></p><h4 id="常用查找方法-去除首尾信息-大小写转换-排版特征判断"><a href="#常用查找方法-去除首尾信息-大小写转换-排版特征判断" class="headerlink" title="常用查找方法-去除首尾信息-大小写转换-排版特征判断"></a>常用查找方法-去除首尾信息-大小写转换-排版特征判断</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327693.png" alt="image-20231111201844560"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327694.png" alt="image-20231111203006966"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327695.png" alt="image-20231111203117613"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327696.png" alt="image-20231111203321600"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327697.png" alt="image-20231111203437597"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327698.png" alt="image-20231111203604305"></p><h4 id="format格式化-数字格式化操作"><a href="#format格式化-数字格式化操作" class="headerlink" title="format格式化-数字格式化操作"></a>format格式化-数字格式化操作</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327699.png" alt="image-20231111203950779"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327700.png" alt="image-20231111204014400"></p><p><strong>我们可以通过{索引}/{参数名}，直接映射参数值，实现对字符串的格式化，非常方便。</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327701.png" alt="image-20231111204436867"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327703.png" alt="image-20231111204547054"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327704.png" alt="image-20231111204650861"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327705.png" alt="image-20231111204720997"></p><h4 id="可变字符串-io-StringlO"><a href="#可变字符串-io-StringlO" class="headerlink" title="可变字符串-io.StringlO"></a>可变字符串-io.StringlO</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327706.png" alt="image-20231111204913612"></p><p>使用io.StringlO可以将字符串变为可变字符串</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="列表特点-内存分析"><a href="#列表特点-内存分析" class="headerlink" title="列表特点-内存分析"></a>列表特点-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608622.png" alt="image-20231112204331155"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608623.png" alt="image-20231112204422542"></p><h4 id="创建列表的4种方式-推导式创建列表"><a href="#创建列表的4种方式-推导式创建列表" class="headerlink" title="创建列表的4种方式-推导式创建列表"></a>创建列表的4种方式-推导式创建列表</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608624.png" alt="image-20231112204700132"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608625.png" alt="image-20231112204759130"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608626.png" alt="image-20231112204952428"></p><h4 id="元素的5种添加方式-效率问题"><a href="#元素的5种添加方式-效率问题" class="headerlink" title="元素的5种添加方式-效率问题"></a>元素的5种添加方式-效率问题</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608627.png" alt="image-20231112205556826"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608628.png" alt="image-20231112205434899"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608629.png" alt="image-20231112205659199"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608630.png" alt="image-20231112205735953"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608631.png" alt="image-20231112205808761"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608632.png" alt="image-20231112205915556"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608636.png" alt="image-20231112210040473"></p><h4 id="删除的三种方式-删除的本质是元素拷贝"><a href="#删除的三种方式-删除的本质是元素拷贝" class="headerlink" title="删除的三种方式-删除的本质是元素拷贝"></a>删除的三种方式-删除的本质是元素拷贝</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608637.png" alt="image-20231112210206116"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608638.png" alt="image-20231112210255633"></p><p><strong>del()传的是索引</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608639.png" alt="image-20231112210559383"></p><p><strong>pop()传的是空或索引</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608640.png" alt="image-20231112210627240"></p><p><strong>remove() 传的是元素</strong></p><h4 id="元素的访问-出现次数统计-成员资格判断"><a href="#元素的访问-出现次数统计-成员资格判断" class="headerlink" title="元素的访问-出现次数统计-成员资格判断"></a>元素的访问-出现次数统计-成员资格判断</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608641.png" alt="image-20231112210953927"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608642.png" alt="image-20231112211020296"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608643.png" alt="image-20231112211129014"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608644.png" alt="image-20231112211250334"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608645.png" alt="image-20231112211302457"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608646.png" alt="image-20231112211335688"></p><h4 id="切片slice操作"><a href="#切片slice操作" class="headerlink" title="切片slice操作"></a>切片slice操作</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608647.png" alt="image-20231112211541644"></p><p>==包头不包尾==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608648.png" alt="image-20231112211649938"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608649.png" alt="image-20231112211716931"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608650.png" alt="image-20231112211850845"></p><h4 id="遍历-排序-max-min-sum"><a href="#遍历-排序-max-min-sum" class="headerlink" title="遍历-排序-max-min-sum"></a>遍历-排序-max-min-sum</h4><p><strong>遍历</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608651.png" alt="image-20231112212023863"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608652.png" alt="image-20231112212130083"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608653.png" alt="image-20231112212220696"></p><p><strong>排序</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608654.png" alt="image-20231112212254532"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608655.png" alt="image-20231112212447273"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608656.png" alt="image-20231112212646733"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608657.png" alt="image-20231113221519107"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608658.png" alt="image-20231113221603259"></p><h4 id="二维列表-表格数据存储和读取"><a href="#二维列表-表格数据存储和读取" class="headerlink" title="二维列表-表格数据存储和读取"></a>二维列表-表格数据存储和读取</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608659.png" alt="image-20231113221812609"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608660.png" alt="image-20231113221834012"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608662.png" alt="image-20231113221906067"></p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><h4 id="特点-创建的两种方式-tuple-要点"><a href="#特点-创建的两种方式-tuple-要点" class="headerlink" title="特点-创建的两种方式-tuple()要点"></a>特点-创建的两种方式-tuple()要点</h4><p>==元组不可变序列，不能修改元组中的元素==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608663.png" alt="image-20231113222120428"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608664.png" alt="image-20231113222212366"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608665.png" alt="image-20231114125912318"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608666.png" alt="image-20231114130013057"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608667.png" alt="image-20231114130106093"></p><h4 id="元素访问-计数方法-切片操作-成员资格判断-zip"><a href="#元素访问-计数方法-切片操作-成员资格判断-zip" class="headerlink" title="元素访问-计数方法-切片操作-成员资格判断-zip()"></a>元素访问-计数方法-切片操作-成员资格判断-zip()</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608668.png" alt="image-20231114130315997"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608670.png" alt="image-20231114130521850"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608671.png" alt="image-20231114130637287"></p><h4 id="生成器推导式创建元组"><a href="#生成器推导式创建元组" class="headerlink" title="生成器推导式创建元组"></a>生成器推导式创建元组</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608672.png" alt="image-20231114131109391"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608673.png" alt="image-20231114140211712"></p><h4 id="元组总结"><a href="#元组总结" class="headerlink" title="元组总结"></a>元组总结</h4><ol><li>元组的核心特点是：==不可变序列==。</li><li>元组的访问和处理速度比列表快。</li><li>与<strong>整数和字符串</strong>一样，<strong>元组可以作为字典的键</strong>，==列表则永远不能作为字典的键使用==。</li></ol><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h4 id="特点-4种创建方式-普通-dict-zip-fromkeys"><a href="#特点-4种创建方式-普通-dict-zip-fromkeys" class="headerlink" title="特点-4种创建方式-普通-dict-zip-fromkeys"></a>特点-4种创建方式-普通-dict-zip-fromkeys</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608674.png" alt="image-20231114141238792"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608675.png" alt="image-20231114145118028"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608676.png" alt="image-20231114145351787"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608677.png" alt="image-20231114145951487"></p><h4 id="元素的访问-键的访问-值的访问-键值对的访问"><a href="#元素的访问-键的访问-值的访问-键值对的访问" class="headerlink" title="元素的访问-键的访问-值的访问-键值对的访问"></a>元素的访问-键的访问-值的访问-键值对的访问</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608678.png" alt="image-20231114150056330"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608679.png" alt="image-20231114150304782"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608680.png" alt="image-20231114150352137"></p><h4 id="元素的添加-修改-删除"><a href="#元素的添加-修改-删除" class="headerlink" title="元素的添加-修改-删除"></a>元素的添加-修改-删除</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608681.png" alt="image-20231114150455560"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608682.png" alt="image-20231114151231414"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608683.png" alt="image-20231114151329321"></p><h4 id="序列解包用于列表元组字典"><a href="#序列解包用于列表元组字典" class="headerlink" title="序列解包用于列表元组字典"></a>序列解包用于列表元组字典</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608684.png" alt="image-20231114151937053"></p><p><strong>items()对键值进行操作返回的是元组，可以通过索引获得键和值</strong></p><h4 id="复杂表格数据存储-列表和字典综合嵌套"><a href="#复杂表格数据存储-列表和字典综合嵌套" class="headerlink" title="复杂表格数据存储-列表和字典综合嵌套"></a>复杂表格数据存储-列表和字典综合嵌套</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608685.png" alt="image-20231114154449214"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608686.png" alt="image-20231114155631350"></p><h4 id="核心底层原理-内存分析-存储键值对过程"><a href="#核心底层原理-内存分析-存储键值对过程" class="headerlink" title="核心底层原理-内存分析-存储键值对过程"></a>核心底层原理-内存分析-存储键值对过程</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608687.png" alt="image-20231114155547261"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608688.png" alt="image-20231114155919142"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608689.png" alt="image-20231114160012362"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608690.png" alt="image-20231114160119164"></p><h4 id="核心底层原理-内存分析-查找值对象过程"><a href="#核心底层原理-内存分析-查找值对象过程" class="headerlink" title="核心底层原理-内存分析-查找值对象过程"></a>核心底层原理-内存分析-查找值对象过程</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608691.png" alt="image-20231114160207088"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608692.png" alt="image-20231114160302223"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608693.png" alt="image-20231114160311802"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608694.png" alt="image-20231114160443418"></p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="特点-创建和删除-交集并集差集运算"><a href="#特点-创建和删除-交集并集差集运算" class="headerlink" title="特点-创建和删除-交集并集差集运算"></a>特点-创建和删除-交集并集差集运算</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608695.png" alt="image-20231114160624865"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608696.png" alt="image-20231114160658433"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608697.png" alt="image-20231114160745635"></p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="控制语句和现实逻辑表达"><a href="#控制语句和现实逻辑表达" class="headerlink" title="控制语句和现实逻辑表达"></a>控制语句和现实逻辑表达</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759573.png" alt="image-20231114162345686"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759574.png" alt="image-20231114162500957"></p><h3 id="单分支选择结构-条件表达式详解"><a href="#单分支选择结构-条件表达式详解" class="headerlink" title="单分支选择结构-条件表达式详解"></a>单分支选择结构-条件表达式详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759575.png" alt="image-20231114162917459"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759576.png" alt="image-20231114163006308"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759577.png" alt="image-20231114163510213"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759578.png" alt="image-20231114163945739"></p><h3 id="双分支选择结构-三元运算符的使用详解"><a href="#双分支选择结构-三元运算符的使用详解" class="headerlink" title="双分支选择结构-三元运算符的使用详解"></a>双分支选择结构-三元运算符的使用详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759579.png" alt="image-20231114164104286"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759580.png" alt="image-20231114164346690"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">input</span>(<span class="string">&quot;输入一个数字:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(num + <span class="string">&quot;&lt;10&quot;</span> <span class="keyword">if</span>(<span class="built_in">int</span>(num) &lt; <span class="number">10</span>) <span class="keyword">else</span> <span class="built_in">str</span>(num) + <span class="string">&quot;&gt;10&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="多分支选择结构"><a href="#多分支选择结构" class="headerlink" title="多分支选择结构"></a>多分支选择结构</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759581.png" alt="image-20231114164837210"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759582.png" alt="image-20231114165601161"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759583.png" alt="image-20231114170614275"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">### 多分支选择结构</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">score = <span class="built_in">input</span>(<span class="string">&quot;输入学生分数：&quot;</span>)</span><br><span class="line">grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt;= <span class="built_in">int</span>(score) &lt; <span class="number">60</span>:</span><br><span class="line">    grade = <span class="string">&quot;不及格&quot;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(score) &lt; <span class="number">80</span>:  <span class="comment"># 60&lt;=score&lt;=80  多分支之间具有逻辑关系</span></span><br><span class="line">    grade = <span class="string">&quot;及格&quot;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(score) &lt; <span class="number">90</span>:</span><br><span class="line">    grade = <span class="string">&quot;良好&quot;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(score) &lt;= <span class="number">100</span>:</span><br><span class="line">    grade = <span class="string">&quot;优秀&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    grade = <span class="string">&quot;成绩输入错误&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分数是&#123;0&#125;，等级是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(score, grade))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="选择结构的嵌套"><a href="#选择结构的嵌套" class="headerlink" title="选择结构的嵌套"></a>选择结构的嵌套</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759584.png" alt="image-20231114170713573"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个0-100之间的数字：&quot;</span>))</span><br><span class="line">grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> score &gt; <span class="number">100</span> <span class="keyword">or</span> score &lt; <span class="number">0</span>:</span><br><span class="line">    score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入错误，请重新输入0-100之间的数字：&quot;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">        grade = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">        grade = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">        grade = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">        grade = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        grade = <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分数是&#123;0&#125;，等级是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(score, grade))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更少的代码方法</span></span><br><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个0-100之间的数字：&quot;</span>))</span><br><span class="line">grade = <span class="string">&#x27;ABCDE&#x27;</span></span><br><span class="line"><span class="keyword">if</span> score &gt; <span class="number">100</span> <span class="keyword">or</span> score &lt; <span class="number">0</span>:</span><br><span class="line">    score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入错误，请重新输入0-100之间的数字：&quot;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    num = score // <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">6</span>:</span><br><span class="line">        num = <span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;分数是&#123;0&#125;，等级是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(score, grade[<span class="number">9</span>-num]))</span><br></pre></td></tr></table></figure><h3 id="while循环结构-死循环处理"><a href="#while循环结构-死循环处理" class="headerlink" title="while循环结构-死循环处理"></a>while循环结构-死循环处理</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759585.png" alt="image-20231114211935339"></p><h3 id="for循环结构-遍历各种可迭代对象-range对象"><a href="#for循环结构-遍历各种可迭代对象-range对象" class="headerlink" title="for循环结构-遍历各种可迭代对象-range对象"></a>for循环结构-遍历各种可迭代对象-range对象</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759586.png" alt="image-20231115235425967"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>):</span><br><span class="line">    <span class="built_in">print</span>(x*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> <span class="string">&quot;weqwewe&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;haha&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">12</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d:           <span class="comment"># 遍历字典所以key</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.keys():    <span class="comment"># 遍历字典所有的key</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.values():  <span class="comment"># 遍历字典所有的value</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.items():   <span class="comment"># 遍历字典所有键值对</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759587.png" alt="image-20231116154729368"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">10</span>, <span class="number">2</span>):  <span class="comment"># start=3 end=10 step=2 包头不包尾</span></span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 计算1-100累加和，奇数累加和，偶数累加和</span></span><br><span class="line">sum_all = <span class="number">0</span></span><br><span class="line">sum_even = <span class="number">0</span></span><br><span class="line">sum_odd = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    sum_all += x</span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        sum_even += x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sum_odd += x</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1-100累加和&#123;0&#125;，奇数累加和&#123;1&#125;，偶数累加和&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(sum_all, sum_odd, sum_even))</span><br></pre></td></tr></table></figure><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759588.png" alt="image-20231116160125551"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759589.png" alt="image-20231116160157632"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(x, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="嵌套循环练习-九九乘法表-打印表格数据"><a href="#嵌套循环练习-九九乘法表-打印表格数据" class="headerlink" title="嵌套循环练习-九九乘法表-打印表格数据"></a>嵌套循环练习-九九乘法表-打印表格数据</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759590.png" alt="image-20231116160523325"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 九九乘法表</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;*&#123;1&#125;=&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(m, n, m*n), end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1*1=1</span></span><br><span class="line"><span class="string">2*1=22*2=4</span></span><br><span class="line"><span class="string">3*1=33*2=63*3=9</span></span><br><span class="line"><span class="string">4*1=44*2=84*3=124*4=16</span></span><br><span class="line"><span class="string">5*1=55*2=105*3=155*4=205*5=25</span></span><br><span class="line"><span class="string">6*1=66*2=126*3=186*4=246*5=306*6=36</span></span><br><span class="line"><span class="string">7*1=77*2=147*3=217*4=287*5=357*6=427*7=49</span></span><br><span class="line"><span class="string">8*1=88*2=168*3=248*4=328*5=408*6=488*7=568*8=64</span></span><br><span class="line"><span class="string">9*1=99*2=189*3=279*4=369*5=459*6=549*7=639*8=729*9=81</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用列表和字典存储下表信息，并打印出表中工资高于15000的数据</span></span><br><span class="line">r1 = <span class="built_in">dict</span>(name=<span class="string">&quot;hycs&quot;</span>, age=<span class="number">18</span>, salary=<span class="number">10000</span>, city=<span class="string">&quot;shanghai&quot;</span>)</span><br><span class="line">r2 = <span class="built_in">dict</span>(name=<span class="string">&quot;sdaw&quot;</span>, age=<span class="number">28</span>, salary=<span class="number">20000</span>, city=<span class="string">&quot;beijing&quot;</span>)</span><br><span class="line">r3 = <span class="built_in">dict</span>(name=<span class="string">&quot;e1qe&quot;</span>, age=<span class="number">38</span>, salary=<span class="number">30000</span>, city=<span class="string">&quot;nanjing&quot;</span>)</span><br><span class="line">tb = [r1, r2, r3]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tb:</span><br><span class="line">    <span class="keyword">if</span> x.get(<span class="string">&quot;salary&quot;</span>)&gt;<span class="number">15000</span>:</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759591.png" alt="image-20231116161623031"></p><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759592.png" alt="image-20231116161924814"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要求输入员工的薪资，若薪资小于0则重新输入。最后打印出录入员王的数量和薪资明细，以及平均薪资</span></span><br><span class="line">empNum = <span class="number">0</span></span><br><span class="line">salarySum = <span class="number">0</span></span><br><span class="line">salarys = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&quot;请输入员工薪资（按Q或q退出）&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> s.upper() == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">float</span>(s) &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无效录入，请重新录入&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;录入成功&quot;</span>)</span><br><span class="line">    empNum += <span class="number">1</span></span><br><span class="line">    salarySum += <span class="built_in">float</span>(s)</span><br><span class="line">    salarys.append(<span class="built_in">float</span>(s))</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;员工数&quot;</span>, <span class="built_in">format</span>(empNum))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;录入薪资：&quot;</span>, salarys)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;总薪资：&quot;</span>, salarySum)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均薪资&quot;</span>, salarySum / empNum)</span><br></pre></td></tr></table></figure><h3 id="循环中的else子句"><a href="#循环中的else子句" class="headerlink" title="循环中的else子句"></a>循环中的else子句</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759593.png" alt="image-20231116163319060"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">salarySum = <span class="number">0</span></span><br><span class="line">salarys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&quot;请输入员工薪资（按Q或q退出）&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> s.upper() == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">float</span>(s) &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无效录入，请重新录入&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;录入成功&quot;</span>)</span><br><span class="line">    salarySum += <span class="built_in">float</span>(s)</span><br><span class="line">    salarys.append(<span class="built_in">float</span>(s))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;全部录入成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;录入薪资：&quot;</span>, salarys)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;总薪资：&quot;</span>, salarySum)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均薪资&quot;</span>, salarySum / <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请输入员工薪资（按Q或q退出）40</span></span><br><span class="line"><span class="string">录入成功</span></span><br><span class="line"><span class="string">请输入员工薪资（按Q或q退出）50</span></span><br><span class="line"><span class="string">录入成功</span></span><br><span class="line"><span class="string">请输入员工薪资（按Q或q退出）60</span></span><br><span class="line"><span class="string">录入成功</span></span><br><span class="line"><span class="string">请输入员工薪资（按Q或q退出）70</span></span><br><span class="line"><span class="string">录入成功</span></span><br><span class="line"><span class="string">全部录入成功</span></span><br><span class="line"><span class="string">录入薪资： [40.0, 50.0, 60.0, 70.0]</span></span><br><span class="line"><span class="string">总薪资： 220.0</span></span><br><span class="line"><span class="string">平均薪资 55.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759594.png" alt="image-20231116164105716"></p><h3 id="循环代码优化技巧"><a href="#循环代码优化技巧" class="headerlink" title="循环代码优化技巧"></a>循环代码优化技巧</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759595.png" alt="image-20231116164149547"></p><p><strong>其他优化手段</strong></p><ol><li>==连接多个字符串或列表，使用join()或append()而不使用+==     +会创建新的字符串，join不会</li><li>==列表进行元素插入和删除，尽量在列表尾部操作==</li></ol><h3 id="zip-并行送代多个序列"><a href="#zip-并行送代多个序列" class="headerlink" title="zip()并行送代多个序列"></a>zip()并行送代多个序列</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759596.png" alt="image-20231116164902092"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759597.png" alt="image-20231116165017217"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">names = (<span class="string">&quot;haohao&quot;</span>, <span class="string">&quot;hehe&quot;</span>, <span class="string">&quot;huaiyue&quot;</span>)</span><br><span class="line">ages = (<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>)</span><br><span class="line">jobs = (<span class="string">&quot;IT&quot;</span>, <span class="string">&quot;TEACHER&quot;</span>, <span class="string">&quot;POLICE&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用zip并行迭代多个序列</span></span><br><span class="line"><span class="keyword">for</span> name, age, job <span class="keyword">in</span> <span class="built_in">zip</span>(names, ages, jobs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;--&#123;1&#125;--&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(name, age, job))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 不使用zip也可以并使迭代多个序列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">min</span>(<span class="built_in">len</span>(names), <span class="built_in">len</span>(ages), <span class="built_in">len</span>(jobs))):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;--&#123;1&#125;--&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(names[i], ages[i], jobs[i]))</span><br></pre></td></tr></table></figure><h3 id="推导式创建序列-列表推导式-字典推导式-集合推导式-生成器推导式"><a href="#推导式创建序列-列表推导式-字典推导式-集合推导式-生成器推导式" class="headerlink" title="推导式创建序列-列表推导式-字典推导式-集合推导式-生成器推导式"></a>推导式创建序列-列表推导式-字典推导式-集合推导式-生成器推导式</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759598.png" alt="image-20231116165915358"></p><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759599.png" alt="image-20231116170101409"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cells = [(row, column) <span class="keyword">for</span> row, column <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>), <span class="built_in">range</span>(<span class="number">101</span>, <span class="number">110</span>))]</span><br><span class="line"><span class="built_in">print</span>(cells)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[2, 4, 6, 8]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[(1, 101), (2, 102), (3, 103), (4, 104), (5, 105), (6, 106), (7, 107), (8, 108), (9, 109)]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759600.png" alt="image-20231116171102217"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计字数</span></span><br><span class="line">my_text = <span class="string">&#x27;i love python, me too&#x27;</span></span><br><span class="line">char_count = &#123;c: my_text.count(c) <span class="keyword">for</span> c <span class="keyword">in</span> my_text&#125;</span><br><span class="line"><span class="built_in">print</span>(char_count)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;i&#x27;: 1, &#x27; &#x27;: 4, &#x27;l&#x27;: 1, &#x27;o&#x27;: 4, &#x27;v&#x27;: 1, &#x27;e&#x27;: 2, &#x27;p&#x27;: 1, &#x27;y&#x27;: 1, &#x27;t&#x27;: 2, &#x27;h&#x27;: 1, &#x27;n&#x27;: 1, &#x27;,&#x27;: 1, &#x27;m&#x27;: 1&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759601.png" alt="image-20231116171619541"></p><h4 id="生成器推导式（不直接生成元组）"><a href="#生成器推导式（不直接生成元组）" class="headerlink" title="生成器推导式（不直接生成元组）"></a>生成器推导式（不直接生成元组）</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759602.png" alt="image-20231116171724496"></p><h3 id="综合练习-绘制不同颜色的同心圆-绘制棋盘"><a href="#综合练习-绘制不同颜色的同心圆-绘制棋盘" class="headerlink" title="综合练习-绘制不同颜色的同心圆-绘制棋盘"></a>综合练习-绘制不同颜色的同心圆-绘制棋盘</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759604.png" alt="image-20231116173335354"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制不同颜色的同心圆</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">p = turtle.Pen()  <span class="comment"># 画笔对象</span></span><br><span class="line"></span><br><span class="line">radius = [x * <span class="number">10</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">my_color = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;black&quot;</span>, <span class="string">&quot;green&quot;</span>]</span><br><span class="line">p.width(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> r, i <span class="keyword">in</span> <span class="built_in">zip</span>(radius, <span class="built_in">range</span>(<span class="built_in">len</span>(radius))):  <span class="comment"># （10，0），(20,1)</span></span><br><span class="line">    p.penup()</span><br><span class="line">    p.goto(<span class="number">0</span>, -r)</span><br><span class="line">    p.pendown()</span><br><span class="line">    p.color(my_color[i % <span class="built_in">len</span>(my_color)])</span><br><span class="line">    p.circle(r)</span><br><span class="line"></span><br><span class="line">turtle.done()  <span class="comment"># 程序执行完毕，窗口还在</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制棋盘</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数和内存分析"><a href="#函数和内存分析" class="headerlink" title="函数和内存分析"></a>函数和内存分析</h2><h3 id="函数的基本概念-内存分析-函数分类-定义和调用"><a href="#函数的基本概念-内存分析-函数分类-定义和调用" class="headerlink" title="函数的基本概念-内存分析-函数分类-定义和调用"></a>函数的基本概念-内存分析-函数分类-定义和调用</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943309.png" alt="image-20231117163429235"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943310.png" alt="image-20231117163611378"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943311.png" alt="image-20231117163711793"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943312.png" alt="image-20231117163948916"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943313.png" alt="image-20231117164127321"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943314.png" alt="image-20231117164425172"></p><h3 id="形参和实参-文档字符串-函数的注释"><a href="#形参和实参-文档字符串-函数的注释" class="headerlink" title="形参和实参-文档字符串-函数的注释"></a>形参和实参-文档字符串-函数的注释</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943315.png" alt="image-20231117164624930"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943316.png" alt="image-20231117165253398"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943317.png" alt="image-20231117165341145"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printMax</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    求两个数较大的数</span></span><br><span class="line"><span class="string">    :param a: 一个参数</span></span><br><span class="line"><span class="string">    :param b: 一个参数</span></span><br><span class="line"><span class="string">    :return: 返回较大的数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>(printMax)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;print(printMax.__doc__)  &quot;</span>, printMax.__doc__)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Help on function printMax in module __main__:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">printMax(a, b)</span></span><br><span class="line"><span class="string">    求两个数较大的数</span></span><br><span class="line"><span class="string">    :param a: 一个参数</span></span><br><span class="line"><span class="string">    :param b: 一个参数</span></span><br><span class="line"><span class="string">    :return: 返回较大的数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">print(printMax.__doc__)   </span></span><br><span class="line"><span class="string">    求两个数较大的数</span></span><br><span class="line"><span class="string">    :param a: 一个参数</span></span><br><span class="line"><span class="string">    :param b: 一个参数</span></span><br><span class="line"><span class="string">    :return: 返回较大的数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="返回值详解"><a href="#返回值详解" class="headerlink" title="返回值详解"></a>返回值详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943318.png" alt="image-20231117165838027"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printShape</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回一个列表</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s1 = <span class="string">&quot;#&quot;</span> * n</span><br><span class="line">    s2 = <span class="string">&quot;$&quot;</span> * n</span><br><span class="line">    <span class="keyword">return</span> [s1, s2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = printShape(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;#####&#x27;, &#x27;$$$$$&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="函数也是对象-内存分析"><a href="#函数也是对象-内存分析" class="headerlink" title="函数也是对象-内存分析"></a>函数也是对象-内存分析</h3><p>==Python中，”一切都是对象”==。实际上，执行def定义函数后，系统就创建了相应的==函数对象==。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943319.png" alt="image-20231117170506090"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943320.png" alt="image-20231117170556762"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943321.png" alt="image-20231117170656317"></p><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><h4 id="全局变量-局部变量-栈帧内存分析讲解"><a href="#全局变量-局部变量-栈帧内存分析讲解" class="headerlink" title="全局变量-局部变量-栈帧内存分析讲解"></a>全局变量-局部变量-栈帧内存分析讲解</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943322.png" alt="image-20231117170903135"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943323.png" alt="image-20231117171022107"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">locals</span>())    <span class="comment"># 打印输出的局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;#&quot;</span> * <span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">globals</span>())   <span class="comment"># 打印输出的全局变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2 3 4</span></span><br><span class="line"><span class="string">&#123;&#x27;a&#x27;: 2, &#x27;b&#x27;: 3, &#x27;c&#x27;: 4&#125;</span></span><br><span class="line"><span class="string">####################</span></span><br><span class="line"><span class="string">&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x0000023373C06CD0&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;D:\\2022百战Python\\Python基础\\函数和内存分析\\practice.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;a&#x27;: 100, &#x27;f1&#x27;: &lt;function f1 at 0x0000023374387E50&gt;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="局部变量和全局变量-效率测试"><a href="#局部变量和全局变量-效率测试" class="headerlink" title="局部变量和全局变量-效率测试"></a>局部变量和全局变量-效率测试</h4><p>==局部变量的查询和访问速度比全局变量快，优先考虑使用，尤其是在循环的时候。==</p><p>==在特别强调效率的地方或者循环次数较多的地方，可以通过将全局变量转为局部变量提高运行速度。==</p><h3 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943324.png" alt="image-20231117172204514"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943325.png" alt="image-20231117172401914"></p><ul><li><strong>对“可变对象”进行“写操作”，直接作用于原对象本身。</strong></li></ul><ul><li><strong>对“不可变对象”进行“写操作”，会产生一个新的“对象空间”，并用新的值填充这块空间。</strong></li></ul><h4 id="传递可变对象-内存分析"><a href="#传递可变对象-内存分析" class="headerlink" title="传递可变对象-内存分析"></a>传递可变对象-内存分析</h4><h4 id="传递不可变对象-内存分析"><a href="#传递不可变对象-内存分析" class="headerlink" title="传递不可变对象-内存分析"></a>传递不可变对象-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943326.png" alt="image-20231117173137743"></p><h4 id="浅拷贝和深拷贝-内存分析"><a href="#浅拷贝和深拷贝-内存分析" class="headerlink" title="浅拷贝和深拷贝-内存分析"></a>浅拷贝和深拷贝-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943327.png" alt="image-20231117173444372"></p><p>①<strong>浅拷贝</strong>：==拷贝对象，但不拷贝子对象的内容，只是拷贝子对象的引用。==</p><p>②<strong>深拷贝</strong>：==拷贝对象，并且会连子对象的内存也全部（递归）拷贝一份，对子对象的修改不会影响源对象==</p><h4 id="不可变对象含可变子对象-内存分析"><a href="#不可变对象含可变子对象-内存分析" class="headerlink" title="不可变对象含可变子对象-内存分析"></a>不可变对象含可变子对象-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943328.png" alt="image-20231117174312493"></p><h3 id="参数的类型"><a href="#参数的类型" class="headerlink" title="参数的类型"></a>参数的类型</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943329.png" alt="image-20231117174934453"></p><h4 id="位置参数-默认值参数-命名参数"><a href="#位置参数-默认值参数-命名参数" class="headerlink" title="位置参数-默认值参数-命名参数"></a>位置参数-默认值参数-命名参数</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943330.png" alt="image-20231117181032226"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943331.png" alt="image-20231117181134330"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943332.png" alt="image-20231117181207414"></p><h4 id="可变参数-强制命名参数"><a href="#可变参数-强制命名参数" class="headerlink" title="可变参数-强制命名参数"></a>可变参数-强制命名参数</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943333.png" alt="image-20231117181448367"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943334.png" alt="image-20231117181534034"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943335.png" alt="image-20231117181557596"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943336.png" alt="image-20231117181931376"></p><h3 id="lambda表达式和匿名函数"><a href="#lambda表达式和匿名函数" class="headerlink" title="lambda表达式和匿名函数"></a>lambda表达式和匿名函数</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943337.png" alt="image-20231117182235722"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943338.png" alt="image-20231117182308842"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> a, b, c: a + b + c</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(f))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;function &lt;lambda&gt; at 0x000001AF907F7E50&gt;</span></span><br><span class="line"><span class="string">1853555179088</span></span><br><span class="line"><span class="string">&lt;class &#x27;function&#x27;&gt;</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">g = [<span class="keyword">lambda</span> a: a * <span class="number">2</span>, <span class="keyword">lambda</span> b: b * <span class="number">4</span>, <span class="keyword">lambda</span> c: c * <span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(g[<span class="number">0</span>](<span class="number">1</span>), g[<span class="number">1</span>](<span class="number">2</span>), g[<span class="number">2</span>](<span class="number">3</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2 8 24</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="eval-函数的用法和注入安全隐患问题"><a href="#eval-函数的用法和注入安全隐患问题" class="headerlink" title="eval()函数的用法和注入安全隐患问题"></a>eval()函数的用法和注入安全隐患问题</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943339.png" alt="image-20231117183923056"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943340.png" alt="image-20231117183958772"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;print(&#x27;abcd&#x27;)&quot;</span></span><br><span class="line"><span class="built_in">eval</span>(s)   <span class="comment"># eval会将字符串当成语句来执行</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;abcd&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = <span class="built_in">eval</span>(<span class="string">&quot;a+b&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;30&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">dict1 = <span class="built_in">dict</span>(a=<span class="number">100</span>, b=<span class="number">200</span>)</span><br><span class="line">d = <span class="built_in">eval</span>(<span class="string">&quot;a+b&quot;</span>, dict1)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;300&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943341.png" alt="image-20231117184610770"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943342.png" alt="image-20231117184633540"></p><h4 id="函数调用内存分析-栈帧的创建"><a href="#函数调用内存分析-栈帧的创建" class="headerlink" title="函数调用内存分析-栈帧的创建"></a>函数调用内存分析-栈帧的创建</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943343.png" alt="image-20231117185027038"></p><h4 id="阶乘计算案例"><a href="#阶乘计算案例" class="headerlink" title="阶乘计算案例"></a>阶乘计算案例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943344.png" alt="image-20231117185357907"></p><h3 id="嵌套函数-内部函数-数据隐藏"><a href="#嵌套函数-内部函数-数据隐藏" class="headerlink" title="嵌套函数(内部函数)-数据隐藏"></a>嵌套函数(内部函数)-数据隐藏</h3><p><strong>嵌套函数：在函数内部定义的函数</strong></p><p>一般在什么情况下使用嵌套函数？</p><ol><li>封装-数据隐藏 :外部无法访问“嵌套函数”。</li><li>贯彻DRY(Don’t Repeat Yourself)原则</li><li>嵌套函数，可以让我们在函数内部避免重复代码。</li><li>闭包（后面会讲解）</li></ol><h3 id="nonlocal和global关键字"><a href="#nonlocal和global关键字" class="headerlink" title="nonlocal和global关键字"></a>nonlocal和global关键字</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943345.png" alt="image-20231117190204820"></p><h3 id="LEGB规则"><a href="#LEGB规则" class="headerlink" title="LEGB规则"></a>LEGB规则</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943346.png" alt="image-20231117194110266"></p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="面向对象和面向过程的区别-设计者思维-执行者思维"><a href="#面向对象和面向过程的区别-设计者思维-执行者思维" class="headerlink" title="面向对象和面向过程的区别-设计者思维-执行者思维"></a>面向对象和面向过程的区别-设计者思维-执行者思维</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219980.png" alt="image-20231117194403836"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219981.png" alt="image-20231117194445222"></p><blockquote><p><strong>面向过程和面向对象的区别</strong></p><p>面向过程和面向对象都是对软件分析、设计和开发的一种思想，它指导着人们以不同的方式去分析、设计和开发软件。</p><p>==C语言是一种典型的面向过程语言，Java是一种典型的面向对象语言。==</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219982.png" alt="image-20231117194720826"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219983.png" alt="image-20231117194758398"></p><blockquote><p>面向对象可以帮助我们从宏观上把握、从整体上分析整个系统。但是，具体到实现部分的微观操作（就是一个个方法），仍然需要面向过程的思路去处理。</p><p>我们干万不要把面向过程和面向对象对立起来。他们是相辅相成的。==面向对象离不开面向过程！==</p></blockquote><p><strong>面向对象和面向过程总结</strong></p><p>①都是解决问题的思维方式，都是代码组织的方式。</p><p>②==面向过程是一种“执行者思维”==，解决简单问题可以使用面向过程</p><p>③==面向对象是一种“设计者思维”==，解决复杂、需要协作的问题可以使用面向对象</p><blockquote><p>面向对象离不开面向过程：<br>    ·宏观上：通过面向对象进行整体设计<br>    ·微观上：执行和处理数据，仍然是面向过程</p></blockquote><h3 id="对象进化的小故事"><a href="#对象进化的小故事" class="headerlink" title="对象进化的小故事"></a>对象进化的小故事</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219984.png" alt="image-20231117195725002"></p><h3 id="类的定义-类和对象的关系-对象的内存模型"><a href="#类的定义-类和对象的关系-对象的内存模型" class="headerlink" title="类的定义-类和对象的关系-对象的内存模型"></a>类的定义-类和对象的关系-对象的内存模型</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219985.png" alt="image-20231117195854311"></p><blockquote><p>类：我们叫做<code>class</code>。对象：我们叫做<code>object</code>,<code>instance</code>(实例)。以后我们说某个类的对象，某个类的实例。是一样的意思。</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219986.png" alt="image-20231117200128085"></p><blockquote><p>从一个类创建对象时，每个对象会共享这个类的行为（类中定义的方法），但会有自己的属性值（不共享状态）。更具体一点：“方法代码是共享的，属性数据不共享”。</p><p>Python中，”一切皆对象”。类也称为“==类对像==”，类的实例也称为“实例对象”。</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219987.png" alt="image-20231117200451070"></p><p>要点如下：</p><p>①类名必须符合“标识符”的规则；一般规定，==首字母大写，多个单词使用“驼峰原则”==。</p><p>②类体中我们可以定义属性和方法</p><p>③属性用来描述数据，方法（即函数）用来描述这些数据相关的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):  <span class="comment"># self参数是必须有的</span></span><br><span class="line">        self.name = name              <span class="comment"># 实例属性</span></span><br><span class="line">        self.score = score            <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的分数是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.score))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;john&quot;</span>, <span class="number">61</span>)  <span class="comment"># 自动调用__init__()方法</span></span><br><span class="line"><span class="built_in">print</span>(s1.name, s1.score)</span><br><span class="line">s1.say_score()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">john 61</span></span><br><span class="line"><span class="string">john的分数是61</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219988.png" alt="image-20231117201324006"></p><h3 id="构造函数-init和new方法"><a href="#构造函数-init和new方法" class="headerlink" title="构造函数-init和new方法"></a>构造函数-init和new方法</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219989.png" alt="image-20231117201604950"></p><p><code>__init__()</code> <strong>构造函数</strong>的要点如下：</p><ol><li><p>名称固定，必须为：<code>__init__()</code></p></li><li><p>第一个参数固定，必须为：<code>self</code>。<code>self</code>指的就是刚刚创建好的实例对象</p></li><li><p>构造函数通常用来初始化实例对象的实例属性，如下代码就是初始化实例属性：<code>name</code>和<code>score</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):  <span class="comment"># self参数是必须有的</span></span><br><span class="line">       self.name = name           <span class="comment"># 实例属性</span></span><br><span class="line">       self.score = score         <span class="comment"># 实例属性</span></span><br></pre></td></tr></table></figure></li><li><p>通过“类名(参数列表)”来调用构造函数。调用后，将创建好的对象返回给相应的变量。比如：<code>s1=Student(&quot;张三&quot;,80)</code></p></li><li><p><code>__init__()</code>方法：==初始化创建好的对象==，<strong>初始化指的是：“给实例属性赋值”</strong></p></li><li><p><code>__new__()</code>方法：==用于创建对象==，但我们一般无需重定义该方法</p></li><li><p>如果我们不定义<code>__init__</code>方法，系统会提供一个默认的<code>__init__</code>方法。如果我们定义了带参的<code>__init__</code>方法，系统不创建默认的<code>__init__</code>方法</p></li></ol><blockquote><p>Python中的<code>self</code>相当于C++中的<code>self指针</code>，JAVA和C#中的<code>this</code>关键字。Python中<code>self</code>必须为构造函数的第一个参数，名字可以任意修改。但一般惯例，都叫做<code>self</code></p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219990.png" alt="image-20231117204441814"></p><h3 id="实例属性-内存分析"><a href="#实例属性-内存分析" class="headerlink" title="实例属性-内存分析"></a>实例属性-内存分析</h3><p><strong>实例属性</strong></p><p>实例属性是从属于实例对象的属性，也称为“实例变量”。他的使用有如下几个要点：</p><ol><li><p>实例属性一般在<code>__init__()</code>方法中通过如下代码定义：</p><p><code>self.实例属性名 = 初始值</code></p></li><li><p>在本类的其他实例方法中，也是通过<code>self</code>进行访问：</p><p><code>self.实例属性名</code></p></li><li><p>创建实例对象后，通过实例对象访问：</p><p><code>obj01=类名()</code>                               #创建和初始化对象，调用<code>__init__()</code>初始化属性</p><p><code>obj01.实例属性名 = 值</code>          #可以给已有属性赋值，也可以新加属性</p></li></ol><h3 id="实例方法-内存分析方法调用过程-dir-isinstance"><a href="#实例方法-内存分析方法调用过程-dir-isinstance" class="headerlink" title="实例方法-内存分析方法调用过程-dir()-isinstance"></a>实例方法-内存分析方法调用过程-dir()-isinstance</h3><p><strong>实例方法</strong></p><p>实例方法是从属于实例对象的方法。实例方法的定义格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">方法名</span>(<span class="params">self [, 形参列表]</span>):</span><br><span class="line">函数体</span><br></pre></td></tr></table></figure><p>方法的调用格式如下：</p><p>​                        <code>对象.方法名([实参列表])</code></p><p>要点：</p><ol><li><p>定义实例方法时，第一个参数必须为<code>self</code>。和前面一样，<code>self</code>指当前的实例对象。</p></li><li><p>调用实例方法时，不需要也不能给<code>self</code>传参。<code>self</code>由解释器自动传参</p></li></ol><blockquote><p><strong>函数和方法的区别</strong></p><p>①都是用来完成一个功能的语句块，本质一样。</p><p>②方法调用时，通过对象来调用。方法从属于特定实例对象，普通函数没有这个特点<br>③直观上看，方法定义时需要传递<code>self</code>,函数不需要</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219991.png" alt="image-20231117210158863"></p><p><strong>其他操作</strong></p><ol><li><code>dir(obj)</code>可以获得对象的所有属性、方法</li><li><code>obj.__dict__</code>对象的属性字典</li><li><code>pass</code>空语句</li><li><code>isinstance(对象,类型)</code>判断对象”是不是”指定类型”</li></ol><h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><p><strong>类对象</strong></p><p>我们在前面讲的类定义格式中, <code>class 类名：</code>。实际上，当解释器执行<code>class</code>语句时，就会创建一个类对象</p><h3 id="类属性-内存分析（创建类和对象的底层）"><a href="#类属性-内存分析（创建类和对象的底层）" class="headerlink" title="类属性-内存分析（创建类和对象的底层）"></a>类属性-内存分析（创建类和对象的底层）</h3><p>类属性是从属于“类对象”的属性，也称为“类变量”。由于，类属性从属于类对象，可以被所有实例对象共享。</p><p>类属性的定义方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">类名变量 = 初始值</span><br></pre></td></tr></table></figure><p>在==类中或者类的外面==，我们可以通过：<code>类名.类变量名</code> 来读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school = <span class="string">&quot;HNU&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line">    count = <span class="number">0</span>       <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):</span><br><span class="line">        self.name = name    <span class="comment"># 实例属性</span></span><br><span class="line">        self.score = score  <span class="comment"># 实例属性</span></span><br><span class="line">        Student.count = Student.count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):    <span class="comment"># 实例方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的学校是：&quot;</span>, Student.school)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的分数是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.score))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;john&quot;</span>, <span class="number">61</span>)    <span class="comment"># s1是实例对象，自动调用__init__()方法</span></span><br><span class="line">s2 = Student(<span class="string">&quot;jack&quot;</span>, <span class="number">91</span>)</span><br><span class="line">s1.say_score()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一共创建了&#123;0&#125;个Student对象&quot;</span>.<span class="built_in">format</span>(Student.count))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我的学校是： HNU</span></span><br><span class="line"><span class="string">john的分数是61</span></span><br><span class="line"><span class="string">一共创建了2个Student对象</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219992.png" alt="image-20231117212505195"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219993.png" alt="image-20231117212336356"></p><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>==类方法是从属于“类对象”的方法。==类方法通过装饰器<code>@classmethod</code>来定义，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">类方法名</span>(<span class="params">cls [, 形参列表]</span>):</span><br><span class="line">方法体</span><br></pre></td></tr></table></figure><p>要点如下：</p><ol><li><code>@classmethod</code>必须位于方法上面一行</li><li>第一个<code>cls</code>必须有；==<code>cls</code>指的就是“类对象”本身==</li><li>调用类方法格式：<code>类名.类方法名(参数列表)</code>。参数列表中，不需要也不能给<code>cls</code>传值</li><li><strong>类方法中访问实例属性和实例方法会导致错误</strong></li><li>子类继承父类方法时，传入cls是子类对象，而非父类对象（讲完继承再说）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school = <span class="string">&quot;HNU&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printSchool</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls.school)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student.printSchool()</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>Python中允许定义与”类对象”无关的方法，称为“静态方法”。</p><p>“静态方法”和在模块中定义普通函数没有区别，只不过“静态方法”放到了“类的名字空间里面”，需要通过“类调用”。</p><p>静态方法通过装饰器<code>@staticmethod</code>来定义，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">静态方法名</span>(<span class="params">[形参列表]</span>):</span><br><span class="line">方法体</span><br></pre></td></tr></table></figure><p>要点如下：</p><ol><li><p><code>@staticmethod</code>必须位于方法上面一行</p></li><li><p>调用静态方法格式：<code>类名.静态方法名(参数列表)</code></p></li><li><p>静态方法中访问实例属性和实例方法会导致错误</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school = <span class="string">&quot;HNU&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):  <span class="comment"># 静态方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(a, b, a + b))</span><br><span class="line">        <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student.add(<span class="number">30</span>, <span class="number">40</span>)</span><br></pre></td></tr></table></figure><h3 id="del析构方法-垃圾回收机制简介"><a href="#del析构方法-垃圾回收机制简介" class="headerlink" title="del析构方法-垃圾回收机制简介"></a>del析构方法-垃圾回收机制简介</h3><p>==Python实现自动的垃圾回收==</p><p><code>__del__()</code>称为“析构方法”，用于实现对象被销毁时所需的操作。比如：释放对象占用的资源，例如：打开的文件资源、网络连接等。</p><p>Python实现自动的垃圾回收，当对象没有被引用时（引用计数为0），由垃圾回收器调用<code>__del__()</code>。</p><p>我们也可以通过<code>del语句</code>删除对象，从而保证调用<code>__del__()</code>。</p><p>系统会自动提供<code>__del__</code>方法，一般不需要自定义析构方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 析构函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;销毁对象：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Person()</span><br><span class="line">p2 = Person()</span><br><span class="line"><span class="keyword">del</span> p2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;程序结束&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">销毁对象：&lt;__main__.Person object at 0x0000021E3FE14FA0&gt;</span></span><br><span class="line"><span class="string">程序结束</span></span><br><span class="line"><span class="string">销毁对象：&lt;__main__.Person object at 0x0000021E3FE14FD0&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="call方法和可调用对象"><a href="#call方法和可调用对象" class="headerlink" title="call方法和可调用对象"></a>call方法和可调用对象</h3><p>Python中，凡是可以将<code>()</code>直接应用到自身并执行，都称为可调用对象。</p><p>可调用对象包括自定义的函数、Python内置函数、以及本节所讲的实例对象。</p><p>定义了<code>__call__()</code>的对象，称为==“可调用对象”，即该对象可以像函数一样被调用==。</p><p>该方法使得实例对象可以像调用普通函数那样，以<code>&quot;对象名()&quot;</code>的形式使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;f1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1()  <span class="comment"># 本质也是调用了__call__()方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;f1&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, age, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;call方法&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;车龄&#123;0&#125;,金额&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(age, money))</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">c = Car()</span><br><span class="line">c(<span class="number">3</span>, <span class="number">20000</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">call方法</span></span><br><span class="line"><span class="string">车龄3,金额20000</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="方法没有重载-方法的动态性"><a href="#方法没有重载-方法的动态性" class="headerlink" title="方法没有重载-方法的动态性"></a>方法没有重载-方法的动态性</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753886.png" alt="image-20231117221944194"></p><p>如果我们在类体中定义了多个重名的方法，只有最后一个方法有效。</p><p>建议：==不要使用重名的方法！Python中方法没有重载。==</p><blockquote><p>在其他一些语言（比如：Java)中，可以定义多个重名的方法，只要保证方法签名唯一即可。方法签名包含3个部分：方法名、参数数量、参数类型。<br>    Python中，方法的的参数没有声明类型（调用时确定参数的类型），参数的数量也可以由可变参数控制。因此，Python中是没有方法的重载的。</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753888.png" alt="image-20231118140905523"></p><h3 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753889.png" alt="image-20231118141259542"></p><p>Pytho对于类的成员没有严格的访问控制限制，这与其他面向对象语言有区别。关于私有属性和私有方法，有如下要点：</p><p>①通常我们约定，<strong>两个下划线开头的属性是私有的(private)</strong>。其他为公 共的(public)。</p><p>②类内部可以访问私有属性（方法）</p><p>③类外部不能直接访问私有属性（方法）</p><p>④类外部可以通过 <code>_类名__私有属性(方法)名</code> 访问私有属性（方法）</p><blockquote><p>【注】==方法本质上也是属性！==只不过是可以通过()执行而已。</p><p>所以，此处讲的私有属性和公有属性，也同时讲解了私有方法和公有方法的用法。</p><p>如下测试中，同时也包含了私有方法和公有方法的例子。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">    __company = <span class="string">&quot;Ailibab&quot;</span>  <span class="comment"># 私有属性，解释器运行时把__company转化成_Employee__company</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age   <span class="comment"># 私有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_company</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的公司名字是：&quot;</span>, Employee.__company)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的年龄是：&quot;</span>, self.__age)</span><br><span class="line">        </span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">__work</span>(<span class="params">self</span>):     <span class="comment"># 私有方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;好好工作&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Employee._Employee__company)</span><br><span class="line">a = Employee(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>)</span><br><span class="line">a.say_company()</span><br><span class="line"><span class="built_in">print</span>(a._Employee__age)  <span class="comment"># 调用私有属性</span></span><br><span class="line">a._Employee__work()      <span class="comment"># 调用私有方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Ailibab</span></span><br><span class="line"><span class="string">我的公司名字是： Ailibab</span></span><br><span class="line"><span class="string">我的年龄是： 20</span></span><br><span class="line"><span class="string">20</span></span><br><span class="line"><span class="string">好好工作</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h3><p><code>@property</code>可以将一个<strong>方法的调用方式变成“属性调用”</strong>。</p><p><code>@property</code>主要用于帮助我们<strong>处理属性的读操作、写操作</strong>。对于某一个属性，我们可以直接通过：</p><p>​                                                        <code>emp1.salary= 30000</code></p><p>如上的操作读操作、写操作。但是，这种做法不安全。比如，我需要限制薪水必须为<code>1-10000</code>的数字。这时候，我们就需要通过使用装饰器<code>@property</code>来处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__salary = salary</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property                      </span><span class="comment"># 只能读 print(emp1.salary) 相当于属性的调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;薪资是：&quot;</span>, self.__salary)</span><br><span class="line">        <span class="keyword">return</span> self.__salary</span><br><span class="line"></span><br><span class="line"><span class="meta">    @salary.setter                 </span><span class="comment"># 修改使用这个函数 emp1.salary = 50000</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">salary</span>(<span class="params">self, salary</span>): </span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; salary &lt; <span class="number">100000</span>:</span><br><span class="line">            self.__salary = salary</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;薪资录入错误！只能在0-100000之间&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">emp1 = Employee(<span class="string">&quot;john&quot;</span>, <span class="number">20000</span>)</span><br><span class="line">emp1.salary = <span class="number">50000</span></span><br><span class="line"><span class="built_in">print</span>(emp1.salary)</span><br><span class="line"></span><br><span class="line">emp1.salary = <span class="number">100000000</span></span><br><span class="line"><span class="built_in">print</span>(emp1.salary)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">薪资是： 50000</span></span><br><span class="line"><span class="string">50000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">薪资录入错误！只能在0-100000之间</span></span><br><span class="line"><span class="string">薪资是： 50000</span></span><br><span class="line"><span class="string">50000</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="属性和类的命名规则总结"><a href="#属性和类的命名规则总结" class="headerlink" title="属性和类的命名规则总结"></a>属性和类的命名规则总结</h3><p><strong>属性和方法命名总结</strong></p><p><code>_xxx</code>：保护成员，不能用<code>from module import *</code> 导入，只有类对象和子类对象能访问这些成员。</p><p><code>__xxx__</code>:系统定义的特殊成员</p><p><code>__xxx</code>:类中的私有成员，只有类对象自己能访问，子类对象也不能访问。(但，在类外部可以通过 <code>对像名._类名__xxx</code> 这种特殊方式访问。Python不存在严格意义的私有成员)</p><blockquote><p>:warning:再次强调，方法和属性都遵循上面的规则。 </p></blockquote><p><strong>类编码风格</strong></p><ol><li><strong>类名首字母大写，多个单词之间采用驼峰原则。</strong></li><li><strong>实例名、模块名采用小写，多个单词之间采用下划线隔开</strong></li><li>每个类，应紧跟“文档字符串”，说明这个类的作用</li><li>可以用空行组织代码，但不能滥用。在类中，使用一个空行隔开方法；模块中，使用两个空行隔开多个类</li></ol><h3 id="None对象的特殊性"><a href="#None对象的特殊性" class="headerlink" title="None对象的特殊性"></a>None对象的特殊性</h3><p><strong>None是什么？</strong></p><ol><li><p>与C和JAVA不同，Pythont中是没有<code>NULL</code>的，取而代之的是<code>None</code>。</p></li><li><p><code>None</code>是一个特殊的常量，表示变量没有指向任何对象。</p></li><li><p>在Python中，<code>None</code>本身实际上<strong>也是对象</strong>，有自己的类型<code>NoneType</code>。</p></li><li><p>你可以将<code>None</code>赋值给任何变量，但我们不能创建<code>NoneType</code>类型的对象</p></li></ol>   <blockquote alt= "warn"><p>None不是False，None不是0，None不是空字符串。None和任何其他的数据类型比较永远返回False。</p></blockquote><p><strong>空列表、空字符串、0之间的比较</strong></p><ol><li>if语句判断时，空列表[]、空字典{}、空元组()、空字符串、0、None等一系列代表空和无的对象会被转换成False</li><li><code>==</code>和<code>is</code>判断时，空列表、空字符串不会自动转成<code>False</code></li></ol><h3 id="面向对象的三大特征说明（封装、继承、多态）"><a href="#面向对象的三大特征说明（封装、继承、多态）" class="headerlink" title="面向对象的三大特征说明（封装、继承、多态）"></a>面向对象的三大特征说明（封装、继承、多态）</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753890.png" alt="image-20231118165047726"></p><p>==Python是面向对象的语言，支持面向对象编程的三大特性：继承、封装（隐藏）、多态。==</p><p><strong>封装（隐藏）</strong></p><blockquote><p>隐藏对象的属性和实现细节，只对外提供必要的方法。相当于将“细节封装起来”，只对外暴露”相关调用方法”。</p><p>通过前面学习的“==私有属性、私有方法”的方式，实现封装==”。Pythoni追求简洁的语法，没有严格的语法级别的“访问控制符”，更多的是依靠程序员自觉实现。</p></blockquote><p><strong>继承</strong></p><blockquote><p>继承可以让子类具有父类的特性，提高了代码的重用性。</p><p>从设计上是一种==增量进化==，原有父类设计不变的情况下，可以增加新的功能，或者改进已有的算法。</p></blockquote><p><strong>多态</strong></p><blockquote><p>多态是指==同一个方法调用由于对象不同会产生不同的行为==。</p><p>生活中这样的例子比比皆是：同样是休息方法，人不同休息方法不同。张三休息是睡觉，李四休息是玩游戏，程序员休息是“敲几行代码”。</p></blockquote><h3 id="继承详解"><a href="#继承详解" class="headerlink" title="继承详解"></a>继承详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753891.png" alt="image-20231118165634687"></p><p>继承是面向对象编程的三大特征之一。继承让我们更加容易实现类的扩展。实现代码的重用，不用再重新发明轮子(don’t reinvent wheels)。</p><p>如果<strong>一个新类继承自一个设计好的类，就直接具备了已有类的特征</strong>，就大大降低了工作难度。已有的类，我们称为“父类或者基类”。新的类，我们称为“子类或者派生类”。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753892.png" alt="image-20231118165736909"></p><p><strong>语法格式</strong></p><p>Python支持==多重继承，一个子类可以继承多个父类==。继承的语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">子类类名</span>(父类<span class="number">1</span>[, 父类<span class="number">2</span>, ...]):</span><br><span class="line">类体</span><br></pre></td></tr></table></figure><blockquote><p>如果在类定义中没有指定父类，则默认父类是<code>object类</code>。也就是说，<code>object</code>是所有类的父类，里面定义了一些所有类共有的默认实现，比如：<code>__new__()</code></p></blockquote><p><strong>关于构造函数：</strong></p><ol><li><p>子类不重写<code>__init__</code>,实例化子类时，会自动调用父类定义的<code>__init__</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>)</span><br><span class="line">s1.say_age()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">haha的年龄是20</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>子类重写了<code>__init__</code>时，实例化子类，就不会调用父类已经定义的<code>__init__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        <span class="comment"># 两种调用父类的构造方法</span></span><br><span class="line">        <span class="comment"># 1.</span></span><br><span class="line">        <span class="comment"># Person.__init__(self, name, age)</span></span><br><span class="line">        <span class="comment"># 2.</span></span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的分数：&quot;</span>, self.score)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line">s1.say_score()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">创建Student</span></span><br><span class="line"><span class="string">我的分数： 90</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;, &#x27;say_score&#x27;, &#x27;score&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>如果重写了<code>__init__</code>时，要使用父类的构造方法，可以使用<code>super</code>关键字，也可以使用如下格式调用：</p><p>​                                                            <code>父类名.__init__(self, 参数列表)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        <span class="comment"># 两种调用父类的构造方法</span></span><br><span class="line">        <span class="comment"># 1.</span></span><br><span class="line">        <span class="comment"># Person.__init__(self, name, age)</span></span><br><span class="line">        <span class="comment"># 2.</span></span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">创建Student</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;, &#x27;score&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="类成员继承和方法的重写"><a href="#类成员继承和方法的重写" class="headerlink" title="类成员继承和方法的重写"></a>类成员继承和方法的重写</h3><p><strong>成员继承</strong>：==子类继承了父类除构造方法（<code>__init__()</code>）之外的所有成员。==</p><blockquote><p>:warning:（私有属性、私有方法也被继承）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age       <span class="comment"># 私有属性也会被继承</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.__age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        <span class="comment"># 两种调用父类的构造方法</span></span><br><span class="line">        <span class="comment"># 1.</span></span><br><span class="line">        <span class="comment"># Person.__init__(self, name, age)</span></span><br><span class="line">        <span class="comment"># 2.</span></span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的分数：&quot;</span>, self.score)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line">s1.say_age()</span><br><span class="line">s1.say_score()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">创建Student</span></span><br><span class="line"><span class="string">haha的年龄是20</span></span><br><span class="line"><span class="string">我的分数： 90</span></span><br><span class="line"><span class="string">[&#x27;_Person__age&#x27;, &#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;, &#x27;say_score&#x27;, &#x27;score&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>方法重写</strong>：子类可以重新定义父类中的方法，这样就会覆盖父类的方法，也称为“重写”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的名字是：&quot;</span>, self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        Person.__init__(self, name, age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的分数：&quot;</span>, self.score)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_name</span>(<span class="params">self</span>):    <span class="comment"># 重写父类的方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hello ,my name is &quot;</span>, self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line">s1.say_age()</span><br><span class="line">s1.say_score()</span><br><span class="line">s1.say_name()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">创建Student</span></span><br><span class="line"><span class="string">haha的年龄是20</span></span><br><span class="line"><span class="string">我的分数： 90</span></span><br><span class="line"><span class="string">hello ,my name is  haha</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;, &#x27;say_name&#x27;, &#x27;say_score&#x27;, &#x27;score&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>查看类的继承层次结构</strong></p><p>通过类的方法<code>mro()</code>或者类的属性<code>__mro__</code>可以输出这个类的继承层次结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">B</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(C.mro())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753893.png" alt="image-20231118173835027"></p><h3 id="object根类-查看模块结构-dir"><a href="#object根类-查看模块结构-dir" class="headerlink" title="object根类-查看模块结构-dir()"></a>object根类-查看模块结构-dir()</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753894.png" alt="image-20231118174521095"></p><blockquote><p>==<code>object</code>类是所有类的父类==，因此所有的类都有<code>object</code>类的属性和方法。我们显然有必要深入研究一下<code>object</code>类的结构。对于我们继续深入学习Python很有好处。</p></blockquote><p><strong><code>dir()</code>查看对象属性</strong></p><p>为了深入学习对象，先学习内置函数dir(),他可以让我们方便的看到指定对象所有的属性</p><blockquote><p>:warning:快捷键 Alt+ 7 打开模块结构</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753895.png" alt="image-20231118175130469"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快捷键 Alt+ 7 打开模块结构</span></span><br><span class="line">obj = <span class="built_in">object</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(obj))</span><br><span class="line"></span><br><span class="line">s2 = Person(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法的本质也是是属性</span></span><br><span class="line"><span class="built_in">print</span>(s2.say_age)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s2.say_age))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;bound method Person.say_age of &lt;__main__.Person object at 0x00000222E819BFD0&gt;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;method&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>从上面我们可以发现这样几个要点：</strong></p><ol><li>Person对象增加了六个属性：<code>__dict__</code> <code>__module__</code> <code>__weakref__</code> <code>age</code> <code>name</code> <code>say_age</code></li><li><code>object</code>的所有属性，<code>Person</code>类作为<code>object</code>的子类，显然包含了所有的属性</li><li>我们打印<code>age</code>、<code>name</code>、<code>say_age</code>，发现<code>say_age</code>虽然是==方法，实际上也是属性==。只不过这个属性的类型是method而已。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age &lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line">name &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">say_age &lt;<span class="keyword">class</span> <span class="string">&#x27;method&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>关于objecti这些属性的详细学习，会后面学习中逐个涉及。在此，没必要展开。</p></blockquote><h3 id="重写-str-方法"><a href="#重写-str-方法" class="headerlink" title="重写__str__()方法"></a>重写<code>__str__()</code>方法</h3><ol><li><code>object</code>有一个<code>__str()__</code>方法，用于返回一个对于”对象的描述”。内置函数<code>str(对象)</code>，调用的就是<code>__str()__</code></li><li><code>__str()__</code>经常用于<code>print()</code>方法，帮助我们查看对象的信息。<code>__str()__</code>可以重写</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将对象转化成一个字符串描述，一般用于print方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;重写str方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;名字是：&#123;0&#125;，年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">s = <span class="built_in">str</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">重写str方法</span></span><br><span class="line"><span class="string">名字是：haha，年龄是20</span></span><br><span class="line"><span class="string">重写str方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753896.png" alt="image-20231118181906059"></p><blockquote><p>Pytho支持多重继承，一个子类可以有多个“直接父类”。这样，就具备了“多个父类”的特点。但是由于，这样会被“类的整体层次””搞的异常复杂，==尽量避免使用==。</p></blockquote><h3 id="MRO方法解析顺序"><a href="#MRO方法解析顺序" class="headerlink" title="MRO方法解析顺序"></a>MRO方法解析顺序</h3><p>Pythor支持多继承，如果父类中有相同名字的方法，在子类没有指定父类名时，解释器将<strong>“从左向右”</strong>按顺序搜索。</p><p>MRO(Method Resolution Order):方法解析顺序。我们可以通过<code>mro()</code>方法获得”类的层次结构”，方法解析顺序也是按照这个“类的层次结构”寻找的。</p><h3 id="super-获得父类的定义"><a href="#super-获得父类的定义" class="headerlink" title="super()获得父类的定义"></a>super()获得父类的定义</h3><p>在子类中，如果想要获得父类的方法时，我们可以通过<code>super()</code>来做。</p><p><code>super()</code>代表<strong>父类的定义，不是父类对象</strong>。</p><blockquote><p>想调用父类的构造方法：</p><p><code>super(子类名称, self).__init__(参数列表)</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age       <span class="comment"># 私有属性也会被继承</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.__age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        <span class="comment"># Person.__init__(self)</span></span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, age)  <span class="comment"># 调用父类的构造方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Person.say_age(self)</span></span><br><span class="line">        <span class="built_in">super</span>().say_age()<span class="comment"># 通过super()调用父类的方法</span></span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></table></figure><h3 id="多态详解"><a href="#多态详解" class="headerlink" title="多态详解"></a>多态详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753897.png" alt="image-20231119160951739"></p><p><strong>多态(polymorphism)是指同一个方法调用由于对象不同可能会产生不同的行为。</strong></p><p>关于多态要注意以下2点：</p><ol><li><strong>多态是方法的多态，属性没有多态</strong>。</li><li>多态的存在有==2个必要条件：继承、方法重写==</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;动物叫了一声&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小狗叫了一声&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫叫了一声&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">animalShout</span>(<span class="params">a</span>):</span><br><span class="line">    a.shout()  <span class="comment"># 会产生多态，传入对象不同，则调用方法不同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">animalShout(Dog())</span><br><span class="line">animalShout(Cat())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">小狗叫了一声</span></span><br><span class="line"><span class="string">小猫叫了一声</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="特殊方法和运算符重载"><a href="#特殊方法和运算符重载" class="headerlink" title="特殊方法和运算符重载"></a>特殊方法和运算符重载</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753898.png" alt="image-20231119162419296"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753899.png" alt="image-20231119162554609"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753900.png" alt="image-20231119162639978"></p><h3 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753901.png" alt="image-20231119162849422"></p><h3 id="浅拷贝和深拷贝对象-内存分析"><a href="#浅拷贝和深拷贝对象-内存分析" class="headerlink" title="浅拷贝和深拷贝对象-内存分析"></a>浅拷贝和深拷贝对象-内存分析</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753902.png" alt="image-20231119163101534"></p><h3 id="继承和组合"><a href="#继承和组合" class="headerlink" title="继承和组合"></a>继承和组合</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753903.png" alt="image-20231119164344071"></p><p>除了继承，“组合”也能实现代码的复用！“<strong>组合”核心是“将父类对象作为子类的属性”</strong>。</p><blockquote><p><code>is-a</code>关系，我们可以使用”<strong>==继承==</strong>”。从而实现子类拥有的父类的方法和属性。<code>is-a</code>关系指的是类似这样的关系：狗是动物，dog is animal。.狗类就应该继承动物类。</p><p><code>has-a</code>关系，我们可以使用”==组合==”，也能实现一个类拥有另一个类的方法和属性。<code>has-a</code>关系指的是这样的关系：手机拥有CPU。MobilePhone has a CPU</p></blockquote><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>设计模式是面向对象语言特有的内容，是我们在面临某一类问题时候固定的做法，设计模式有很多种，比较流行的是：GOF(Goup Of Four)23种设计模式。当然，我们没有必要全部学习，学习几个常用的即可。</p><p>对于初学者，我们学习两个最常用的模式：工厂模式和单例模式。</p><h4 id="工厂模式实现"><a href="#工厂模式实现" class="headerlink" title="工厂模式实现"></a>工厂模式实现</h4><p>工厂模式实现了<strong>创建者和调用者的分离</strong>，使用专门的工厂类将选择实现类、创建对象进行统一的管理和控制。 </p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753904.png" alt="image-20231119165631900"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工厂模式实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Benz</span>: <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>: <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BYD</span>: <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarFactory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createCar</span>(<span class="params">self, brand</span>):</span><br><span class="line">        <span class="keyword">if</span> brand == <span class="string">&quot;宝马&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> BMW()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">&quot;奔驰&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> Benz()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">&quot;比亚迪&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> BYD()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未知品牌，无法创建&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">factory = CarFactory()</span><br><span class="line">c1 = factory.createCar(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">c2 = factory.createCar(<span class="string">&quot;宝马&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;__main__.Benz object at 0x0000021C16D12FA0&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.BMW object at 0x0000021C16D12F70&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="单例模式实现"><a href="#单例模式实现" class="headerlink" title="单例模式实现"></a>单例模式实现</h4><p>单例模式(Singleton Pattern)的核心作用是确保<strong>一个类只有一个实例</strong>，并且提供<strong>一个访问该实例的全局访问点</strong>。</p><p>单例模式只生成一个实例对象，减少了对系统资源的开销。当一个对象的产生需要比较多的资源，如读取配置文件、产生其他依赖对象时，可以产生一个“单例对象”，然后永久驻留内存中，从而极大的降低开销。</p><blockquote alt="warn"><p>单例模式有多种实现的方式，我们这里推荐重写__new__()的方法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单例模式实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySingleton</span>:</span><br><span class="line">    __obj = <span class="literal">None</span></span><br><span class="line">    __init_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.__obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__obj = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> MySingleton.__init_flag:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;初始化第一个对象...&quot;</span>)</span><br><span class="line">            self.name = name</span><br><span class="line">            MySingleton.__init_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = MySingleton(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = MySingleton(<span class="string">&quot;bb&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">初始化第一个对象...</span></span><br><span class="line"><span class="string">&lt;__main__.MySingleton object at 0x000001E70B8E2FA0&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.MySingleton object at 0x000001E70B8E2FA0&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="工厂和单例模式结合起来"><a href="#工厂和单例模式结合起来" class="headerlink" title="工厂和单例模式结合起来"></a>工厂和单例模式结合起来</h4><p>设计模式称之为“模式”，就是一些固定的套路。我们很容易用到其他场景上，比如前面讲的工厂模式，我们需要将工厂类定义成“单例”，只需要简单的套用即可实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工厂和单例模式结合</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarFactory</span>:</span><br><span class="line">    __obj = <span class="literal">None</span></span><br><span class="line">    __init_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.__obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__obj = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> CarFactory.__init_flag:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;初始化第一个对象...&quot;</span>)</span><br><span class="line">            CarFactory.__init_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createCar</span>(<span class="params">self, brand</span>):</span><br><span class="line">        <span class="keyword">if</span> brand == <span class="string">&quot;宝马&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> BMW()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">&quot;奔驰&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> Benz()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">&quot;比亚迪&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> BYD()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未知品牌，无法创建&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Benz</span>: </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>: </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BYD</span>: </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">factory = CarFactory()</span><br><span class="line">c1 = factory.createCar(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">c2 = factory.createCar(<span class="string">&quot;宝马&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line">factory2 = CarFactory()</span><br><span class="line"><span class="built_in">print</span>(factory)</span><br><span class="line"><span class="built_in">print</span>(factory2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">初始化第一个对象...</span></span><br><span class="line"><span class="string">&lt;__main__.Benz object at 0x0000018C683F3F70&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.BMW object at 0x0000018C683F3F10&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.CarFactory object at 0x0000018C683F3FA0&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.CarFactory object at 0x0000018C683F3FA0&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Python开发环境搭建"><a href="#Python开发环境搭建" class="headerlink" title="Python开发环境搭建"></a>Python开发环境搭建</h2><h3 id="PyCharm搭建Python环境-非虚拟环境"><a href="#PyCharm搭建Python环境-非虚拟环境" class="headerlink" title="PyCharm搭建Python环境-非虚拟环境"></a>PyCharm搭建Python环境-非虚拟环境</h3><h3 id="VSCode搭建Python环境-非虚拟环境"><a href="#VSCode搭建Python环境-非虚拟环境" class="headerlink" title="VSCode搭建Python环境-非虚拟环境"></a>VSCode搭建Python环境-非虚拟环境</h3><h3 id="虚拟环境使用"><a href="#虚拟环境使用" class="headerlink" title="虚拟环境使用"></a>虚拟环境使用</h3><h3 id="PyCharm使用虚拟环境"><a href="#PyCharm使用虚拟环境" class="headerlink" title="PyCharm使用虚拟环境"></a>PyCharm使用虚拟环境</h3><h3 id="VSCode使用虚拟环境"><a href="#VSCode使用虚拟环境" class="headerlink" title="VSCode使用虚拟环境"></a>VSCode使用虚拟环境</h3><h3 id="虚拟环境管理工具"><a href="#虚拟环境管理工具" class="headerlink" title="虚拟环境管理工具"></a>虚拟环境管理工具</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据集群软件启动脚本</title>
      <link href="/archives/59cb3162.html"/>
      <url>/archives/59cb3162.html</url>
      
        <content type="html"><![CDATA[<h1 id="大数据集群软件启动脚本"><a href="#大数据集群软件启动脚本" class="headerlink" title="大数据集群软件启动脚本"></a>大数据集群软件启动脚本</h1><p>大家也可以访问我的gitee仓库直接克隆源码<a href="https://gitee.com/huaiyuechusan/big-data-software-startup-script">大数据软件启动脚本: hadoop，zookeeper，kafka，flume，hive，maxwell，dolphinscheduler，superset，集群一键启动，集群文件分发，集群执行命令，集群同步时间脚本</a></p><h2 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hadoop集群启动</span></span><br><span class="line"></span><br><span class="line">if [ $# -eq 0 ]; then</span><br><span class="line">echo &quot;Usage $0 start|stop&quot;</span><br><span class="line">fi</span><br><span class="line">case $1 in</span><br><span class="line"></span><br><span class="line">    &quot;start&quot;)&#123;</span><br><span class="line">        echo &quot; -------- 启动 集群 -------&quot;</span><br><span class="line">        echo &quot; -------- 启动 hadoop集群 -------&quot;</span><br><span class="line">        ssh niit01 &quot;source /etc/profile;start-dfs.sh&quot;</span><br><span class="line">        ssh niit03 &quot;source /etc/profile;start-yarn.sh&quot;</span><br><span class="line">        ssh niit01 &quot;source /etc/profile;mr-jobhistory-daemon.sh start historyserver&quot;</span><br><span class="line">    &#125;;;</span><br><span class="line">    &quot;stop&quot;)&#123;</span><br><span class="line">        echo &quot; -------- 停止 集群 -------&quot;</span><br><span class="line">        echo &quot; -------- 停止 hadoop集群 -------&quot;</span><br><span class="line">        ssh niit01 &quot;source /etc/profile;mr-jobhistory-daemon.sh stop historyserver&quot;</span><br><span class="line">        ssh niit03 &quot;source /etc/profile;stop-yarn.sh&quot;</span><br><span class="line">        ssh niit01 &quot;source /etc/profile;stop-dfs.sh&quot;</span><br><span class="line">    &#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zookeeper集群启动脚本</span></span><br><span class="line"></span><br><span class="line">echo &quot;Usage: $0 start|stop|status (zookeeper)&quot;</span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">        echo ---------- zookeeper $i 启动 ------------</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/zookeeper/bin/zkServer.sh start&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">        echo ---------- zookeeper $i 停止 ------------</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/zookeeper/bin/zkServer.sh stop&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;status&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">        echo ---------- zookeeper $i 状态 ------------</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/zookeeper/bin/zkServer.sh status&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kafka集群启动</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">    echo &quot; --------启动 $i Kafka-------&quot;</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/kafka/bin/kafka-server-start.sh -daemon /opt/onlineedu/kafka/config/server.properties&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line"></span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------停止 $i Kafka-------&quot;</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/kafka/bin/kafka-server-stop.sh stop&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="flume"><a href="#flume" class="headerlink" title="flume"></a>flume</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">flume采集通道1启动脚本</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------启动 $i 采集flume-------&quot;</span><br><span class="line">        ssh $i &quot;nohup /opt/onlineedu/flume/bin/flume-ng agent --conf-file /opt/onlineedu/flume/job/file-flume-kafka.conf --name a1 -Dflume.root.logger=INFO,LOGFILE &gt;/opt/onlineedu/flume/log1.txt 2&gt;&amp;1  &amp;&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------停止 $i 采集flume-------&quot;</span><br><span class="line">        ssh $i &quot;ps -ef | grep file-flume-kafka | grep -v grep |awk  &#x27;&#123;print \$2&#125;&#x27; | xargs -n1 kill -9 &quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">flume采集通道2启动脚本</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">    for i in niit03</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------启动 $i 消费flume-------&quot;</span><br><span class="line">        ssh $i &quot;nohup /opt/onlineedu/flume/bin/flume-ng agent --conf-file /opt/onlineedu/flume/job/kafka-flume-hdfs.conf --name a1 -Dflume.root.logger=INFO,LOGFILE &gt;/opt/onlineedu/flume/log2.txt 2&gt;&amp;1  &amp;&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">    for i in niit03</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------停止 $i 消费flume-------&quot;</span><br><span class="line">        ssh $i &quot;ps -ef | grep kafka-flume-hdfs | grep -v grep | awk &#x27;&#123;print \$2&#125;&#x27; | xargs -n1 kill -9 &quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">flume采集通道3启动脚本</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">        echo &quot; --------启动 niit03 业务数据flume-------&quot;</span><br><span class="line">        ssh niit03 &quot;nohup /opt/onlineedu/flume/bin/flume-ng agent -n a1 -c /opt/onlineedu/flume/conf -f /opt/onlineedu/flume/job/kafka_to_hdfs_db.conf &gt;/opt/onlineedu/flume/log3.txt &gt;/dev/null 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line"></span><br><span class="line">        echo &quot; --------停止 niit03 业务数据flume-------&quot;</span><br><span class="line">        ssh niit03 &quot;ps -ef | grep kafka_to_hdfs_db | grep -v grep |awk &#x27;&#123;print \$2&#125;&#x27; | xargs -n1 kill&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hive"><a href="#hive" class="headerlink" title="hive"></a>hive</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hive启动</span></span><br><span class="line"></span><br><span class="line">HIVE_LOG_DIR=$HIVE_HOME/logs</span><br><span class="line">mkdir -p $HIVE_LOG_DIR</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查进程是否运行正常，参数1为进程名，参数2为进程端口</span></span><br><span class="line"></span><br><span class="line">function check_process()</span><br><span class="line">&#123;</span><br><span class="line">  pid=$(ps -ef 2&gt;/dev/null | grep -v grep | grep -i $1 | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">  ppid=$(netstat -nltp 2&gt;/dev/null | grep $2 | awk &#x27;&#123;print $7&#125;&#x27; | cut -d &#x27;/&#x27; -f 1)</span><br><span class="line">  echo $pid</span><br><span class="line">  [[ &quot;$pid&quot; =~ &quot;$ppid&quot; ]] &amp;&amp; [ &quot;$ppid&quot; ] &amp;&amp; return 0 || return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_start()</span><br><span class="line">&#123;</span><br><span class="line">  metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">  cmd=&quot;nohup hive --service metastore &gt;$HIVE_LOG_DIR/metastore.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">  cmd=$cmd&quot; sleep 4; hdfs dfsadmin -safemode wait &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">  [ -z &quot;$metapid&quot; ] &amp;&amp; eval $cmd || echo &quot;Metastroe服务已启动&quot;</span><br><span class="line">  server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">  cmd=&quot;nohup hive --service hiveserver2 &gt;$HIVE_LOG_DIR/hiveServer2.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">  [ -z &quot;$server2pid&quot; ] &amp;&amp; eval $cmd || echo &quot;HiveServer2服务已启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_stop()</span><br><span class="line">&#123;</span><br><span class="line">  metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">  [ &quot;$metapid&quot; ] &amp;&amp; kill $metapid || echo &quot;Metastore服务未启动&quot;</span><br><span class="line">  server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">  [ &quot;$server2pid&quot; ] &amp;&amp; kill $server2pid || echo &quot;HiveServer2服务未启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  hive_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  hive_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  hive_stop</span><br><span class="line">  sleep 2</span><br><span class="line">  hive_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;status&quot;)</span><br><span class="line">  check_process HiveMetastore 9083 &gt;/dev/null &amp;&amp; echo &quot;Metastore服务运行正常&quot; || echo &quot;Metastore服务运行异常&quot;</span><br><span class="line">  check_process HiveServer2 10000 &gt;/dev/null &amp;&amp; echo &quot;HiveServer2服务运行正常&quot; || echo &quot;HiveServer2服务运行异常&quot;</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  echo Invalid Args!</span><br><span class="line">  echo &#x27;Usage: &#x27;$(basename $0)&#x27; start|stop|restart|status (hiveserver2 &amp; metastore)&#x27;</span><br><span class="line">  ;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="maxwell"><a href="#maxwell" class="headerlink" title="maxwell"></a>maxwell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hive启动</span></span><br><span class="line"></span><br><span class="line">HIVE_LOG_DIR=$HIVE_HOME/logs</span><br><span class="line">mkdir -p $HIVE_LOG_DIR</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查进程是否运行正常，参数1为进程名，参数2为进程端口</span></span><br><span class="line"></span><br><span class="line">function check_process()</span><br><span class="line">&#123;</span><br><span class="line">  pid=$(ps -ef 2&gt;/dev/null | grep -v grep | grep -i $1 | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">  ppid=$(netstat -nltp 2&gt;/dev/null | grep $2 | awk &#x27;&#123;print $7&#125;&#x27; | cut -d &#x27;/&#x27; -f 1)</span><br><span class="line">  echo $pid</span><br><span class="line">  [[ &quot;$pid&quot; =~ &quot;$ppid&quot; ]] &amp;&amp; [ &quot;$ppid&quot; ] &amp;&amp; return 0 || return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_start()</span><br><span class="line">&#123;</span><br><span class="line">  metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">  cmd=&quot;nohup hive --service metastore &gt;$HIVE_LOG_DIR/metastore.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">  cmd=$cmd&quot; sleep 4; hdfs dfsadmin -safemode wait &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">  [ -z &quot;$metapid&quot; ] &amp;&amp; eval $cmd || echo &quot;Metastroe服务已启动&quot;</span><br><span class="line">  server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">  cmd=&quot;nohup hive --service hiveserver2 &gt;$HIVE_LOG_DIR/hiveServer2.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">  [ -z &quot;$server2pid&quot; ] &amp;&amp; eval $cmd || echo &quot;HiveServer2服务已启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_stop()</span><br><span class="line">&#123;</span><br><span class="line">  metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">  [ &quot;$metapid&quot; ] &amp;&amp; kill $metapid || echo &quot;Metastore服务未启动&quot;</span><br><span class="line">  server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">  [ &quot;$server2pid&quot; ] &amp;&amp; kill $server2pid || echo &quot;HiveServer2服务未启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  hive_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  hive_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  hive_stop</span><br><span class="line">  sleep 2</span><br><span class="line">  hive_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;status&quot;)</span><br><span class="line">  check_process HiveMetastore 9083 &gt;/dev/null &amp;&amp; echo &quot;Metastore服务运行正常&quot; || echo &quot;Metastore服务运行异常&quot;</span><br><span class="line">  check_process HiveServer2 10000 &gt;/dev/null &amp;&amp; echo &quot;HiveServer2服务运行正常&quot; || echo &quot;HiveServer2服务运行异常&quot;</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  echo Invalid Args!</span><br><span class="line">  echo &#x27;Usage: &#x27;$(basename $0)&#x27; start|stop|restart|status (hiveserver2 &amp; metastore)&#x27;</span><br><span class="line">  ;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="dolphinscheduler"><a href="#dolphinscheduler" class="headerlink" title="dolphinscheduler"></a>dolphinscheduler</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dolphinscheduler集群启动</span></span><br><span class="line"></span><br><span class="line">function node_start()</span><br><span class="line">&#123;</span><br><span class="line">  /opt/onlineedu/dolphinscheduler/bin/start-all.sh  </span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function node_stop()</span><br><span class="line">&#123;</span><br><span class="line">  /opt/onlineedu/dolphinscheduler/bin/stop-all.sh</span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  sleep 10</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  </span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dolphinscheduler单机版启动</span></span><br><span class="line"></span><br><span class="line">function node_start()</span><br><span class="line">&#123;</span><br><span class="line">  /opt/onlineedu/dolphinscheduler/bin/dolphinscheduler-daemon.sh start standalone-server   </span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function node_stop()</span><br><span class="line">&#123;</span><br><span class="line">  /opt/onlineedu/dolphinscheduler/bin/dolphinscheduler-daemon.sh stop standalone-server</span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  sleep 10</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  </span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="superset"><a href="#superset" class="headerlink" title="superset"></a>superset</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">superset可视化启动</span></span><br><span class="line"></span><br><span class="line">superset_status()&#123;</span><br><span class="line">    result=`ps -ef | awk &#x27;/gunicorn/ &amp;&amp; !/awk/&#123;print $2&#125;&#x27; | wc -l`</span><br><span class="line">    if [[ $result -eq 0 ]]; then</span><br><span class="line">        return 0</span><br><span class="line">    else</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">superset_start()&#123;</span><br><span class="line">        source ~/.bashrc</span><br><span class="line">        superset_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        if [[ $? -eq 0 ]]; then</span><br><span class="line">            conda activate superset ; gunicorn --workers 5 --timeout 120 --bind niit01:8787 --daemon &#x27;superset.app:create_app()&#x27;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;superset正在运行&quot;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">superset_stop()&#123;</span><br><span class="line">    superset_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    if [[ $? -eq 0 ]]; then</span><br><span class="line">        echo &quot;superset未在运行&quot;</span><br><span class="line">    else</span><br><span class="line">        ps -ef | awk &#x27;/gunicorn/ &amp;&amp; !/awk/&#123;print $2&#125;&#x27; | xargs kill -9</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">    start )</span><br><span class="line">        echo &quot;启动Superset&quot;</span><br><span class="line">        superset_start</span><br><span class="line">    ;;</span><br><span class="line">    stop )</span><br><span class="line">        echo &quot;停止Superset&quot;</span><br><span class="line">        superset_stop</span><br><span class="line">    ;;</span><br><span class="line">    restart )</span><br><span class="line">        echo &quot;重启Superset&quot;</span><br><span class="line">        superset_stop</span><br><span class="line">        superset_start</span><br><span class="line">    ;;</span><br><span class="line">    status )</span><br><span class="line">        superset_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        if [[ $? -eq 0 ]]; then</span><br><span class="line">            echo &quot;superset未在运行&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;superset正在运行&quot;</span><br><span class="line">        fi</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="集群一键启动"><a href="#集群一键启动" class="headerlink" title="集群一键启动"></a>集群一键启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有集群所有软件启动脚本</span></span><br><span class="line"></span><br><span class="line">function node_start()</span><br><span class="line">&#123;</span><br><span class="line">  /home/niit/bin/xCluster.sh start</span><br><span class="line">  sleep 15</span><br><span class="line">  /home/niit/bin/zk.sh start</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/kf.sh start</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/hv.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/mxw.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f1.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f2.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f3.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/dolphinscheduler-standalone.sh stop </span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/superset.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function node_stop()</span><br><span class="line">&#123;</span><br><span class="line">  /home/niit/bin/mxw.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f1.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f2.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f3.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/kf.sh stop</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/kf.sh stop</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/hv.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/xCluster.sh stop</span><br><span class="line">  sleep 15</span><br><span class="line">  /home/niit/bin/zk.sh stop</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/superset.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/dolphinscheduler-standalone.sh stop </span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  sleep 10</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  </span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="集群文件分发"><a href="#集群文件分发" class="headerlink" title="集群文件分发"></a>集群文件分发</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群分发文件脚本，普通用户权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 判断参数个数</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">    echo Not Enough Arguement!</span><br><span class="line">    echo Usage: xSync.sh path1 path2..</span><br><span class="line">    exit;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 遍历集群所有机器</span></span><br><span class="line">for host in niit01 niit02 niit03</span><br><span class="line">do</span><br><span class="line">echo ==================== $host ====================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3. 遍历所有目录，挨个发送</span></span><br><span class="line"></span><br><span class="line">    for file in $@</span><br><span class="line">    do</span><br><span class="line">        #4 判断文件是否存在</span><br><span class="line">        if [ -e $file ]</span><br><span class="line">        then</span><br><span class="line">            #5. 获取父目录</span><br><span class="line">            pdir=$(cd -P $(dirname $file); pwd)</span><br><span class="line"></span><br><span class="line">            #6. 获取当前文件的名称</span><br><span class="line">            fname=$(basename $file)</span><br><span class="line">            ssh $host &quot;mkdir -p $pdir&quot;</span><br><span class="line">            rsync -av $pdir/$fname $host:$pdir</span><br><span class="line">        else</span><br><span class="line">            echo $file does not exists!</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群分发文件脚本，root权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 判断参数个数</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">    echo Not Enough Arguement!</span><br><span class="line">    echo Usage: xSync.sh path1 path2 ...</span><br><span class="line">    exit;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 遍历集群所有机器</span></span><br><span class="line">for host in niit01 niit02 niit03</span><br><span class="line">do</span><br><span class="line">echo ==================== $host ====================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3. 遍历所有目录，挨个发送</span></span><br><span class="line"></span><br><span class="line">    for file in $@</span><br><span class="line">    do</span><br><span class="line">        #4 判断文件是否存在</span><br><span class="line">        if [ -e $file ]</span><br><span class="line">        then</span><br><span class="line">            #5. 获取父目录</span><br><span class="line">            pdir=$(cd -P $(dirname $file); pwd)</span><br><span class="line"></span><br><span class="line">            #6. 获取当前文件的名称</span><br><span class="line">            fname=$(basename $file)</span><br><span class="line">            sudo ssh $host &quot;mkdir -p $pdir&quot;</span><br><span class="line">            sudo rsync -av $pdir/$fname $host:$pdir</span><br><span class="line">        else</span><br><span class="line">            echo $file does not exists!</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="集群执行命令"><a href="#集群执行命令" class="headerlink" title="集群执行命令"></a>集群执行命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群执行命令脚本</span></span><br><span class="line"></span><br><span class="line">if (( $# == 0 ));then</span><br><span class="line">    echo &quot;Usage xRun.sh \&quot;&lt;COMMAND&gt;\&quot;&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line">for node in niit01 niit02 niit03</span><br><span class="line">do</span><br><span class="line">    echo &quot;======== $node ========&quot;</span><br><span class="line">    echo &quot;ssh $node $1&quot;</span><br><span class="line">    ssh $node &quot;source /etc/profile;$1&quot;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="集群同步时间"><a href="#集群同步时间" class="headerlink" title="集群同步时间"></a>集群同步时间</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群时间同步脚本，需要安装chrony到集群中</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查参数是否为空</span></span><br><span class="line">if [ -z &quot;$1&quot; ]; then</span><br><span class="line">        echo &quot;Usage:  `basename $0` yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用<span class="built_in">date</span>命令将时间字符串转换为日期和时间</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果转换失败，则说明时间字符串不合法</span></span><br><span class="line">if ! date -d &quot;$*&quot; &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">        echo &quot;Wrong argument for $*&quot;</span><br><span class="line">        echo &quot;Usage:  `basename $0` yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SYNC TIME START &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span><br><span class="line">sum=-1</span><br><span class="line"></span><br><span class="line">while [ $sum -ne 0 ]; do</span><br><span class="line">  echo set time for niit01 to $1 &#x27;&gt;&gt;&gt;&#x27;</span><br><span class="line">  ssh niit01 &quot;(sudo timedatectl set-ntp false &amp;&amp; sudo date -s \&quot;$*\&quot; &amp;&amp; sudo timedatectl set-ntp true)&quot;</span><br><span class="line">  ok1=$?</span><br><span class="line">  echo sync time from niie02 to niit01 &#x27;&gt;&gt;&gt;&#x27;</span><br><span class="line">  ssh niit02 &quot;(sudo timedatectl set-ntp false &amp;&amp; sudo timedatectl set-ntp true)&quot;</span><br><span class="line">  ok2=$?</span><br><span class="line">  echo sync time from niit03 to niit01 &#x27;&gt;&gt;&gt;&#x27;</span><br><span class="line">  ssh niit03 &quot;(sudo timedatectl set-ntp false &amp;&amp; sudo timedatectl set-ntp true)&quot;</span><br><span class="line">  ok3=$?</span><br><span class="line">  sum=`expr $ok1 + $ok2 + $ok3`</span><br><span class="line"></span><br><span class="line">  if [ $sum -eq 0 ]; then</span><br><span class="line">    echo &quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; SYNC TIME END &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span><br><span class="line">    sleep 5</span><br><span class="line">    xRun.sh date</span><br><span class="line">  else</span><br><span class="line">    echo &quot;sync time failed, will try 10 senconds later&quot;</span><br><span class="line">    sleep 10</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云函数调用request请求</title>
      <link href="/archives/6d169344.html"/>
      <url>/archives/6d169344.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="云函数调用request请求"><a href="#云函数调用request请求" class="headerlink" title="云函数调用request请求"></a>云函数调用request请求</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>上一篇<a href="https://huaiyuechusan.github.io/archives/b5700173.html">微信小程序定时订阅消息问题</a>文章里，选择了在本地使用setInterval()方法定时更新天气信息，但是要求用户打开小程序才能定时更新天气。做不到在发送消息之前查询当前的天气情况。所以出于这个问题，我选择了以下解决办法。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在云函数里定义一个定时查询天气的函数，用户的位置信息提前存储在数据库里，查询天气时直接从数据库里查询位置信息（因为每次获取用户位置会要求用户授权，比较影响体验，所有就把上传用户授权位置信息提前存储在数据库）。</p><p>这里使用到了如何在云函数里调用request请求，微信开发官网文档没有找到关于这个的讲解。所以在这里简单记录一下，希望能对大家开发用帮助。下面的代码为在<strong>云函数里调用request请求例子</strong></p><h3 id="GET请求例子"><a href="#GET请求例子" class="headerlink" title="GET请求例子"></a>GET请求例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用云函数的request</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用当前云环境</span></span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;)</span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//调用request</span></span><br><span class="line">    <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,        <span class="comment">//请求地址</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;      <span class="comment">//请求头</span></span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,   <span class="comment">//GET或POST请求</span></span><br><span class="line">      <span class="attr">json</span>: <span class="literal">true</span>,      <span class="comment">//返回的body结果为json格式,默认是false,如果你要解析返回的数据，选择ture</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error, response, body</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;HTTP - GET&quot;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(body)</span><br><span class="line">      <span class="keyword">if</span> (response.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; !error) &#123;</span><br><span class="line">        <span class="comment">//发送请求成功,写你自己的逻辑</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POST请求例子"><a href="#POST请求例子" class="headerlink" title="POST请求例子"></a>POST请求例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用云函数的request</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用当前云环境</span></span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;)</span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//调用request</span></span><br><span class="line">    <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,        <span class="comment">//请求地址</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;      <span class="comment">//请求头</span></span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,   <span class="comment">//GET或POST请求</span></span><br><span class="line">      <span class="attr">json</span>: <span class="literal">true</span>,      <span class="comment">//返回的body结果为json格式</span></span><br><span class="line">      <span class="attr">body</span>: <span class="string">&quot;&quot;</span>,        <span class="comment">//POST请求，要加上请求体</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error, response, body</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;HTTP - POST&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(body)</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; !error) &#123;</span><br><span class="line">            <span class="comment">//发送请求成功,写你自己的逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时查询天气代码"><a href="#定时查询天气代码" class="headerlink" title="定时查询天气代码"></a>定时查询天气代码</h3><p>index.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用云函数的request</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;) <span class="comment">// 使用当前云环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = cloud.<span class="title function_">database</span>()</span><br><span class="line"><span class="keyword">const</span> tableName = <span class="string">&#x27;userInfo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从云开发数据库中查询等待更新天气的用户列表</span></span><br><span class="line">        <span class="keyword">const</span> weather = <span class="keyword">await</span> db</span><br><span class="line">            .<span class="title function_">collection</span>(tableName)</span><br><span class="line">            .<span class="title function_">get</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;location:&quot;</span>, weather.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> msgData <span class="keyword">of</span> weather.<span class="property">data</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> location = msgData.<span class="property">location</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;location:&quot;</span>, location)</span><br><span class="line">                <span class="comment">//调用天气API查询天气</span></span><br><span class="line">                <span class="title function_">request</span>(&#123;</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">&#x27;https://jisutqybmf.market.alicloudapi.com/weather/query&#x27;</span>+ <span class="string">&quot;?location=&quot;</span>+ location,</span><br><span class="line">                    <span class="attr">headers</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;APPCODE 你自己的APPCODE&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">                    <span class="attr">json</span>: <span class="literal">true</span>,  </span><br><span class="line">                &#125;,<span class="keyword">function</span> (<span class="params">error,response,body</span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;HTTP - GET&quot;</span>)</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">info</span>(body)</span><br><span class="line">                        <span class="keyword">if</span> (response.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; !error &amp;&amp; body.<span class="property">status</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">var</span> result = body.<span class="property">result</span>;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">info</span>(result)</span><br><span class="line">                            <span class="keyword">var</span> weatherMessage = <span class="string">&quot;当前天气&quot;</span> + result.<span class="property">weather</span> + <span class="string">&quot;气温&quot;</span> + result.<span class="property">temp</span> + <span class="string">&quot;℃&quot;</span> + <span class="string">&quot;详情点击查看&quot;</span></span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;天气为：&quot;</span>, weatherMessage)</span><br><span class="line">                            <span class="comment">//将天气信息添加数据库</span></span><br><span class="line">                            db.<span class="title function_">collection</span>(tableName)</span><br><span class="line">                                .<span class="title function_">where</span>(&#123;</span><br><span class="line">                                    <span class="attr">openid</span>: msgData.<span class="property">openid</span></span><br><span class="line">                                &#125;)</span><br><span class="line">                                .<span class="title function_">update</span>(&#123;</span><br><span class="line">                                    <span class="attr">data</span>: &#123;</span><br><span class="line">                                        <span class="attr">weatherMessage</span>: weatherMessage,</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;)</span><br><span class="line">                                .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时添加天气信息到数据库成功&quot;</span>, res);</span><br><span class="line">                                    <span class="title function_">resolve</span>(body)</span><br><span class="line">                                &#125;)</span><br><span class="line">                                .<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时添加天气信息到数据库失败&quot;</span>, res);</span><br><span class="line">                                    <span class="title function_">reject</span>()</span><br><span class="line">                                &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>config.json文件里边定义触发器（具体用法参考我的上一篇文章<a href="https://huaiyuechusan.github.io/archives/b5700173.html">微信小程序定时订阅消息问题</a>或<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/triggers.html">官方文档</a>）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;openapi&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;triggers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myTimer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;timer&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0 55 7 * * * *&quot;</span>  <span class="comment">//每天早起7点55执行</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>参考文章</p><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/000cc8398b012864f398db33556413">云开发http请求的两种写法 | 微信开放社区 (qq.com)</a></p><p><a href="https://www.cnblogs.com/Ocean123123/p/12737655.html">request-promise post请求微信小程序云函数调用http - Ocean123123 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序定时订阅消息问题</title>
      <link href="/archives/b5700173.html"/>
      <url>/archives/b5700173.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="微信小程序定时订阅消息问题"><a href="#微信小程序定时订阅消息问题" class="headerlink" title="微信小程序定时订阅消息问题"></a>微信小程序定时订阅消息问题</h1><h2 id="订阅消息一次授权多次接收"><a href="#订阅消息一次授权多次接收" class="headerlink" title="订阅消息一次授权多次接收"></a>订阅消息一次授权多次接收</h2><p><strong>个人开发只能订阅一次性消息，一次订阅授权只能发送一次信息，如何解决？</strong></p><h3 id="明确几个概念"><a href="#明确几个概念" class="headerlink" title="明确几个概念"></a>明确几个概念</h3><ol><li>订阅授权次数跟发送消息次数的关系<ul><li>用户授权订阅一次，才能发送一次消息。发送一次消息，消耗掉一次授权允许次数。</li><li>授权次数可以累加。用户勾选总是保持以上选择，下次订阅消息不会再弹窗。</li></ul></li><li>授权操作必须用户点击才能授权。即使点击总保持以上选择，还是需要用户去点击才能授权。所以函数调用授权操作或页面初始化加载授权操作都是不行的，必须由用户点击才能授权。</li></ol><h3 id="思考想法"><a href="#思考想法" class="headerlink" title="思考想法"></a>思考想法</h3><ol><li>每个订阅api一次最多授权3条模板，选取三个相近模板，在授权操作时同时授权三个模板。</li><li>点击率频繁的按钮或者可能点击的地方绑定授权操作，空白地方大面积透明按钮绑定授权操作。（此方案建立在用户第一次授权时点击了总保持以上选择，否则频繁弹窗影响用户体验）</li><li>设置每日签到或者消息订阅提示按钮，在按钮的处绑定授权。</li></ol><h3 id="实际解决"><a href="#实际解决" class="headerlink" title="实际解决"></a>实际解决</h3><p>由于我的项目单纯采用云函数和云数据库开发，没有后端。所以以下解决方案针对云开发。</p><ol><li><p>一号方案确定是相近的模板不容易找到，最多只能订阅三次，所以没有采用。</p></li><li><p>二号方案：点击跳转事件绑定授权（用户第一次授权完选择总保持以上选择后，以后授权用户是无感的）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;view_3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/run/run&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;shouquan&quot;</span>&gt;</span>  <span class="comment">&lt;!--绑定授权事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;item-image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/跑步.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;image-jiantou&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/duo.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>三号方案：进入小程序首页加载订阅消息弹窗，引导用户授权</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onShowModal</span>(<span class="params"></span>) &#123;</span><br><span class="line">       wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">           <span class="attr">title</span>: <span class="string">&#x27;订阅消息确认&#x27;</span>,</span><br><span class="line">           <span class="attr">content</span>: <span class="string">&#x27;避免错过重要信息，点击确认按钮进行订阅消息(务必勾选总保持以上选择)&#x27;</span>,</span><br><span class="line">           <span class="attr">cancelText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">           <span class="attr">cancelColor</span>: <span class="string">&quot;#00f&quot;</span>,</span><br><span class="line">           <span class="attr">confirmText</span>: <span class="string">&quot;确认&quot;</span>,</span><br><span class="line">           <span class="attr">confirmColor</span>: <span class="string">&quot;#f00&quot;</span>,</span><br><span class="line">           <span class="attr">complete</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (res.<span class="property">cancel</span>) &#123;</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="title function_">onShowToast</span>();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test1:&quot;</span>)</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="title function_">shouquan</span>(); <span class="comment">//调用订阅授权</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310292352365.png" alt="image-20231029225841283"></p><p>参考文章：</p><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/000686f1808000a566fcccefb56813">关于一次性订阅消息requestSubscribeMessage的讨论 | 微信开放社区 (qq.com)</a></p><p><a href="https://blog.csdn.net/weixin_45695727/article/details/128132747">小程序 订阅消息 一次授权多次接收_小程序 一次性订阅消息 多次推送-CSDN博客</a></p></li></ol><h2 id="定时发送动态的订阅消息"><a href="#定时发送动态的订阅消息" class="headerlink" title="定时发送动态的订阅消息"></a>定时发送动态的订阅消息</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>想动态的获取天气信息，然后定时发送给用户。但是采用云函数开发，云函数不能调取本地的缓存数据，无法使用本地的setTimeout(延迟多少时间执行一次)和setInterval(每隔一定时间执行一次)方法。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p>首先使用云函数的定时触发器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// triggers 字段是触发器数组，目前仅支持一个触发器，即数组只能填写一个，不可添加多个</span></span><br><span class="line">  <span class="string">&quot;triggers&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// name: 触发器的名字，规则见下方说明</span></span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;myTrigger&quot;</span>,</span><br><span class="line">      <span class="comment">// type: 触发器类型，目前仅支持 timer (即 定时触发器)</span></span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;timer&quot;</span>,</span><br><span class="line">      <span class="comment">// config: 触发器配置，在定时触发器下，config 格式为 cron 表达式，规则见下方说明</span></span><br><span class="line">      <span class="string">&quot;config&quot;</span>: <span class="string">&quot;0 0 2 1 * * *&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310292352367.png" alt="image-20231029232521079"><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310292352368.png" alt="image-20231029232552257"></p><p>更多用法详见官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/triggers.html">开发指引 / 基础能力 / 云函数 / 定时触发器 (qq.com)</a></p></li><li><p>但是云函数需要的天气信息参数是存在本地的（由于查询天气需要经纬度信息，云开发似乎没有类似wx.getLocation的方法，所以只好查询天气方法写在了本地）。解决办法是在本地定时执行查询天气信息的函数然后更新到数据库里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取用户经纬度</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserLocation</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// var that = this;</span></span><br><span class="line">  wx.<span class="title function_">getLocation</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;wgs84&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">      <span class="title function_">queryWeather</span>(res);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询天气信息</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryWeather</span>(<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="comment">// var that = this;</span></span><br><span class="line">  wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://jisuqgtq.market.alicloudapi.com/weather/query&#x27;</span>, <span class="comment">//使用的是阿里提供的天气API接口</span></span><br><span class="line">    <span class="attr">header</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;APPCODE 自己的APPCODE&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;location&#x27;</span>: res.<span class="property">latitude</span> + <span class="string">&quot;,&quot;</span> + res.<span class="property">longitude</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">resRequest</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;HTTP - GET&quot;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(resRequest)</span><br><span class="line">      <span class="keyword">if</span> (resRequest.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; resRequest.<span class="property">data</span>.<span class="property">status</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = resRequest.<span class="property">data</span>.<span class="property">result</span>;</span><br><span class="line">        wx.<span class="title function_">setStorageSync</span>(<span class="string">&quot;weather&quot;</span>, result);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(result)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将天气信息添加入数据库</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addWeather</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//以用户openid为关键词，将查询的数据插入对应的天气信息</span></span><br><span class="line">  wx.<span class="property">cloud</span></span><br><span class="line">    .<span class="title function_">callFunction</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;getopenid&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> openid = res.<span class="property">result</span>.<span class="property">openid</span>;</span><br><span class="line">      <span class="title function_">getUserLocation</span>();</span><br><span class="line">      <span class="keyword">var</span> weather = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;weather&#x27;</span>)</span><br><span class="line">      <span class="comment">//阿里的天气信息API包含的信息很多，这里由于订阅消息的模板有字数限制，thing参数只能在20字符以内</span></span><br><span class="line">      <span class="keyword">let</span> weatherMessage = <span class="string">&quot;天气&quot;</span> + weather.<span class="property">weather</span> + <span class="string">&quot;当前气温&quot;</span> + weather.<span class="property">temp</span> + <span class="string">&quot;℃&quot;</span> + <span class="string">&quot;详情点击查看&quot;</span></span><br><span class="line">      <span class="comment">//将天气信息添加数据库</span></span><br><span class="line">      wx.<span class="property">cloud</span></span><br><span class="line">        .<span class="title function_">database</span>()</span><br><span class="line">        .<span class="title function_">collection</span>(<span class="string">&quot;userInfo&quot;</span>)</span><br><span class="line">        .<span class="title function_">where</span>(&#123;</span><br><span class="line">          <span class="attr">openid</span>: openid</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">update</span>(&#123;</span><br><span class="line">          <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">weatherMessage</span>: weatherMessage,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;添加天气信息成功&quot;</span>, res);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;添加天气信息失败&quot;</span>, res);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取openid失败&quot;</span>, res);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地定时任务用的是setInterval()每隔一段时间执行任务，将查询的天气结果存储在数据库里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">startInter</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">  that.<span class="property">data</span>.<span class="property">inter</span> = <span class="built_in">setInterval</span>(</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// TODO 你需要无限循环执行的任务</span></span><br><span class="line">      <span class="title function_">addWeather</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setInterval 每过一个小时执行一次天气信息添加入数据库任务&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">3600000</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>最后是发送消息的云函数部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换成消息模版所需要的格式，date 年/月/日 时:分:秒</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeStampToTime</span>(<span class="params">date</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">formatNumber</span> = n =&gt; &#123;</span><br><span class="line">      n = n.<span class="title function_">toString</span>()</span><br><span class="line">      <span class="keyword">return</span> n[<span class="number">1</span>] ? n : <span class="string">`0<span class="subst">$&#123;n&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> year = date.<span class="title function_">getFullYear</span>()</span><br><span class="line">    <span class="keyword">const</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span></span><br><span class="line">    <span class="keyword">const</span> day = date.<span class="title function_">getDate</span>()</span><br><span class="line">    <span class="keyword">const</span> hour = date.<span class="title function_">getHours</span>()</span><br><span class="line">    <span class="keyword">const</span> minute = date.<span class="title function_">getMinutes</span>()</span><br><span class="line">    <span class="keyword">const</span> second = date.<span class="title function_">getSeconds</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;[year, month, day].map(formatNumber).join(<span class="string">&#x27;/&#x27;</span>)&#125;</span> <span class="subst">$&#123;[hour, minute, second].map(formatNumber).join(<span class="string">&#x27;:&#x27;</span>)&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;) <span class="comment">// 使用当前云环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = cloud.<span class="title function_">database</span>()</span><br><span class="line"><span class="keyword">const</span> tableName = <span class="string">&#x27;userInfo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从云开发数据库中查询等待发送的消息用户列表</span></span><br><span class="line">        <span class="keyword">const</span> msgArr = <span class="keyword">await</span> db</span><br><span class="line">            .<span class="title function_">collection</span>(tableName)</span><br><span class="line">            .<span class="title function_">get</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;msgArr:&quot;</span>, msgArr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> msgData <span class="keyword">of</span> msgArr.<span class="property">data</span>) &#123;</span><br><span class="line">            <span class="comment">// 发送订阅消息</span></span><br><span class="line">            <span class="keyword">await</span> cloud.<span class="property">openapi</span>.<span class="property">subscribeMessage</span>.<span class="title function_">send</span>(&#123;</span><br><span class="line">                <span class="attr">touser</span>: msgData.<span class="property">openid</span>, <span class="comment">// 要发送用户的openid</span></span><br><span class="line">                <span class="attr">page</span>: <span class="string">&#x27;pages/index/index&#x27;</span>, <span class="comment">// 用户通过消息通知点击进入小程序的页面</span></span><br><span class="line">                <span class="attr">lang</span>: <span class="string">&#x27;zh_CN&#x27;</span>,</span><br><span class="line">                <span class="comment">// 订阅消息模板ID</span></span><br><span class="line">                <span class="attr">templateId</span>: <span class="string">&#x27;你的模板id&#x27;</span>,</span><br><span class="line">                <span class="comment">// 跳转小程序类型：developer为开发版；trial为体验版；formal为正式版；默认为正式版</span></span><br><span class="line">                <span class="comment">// 正式版删除此行</span></span><br><span class="line">                <span class="attr">miniprogramState</span>: <span class="string">&#x27;developer&#x27;</span>,</span><br><span class="line">                <span class="comment">// 要发送的数据，要和模板一致</span></span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">thing1</span>: &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">thing8</span>: &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">date3</span>: &#123; <span class="comment">//注意date参数的格式问题 必须是2023年10月1日，或：2023年10月1日 15:01</span></span><br><span class="line">                        <span class="attr">value</span>: <span class="title function_">timeStampToTime</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">thing2</span>: &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">thing7</span>: &#123;</span><br><span class="line">                        <span class="attr">value</span>: msgData.<span class="property">weatherMessage</span>  <span class="comment">//发送的天气信息</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订阅消息模板参数限制<a href="https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/mp-message-management/subscribe-message/sendMessage.html">官方文档：消息相关 / 订阅消息 / 发送订阅消息 (qq.com)</a></p><p><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310292352369.png" alt="image-20231029234642543"></p><p>参考文章</p><p><a href="https://blog.csdn.net/qq_45092075/article/details/128362426">微信小程序云开发定时推送订阅消息_微信小程序定时提醒功能-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/541427647">微信小程序开发：云函数定时推送消息 - 知乎 (zhihu.com)</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> bug解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研经验贴准备篇</title>
      <link href="/archives/2dbbb10f.html"/>
      <url>/archives/2dbbb10f.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="保研经验贴准备篇"><a href="#保研经验贴准备篇" class="headerlink" title="保研经验贴准备篇"></a>保研经验贴准备篇</h1><h2 id="经验分享"><a href="#经验分享" class="headerlink" title="经验分享"></a>经验分享</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>保研是一场持久战，也是一场信息战。它需要你大一到大三持续的付出才能收获。下面我介绍一下保研需要在大学三年需要准备的工作。</p><h4 id="明确学校的保研政策"><a href="#明确学校的保研政策" class="headerlink" title="明确学校的保研政策"></a>明确学校的保研政策</h4><p>要了解本专业的保研名额比例（大概在6%-7%左右），加分政策（见下图）。这些信息可以跟学长学姐了解，也可以去咨询辅导员，教务老师。关注学院教务，每年8月份左右会发今年最新的研究生推免报名和相关政策。</p><p>​                                <img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310261625220.png" alt="image-20231025173942212">    </p><h4 id="注重绩点，科研，竞赛"><a href="#注重绩点，科研，竞赛" class="headerlink" title="注重绩点，科研，竞赛"></a>注重绩点，科研，竞赛</h4><ol><li><p>注重期末考试，尤其是学分很多的学科，比如高数，专业课等。因为平均绩点是按照学分加权的，学分越多的学科，占的比重越大。所以在期末复习的时候学分多的课要多花一些经历。复习资料主要是老师发的复习总结资料或者往年题库，往年的期末卷子等。也可以去B站上找对应的课程视频。</p></li><li><p>最好大一大二就加入老师实验室，从事一些科研工作，为将来发表论文做准备。加入实验室也可以拓展自己的人际关系，结识一些志同道合的同学，一起参加比赛。保研面试的时候老师还是比较看重你的科研经历，如果能够发表论文更好。</p></li><li><p>多参加竞赛，可以参加的国家级学科竞赛项目以教育部高等教育教学评估中心最新发布的《全国高等学校本科教学基本状态数据库学数据填报指南》所界定的范围为准。一般竞赛获得省三以上才可以加分。国际级比赛赛前经学校批准参加的，其获奖加分在国家级相应等级分值加 0.05。具体政策还是要关注当年的加分政策文件，下图是往届的加分政策。</p><p><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310261625124.png" alt="image-20231025180247267"></p></li><li><p>注重期末项目。如果你的科研竞赛经历不多的话，面试的时候也可以讲讲自己做过哪些项目，在项目负责哪些职责，遇到过什么困难，你是怎样解决的。这些也是你的加分项，让老师对你更感兴趣。</p></li></ol><h4 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a>名词介绍</h4><p>当你在阅读一些保研经验贴的时候往往会出现一些英文缩写，让你摸不着头脑。所以下面介绍一些保研的常用名词。</p><ol><li><p><strong>名词：</strong>rk</p><p><strong>解释：</strong>rank,一般指自己的加权或绩点排名</p></li><li><p><strong>名词：</strong>title</p><p><strong>解释：</strong>指学校的知名度</p></li><li><p><strong>名词：</strong>oq</p><p><strong>解释：</strong>over qualified,指学生报名比自身本科院校或者能力水平低很多的院校</p></li><li><p><strong>名词：</strong>bar</p><p><strong>解释：</strong>门槛</p></li><li><p><strong>名词：</strong>wl</p><p><strong>解释：</strong>waiting list,指夏令营优营或者最后录取的候补名单</p></li><li><p><strong>名词：</strong>强弱com</p><p><strong>解释：</strong>强committee指教务老师/委员会管的管多，导师没有很大话语权；弱committee指导师在夏令营入营录取中有很大话语权</p></li><li><p><strong>名词：</strong>套磁</p><p><strong>解释：</strong>通过邮件（或者电话或者当面）提前与申请院系的导师进行联系，将自己的背景及学习研究计划等向对方做详细介绍和说明，以便提升自己被录取机率。</p></li><li><p><strong>名词：</strong>夏令营</p><p><strong>解释：</strong>保研夏令营是近几年各高校（特别是著名高校）抢夺优质生源的一种方式。利用暑假中一周左右的时间，与学生较长时间的接触，参观实验室，介绍各导师研究方向，学术交流会等形式，通过多种方式（例如笔试、面试、实验测试等）来考核学生，以确定是否发放拟录取通知书。</p></li><li><p><strong>名词：</strong>优营</p><p><strong>解释：</strong>优秀夏令营营员</p></li><li><p><strong>名词：</strong>九推</p><p><strong>解释：</strong>“九推”全称“九月正式推免”，即在每年的九月份，符合条件（即必须拿到本校推免名额）的各位同学可在“国家推免服务系统”（今年开放时间是9月29日-10月20日）进行推免的网络申请。</p></li><li><p><strong>名词：</strong>捡漏</p><p><strong>解释：</strong>意想不到的情况下获得意外的offer，一般指院校开系统后招不够人进行补录，保研人在这个时候获得高价值的off</p></li></ol><h3 id="预推免经历"><a href="#预推免经历" class="headerlink" title="预推免经历"></a>预推免经历</h3><p>因为之前不知道自己是否能获得推免资格，所以没有去参加夏令营。所以下面只有预推免的面试经验分享。在这里重点强调一下，有的学校夏令营和预推免报名即使你不确定能获取推免资格，你也可以参加。很多学校甚至暑假都开始预推免报名工作了，等到学校正式发布推免资格时候，他们的预推免报名都已经结束了。所以一定一定不要等到那时候才去报名，无论你确不确定能获得推免资格，都要提前找你想去的学校官网通知，去尝试参加他们的夏令营和预推免面试。反正试一试也不会吃亏（有的学校夏令营是报销往返路费的），甚至还可以为你将来面试其他学校积累经验。</p><h4 id="如何找院校"><a href="#如何找院校" class="headerlink" title="如何找院校"></a>如何找院校</h4><p>在学校的研究生网站或者对应学院网站找接受预推免信息，找导师信息（一定要越早越好，好的学校开放预推免报名很早，如果你不确定可以被推免也可以参加的。不要等本校的保研结果出来了再去找，要不然有的学校可以已经结束预推免报名）。还可以跟上届学长学姐咨询，一般他们之前保研去的学校都是对你们学校的人比较友好的学校。</p><p>填写学校预推免报名信息时的一些小建议</p><ul><li>填预报名的时候可以先把各种信息准备好，放到一个文件夹或者文档内。一开始不知道都需要准备什么的话就先填一个学校的预推免报名，然后大概就知道需要什么资料了。然后报名的学校账号密码要记住，一些常用的个人信息（比如科研经验，奖惩情况，个人经历，家庭信息）可以保存到一个word文档里，奖项证书成绩单电子版可以放一个文件夹里。每个学校一个文件夹整理别弄混，简历的话根据每个学校想跟的老师对于方向可以稍微修改一下（不要一份简历投所有学校，要根据每个学校的不同老师方向稍作修改），让自己简历更贴合导师的方向。</li></ul><h4 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h4><p>保研边缘、没参加过夏令营，不要怕，要调整好心态，疯狂海投简历（这里建议即使处于保研边缘，暑假的夏令营也要去，要不然预推免一个offer没有会很慌）。</p><p>要调整好心态，保研名额刚出来找学校报名的时候心态很爆炸，前几天填了好几个学校一个都没有回复，后来就想放弃了。但是有一天晚上填的一个南京理工大学，第二天就通知面试了，意外之喜。然后西北工业也打电话让去面试。所以一定要保持好心态，不要放弃，所有能投学校的都投。</p><h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><ul><li>如果推免排名不是很靠前，好学校的学硕比专硕更难进，专硕名额相对来说多一些。如果看重学校的名气也尝试一下选985的专硕或者交叉学科（比如天津大学医学部的计算机，东北大学的医学与生物信息工程学院的电子信息）。</li><li>导师title很多的，很火的实验室也比较难进。这些老师和实验室更看重你的个人排名和科研竞赛经历。</li><li>选导师，选择副教授，讲师，没有title或者title少的的更容易一些。（主要看你的个人情况，如果自身实力很强还是建议找比较好的实验室和老师）</li><li>一定要联系老师，一些弱com的学校老师话语权很大的。</li><li>一些学校需要政审，申请表之类的需要自己学院签字要提前准备好，不要等周六周日下班错过了时间。</li><li>如果线下面试的的话合理安排时间，赶飞机或者高铁提前打出富裕时间，不要错点。有时候学校可能鸽你，也有可能有更好的学校打电话让你面试，然后你不得不改签。酒店的话最好找离学校近的，方便去学校。</li><li>如果想鸽老师，一定要提前打招呼，不要等填报志愿了再说，会让老师对你们学校印象变差。学术圈也不大，万一要鸽的老师还认识你要去的学校的老师，多尴尬。</li></ul><h4 id="推免正式报名"><a href="#推免正式报名" class="headerlink" title="推免正式报名"></a>推免正式报名</h4><ol><li>一定要在系统填志愿信息的时候（通常是凌晨十二点系统开始填写志愿）第一时间填写志愿，不要等到第二天起来再填，有些学校会有填写志愿截止时间。一定要按照已经给offer的学校要求填写志愿。</li><li>一共可以填写三个志愿。网上有的经验贴上说可以先填两个志愿，留一个捡漏。你也可以三个都填上，看个人意愿。</li><li>如果你是预推免的时候发offer的学校，收到复试通知后，一会儿就可以收到预录取的通知。到时候一定要时刻关注研招网，有的院校有确认时间限制，必须在规定的时间内选择接受还是拒绝。</li><li>可以接受多个复试通知，但是预录取通知只能接受一个。</li><li>填志愿之前一定要跟发offer的学校确定是不是铁offer，是不是报了这个学校一定会录取，还是学校会超发offer，先到先得。注意一定要确认好，万一被学校鸽，好提前做准备。</li><li>有的学校可能会因为系统的原因，在研招网上发通知比较慢，可以联系导师或者学校招生办，去确认一下，避免着急。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>行文至此，感慨颇多。从最开始得到成功保研的喜悦，到预报名的学校复试杳无音讯心情萎靡，最后峰回路转成功接受到面试通知，再到面试通过导师确定offer的激动无比。参见线下面试辗转西安天津北京，看见了大城市的灯火斑斓，也见识了不同学校的不同风景。几天之内经历过心态起起落落，很庆幸自己坚持了下来，见到了最后的黎明时刻。所以无论什么时候一定要相信自己，抓住机会，下一个成功的人为什么不能是自己呢。与君同勉，祝大家上岸梦校！</p><p>下面是两个我比较推荐的咱们学校的本科课程学习和保研经验分享的网站，希望对同学们有用。</p><p><a href="https://hainanu-application.github.io/#/">海南大学飞跃手册 (hainanu-application.github.io)</a></p><p><a href="https://www.bj-yan.top/hainanu-course-comments/">海南大学课程攻略 (bj-yan.top)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研经验贴</title>
      <link href="/archives/95c4b274.html"/>
      <url>/archives/95c4b274.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="保研经验贴"><a href="#保研经验贴" class="headerlink" title="保研经验贴"></a>保研经验贴</h1><h2 id="个人背景"><a href="#个人背景" class="headerlink" title="个人背景"></a>个人背景</h2><p><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310241537478.png" alt="image-20231019174140290"></p><p>本科学校：排名靠后的211</p><p>专业排名：15/192</p><p>竞赛：天梯赛省三</p><p>科研：无论文，只有一段跟导师学习高光谱图像遥感的经历</p><p>项目：一个学校期末项目和一个APP的开发经历</p><p>英语：六级428，四级514</p><p>最终去向：南京理工大学</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文适合人群：保研排名不是很靠前,没有参加过暑期夏令营，竞赛&amp;论文很少或者无的同学进行的经验介绍（个人经验，大佬勿喷）。首先会讲一些保研基础的常识（很了解的同学可以跳过）。最后在文末我会附上当时参考过的一些保研资料。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a>名词介绍</h3><ol><li><p><strong>名词：</strong>rk</p><p><strong>解释：</strong>rank,一般指自己的加权或绩点排名</p></li><li><p><strong>名词：</strong>title</p><p><strong>解释：</strong>指学校的知名度</p></li><li><p><strong>名词：</strong>oq</p><p><strong>解释：</strong>over qualified,指学生报名比自身本科院校或者能力水平低很多的院校</p></li><li><p><strong>名词：</strong>bar</p><p><strong>解释：</strong>门槛</p></li><li><p><strong>名词：</strong>wl</p><p><strong>解释：</strong>waiting list,指夏令营优营或者最后录取的候补名单</p></li><li><p><strong>名词：</strong>强弱com</p><p><strong>解释：</strong>强committee指教务老师/委员会管的管多，导师没有很大话语权；弱committee指导师在夏令营入营录取中有很大话语权</p></li><li><p><strong>名词：</strong>套磁</p><p><strong>解释：</strong>通过邮件（或者电话或者当面）提前与申请院系的导师进行联系，将自己的背景及学习研究计划等向对方做详细介绍和说明，以便提升自己被录取机率。</p></li><li><p><strong>名词：</strong>夏令营</p><p><strong>解释：</strong>保研夏令营是近几年各高校（特别是著名高校）抢夺优质生源的一种方式。利用暑假中一周左右的时间，与学生较长时间的接触，参观实验室，介绍各导师研究方向，学术交流会等形式，通过多种方式（例如笔试、面试、实验测试等）来考核学生，以确定是否发放拟录取通知书。</p></li><li><p><strong>名词：</strong>优营</p><p><strong>解释：</strong>优秀夏令营营员</p></li><li><p><strong>名词：</strong>九推</p><p><strong>解释：</strong>“九推”全称“九月正式推免”，即在每年的九月份，符合条件（即必须拿到本校推免名额）的各位同学可在“国家推免服务系统”（今年开放时间是9月29日-10月20日）进行推免的网络申请。</p></li><li><p><strong>名词：</strong>捡漏</p><p><strong>解释：</strong>意想不到的情况下获得意外的offer，一般指院校开系统后招不够人进行补录，保研人在这个时候获得高价值的offer</p></li></ol><h3 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h3><p>保研边缘、没参加过夏令营，不要怕，调整好心态，疯狂海投简历（这里建议即使处于保研边缘，暑假的夏令营也要去，要不然预推免一个offer没有会很慌，我就保研边缘，当保研出来后，有的学校预推免都已经结束了，当时慌得很，以为只能上本校了）。</p><p>要调整好心态，保研名额刚出来找学校报名的时候心态很爆炸，前几天填了好几个学校一个都没有回复，后来就想放弃了。但是有一天晚上填的一个南京理工大学，第二天就通知面试了，意外之喜。然后西北工业也打电话让去面试。所以一定要保持好心态，不要放弃，所有能投学校的都投（填了十多个学校，当时填到后期都犯恶心了，看见好多要填的信息和证明材料就恶心）</p><h3 id="找院校"><a href="#找院校" class="headerlink" title="找院校"></a>找院校</h3><p>在学校的研究生网站或者对应学院网站找接受预推免信息，找导师信息（一定要越早越好，好的学校开放预推免报名很早，如果你不确定是否可以推免也可以参加的。不要等本校的保研结果出来了再去找，要不然有的学校可以已经结束预推免报名，我就吃了这个亏）。还可以跟上届学长学姐咨询，一般他们之前保研去的学校都是对你们学校的人比较友好的学校。</p><p>填写报名的学校信息是的一些小建议</p><ul><li>填预报名的时候可以先把各种信息准备好，放到一个文件夹或者文档内。一开始不知道都需要准备啥的话就先填一个学校的预推免，然后大概就知道需要什么资料了。然后报名的学校账号密码要记住，一些常用的个人信息（比如科研经验，奖惩情况，个人经历，家庭信息）可以保存一个文件里，奖项证书成绩单电子版可以放一个文件夹里。每个学校一个文件夹整理别弄混，简历的话根据每个学校想跟的老师对于方向可以稍微修改一下（不要一份简历投所有学校，要根据每个学校的不同老师方向稍作修改），让自己简历更贴合导师的方向。</li></ul><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ul><li>如果推免排名不是很靠前，好学校的学硕比专属更难进，专硕名额多。如果看重学校的名气也尝试一下选985的专硕或者交叉学科（比如天津大学医学部的计算机，东北大学的医学与生物信息工程学院的电子信息）。</li><li>导师title很多的，很火的实验室也比较难进，如果你排名很低的话。</li><li>选导师，选择副教授，讲师，没有title或者title少的的更容易一些。（主要看你的个人情况，如果自身实力很强还是建议找比较好的实验室和老师）</li><li>一定要联系老师，一些弱com的学校老师话语权很大的。</li><li>一些学校需要政审，申请表之类的需要自己学院签字要提前准备好，不要等周六周日下班错过了。</li><li>如果线下面试的的话合理安排时间，赶飞机或者高铁提前打出富裕时间，不要错点。有时候学校可能鸽你（比如我报名了河北工业大学，他让报了名的都加复试通知群，然后过几天复试去，结果复试名单出来的没我，买好了票，赶紧改签了）。也有可能有更好的学校打电话让你面试，然后你不得不改签。酒店的话最好找离学校近的，方便去学校。</li><li>如果想鸽老师，一定要提前打招呼，不要等填报志愿了再说，会让老师对你们学校印象变差。学术圈也不大，万一要鸽的老师还认识你要去的学校的老师，多尴尬。</li></ul><h2 id="面试经历"><a href="#面试经历" class="headerlink" title="面试经历"></a>面试经历</h2><ol><li><p>南京理工大学（线上）</p><p>如果本科学校还不错，一般联系导师，老师同意了很好上岸。老师就问了一些基本问题，个人信息，排名，科研竞赛经历之类的。老师面完当时就说虽然你竞赛科研经历很少，但是大体上符合要求，差不多就是稳了的意思。</p></li><li><p>本校（线上）</p><p>本校相对更容易一些。就一个英文自我介绍，然后按PPT讲自己的信息。老师问了我一个然后看待模型融合创新这个方法，问我这种创新算是创新嘛（挺犀利的，现发论文的现状就是各种模型组合到其他模型上就变成了创新点，这种问题仁者见仁智者见智吧）</p></li><li><p>西北工业大学（线下）</p><p>学硕名额少，外校一般都是专硕，如果报的计算机学院，老师计科的名额不够可能推荐你去软件学院。（软件学院招的相对多一些，要求没有计科高）老师主要是针对简历提问，问的专业课比较多，问了我操作系统分页，数据结构最小生成树（幸好复习过408，要不然真寄了），数据挖掘的一些算法，分类和聚类有哪些算法，他们俩的最大区别是什么。会有思政问题，比如关于华为如何看，如何看待日本倾倒核废水。老师还提出我简历上的问题，简历内容过于简单，项目经历和竞赛证书写的过于简略，要详细些在这个项目比赛中做了哪些工作，有什么贡献等。英语面试的话先是让自我介绍然后回答一个问题，为什么选西北工业。</p></li><li><p>华北电力大学北京（线下）</p><p>老师问的项目和科研经历细节比较多，专业课内容也是简历上提到的，比如我的简历上有个卷积神经网络的内容，他就问你一些基本的深度学习内容（都比较基础）。还问了c和c＋＋区别（英文问了一遍，可能当时答的不好，又一个老师中文问了一遍），还有个老师问我还有没有其他的项目经历，我说有个电商分析的，然后老师就问了我项目中使用的kafka是什么（所以简历或者PPT上把能写的自己很了解的项目的要写全，里面的项目细节要都懂）。然后老师还问我一个为什么你的论文里选择用的3D-CNN，而不是其他模型，3D-CNN与其他卷积模型的区别。英语问题是先让我用英语讲一下刚才PPT上研究生计划部分，然后第二个问我c和c＋＋区别（只答上来一点）。</p></li></ol><h2 id="推免正式报名"><a href="#推免正式报名" class="headerlink" title="推免正式报名"></a>推免正式报名</h2><ol><li>一定要在系统填志愿信息的时候第一时间填写志愿，不要等到第二天起来再填，有些学校会有填写志愿截至时间。一定要按照已经给offer的学校要求填写志愿。</li><li>一共可以填写三个志愿。看有的经验贴上说可以先填两个志愿，留一个捡漏。你也可以三个都填上，看个人意愿吧。</li><li>如果你是预推免的时候发offer的学校，收到复试通知后，一会儿就可以收到预录取的通知。到时候一定要时刻关注研招网，有的院校有确认时间限制，必须在规定的时间内选择接受还是拒绝。</li><li>可以接受多个复试通知，但是预录取通知只能接受一个。</li><li>填志愿之前一定要跟发offer的学校确定是不是铁offer，是不是报了这个学校一定会录取，还是学校会超发offer，先到先得。注意一定要确认好，万一被学校鸽，好提前做准备。</li><li>有的学校可能会因为系统的原因，在研招网上发通知比较慢，可以联系导师或者学校招生办，去确认一下，避免着急。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>行文至此，感慨颇多。从最开始得到成功保研的喜悦，到预报名的学校复试杳无音讯心情萎靡，最后峰回路转成功接受到面试通知，再到面试通过导师确定offer的激动无比。参见线下面试辗转西安天津北京，看见了大城市的灯火斑斓，也见识了不同学校的不同风景。几天之内经历过心态起起落落，很庆幸自己坚持了下来，见到了最后的黎明时刻。所以无论什么时候一定要相信自己，抓住机会，下一个成功的人为什么不能是自己呢。与君同勉，祝大家上岸梦校！</p><p>下面我参考过的保研面试资料（联系导师邮件模板可以在小红书上搜索，有很多。这里没有罗列），大家也可以参考一下。如有关于保研问题咨询可以联系我 vx：13102618184</p><p><a href="https://mp.weixin.qq.com/s/KH6gdpeT4ES3SN0K01Yh9A">保研说 </a></p><p><a href="https://github.com/CS-BAOYAN">CS-BAOYAN (github.com)</a></p><p><a href="https://github.com/CS-BAOYAN/CS-BAOYAN-2023/tree/main/导师推荐">CS-BAOYAN-2023/导师推荐 (github.com)</a></p><p><a href="https://github.com/CS-BAOYAN/CSYuTuiMian2023">CS-BAOYAN/CSYuTuiMian2023 (github.com)</a></p><p><a href="https://mubu.com/doc/1OXFbFtfWtX#o-hAUJA9NMDR">准备预推免的问题 - 幕布 (mubu.com)</a></p><p><a href="https://mubu.com/doc/6DWNVmVSqdX">预推免面试问题 - 幕布 (mubu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/583527078">oq、rk、强com……不会这些黑话都不配保研了</a></p><p><a href="https://zhuanlan.zhihu.com/p/137624043">考研复试研究计划写作指南 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/weixin_40562999/article/details/80169128">一位数据挖掘成功人士给数据挖掘在读研究生的建议（转）-CSDN博客</a></p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/105183554">刷完 900 多道算法题的首次总结：LeetCode 应该怎么刷？-CSDN博客</a></p><p><a href="https://blog.csdn.net/lxh248866/article/details/121624655">数据挖掘近年来的研究方向、方法总结_为什么你对数据挖掘这个研究方向感兴趣?你对这个研究方向了解多少?-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
