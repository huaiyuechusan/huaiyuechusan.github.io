<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>下载M3U8格式加密视频</title>
      <link href="/archives/d4b1abad.html"/>
      <url>/archives/d4b1abad.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="下载M3U8格式加密视频"><a href="#下载M3U8格式加密视频" class="headerlink" title="下载M3U8格式加密视频"></a>下载M3U8格式加密视频</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>M3U8是一种用于指定多媒体播放列表的格式，通常用于流媒体服务。它是基于文本的文件，其中包含了视频、音频和其他媒体文件的URL链接，以及播放顺序和其他相关信息。M3U8格式广泛用于在线视频流的传输和播放。</p><p>加密视频通常是为了保护内容安全而采取的一种手段。M3U8格式的加密视频使用加密算法来对视频内容进行保护，防止未经授权的访问。这种加密可以通过在M3U8播放列表中使用特定的加密标签和密钥信息来实现。</p><p>在M3U8格式的加密视频中，通常会包含以下元素：</p><ol><li><strong>EXT-X-KEY标签：</strong> 用于指定加密算法和密钥信息。</li><li><strong>密钥URI（Key URI）：</strong> 包含了获取解密密钥的链接。</li><li><strong>IV（Initialization Vector）：</strong> 用于初始化加密算法的向量。</li></ol><p>解密M3U8格式的加密视频需要相应的密钥信息，只有拥有正确密钥的用户才能解密和播放视频内容。这种方式可以有效防止未经授权的用户访问和复制受保护的视频内容。</p><p>总的来说，M3U8格式加密视频通过使用加密算法和密钥信息，提供了一种保护内容安全的方式，确保只有授权用户才能正常播放受保护的视频。</p><h2 id="M3U8格式视频无加密"><a href="#M3U8格式视频无加密" class="headerlink" title="M3U8格式视频无加密"></a>M3U8格式视频无加密</h2><h3 id="在chrome下载拓展插件"><a href="#在chrome下载拓展插件" class="headerlink" title="在chrome下载拓展插件"></a>在chrome下载拓展插件</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715330.png" alt="image-20240117164235165"></p><h3 id="打开视频网站"><a href="#打开视频网站" class="headerlink" title="打开视频网站"></a>打开视频网站</h3><p>右上角插件显示可以下载的资源，点击直接下载</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715332.png" alt="image-20240117164514585"></p><p>下载有进度提醒</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715333.png" alt="image-20240117164549804"></p><h2 id="M3U8格式视频有加密"><a href="#M3U8格式视频有加密" class="headerlink" title="M3U8格式视频有加密"></a>M3U8格式视频有加密</h2><p>若M3U8格式视频有加密，上述插件无法直接下载，需要按照如下步骤操作</p><h3 id="复制网站的带有m3u8的url"><a href="#复制网站的带有m3u8的url" class="headerlink" title="复制网站的带有m3u8的url"></a>复制网站的带有m3u8的url</h3><p>点击插件的复制网址</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715334.png" alt="image-20240117164809444"></p><h3 id="F12调式界面找到key"><a href="#F12调式界面找到key" class="headerlink" title="F12调式界面找到key"></a>F12调式界面找到key</h3><ol><li><p>首先找到网络里xxxVideo.js或xxxPlayer.js文件（具体网站不太，名字可能不太一样），这个js文件可以找到key的值</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715335.png" alt="image-20240117165401679"></p></li><li><p>在源码中打开这个js文件，crtl+f 搜索关键字decryptdata或decrypt（decrypt英文解码的意思），一般都在postMessage方法内，用来接收解密的key</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715336.png" alt="image-20240117165741504"></p></li><li><p>然后打断点，在右侧的作用域中找到decryptdata对用的f变量的key值，在内存检测器中可以看到16进制的key值</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715337.png" alt="image-20240117170016264"></p></li><li><p>将16进制转换为base64格式，即得到字符串key</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715338.png" alt="image-20240117170212954"></p></li></ol><h3 id="使用M3U8批量下载器下载视频"><a href="#使用M3U8批量下载器下载视频" class="headerlink" title="使用M3U8批量下载器下载视频"></a>使用M3U8批量下载器下载视频</h3><p>下载器地址<a href="https://xyyx.lanzouw.com/i9hcAwj48be">https://xyyx.lanzouw.com/i9hcAwj48be</a></p><p>将得到的key和url分别输入 文件/链接后的输入框，点击添加。然后点击全部开始，即开始下载。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715339.png" alt="image-20240117171223258"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715341.png" alt="image-20240117171437386"></p><p>下载后的文件保存在下载器安装位置的output位置</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401171715342.png" alt="image-20240117171534253"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.52pojie.cn/thread-1823993-1-1.html">https://www.52pojie.cn/thread-1823993-1-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 学习技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>竞赛总结：智能驾驶汽车虚拟仿真视频数据理解</title>
      <link href="/archives/283f9737.html"/>
      <url>/archives/283f9737.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="竞赛总结：智能驾驶汽车虚拟仿真视频数据理解"><a href="#竞赛总结：智能驾驶汽车虚拟仿真视频数据理解" class="headerlink" title="竞赛总结：智能驾驶汽车虚拟仿真视频数据理解"></a>竞赛总结：智能驾驶汽车虚拟仿真视频数据理解</h1><ul><li>赛题名称：2023全球智能汽车AI挑战赛——赛道二：智能驾驶汽车虚拟仿真视频数据理解赛道</li><li>赛题任务：对视频中的信息进行综合理解，以指定的json文件格式，按照数据说明中的关键词（key）填充描述型的文本信息</li><li>赛题类型：计算机视觉、目标检测</li></ul><blockquote><p>比赛链接：<a href="https://tianchi.aliyun.com/competition/entrance/532155">2023全球智能汽车AI挑战赛——赛道二：智能驾驶汽车虚拟仿真视频数据理解赛道</a></p><p>Datawhale教学视频：<a href="https://space.bilibili.com/431850986/channel/collectiondetail?sid=1901397">二次元的Datawhale的个人空间-二次元的Datawhale个人主页)</a></p></blockquote><h2 id="赛事背景"><a href="#赛事背景" class="headerlink" title="赛事背景"></a>赛事背景</h2><p>当前，全球新一轮科技革命和产业变革蓬勃发展，汽车与人工智能技术加速融合，电动化、网联化、智能化成为汽车产业的发展潮流和趋势，AI技术将更广泛地和汽车产业的各个领域，应用于汽车的智能维护、智能制造、智能驾驶等诸多方面。作为人工智能技术和汽车产业先进技术的倡导者，吉利汽车集团、阿里云、NVIDIA 英伟达一直致力于推动未来出行方式的发展，共同发起了本届2023全球智能汽车AI挑战赛。本届比赛将汇聚来自全球各地的杰出AI领域人才，推动自动驾驶、AI大模型、加速计算、云计算技术三者深度结合，为未来智能出行提供更加安全、高效、舒适的解决方案。</p><h2 id="赛事任务"><a href="#赛事任务" class="headerlink" title="赛事任务"></a>赛事任务</h2><p>输入：元宇宙仿真平台生成的前视摄像头虚拟视频数据（8-10秒左右）；</p><p>输出：对视频中的信息进行综合理解，以指定的json文件格式，按照数据说明中的关键词（key）填充描述型的文本信息（value，中文/英文均可以）；</p><h2 id="数据说明"><a href="#数据说明" class="headerlink" title="数据说明"></a>数据说明</h2><h3 id="文本描述结构树"><a href="#文本描述结构树" class="headerlink" title="文本描述结构树"></a>文本描述结构树</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401142149361.png" alt="image-20240114211932916"></p><h3 id="上传json格式示例"><a href="#上传json格式示例" class="headerlink" title="上传json格式示例"></a>上传json格式示例</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">建议用英文提交：</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span> <span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;time&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;YYMMDD&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;model&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;model_name&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;test_results&quot;</span> <span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;clip_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xxxx_1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scenario&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;cityroad&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;period&quot;</span><span class="punctuation">:</span><span class="string">&quot;night&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;road_structure&quot;</span><span class="punctuation">:</span><span class="string">&quot;ramp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;general_obstacle&quot;</span><span class="punctuation">:</span><span class="string">&quot;nothing&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;abnormal_condition&quot;</span><span class="punctuation">:</span><span class="string">&quot;nothing&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ego_car_behavior&quot;</span><span class="punctuation">:</span><span class="string">&quot;turning right&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;closest_participants_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;passenger car&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;closest_participants_behavior&quot;</span><span class="punctuation">:</span><span class="string">&quot;braking&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;clip_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xxxx_2&quot;</span></span><br><span class="line">    ... ...</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">... ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>为了减少程序编译过程中的问题，提交答案的json文件中的 key &amp; value 请使用英文，key请不要进行更改，value使用以下列表中的元素。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scenario&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;suburbs&quot;</span><span class="punctuation">,</span><span class="string">&quot;city street&quot;</span><span class="punctuation">,</span><span class="string">&quot;expressway&quot;</span><span class="punctuation">,</span><span class="string">&quot;tunnel&quot;</span><span class="punctuation">,</span><span class="string">&quot;parking-lot&quot;</span><span class="punctuation">,</span><span class="string">&quot;gas or charging stations&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;weather&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;clear&quot;</span><span class="punctuation">,</span><span class="string">&quot;cloudy&quot;</span><span class="punctuation">,</span><span class="string">&quot;raining&quot;</span><span class="punctuation">,</span><span class="string">&quot;foggy&quot;</span><span class="punctuation">,</span><span class="string">&quot;snowy&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;period&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;daytime&quot;</span><span class="punctuation">,</span><span class="string">&quot;dawn or dusk&quot;</span><span class="punctuation">,</span><span class="string">&quot;night&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;road_structure&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;normal&quot;</span><span class="punctuation">,</span><span class="string">&quot;crossroads&quot;</span><span class="punctuation">,</span><span class="string">&quot;T-junction&quot;</span><span class="punctuation">,</span><span class="string">&quot;ramp&quot;</span><span class="punctuation">,</span><span class="string">&quot;lane merging&quot;</span><span class="punctuation">,</span><span class="string">&quot;parking lot entrance&quot;</span><span class="punctuation">,</span><span class="string">&quot;round about&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;general_obstacle&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;nothing&quot;</span><span class="punctuation">,</span><span class="string">&quot;speed bumper&quot;</span><span class="punctuation">,</span><span class="string">&quot;traffic cone&quot;</span><span class="punctuation">,</span><span class="string">&quot;water horse&quot;</span><span class="punctuation">,</span><span class="string">&quot;stone&quot;</span><span class="punctuation">,</span><span class="string">&quot;manhole cover&quot;</span><span class="punctuation">,</span><span class="string">&quot;nothing&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;abnormal_condition&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;uneven&quot;</span><span class="punctuation">,</span><span class="string">&quot;oil or water stain&quot;</span><span class="punctuation">,</span><span class="string">&quot;standing water&quot;</span><span class="punctuation">,</span><span class="string">&quot;cracked&quot;</span><span class="punctuation">,</span><span class="string">&quot;nothing&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;ego_car_behavior&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;slow down&quot;</span><span class="punctuation">,</span><span class="string">&quot;go straight&quot;</span><span class="punctuation">,</span><span class="string">&quot;turn right&quot;</span><span class="punctuation">,</span><span class="string">&quot;turn left&quot;</span><span class="punctuation">,</span><span class="string">&quot;stop&quot;</span><span class="punctuation">,</span><span class="string">&quot;U-turn&quot;</span><span class="punctuation">,</span><span class="string">&quot;speed up&quot;</span><span class="punctuation">,</span><span class="string">&quot;lane change&quot;</span><span class="punctuation">,</span><span class="string">&quot;others&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;closest_participants_type&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;passenger car&quot;</span><span class="punctuation">,</span><span class="string">&quot;bus&quot;</span><span class="punctuation">,</span><span class="string">&quot;truck&quot;</span><span class="punctuation">,</span><span class="string">&quot;pedestrian&quot;</span><span class="punctuation">,</span><span class="string">&quot;policeman&quot;</span><span class="punctuation">,</span><span class="string">&quot;nothing&quot;</span><span class="punctuation">,</span><span class="string">&quot;others&quot;</span><span class="punctuation">,</span><span class="string">&quot;unknown&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;closest_participants_behavior&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;slow down&quot;</span><span class="punctuation">,</span><span class="string">&quot;go straight&quot;</span><span class="punctuation">,</span><span class="string">&quot;turn right&quot;</span><span class="punctuation">,</span><span class="string">&quot;turn left&quot;</span><span class="punctuation">,</span><span class="string">&quot;stop&quot;</span><span class="punctuation">,</span><span class="string">&quot;U-turn&quot;</span><span class="punctuation">,</span><span class="string">&quot;speed up&quot;</span><span class="punctuation">,</span><span class="string">&quot;lane change&quot;</span><span class="punctuation">,</span><span class="string">&quot;others&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h2 id="评测指标"><a href="#评测指标" class="headerlink" title="评测指标"></a>评测指标</h2><p>初赛阶段：排行榜总分=视频理解准确度分数<br>复赛阶段：复赛总成绩=复赛排行榜视频理解准确度分数（100%）+代码复现时效分数（10%）<br>具体成绩计算方法和晋级标准请参考【赛制介绍】</p><p>视频理解准确度分数评测规则如下：</p><p>参赛者可采用不同的人工智能的模型和算法，推理出对应视频的描述语言，参赛者可以在给定的备选答案中选出一个正确的答案，如果其描述语言不在给定的备选答案中，也可以给出一个最佳的答案。</p><p>系统会针对参赛者提交的json文件，通过描述型的文本信息与真值进行对比，综合得出分数；其中，“距离最近的交通参与者的行为”的题目为2分，其它题目为1分；每个视频的满分为10分。每一个视频结果中的key值，需要参考数据说明的json格式示例，请勿进行修改。</p><p>对于真值部分，组织者会建立对应的中英文近义词作为真值列表，只要在该列表中就获得分数，例如真值“雨天” = [“雨天”， “雨”， “小雨”… , “rainy”, “rain”, “raining”…]，参赛选手可以选择对应的近义词来进行作答，但每一项的真值列表不公开，仅体现在后台程序中。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><ul><li>使用文本与图像进行匹配</li></ul><p>datawhale学习组织将Baseline部署在线上平台百度AI Studio上，可一键fork运行代码：</p><p><a href="https://aistudio.baidu.com/projectdetail/7033846?contributionType=1&amp;sUid=40990&amp;shared=1&amp;ts=1699415726984">https://aistudio.baidu.com/projectdetail/7033846?contributionType=1&amp;sUid=40990&amp;shared=1&amp;ts=1699415726984</a></p><p>baseline代码解读</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入必要的库和模块</span></span><br><span class="line"><span class="keyword">import</span> paddle  <span class="comment"># 导入 PaddlePaddle 深度学习框架</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image  <span class="comment"># 从 PIL 库导入 Image 模块，用于图像处理</span></span><br><span class="line"><span class="keyword">from</span> clip <span class="keyword">import</span> tokenize, load_model  <span class="comment"># 导入 clip 模块，可能用于图像和文本的联合处理</span></span><br><span class="line"><span class="keyword">import</span> glob, json, os  <span class="comment"># 导入文件处理和 JSON 处理的库</span></span><br><span class="line"><span class="keyword">import</span> cv2  <span class="comment"># 导入 OpenCV 库，用于计算机视觉任务</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm_notebook  <span class="comment"># 导入 tqdm_notebook 以在笔记本中显示进度条</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 导入 NumPy 用于数值处理</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> normalize  <span class="comment"># 从 sklearn.preprocessing 导入 normalize 用于数据归一化</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># 导入 matplotlib.pyplot 用于绘图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型和转换工具</span></span><br><span class="line">model, transforms = load_model(<span class="string">&#x27;ViT_B_32&#x27;</span>, pretrained=<span class="literal">True</span>)  <span class="comment"># 加载预训练的 ViT_B_32 模型和其转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为各个类别和相应词汇定义字典</span></span><br><span class="line">en_match_words = &#123;</span><br><span class="line">    <span class="comment"># 各个类别的关键词列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化提交的 JSON 结构</span></span><br><span class="line">submit_json = &#123;</span><br><span class="line">    <span class="string">&quot;author&quot;</span>: <span class="string">&quot;abc&quot;</span>,  <span class="comment"># 作者姓名</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span>: <span class="string">&quot;231011&quot;</span>,  <span class="comment"># 时间戳</span></span><br><span class="line">    <span class="string">&quot;model&quot;</span>: <span class="string">&quot;model_name&quot;</span>,  <span class="comment"># 使用的模型名称</span></span><br><span class="line">    <span class="string">&quot;test_results&quot;</span>: []  <span class="comment"># 测试结果的列表，初始为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取并排序视频路径</span></span><br><span class="line">paths = glob.glob(<span class="string">&#x27;./PreliminaryTestVideos/*&#x27;</span>)  <span class="comment"># 使用 glob 获取指定路径下的所有视频文件</span></span><br><span class="line">paths.sort()  <span class="comment"># 对路径进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每个视频文件进行处理</span></span><br><span class="line"><span class="keyword">for</span> video_path <span class="keyword">in</span> paths:</span><br><span class="line">    <span class="built_in">print</span>(video_path)  <span class="comment"># 打印视频路径</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 从路径中提取视频剪辑的 ID</span></span><br><span class="line">    clip_id = video_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    cap = cv2.VideoCapture(video_path)  <span class="comment"># 使用 OpenCV 读取视频</span></span><br><span class="line">    img = cap.read()[<span class="number">1</span>]  <span class="comment"># 读取视频的第一帧</span></span><br><span class="line">    image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  <span class="comment"># 将图像从 BGR 转换为 RGB 格式</span></span><br><span class="line">    image = Image.fromarray(image)  <span class="comment"># 将数组转换为 PIL 图像</span></span><br><span class="line">    image = transforms(image).unsqueeze(<span class="number">0</span>)  <span class="comment"># 应用预处理转换并添加一个维度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化用于单个视频结果的字典</span></span><br><span class="line">    single_video_result = &#123;</span><br><span class="line">        <span class="comment"># 视频的各种属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 针对特定关键词进行预测</span></span><br><span class="line">    <span class="keyword">for</span> keyword <span class="keyword">in</span> en_match_words.keys():</span><br><span class="line">        <span class="keyword">if</span> keyword <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;weather&quot;</span>, <span class="string">&quot;road_structure&quot;</span>]:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 如果关键词不是 weather 或 road_structure，则跳过</span></span><br><span class="line">        </span><br><span class="line">        texts = np.array(en_match_words[keyword])  <span class="comment"># 将关键词转换为 NumPy 数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> paddle.no_grad():  <span class="comment"># 禁用梯度计算</span></span><br><span class="line">            <span class="comment"># 使用模型进行预测</span></span><br><span class="line">            logits_per_image, logits_per_text = model(image, tokenize(en_match_words[keyword]))</span><br><span class="line">            probs = paddle.nn.functional.softmax(logits_per_image, axis=-<span class="number">1</span>)  <span class="comment"># 应用 softmax 获取概率分布</span></span><br><span class="line"></span><br><span class="line">        probs = probs.numpy()  <span class="comment"># 将概率转换为 NumPy 数组</span></span><br><span class="line">        single_video_result[keyword] = texts[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]]  <span class="comment"># 选择具有最高概率的词汇作为结果</span></span><br><span class="line">        </span><br><span class="line">    submit_json[<span class="string">&quot;test_results&quot;</span>].append(single_video_result)  <span class="comment"># 将结果添加到测试结果列表</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将最终结果写入 JSON 文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;clip_result.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> up:</span><br><span class="line">    json.dump(submit_json, up, ensure_ascii=<span class="literal">False</span>)  <span class="comment"># 以 UTF-8 编码将结果保存到文件中</span></span><br></pre></td></tr></table></figure><h3 id="进阶思路"><a href="#进阶思路" class="headerlink" title="进阶思路"></a>进阶思路</h3><ul><li>使用图像进行视觉问答</li><li>时序视频进行视频问答</li><li>使用多模态大模型（CLIP）进行问答</li></ul><h4 id="多模态大模型CLIP简介"><a href="#多模态大模型CLIP简介" class="headerlink" title="多模态大模型CLIP简介"></a>多模态大模型CLIP简介</h4><p>CLIP（Contrastive Language-Image Pre-training）是一种多模态大模型，由OpenAI开发。它是一种能够同时理解文本和图像的模型，通过对文本和图像进行对比性学习，使其在多模态任务上表现出色。以下是CLIP的一些关键特点和工作原理的简介：</p><ol><li><strong>多模态表示学习：</strong> CLIP的设计目标是使模型能够理解文本和图像之间的语义关系，而不是仅限于特定任务。这使得CLIP在各种任务上都能表现良好，而无需针对每个任务进行专门的微调。</li><li><strong>对比性学习：</strong> CLIP使用对比损失进行训练。这意味着模型学会将相关的文本和图像样本靠近，而不相关的样本分开。这种对比性学习的方法使得CLIP在理解语义关系时更为强大。</li><li><strong>零样本学习：</strong> CLIP在零样本学习方面表现出色。这意味着模型可以在没有特定任务样本的情况下执行任务，因为它已经学会了通用的文本-图像表示。</li><li><strong>大规模预训练：</strong> CLIP是在大规模文本和图像数据上进行预训练的。这使得模型能够捕捉更广泛的语义信息，从而在多种任务上通用。</li><li><strong>应用广泛：</strong> 由于其多模态的性质，CLIP可以用于多种任务，包括图像分类、物体检测、文本检索等。</li></ol><p>总体而言，CLIP代表了一种强大的多模态学习方法，使得模型能够理解文本和图像之间的语义关系，并在各种任务上表现出色。</p><h3 id="大佬代码解读"><a href="#大佬代码解读" class="headerlink" title="大佬代码解读"></a>大佬代码解读</h3><p>大佬代码地址（大家可以关注膜拜一下大佬）：<a href="https://www.kaggle.com/code/peilwang/self-drive">self drive | Kaggle</a></p><h4 id="推理天气，时间和道路结构"><a href="#推理天气，时间和道路结构" class="headerlink" title="推理天气，时间和道路结构"></a>推理天气，时间和道路结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入必要的库</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个JSON格式的字典，包含作者信息、时间戳、模型名称和一个空的测试结果列表</span></span><br><span class="line">submit_json = &#123;</span><br><span class="line">    <span class="string">&quot;author&quot;</span> : <span class="string">&quot;abc&quot;</span> ,</span><br><span class="line">    <span class="string">&quot;time&quot;</span> : <span class="string">&quot;231011&quot;</span>,</span><br><span class="line">    <span class="string">&quot;model&quot;</span> : <span class="string">&quot;model_name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test_results&quot;</span> : []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定路径下的视频文件列表，排序后存储在paths变量中</span></span><br><span class="line">paths = glob.glob(<span class="string">&#x27;/kaggle/input/clip-test/初赛测试视频/*&#x27;</span>)</span><br><span class="line">paths.sort()</span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果设置了debug标志，则只选择一个特定的视频路径用于调试</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    paths = [<span class="string">&#x27;/kaggle/input/clip-test/初赛测试视频/40.avi&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每个视频文件</span></span><br><span class="line"><span class="keyword">for</span> video_path <span class="keyword">in</span> paths:</span><br><span class="line">    <span class="built_in">print</span>(video_path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取视频文件名作为clip_id</span></span><br><span class="line">    clip_id = video_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打开视频文件</span></span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取视频的第一帧图像</span></span><br><span class="line">    img = cap.read()[<span class="number">1</span>]</span><br><span class="line">    img = cap.read()[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取图像的高度、宽度和通道数</span></span><br><span class="line">    height, width, _ = img.shape</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 截取图像的上部分，保留下部分的 75%</span></span><br><span class="line">    end_row = <span class="built_in">int</span>(height * <span class="number">0.75</span>)</span><br><span class="line">    img2 = img[<span class="number">0</span>:end_row, :]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 对图像进行预处理，转换为模型所需的格式</span></span><br><span class="line">    image1 = preprocess(Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">    image2 = preprocess(Image.fromarray(cv2.cvtColor(img2, cv2.COLOR_BGR2RGB))).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建包含初始信息的单个视频结果字典</span></span><br><span class="line">    single_video_result = &#123;</span><br><span class="line">        <span class="string">&quot;clip_id&quot;</span>: clip_id,</span><br><span class="line">        <span class="string">&quot;scerario&quot;</span> : <span class="string">&quot;city street&quot;</span>,</span><br><span class="line">        <span class="string">&quot;weather&quot;</span>:<span class="string">&quot;clear&quot;</span>,</span><br><span class="line">        <span class="string">&quot;period&quot;</span>:<span class="string">&quot;night&quot;</span>,</span><br><span class="line">        <span class="string">&quot;road_structure&quot;</span>:<span class="string">&quot;normal&quot;</span>,</span><br><span class="line">        <span class="string">&quot;general_obstacle&quot;</span>:<span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;abnormal_condition&quot;</span>:<span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ego_car_behavior&quot;</span>:<span class="string">&quot;go straight&quot;</span>,</span><br><span class="line">        <span class="string">&quot;closest_participants_type&quot;</span>:<span class="string">&quot;passenger car&quot;</span>,</span><br><span class="line">        <span class="string">&quot;closest_participants_behavior&quot;</span>:<span class="string">&quot;braking&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历关键词（en_match_words中的关键词）</span></span><br><span class="line">    <span class="keyword">for</span> keyword <span class="keyword">in</span> en_match_words.keys():</span><br><span class="line">        <span class="comment"># 如果关键词不是[&quot;weather&quot;, &quot;period&quot;, &quot;road_structure&quot;]中的一个，跳过</span></span><br><span class="line">        <span class="keyword">if</span> keyword <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;weather&quot;</span>, <span class="string">&quot;period&quot;</span>, <span class="string">&quot;road_structure&quot;</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 获取关键词对应的文本列表</span></span><br><span class="line">        texts = np.array(en_match_words[keyword])</span><br><span class="line">        text = clip.tokenize(texts).to(device)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用torch.no_grad()上下文，避免计算梯度</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="keyword">if</span> keyword == <span class="string">&#x27;period&#x27;</span>:</span><br><span class="line">                <span class="comment"># 检查关键词是否为 &#x27;period&#x27;</span></span><br><span class="line">                <span class="comment"># 对于关键词 &#x27;period&#x27;，根据模型预测白天或夜晚</span></span><br><span class="line">                height, width, _ = img.shape</span><br><span class="line">                end_row = <span class="built_in">int</span>(height * <span class="number">0.5</span>)</span><br><span class="line">                img_day = img[<span class="number">0</span>:end_row, :]</span><br><span class="line">                img_day = preprocess(Image.fromarray(cv2.cvtColor(img_day, cv2.COLOR_BGR2RGB))).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">                <span class="comment"># 预处理 &#x27;period&#x27; 关键词的图像</span></span><br><span class="line">                logits_per_image, logits_per_text = model(img_day, text)</span><br><span class="line">                <span class="comment"># 获取模型预测结果</span></span><br><span class="line">                probs = logits_per_image.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line">                <span class="comment"># 将预测转换为概率</span></span><br><span class="line">                <span class="keyword">if</span> probs[<span class="number">0</span>][<span class="number">0</span>] &lt; <span class="number">0.85</span>:</span><br><span class="line">                    <span class="comment"># 如果是 &#x27;daytime&#x27; 的概率小于 0.85，则分类为 &#x27;night&#x27;</span></span><br><span class="line">                    single_video_result[keyword] = <span class="string">&#x27;night&#x27;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 否则分类为 &#x27;daytime&#x27;</span></span><br><span class="line">                    single_video_result[keyword] = <span class="string">&#x27;daytime&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 对于其他关键词，根据模型预测关键词的可能类别，并选择概率最高的类别作为结果</span></span><br><span class="line">                <span class="comment"># 使用两个不同的图像进行模型预测</span></span><br><span class="line">                logits_per_image1, logits_per_text1 = model(image1, text)</span><br><span class="line">                logits_per_image2, logits_per_text2 = model(image2, text)</span><br><span class="line">                <span class="comment"># 从两个预测中获取预测结果</span></span><br><span class="line">                probs1 = logits_per_image1.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line">                probs2 = logits_per_image2.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line">                <span class="comment"># 将两个预测的概率进行组合</span></span><br><span class="line">                probs = probs1 + probs2</span><br><span class="line">                <span class="comment"># 选择概率最高的类别作为结果</span></span><br><span class="line">                single_video_result[keyword] = texts[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果关键词为 &quot;parking lot entrance&quot;</span></span><br><span class="line">            <span class="keyword">if</span> texts[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]] == <span class="string">&quot;parking lot entrance&quot;</span>:</span><br><span class="line">                <span class="comment"># 再次使用模型预测其他可能的条件</span></span><br><span class="line">                texts = [<span class="string">&quot;uneven&quot;</span>,<span class="string">&quot;水渍&quot;</span>,<span class="string">&quot;油渍&quot;</span>,<span class="string">&quot;积水&quot;</span>,<span class="string">&quot;cracked&quot;</span>]</span><br><span class="line">                text = clip.tokenize(texts).to(device)</span><br><span class="line">                logits_per_image1, logits_per_text1 = model(image2, text)</span><br><span class="line">                probs = logits_per_image1.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line">                <span class="comment"># 根据概率值确定结果</span></span><br><span class="line">                <span class="keyword">if</span> texts[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]] <span class="keyword">in</span> [<span class="string">&quot;水渍&quot;</span>,<span class="string">&quot;油渍&quot;</span>]:</span><br><span class="line">                    single_video_result[<span class="string">&#x27;abnormal_condition&#x27;</span>] = <span class="string">&quot;oil or water stain&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> texts[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]] == <span class="string">&#x27;积水&#x27;</span>:</span><br><span class="line">                    single_video_result[<span class="string">&#x27;abnormal_condition&#x27;</span>] = <span class="string">&quot;standing water&quot;</span></span><br><span class="line">                <span class="keyword">else</span> :</span><br><span class="line">                    single_video_result[<span class="string">&#x27;abnormal_condition&#x27;</span>] = texts[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">                <span class="built_in">print</span>(single_video_result[<span class="string">&#x27;abnormal_condition&#x27;</span>])</span><br><span class="line">                </span><br><span class="line">    <span class="comment"># 调整特定的 &quot;road_structure&quot; 值</span></span><br><span class="line">    <span class="keyword">if</span> single_video_result[<span class="string">&quot;road_structure&quot;</span>] == <span class="string">&quot;Ordinary roads&quot;</span>:</span><br><span class="line">        single_video_result[<span class="string">&quot;road_structure&quot;</span>] = <span class="string">&quot;normal&quot;</span></span><br><span class="line">    <span class="keyword">if</span> single_video_result[<span class="string">&quot;road_structure&quot;</span>] == <span class="string">&#x27;lane merging&#x27;</span>:</span><br><span class="line">        <span class="comment"># 如果 &quot;road_structure&quot; 为 &#x27;lane merging&#x27;，再次使用模型预测并调整结果</span></span><br><span class="line">        texts = np.array([<span class="string">&#x27;车道合并&#x27;</span>,<span class="string">&#x27;普通道路&#x27;</span>])</span><br><span class="line">        text = clip.tokenize(texts).to(device)</span><br><span class="line">        logits_per_image1, logits_per_text1 = model(image1, text)</span><br><span class="line">        probs1 = logits_per_image1.softmax(dim=-<span class="number">1</span>).cpu().detach().numpy()</span><br><span class="line">        <span class="keyword">if</span> texts[probs1[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]] != <span class="string">&#x27;车道合并&#x27;</span>:</span><br><span class="line">            single_video_result[<span class="string">&quot;road_structure&quot;</span>] = <span class="string">&#x27;normal&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将单个视频结果添加到submit_json中的测试结果列表</span></span><br><span class="line">    submit_json[<span class="string">&quot;test_results&quot;</span>].append(single_video_result)</span><br></pre></td></tr></table></figure><h4 id="推理最近交通参与者"><a href="#推理最近交通参与者" class="headerlink" title="推理最近交通参与者"></a>推理最近交通参与者</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入必要的库</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个 JSON 格式的字典，用于存储视频结果</span></span><br><span class="line">submit_json_video = &#123;</span><br><span class="line">    <span class="string">&quot;author&quot;</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;time&quot;</span>: <span class="string">&quot;231011&quot;</span>,</span><br><span class="line">    <span class="string">&quot;model&quot;</span>: <span class="string">&quot;model_name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test_results&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义包含不同场景关键词可能取值的字典</span></span><br><span class="line">en_match_words = &#123;</span><br><span class="line">    <span class="string">&quot;scerario&quot;</span>: [<span class="string">&quot;suburbs&quot;</span>, <span class="string">&quot;city street&quot;</span>, <span class="string">&quot;expressway&quot;</span>, <span class="string">&quot;tunnel&quot;</span>, <span class="string">&quot;parking-lot&quot;</span>, <span class="string">&quot;gas or charging stations&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;weather&quot;</span>: [<span class="string">&quot;clear&quot;</span>, <span class="string">&quot;cloudy&quot;</span>, <span class="string">&quot;raining&quot;</span>, <span class="string">&quot;foggy&quot;</span>, <span class="string">&quot;snowying&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;period&quot;</span>: [<span class="string">&quot;daytime&quot;</span>, <span class="string">&quot;dawn or dusk&quot;</span>, <span class="string">&quot;night&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;road_structure&quot;</span>: [<span class="string">&quot;Ordinary roads&quot;</span>, <span class="string">&quot;crossroads&quot;</span>, <span class="string">&quot;T-junction&quot;</span>, <span class="string">&quot;ramp&quot;</span>, <span class="string">&quot;lane merging&quot;</span>, <span class="string">&quot;parking lot entrance&quot;</span>, <span class="string">&quot;round about&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;general_obstacle&quot;</span>: [<span class="string">&quot;nothing&quot;</span>, <span class="string">&quot;speed bumper&quot;</span>, <span class="string">&quot;traffic cone&quot;</span>, <span class="string">&quot;water horse&quot;</span>, <span class="string">&quot;stone&quot;</span>, <span class="string">&quot;manhole cover&quot;</span>, <span class="string">&quot;nothing&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;abnormal_condition&quot;</span>: [<span class="string">&quot;uneven&quot;</span>, <span class="string">&quot;oil or water stain&quot;</span>, <span class="string">&quot;standing water&quot;</span>, <span class="string">&quot;cracked&quot;</span>, <span class="string">&quot;nothing&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;ego_car_behavior&quot;</span>: [<span class="string">&quot;slow down&quot;</span>, <span class="string">&quot;go straight&quot;</span>, <span class="string">&quot;turn right&quot;</span>, <span class="string">&quot;turn left&quot;</span>, <span class="string">&quot;stop&quot;</span>, <span class="string">&quot;U-turn&quot;</span>, <span class="string">&quot;speed up&quot;</span>, <span class="string">&quot;lane change&quot;</span>, <span class="string">&quot;others&quot;</span>],</span><br><span class="line">    <span class="string">&quot;closest_participants_type&quot;</span>: [<span class="string">&quot;normal car&quot;</span>, <span class="string">&quot;bus&quot;</span>, <span class="string">&quot;truck&quot;</span>, <span class="string">&quot;people&quot;</span>, <span class="string">&quot;police&quot;</span>, <span class="string">&quot;nothing&quot;</span>, <span class="string">&quot;others&quot;</span>, <span class="string">&quot;unknown&quot;</span>],</span><br><span class="line">    <span class="string">&quot;closest_participants_behavior&quot;</span>: [<span class="string">&quot;slow down&quot;</span>, <span class="string">&quot;go straight&quot;</span>, <span class="string">&quot;turn right&quot;</span>, <span class="string">&quot;turn left&quot;</span>, <span class="string">&quot;stop&quot;</span>, <span class="string">&quot;U-turn&quot;</span>, <span class="string">&quot;speed up&quot;</span>, <span class="string">&quot;lane change&quot;</span>, <span class="string">&quot;others&quot;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取视频文件的路径并进行排序</span></span><br><span class="line">paths = glob.glob(<span class="string">&#x27;/kaggle/input/clip-test/初赛测试视频/*&#x27;</span>)</span><br><span class="line">paths.sort()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定用于分析的关键词（例如，[&#x27;closest_participants_type&#x27;]）</span></span><br><span class="line">keys = [<span class="string">&#x27;closest_participants_type&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置调试标志，以控制是处理所有视频还是只处理特定视频</span></span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果处于调试模式，则使用特定的视频进行测试</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    paths = [<span class="string">&#x27;/kaggle/input/clip-test/初赛测试视频/45.avi&#x27;</span>]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 遍历每个视频路径</span></span><br><span class="line"><span class="keyword">for</span> video_path <span class="keyword">in</span> paths:</span><br><span class="line">    <span class="built_in">print</span>(video_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化一个数组，用于存储每个关键词的概率总和</span></span><br><span class="line">    ans = [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取视频文件名作为 clip_id</span></span><br><span class="line">    clip_id = video_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开视频文件</span></span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">    frame_count = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line"></span><br><span class="line">    results = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义用于帧采样率的变量 &#x27;x&#x27;</span></span><br><span class="line">    x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以基于 &#x27;x&#x27; 的采样率遍历帧</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, frame_count, <span class="built_in">int</span>(fps // x)):</span><br><span class="line">        <span class="comment"># 将帧位置设置为当前索引</span></span><br><span class="line">        cap.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, i)</span><br><span class="line">        ret, img = cap.read()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果帧读取不成功，则中断循环</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从帧底部提取感兴趣区域（ROI）</span></span><br><span class="line">        height, width, _ = img.shape</span><br><span class="line">        start_row = <span class="built_in">int</span>(height * <span class="number">0</span>)</span><br><span class="line">        img = img[start_row:height, :]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对帧图像进行预处理</span></span><br><span class="line">        image = preprocess(Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化一个用于单帧结果的字典</span></span><br><span class="line">        single_frame_result = &#123;</span><br><span class="line">            <span class="string">&quot;clip_id&quot;</span>: clip_id,</span><br><span class="line">            <span class="string">&quot;scerario&quot;</span>: <span class="string">&quot;city street&quot;</span>,</span><br><span class="line">            <span class="string">&quot;weather&quot;</span>: <span class="string">&quot;clear&quot;</span>,</span><br><span class="line">            <span class="string">&quot;period&quot;</span>: <span class="string">&quot;night&quot;</span>,</span><br><span class="line">            <span class="string">&quot;road_structure&quot;</span>: <span class="string">&quot;normal&quot;</span>,</span><br><span class="line">            <span class="string">&quot;general_obstacle&quot;</span>: <span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;abnormal_condition&quot;</span>: <span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ego_car_behavior&quot;</span>: <span class="string">&quot;go straight&quot;</span>,</span><br><span class="line">            <span class="string">&quot;closest_participants_type&quot;</span>: <span class="string">&quot;passenger car&quot;</span>,</span><br><span class="line">            <span class="string">&quot;closest_participants_behavior&quot;</span>: <span class="string">&quot;braking&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历指定的关键词（例如，[&#x27;closest_participants_type&#x27;]）</span></span><br><span class="line">        <span class="keyword">for</span> k, keyword <span class="keyword">in</span> <span class="built_in">enumerate</span>(keys):</span><br><span class="line">            <span class="comment"># 对于特定帧跳过处理 &#x27;closest_participants_type&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> keyword == <span class="string">&quot;closest_participants_type&quot;</span> <span class="keyword">and</span> (i &lt; fps * <span class="number">5</span> // x <span class="keyword">or</span> i &gt; fps * <span class="number">7</span> // x):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取关键词对应的文本</span></span><br><span class="line">            texts = np.array(en_match_words[keyword])</span><br><span class="line">            text = clip.tokenize(texts).to(device)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用无梯度计算推理结果</span></span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                logits_per_image, logits_per_text = model(image, text)</span><br><span class="line">                probs = logits_per_image.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将概率累加到 ans 数组中</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ans[k])):</span><br><span class="line">                ans[k][j] += probs[<span class="number">0</span>][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对 ans 数组中的每个关键词，选择具有最大概率的文本值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ans)):</span><br><span class="line">        single_frame_result[keys[i]] = en_match_words[keys[i]][ans[i].index((<span class="built_in">max</span>(ans[i])))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将单帧结果添加到 JSON 结果列表中</span></span><br><span class="line">    submit_json_video[<span class="string">&quot;test_results&quot;</span>].append(single_frame_result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 释放视频文件资源</span></span><br><span class="line">    cap.release()</span><br></pre></td></tr></table></figure><h4 id="推理自车行为"><a href="#推理自车行为" class="headerlink" title="推理自车行为"></a>推理自车行为</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> tqdm.notebook <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> tensorflow_docs.vis <span class="keyword">import</span> embed</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">format_frames</span>(<span class="params">frame, output_size</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Pad and resize an image from a video.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      frame: Image that needs to resized and padded. </span></span><br><span class="line"><span class="string">      output_size: Pixel size of the output frame image.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Return:</span></span><br><span class="line"><span class="string">      Formatted frame with padding of specified output size.</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">    frame = tf.image.convert_image_dtype(frame, tf.float32)</span><br><span class="line">    frame = tf.image.resize_with_pad(frame, *output_size)</span><br><span class="line">    <span class="keyword">return</span> frame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于从视频文件中提取帧序列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">frames_from_video_file</span>(<span class="params">video_path, n_frames, output_size=(<span class="params"><span class="number">224</span>, <span class="number">224</span></span>), frame_step=<span class="number">15</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从每个视频文件中创建帧序列。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">      video_path：视频文件的文件路径。</span></span><br><span class="line"><span class="string">      n_frames：要从每个视频文件中创建的帧数。</span></span><br><span class="line"><span class="string">      output_size：输出帧图像的像素大小。</span></span><br><span class="line"><span class="string">      frame_step：帧步长，即每隔多少帧采样一次。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回：</span></span><br><span class="line"><span class="string">      一个形状为 (n_frames, height, width, channels) 的 NumPy 数组，包含从视频文件中提取的帧。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 读取每个视频的每一帧</span></span><br><span class="line">    result = []</span><br><span class="line">    src = cv2.VideoCapture(<span class="built_in">str</span>(video_path))  <span class="comment"># 打开视频文件</span></span><br><span class="line"></span><br><span class="line">    video_length = src.get(cv2.CAP_PROP_FRAME_COUNT)  <span class="comment"># 获取视频的总帧数</span></span><br><span class="line"></span><br><span class="line">    need_length = <span class="number">1</span> + (n_frames - <span class="number">1</span>) * frame_step  <span class="comment"># 计算需要的帧序列长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据视频长度和需要的长度计算起始帧的位置</span></span><br><span class="line">    <span class="keyword">if</span> need_length &gt; video_length:</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        max_start = video_length - need_length</span><br><span class="line">        start = random.randint(<span class="number">0</span>, max_start + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    src.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, start)  <span class="comment"># 设置视频的起始帧位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取第一帧</span></span><br><span class="line">    ret, frame = src.read()</span><br><span class="line">    result.append(format_frames(frame, output_size))  <span class="comment"># 将第一帧添加到结果列表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环读取后续帧</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n_frames - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(frame_step):</span><br><span class="line">            ret, frame = src.read()</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            frame = format_frames(frame, output_size)</span><br><span class="line">            result.append(frame)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(np.zeros_like(result[<span class="number">0</span>]))  <span class="comment"># 如果视频读取失败，用零填充</span></span><br><span class="line"></span><br><span class="line">    src.release()  <span class="comment"># 释放视频资源</span></span><br><span class="line">    result = np.array(result)[..., [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]]  <span class="comment"># 将结果转换为 NumPy 数组，并重新排序通道顺序（BGR 到 RGB）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，将图像序列保存为 GIF 文件并返回嵌入的文件链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_gif</span>(<span class="params">images</span>):</span><br><span class="line">    converted_images = np.clip(images * <span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)  <span class="comment"># 将图像值从 [0, 1] 转换为 [0, 255] 并转为整数</span></span><br><span class="line">    imageio.mimsave(<span class="string">&#x27;./animation.gif&#x27;</span>, converted_images, fps=<span class="number">10</span>)  <span class="comment"># 保存为 GIF 文件</span></span><br><span class="line">    <span class="keyword">return</span> embed.embed_file(<span class="string">&#x27;./animation.gif&#x27;</span>)  <span class="comment"># 返回嵌入的文件链接</span></span><br></pre></td></tr></table></figure><h4 id="推理场景"><a href="#推理场景" class="headerlink" title="推理场景"></a>推理场景</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader, Dataset</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, preprocess, image_files, transform=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        自定义数据集类的初始化函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">          preprocess：图像预处理函数。</span></span><br><span class="line"><span class="string">          image_files：包含图像文件路径的列表。</span></span><br><span class="line"><span class="string">          transform：可选的图像转换函数。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.image_files = image_files</span><br><span class="line">        self.transform = transform</span><br><span class="line">        self.preprocess = preprocess</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取数据集的长度。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回：</span></span><br><span class="line"><span class="string">          数据集的长度。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.image_files)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, i</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取数据集中索引为 i 的样本。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">          i：样本的索引。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回：</span></span><br><span class="line"><span class="string">          clip_images：视频片段帧的预处理结果列表。</span></span><br><span class="line"><span class="string">          images：视频片段帧的原始图像列表。</span></span><br><span class="line"><span class="string">          filename：图像文件的基本文件名。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        cap = cv2.VideoCapture(self.image_files[i])  <span class="comment"># 打开视频文件</span></span><br><span class="line">        fps = cap.get(cv2.CAP_PROP_FPS)  <span class="comment"># 获取视频的帧率</span></span><br><span class="line">        frame_count = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))  <span class="comment"># 获取视频的帧数</span></span><br><span class="line">        images = []  <span class="comment"># 存储原始图像列表</span></span><br><span class="line">        clip_images = []  <span class="comment"># 存储预处理后的图像列表</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, frame_count, <span class="built_in">int</span>(fps // <span class="number">1</span>)):  <span class="comment"># 以指定帧率采样视频帧</span></span><br><span class="line">            cap.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, j)  <span class="comment"># 设置当前帧位置</span></span><br><span class="line">            ret, img = cap.read()  <span class="comment"># 读取当前帧</span></span><br><span class="line"></span><br><span class="line">            height, width, _ = img.shape</span><br><span class="line">            start_row = <span class="built_in">int</span>(height * <span class="number">0.20</span>)</span><br><span class="line">            img = img[start_row:height, :]</span><br><span class="line">            img = cv2.fastNlMeansDenoisingColored(img, <span class="literal">None</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">21</span>)  <span class="comment"># 对图像进行去噪处理</span></span><br><span class="line"></span><br><span class="line">            clip_images.append(self.preprocess(Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))).unsqueeze(<span class="number">0</span>))</span><br><span class="line">            img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))</span><br><span class="line"></span><br><span class="line">            image = np.array(img.convert(<span class="string">&#x27;RGB&#x27;</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.transform <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                image = self.transform(image=image)[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">            images.append(image)</span><br><span class="line"></span><br><span class="line">        cap.release()  <span class="comment"># 释放视频资源</span></span><br><span class="line">        <span class="keyword">return</span> clip_images, images, os.path.basename(self.image_files[i])  <span class="comment"># 返回视频片段帧的预处理结果列表、原始图像列表和文件名</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> clip</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化存放测试结果的字典</span></span><br><span class="line">submit_json_scerario = &#123;</span><br><span class="line">    <span class="string">&quot;author&quot;</span> : <span class="string">&quot;abc&quot;</span> ,</span><br><span class="line">    <span class="string">&quot;time&quot;</span> : <span class="string">&quot;231011&quot;</span>,</span><br><span class="line">    <span class="string">&quot;model&quot;</span> : <span class="string">&quot;model_name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test_results&quot;</span> : []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有视频文件的路径</span></span><br><span class="line">paths = glob.glob(<span class="string">&#x27;/kaggle/input/clip-test/初赛测试视频/*&#x27;</span>)</span><br><span class="line">paths.sort()</span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果处于调试模式，只选择一个视频进行处理</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    paths = [<span class="string">&#x27;/kaggle/input/clip-test/初赛测试视频/03.avi&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建自定义数据集</span></span><br><span class="line">datasets = CustomDataset(preprocess, paths)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据加载器</span></span><br><span class="line">dataloaders = DataLoader(datasets, batch_size=<span class="number">1</span>, num_workers=<span class="number">2</span>, pin_memory=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历数据加载器中的每个视频</span></span><br><span class="line"><span class="keyword">for</span> clip_images, datas, clip_id <span class="keyword">in</span> dataloaders:</span><br><span class="line">    <span class="comment"># 初始化单个视频的测试结果字典</span></span><br><span class="line">    single_frame_result = &#123;</span><br><span class="line">        <span class="string">&quot;clip_id&quot;</span>: clip_id,</span><br><span class="line">        <span class="string">&quot;scerario&quot;</span> : <span class="string">&quot;city street&quot;</span>,</span><br><span class="line">        <span class="string">&quot;weather&quot;</span>: <span class="string">&quot;clear&quot;</span>,</span><br><span class="line">        <span class="string">&quot;period&quot;</span>: <span class="string">&quot;night&quot;</span>,</span><br><span class="line">        <span class="string">&quot;road_structure&quot;</span>: <span class="string">&quot;normal&quot;</span>,</span><br><span class="line">        <span class="string">&quot;general_obstacle&quot;</span>: <span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;abnormal_condition&quot;</span>: <span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ego_car_behavior&quot;</span>: <span class="string">&quot;go straight&quot;</span>,</span><br><span class="line">        <span class="string">&quot;closest_participants_type&quot;</span>: <span class="string">&quot;passenger car&quot;</span>,</span><br><span class="line">        <span class="string">&quot;closest_participants_behavior&quot;</span>: <span class="string">&quot;braking&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(clip_id)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化用于存放场景类别统计的列表</span></span><br><span class="line">    clip_ans = [<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(scerario_clip))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历视频的每一帧</span></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(clip_images):</span><br><span class="line">        texts = np.array(scerario_clip)</span><br><span class="line">        text = clip.tokenize(texts).to(device)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="comment"># 使用模型进行推理</span></span><br><span class="line">            logits_per_image, logits_per_text = model(data.squeeze(<span class="number">0</span>).to(device), text)</span><br><span class="line">            probs = logits_per_image.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 统计场景类别的数量</span></span><br><span class="line">            clip_ans[probs[<span class="number">0</span>].argsort()[::-<span class="number">1</span>][<span class="number">0</span>]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;clip:&quot;</span>, clip_ans, scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据统计结果确定场景类别</span></span><br><span class="line">    <span class="keyword">if</span> scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))] <span class="keyword">in</span> [<span class="string">&#x27;lush green valley&#x27;</span>, <span class="string">&#x27;car tunnel in the mountains&#x27;</span>, <span class="string">&#x27;snowy mountain valley&#x27;</span>, <span class="string">&#x27;quiet suburban street&#x27;</span>, <span class="string">&#x27;open highway in the countryside&#x27;</span>]:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;suburban&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))] <span class="keyword">in</span> [<span class="string">&#x27;The city highway&#x27;</span>, <span class="string">&#x27;open street in the city&#x27;</span>, <span class="string">&#x27;city street at daylight&#x27;</span>, <span class="string">&#x27;Street on a rainy night&#x27;</span>, <span class="string">&#x27;Street on a snowy night&#x27;</span>, <span class="string">&#x27;busy city street&#x27;</span>, <span class="string">&#x27;city streets at night&#x27;</span>]:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;city street&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))] <span class="keyword">in</span> [<span class="string">&#x27;busy highway with heavy traffic&#x27;</span>]:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;expressway&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))] <span class="keyword">in</span> [<span class="string">&#x27;subway tunnel&#x27;</span>]:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;tunnel&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))] <span class="keyword">in</span> [<span class="string">&#x27;Indoor parking lot&#x27;</span>, <span class="string">&#x27;urban gas station at night&#x27;</span>, <span class="string">&#x27;crowded shopping mall parking lot&#x27;</span>]:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;parking-lot&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> scerario_clip[clip_ans.index(<span class="built_in">max</span>(clip_ans))] <span class="keyword">in</span> [<span class="string">&#x27;rural gas station in daylight&#x27;</span>]:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;gas or charging stations&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        single_frame_result[<span class="string">&#x27;scerario&#x27;</span>] = <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将单个视频的测试结果添加到总体测试结果中</span></span><br><span class="line">    submit_json_scerario[<span class="string">&quot;test_results&quot;</span>].append(single_frame_result)</span><br></pre></td></tr></table></figure><h4 id="推理其余杂项"><a href="#推理其余杂项" class="headerlink" title="推理其余杂项"></a>推理其余杂项</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">data_processing</span>(<span class="params">results</span>):</span><br><span class="line">    <span class="comment"># 初始化结果字典</span></span><br><span class="line">    ans = &#123;</span><br><span class="line">        <span class="string">&#x27;ans&#x27;</span>: []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> i, result <span class="keyword">in</span> <span class="built_in">enumerate</span>(results):</span><br><span class="line">        <span class="comment"># 初始化当前结果的字典</span></span><br><span class="line">        this = &#123;</span><br><span class="line">            <span class="string">&#x27;frame_count&#x27;</span>: i,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: [names[result[<span class="number">0</span>].boxes.cls.cpu().numpy()[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result[<span class="number">0</span>].boxes.cls.cpu().numpy()))],  <span class="comment"># 标签名称</span></span><br><span class="line">            <span class="string">&#x27;conf&#x27;</span>: result[<span class="number">0</span>].boxes.conf.cpu().numpy(),  <span class="comment"># 标签置信度</span></span><br><span class="line">            <span class="string">&#x27;box&#x27;</span>: result[<span class="number">0</span>].boxes.xyxy.cpu().numpy().astype(<span class="built_in">int</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将当前结果添加到总体结果字典中</span></span><br><span class="line">        ans[<span class="string">&#x27;ans&#x27;</span>].append(this)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_crossroads</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果某个标签为 &#x27;traffic light&#x27; 的数量大于等于 2，返回 True</span></span><br><span class="line">        <span class="keyword">if</span> re[<span class="string">&#x27;name&#x27;</span>].count(<span class="string">&#x27;traffic light&#x27;</span>) &gt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果没有满足条件的结果，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_manhole</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果某个标签为 &#x27;manhole cover&#x27;，并且置信度大于 0.7，返回 True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;manhole cover&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][re[<span class="string">&#x27;name&#x27;</span>].index(<span class="string">&#x27;manhole cover&#x27;</span>)] &gt; <span class="number">0.7</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果没有满足条件的结果，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_box_area</span>(<span class="params">box</span>):</span><br><span class="line">    <span class="comment"># 计算边界框的面积</span></span><br><span class="line">    width = <span class="built_in">abs</span>(box[<span class="number">2</span>] - box[<span class="number">0</span>])</span><br><span class="line">    height = <span class="built_in">abs</span>(box[<span class="number">3</span>] - box[<span class="number">1</span>])</span><br><span class="line">    area = width * height</span><br><span class="line">    <span class="keyword">return</span> area</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_traffic_cone</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 初始化置信度之和</span></span><br><span class="line">    sum_conf = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果结果中包含 &#x27;traffic cone&#x27; 标签</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;traffic cone&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 找到 &#x27;traffic cone&#x27; 在标签列表中的索引</span></span><br><span class="line">            idx = [index <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(re[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">if</span> value == <span class="string">&#x27;traffic cone&#x27;</span>]</span><br><span class="line">            <span class="comment"># 遍历所有 &#x27;traffic cone&#x27; 的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">                <span class="comment"># 打印当前 &#x27;traffic cone&#x27; 的面积和置信度</span></span><br><span class="line">                <span class="built_in">print</span>(calculate_box_area(re[<span class="string">&#x27;box&#x27;</span>][i]), re[<span class="string">&#x27;conf&#x27;</span>][i])</span><br><span class="line">                <span class="comment"># 如果置信度大于 0.5 且面积小于 20000，返回 True</span></span><br><span class="line">                <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][i] &gt; <span class="number">0.5</span> <span class="keyword">and</span> calculate_box_area(re[<span class="string">&#x27;box&#x27;</span>][i]) &lt; <span class="number">20000</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="comment"># 如果面积小于 20000，累加置信度</span></span><br><span class="line">                <span class="keyword">elif</span> calculate_box_area(re[<span class="string">&#x27;box&#x27;</span>][i]) &lt; <span class="number">20000</span>:</span><br><span class="line">                    sum_conf += re[<span class="string">&#x27;conf&#x27;</span>][i]</span><br><span class="line">    <span class="comment"># 如果累加的置信度大于等于 0.5，返回 True；否则返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span> <span class="keyword">if</span> sum_conf &lt; <span class="number">0.5</span> <span class="keyword">else</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_police</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果结果中包含 &#x27;police car&#x27; 标签</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;police car&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 找到 &#x27;police car&#x27; 在标签列表中的索引</span></span><br><span class="line">            idx = [index <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(re[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">if</span> value == <span class="string">&#x27;police car&#x27;</span>]</span><br><span class="line">            <span class="comment"># 遍历所有 &#x27;police car&#x27; 的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">                <span class="comment"># 如果置信度大于 0.5，返回 True</span></span><br><span class="line">                <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][i] &gt; <span class="number">0.5</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果未检测到 &#x27;police car&#x27; 或所有检测到的 &#x27;police car&#x27; 置信度均不大于 0.5，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_truck</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果结果中包含 &#x27;truck&#x27; 标签</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;truck&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 找到 &#x27;truck&#x27; 在标签列表中的索引</span></span><br><span class="line">            idx = [index <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(re[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">if</span> value == <span class="string">&#x27;truck&#x27;</span>]</span><br><span class="line">            <span class="comment"># 遍历所有 &#x27;truck&#x27; 的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">                <span class="comment"># 如果置信度大于 0.5，返回 True</span></span><br><span class="line">                <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][i] &gt; <span class="number">0.5</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果未检测到 &#x27;truck&#x27; 或所有检测到的 &#x27;truck&#x27; 置信度均不大于 0.5，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_bus</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果结果中包含 &#x27;bus&#x27; 标签</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;bus&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 找到 &#x27;bus&#x27; 在标签列表中的索引</span></span><br><span class="line">            idx = [index <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(re[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">if</span> value == <span class="string">&#x27;bus&#x27;</span>]</span><br><span class="line">            <span class="comment"># 遍历所有 &#x27;bus&#x27; 的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">                <span class="comment"># 如果置信度大于 0.6，返回 True</span></span><br><span class="line">                <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][i] &gt; <span class="number">0.6</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果未检测到 &#x27;bus&#x27; 或所有检测到的 &#x27;bus&#x27; 置信度均不大于 0.6，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_other</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果结果中包含 &#x27;others&#x27; 标签</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;others&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 找到 &#x27;others&#x27; 在标签列表中的索引</span></span><br><span class="line">            idx = [index <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(re[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">if</span> value == <span class="string">&#x27;others&#x27;</span>]</span><br><span class="line">            <span class="comment"># 遍历所有 &#x27;others&#x27; 的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">                <span class="comment"># 如果置信度大于 0.3，返回 True</span></span><br><span class="line">                <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][i] &gt; <span class="number">0.3</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果未检测到 &#x27;others&#x27; 或所有检测到的 &#x27;others&#x27; 置信度均不大于 0.3，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_people</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="comment"># 遍历结果列表</span></span><br><span class="line">    <span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 如果结果中包含 &#x27;person&#x27; 标签</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;person&#x27;</span> <span class="keyword">in</span> re[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 找到 &#x27;person&#x27; 在标签列表中的索引</span></span><br><span class="line">            idx = [index <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(re[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">if</span> value == <span class="string">&#x27;person&#x27;</span>]</span><br><span class="line">            <span class="comment"># 遍历所有 &#x27;person&#x27; 的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">                <span class="comment"># 如果置信度大于 0.6，返回 True</span></span><br><span class="line">                <span class="keyword">if</span> re[<span class="string">&#x27;conf&#x27;</span>][i] &gt; <span class="number">0.6</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果未检测到 &#x27;person&#x27; 或所有检测到的 &#x27;person&#x27; 置信度均不大于 0.6，返回 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://datawhaler.feishu.cn/docx/L2bodJhfxoU11Yxrm04cY509nOe">2023全球智能汽车AI挑战赛：智能驾驶汽车虚拟仿真视频数据理解 - 飞书云文档 (feishu.cn)</a></p><p><a href="https://blog.csdn.net/qq_52309640/article/details/120940767">Python 计算机视觉（八）—— OpenCV 进行图像增强_opencv图像增强-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV </tag>
            
            <tag> 竞赛 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程和核心特性</title>
      <link href="/archives/fab44cdf.html"/>
      <url>/archives/fab44cdf.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="函数式编程和核心特性"><a href="#函数式编程和核心特性" class="headerlink" title="函数式编程和核心特性"></a>函数式编程和核心特性</h1><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828629.png" alt="image-20240107144536048"></p><p>函数式编程(functional programming)其实是个很古老的概念，诞生距今快60年啦!</p><p>最古老的函数式编程语言Lisp</p><p>新出现的函数式编程语言：比如Erlang、.Scala、clojure等</p><p>热门语言：Python、java、JavaScript、C++等都增加了函数式编程的一些特性。</p><blockquote><p>:warning:函数式编程在某些时刻，非常方便！但不需大家二选一。</p><p>:warning:我们通过一些常见的函数式编程的内容，先学习，后体会“函数式编程”。</p></blockquote><h2 id="函数式编程核心-高阶函数、闭包等"><a href="#函数式编程核心-高阶函数、闭包等" class="headerlink" title="函数式编程核心(高阶函数、闭包等)"></a>函数式编程核心(高阶函数、闭包等)</h2><h3 id="高阶函数和内存分析"><a href="#高阶函数和内存分析" class="headerlink" title="高阶函数和内存分析"></a>高阶函数和内存分析</h3><h4 id="函数是一等公民"><a href="#函数是一等公民" class="headerlink" title="函数是一等公民"></a>函数是一等公民</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828631.png" alt="image-20240107144947021"></p><p>函数式编程最鲜明的特点就是：函数是一等公民(first class)，指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数或者作为别的函数的返回值。</p><p><strong>一个函数可以接收另一个函数作为参数，这种函数就称之为高阶函数。</strong></p><p>Python内建的高阶函数有<code>map</code>、<code>reduce</code>、<code>filter</code>、<code>sorted</code></p><h4 id="高阶函数-内存状态分析"><a href="#高阶函数-内存状态分析" class="headerlink" title="高阶函数_内存状态分析"></a>高阶函数_内存状态分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test function run!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test3</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;test3,<span class="subst">&#123;a&#125;</span>,<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>(<span class="params">func, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test2 function run!!!&quot;</span>)</span><br><span class="line">    func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = test1</span><br><span class="line">test2(a)</span><br><span class="line">test2(test3, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">test2 function run!!!</span></span><br><span class="line"><span class="string">test function run!!!</span></span><br><span class="line"><span class="string">test2 function run!!!</span></span><br><span class="line"><span class="string">test3,10,20</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828632.png" alt="image-20240107150419769"></p><h3 id="lambda表达式和匿名函数"><a href="#lambda表达式和匿名函数" class="headerlink" title="lambda表达式和匿名函数"></a>lambda表达式和匿名函数</h3><p>详情见Python入门篇的函数和内存分析章节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> a, b, c: a + b + c</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(f))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;function &lt;lambda&gt; at 0x000001AF907F7E50&gt;</span></span><br><span class="line"><span class="string">1853555179088</span></span><br><span class="line"><span class="string">&lt;class &#x27;function&#x27;&gt;</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">g = [<span class="keyword">lambda</span> a: a * <span class="number">2</span>, <span class="keyword">lambda</span> b: b * <span class="number">4</span>, <span class="keyword">lambda</span> c: c * <span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(g[<span class="number">0</span>](<span class="number">1</span>), g[<span class="number">1</span>](<span class="number">2</span>), g[<span class="number">2</span>](<span class="number">3</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2 8 24</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><p>Python的<code>functools</code>模块提供了很多有用的功能，其中一个就是偏函数(Partial function)。要注意，这里的偏函数和数学意义上的偏函数不一样。</p><p>偏函数：作用就是把一个函数某些<strong>参数固定住</strong>（也就是设置默认值），返回一个新的函数，调用这个新的函数会更简单。</p><p>举例如下：</p><p><code>int()</code>函数可以把字符串转换为整数，当仅传入字符串时，<code>int()</code>函数默认按十进制转换，代码如下：</p><p><code>print(int(&#39;12345))</code></p><p>但<code>int()</code>函数还提供额外的base参数，默认值为10。如果传入base参数，就可以做N进制的转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#base参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转换为八进制&#x27;</span>，<span class="built_in">int</span>(<span class="string">&#x27;12345&#x27;</span>,base=<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转换为十六进制&#x27;</span>，<span class="built_in">int</span>(<span class="string">&#x27;12345&#x27;</span>,<span class="number">16</span>))</span><br></pre></td></tr></table></figure><p>假设要转换大量的二进制字符串，每次都传入<code>int(x, base=2)</code>非常麻烦，于是，我们想到，可以定义一个<code>int2()</code>的函数，默认把<code>base=2</code>传进去，现在定义一个<code>int2</code>函数，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">int2</span>(<span class="params">x,base=<span class="number">2</span></span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(x,base)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(int2(<span class="string">&#x27;1000000&#x27;</span>))  <span class="comment">#64</span></span><br><span class="line"><span class="built_in">print</span>(int2(<span class="string">&#x27;1010101&#x27;</span>))  <span class="comment">#85</span></span><br></pre></td></tr></table></figure><p><code>functools.partial</code>就是帮助我们创建一个偏函数的，不需要我们自己定义<code>int2()</code>,可以直接使用下面的代码创建一个新的函数<code>int2</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">int2 = functools.partial(<span class="built_in">int</span>, base=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(int2(<span class="string">&#x27;1000000&#x27;</span>))  <span class="comment"># 64</span></span><br><span class="line"><span class="built_in">print</span>(int2(<span class="string">&#x27;1010101&#x27;</span>))  <span class="comment"># 85</span></span><br><span class="line"><span class="built_in">print</span>(int2(<span class="string">&#x27;1000000&#x27;</span>, base=<span class="number">10</span>))  <span class="comment"># 也可以修改base的值</span></span><br></pre></td></tr></table></figure><h3 id="闭包closure"><a href="#闭包closure" class="headerlink" title="闭包closure"></a>闭包closure</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828633.png" alt="image-20240107152421229"></p><p>根据字面意思，可以形象地把闭包理解为一个封闭的包裹，这个包裹就是一个函数。当然还有函数内部对应的逻辑，包裹里面的东西就是自由变量（外部函数的局部变量），自由变量可以随着包裹到处游荡。</p><blockquote><p>局部变量：如果名称绑定再一个代码块中，则为该代码块的局部变量，除非声明为nonloca或global</p><p>全局变量：如果模块绑定在模块层级，则为全局变量</p><p>自由变章：如果变量在一个代码块中被使用但不是在其中定义，则为自由变量（不会被回收）</p></blockquote><h4 id="闭包概念和第一个闭包程序"><a href="#闭包概念和第一个闭包程序" class="headerlink" title="闭包概念和第一个闭包程序"></a>闭包概念和第一个闭包程序</h4><p>我们知道，函数作用域是独立的、封闭的，外部的执行环境是访问不了的，但是闭包具有这个能力和权限。</p><p>闭包是一个函数，只不过这个函数有超能力，可以访问到另一个函数的作用域。</p><blockquote><p>「函数」和「自由变量」的总和，就是一个闭包。</p></blockquote><p>闭包的特点：</p><p>第一，闭包是一个函数，而且存在于另一个函数当中</p><p>第二，闭包可以访问到父级函数的变量，且该变量不会销毁</p><p><strong>第三，外层函数把内层的这个函数本身当成返回值进行返回</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">闭包的特点：</span></span><br><span class="line"><span class="string">1、存在内外层函数嵌套情况</span></span><br><span class="line"><span class="string">2、内层函数引用了外层函数的变量或者参数（自由变量）</span></span><br><span class="line"><span class="string">3、外层函数把内层的这个函数本身当成返回值进行返回</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;outer&quot;</span>)</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;inner&quot;</span>)</span><br><span class="line">        <span class="comment"># 如果要修改a的值，声明为nonlocal</span></span><br><span class="line">        <span class="keyword">nonlocal</span> a</span><br><span class="line">        <span class="comment"># 闭包是由于函数内部使用了函数外部的变量。</span></span><br><span class="line">        <span class="comment"># 这个函数对象不销毁，则外部函数的局部变量也不会被销毁。</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;a:<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inn = outer()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------&quot;</span>)</span><br><span class="line">inn()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">outer</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">inner</span></span><br><span class="line"><span class="string">a:1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="闭包内存分析"><a href="#闭包内存分析" class="headerlink" title="闭包内存分析"></a>闭包内存分析</h4><ol><li><p>执行完<code>inn=outer()</code>的内存图。<code>outer()</code>栈帧执行完后实际已经消失了，画上去，是为了展现关系。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828634.png" alt="image-20240107164118698"></p></li><li><p>执行完<code>inn=outer()</code>的内存图。由于<code>inner()</code>内部函数的调用，<code>outer()</code>栈帧消失后，局部变量a指向的对象<code>1</code>仍然存在。从而形成了”闭包”。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828635.png" alt="image-20240107164533098"></p></li><li><p>第一次调用<code>inn()</code>,从而调用内部函数，仍然可以拿到以前局部变量指向的对象<code>1</code></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828636.png" alt="image-20240107164729573"></p></li><li><p>第二次调用<code>inn(),</code>仍然可以继续拿到以前局部变量指向的对象<code>1</code>，并将值变为<code>2</code></p></li></ol><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828637.png" alt="image-20240107164746383"></p><blockquote><p>闭包可以当成两个部分组成的整体：</p><ol><li>函数</li><li>自由变量</li></ol></blockquote><h4 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h4><p>作用1：隐藏变量，避免全局污染</p><p>作用2：可以读取函数内部的变量</p><p><strong>同时闭包使用不当，优点就变成了缺点：</strong></p><p>缺点1：导致变量不会被垃圾回收机制回收，造成内存消耗</p><p>缺点2：不恰当的使用闭包可能会造成内存泄漏的问题</p><h4 id="闭包和自由变量"><a href="#闭包和自由变量" class="headerlink" title="闭包和自由变量"></a>闭包和自由变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">需求：实现变量a自增</span></span><br><span class="line"><span class="string">通过自由变量，可以实现递增，也不会污染其他程序</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> a</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a:&quot;</span>, a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> increment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_ten</span>():</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ten!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;全局变量a不等于10&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">increment = add()</span><br><span class="line">increment()</span><br><span class="line">increment()</span><br><span class="line">print_ten()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">a: 11</span></span><br><span class="line"><span class="string">a: 12</span></span><br><span class="line"><span class="string">ten!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="案例：用闭包实现不修改源码添加功能"><a href="#案例：用闭包实现不修改源码添加功能" class="headerlink" title="案例：用闭包实现不修改源码添加功能"></a>案例：用闭包实现不修改源码添加功能</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">本次内容是装饰器的基础</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outfunc</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录,start&quot;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录,end&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能2&quot;</span>, a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(fun1))</span><br><span class="line">fun1 = outfunc(fun1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(fun1))</span><br><span class="line">fun1()</span><br><span class="line">fun2 = outfunc(fun2)</span><br><span class="line">fun2(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1474019303136</span></span><br><span class="line"><span class="string">1474084402656</span></span><br><span class="line"><span class="string">日志记录,start</span></span><br><span class="line"><span class="string">使用功能1</span></span><br><span class="line"><span class="string">日志记录,end</span></span><br><span class="line"><span class="string">日志记录,start</span></span><br><span class="line"><span class="string">使用功能2 10 20 30</span></span><br><span class="line"><span class="string">日志记录,end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="map函数（内置函数）"><a href="#map函数（内置函数）" class="headerlink" title="map函数（内置函数）"></a>map函数（内置函数）</h3><p><code>map()</code>函数接收两种参数，==一个是函数，另一个是序列(可以传入多个序列)==，map将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回。</p><p>比如我们有一个函数<code>f(x)=x2</code>,要把这个函数作用在一个<code>list[1,2,3,4,5,6,7,8,9]</code>上，就可以用<code>map()</code>实现如下：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828638.png" alt="image-20240107172241103"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># map高阶函数使用案例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = <span class="built_in">map</span>(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1, 4, 9, 16]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># map高阶函数使用案例（用匿名函数）</span></span><br><span class="line">L = <span class="built_in">map</span>(<span class="keyword">lambda</span> n: n * n, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1, 4, 9, 16]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># map函数传入两个列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = <span class="built_in">map</span>(f2, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[7, 9, 11, 13]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># map函数传入两个列表（用匿名函数）</span></span><br><span class="line">L = <span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[7, 9, 11, 13]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="reduce函数（位于functools模块）"><a href="#reduce函数（位于functools模块）" class="headerlink" title="reduce函数（位于functools模块）"></a>reduce函数（位于<code>functools</code>模块）</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828639.png" alt="image-20240107174156892"></p><p>reduce位于<code>functools</code>模块</p><p>reduce把一个函数作用在一个序列[x1,x2,x3…]上，这个函数<strong>必须接收两个参数</strong>，<strong>reduce把结果继续和序列的下一个元素做累积计算</strong>，其效果就是：<br>                        <code>reduce(f,[x1,x2,x3,x4]) = f(f(f(x1,x2),x3),x4)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># reduce实现对一个序列求和</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = reduce(add, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h3 id="filter函数（内置函数）"><a href="#filter函数（内置函数）" class="headerlink" title="filter函数（内置函数）"></a>filter函数（内置函数）</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401071828640.png" alt="image-20240107174734746"></p><p>内置函数<code>filter()</code>用于过滤序列。<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是True还是False,决定保留还是丢弃该元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># filter过滤列表，删除偶数，只保留奇数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_odd</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = <span class="built_in">filter</span>(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter过滤列表，删除偶数，只保留奇数（用匿名函数实现）</span></span><br><span class="line">L = <span class="built_in">filter</span>(<span class="keyword">lambda</span> n: n % <span class="number">2</span> == <span class="number">1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># filter序列中的空字符串删除</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">not_empty</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="comment"># strip()取出字符串首位指定信息</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = <span class="built_in">filter</span>(not_empty, [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">None</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;C&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"><span class="comment"># filter序列中的空字符串删除（用匿名函数实现）</span></span><br><span class="line">L = <span class="built_in">filter</span>(<span class="keyword">lambda</span> s: (s <span class="keyword">and</span> s.strip()), [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">None</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;C&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1, 3, 5]</span></span><br><span class="line"><span class="string">[1, 3, 5]</span></span><br><span class="line"><span class="string">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;C&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;C&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="sorted函数（内置函数）"><a href="#sorted函数（内置函数）" class="headerlink" title="sorted函数（内置函数）"></a>sorted函数（内置函数）</h3><p>排序算法，排序也是在程序中经常用到的算法。无论使用冒泡排序还是快速排序，排序的核心是比较两个元素的大小。</p><ol><li>如果是数字，我们可以直接比较</li><li>如果是自定义对象呢？直接比较数学上的大小是没有意义的，因此，比较的过程必须通过函数抽象出来。通常规定，对于两个元素x和y，如果认为<code>x&lt;y</code>,则返回<code>-1</code>，如果认为<code>x==y</code>，则返回<code>0</code>，如果认为<code>x&gt;y</code>，则返回<code>1</code>，这样，排序算法就不用关心具体的比较过程，而是根据比较结果直接排序。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># sorted对list进行排序</span></span><br><span class="line">sorted1 = <span class="built_in">sorted</span>([<span class="number">1</span>, <span class="number">23</span>, -<span class="number">2</span>, -<span class="number">20</span>, <span class="number">99</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;升序排列：&quot;</span>, <span class="built_in">list</span>(sorted1))</span><br></pre></td></tr></table></figure><p>sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># sorted对list进行排序</span></span><br><span class="line">sorted1 = <span class="built_in">sorted</span>([<span class="number">1</span>, <span class="number">23</span>, -<span class="number">2</span>, -<span class="number">20</span>, <span class="number">99</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;升序排序：&quot;</span>, <span class="built_in">list</span>(sorted1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sorted函数接收一个key自定义排序</span></span><br><span class="line"><span class="comment"># abs按绝对值排序</span></span><br><span class="line">sorted2 = <span class="built_in">sorted</span>([<span class="number">1</span>, <span class="number">23</span>, -<span class="number">2</span>, -<span class="number">20</span>, <span class="number">99</span>], key=<span class="built_in">abs</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;自定义排序：&quot;</span>, <span class="built_in">list</span>(sorted2))</span><br><span class="line"></span><br><span class="line">sorted3 = <span class="built_in">sorted</span>([<span class="number">1</span>, <span class="number">23</span>, -<span class="number">2</span>, -<span class="number">20</span>, <span class="number">99</span>], key=<span class="built_in">abs</span>, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;自定义逆序排序：&quot;</span>, <span class="built_in">list</span>(sorted3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串排序按照ASCII</span></span><br><span class="line">sorted4 = <span class="built_in">sorted</span>([<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ABC&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;d&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串排序：&quot;</span>, <span class="built_in">list</span>(sorted4))</span><br><span class="line"><span class="comment"># 忽略字符串大小写排序</span></span><br><span class="line">sorted5 = <span class="built_in">sorted</span>([<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ABC&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;d&quot;</span>], key=<span class="built_in">str</span>.lower)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;忽略字符串大小写排序：&quot;</span>, <span class="built_in">list</span>(sorted5))</span><br><span class="line"><span class="comment"># 忽略字符串大小写反向排序</span></span><br><span class="line">sorted6 = <span class="built_in">sorted</span>([<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ABC&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;d&quot;</span>], key=<span class="built_in">str</span>.lower, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;忽略字符串大小写反向排序：&quot;</span>, <span class="built_in">list</span>(sorted6))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">升序排序： [-20, -2, 1, 23, 99]</span></span><br><span class="line"><span class="string">自定义排序： [1, -2, -20, 23, 99]</span></span><br><span class="line"><span class="string">自定义逆序排序： [99, 23, -20, -2, 1]</span></span><br><span class="line"><span class="string">字符串排序： [&#x27;ABC&#x27;, &#x27;D&#x27;, &#x27;abc&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"><span class="string">忽略字符串大小写排序： [&#x27;abc&#x27;, &#x27;ABC&#x27;, &#x27;D&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"><span class="string">忽略字符串大小写反向排序： [&#x27;D&#x27;, &#x27;d&#x27;, &#x27;abc&#x27;, &#x27;ABC&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>sorted对自定义对象排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, age, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_sorted</span>(<span class="params">stu1, stu2</span>):</span><br><span class="line">    <span class="keyword">if</span> stu1.age &lt; stu2.age:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stu1.age &gt; stu2.age:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="number">18</span>, <span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">stu2 = Student(<span class="number">28</span>, <span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">stu3 = Student(<span class="number">21</span>, <span class="string">&quot;ccc&quot;</span>)</span><br><span class="line">student_list = <span class="built_in">sorted</span>([stu1, stu2, stu3], key=<span class="keyword">lambda</span> x: x.age)</span><br><span class="line"><span class="keyword">for</span> stu <span class="keyword">in</span> student_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;stu.name&#125;</span>-----<span class="subst">&#123;stu.age&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">student_list = <span class="built_in">sorted</span>([stu1, stu2, stu3], key=cmp_to_key(custom_sorted))</span><br><span class="line"><span class="keyword">for</span> stu <span class="keyword">in</span> student_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;cmp_to_key排序：<span class="subst">&#123;stu.name&#125;</span>-----<span class="subst">&#123;stu.age&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">aaa-----18</span></span><br><span class="line"><span class="string">ccc-----21</span></span><br><span class="line"><span class="string">bbb-----28</span></span><br><span class="line"><span class="string">cmp_to_key排序：aaa-----18</span></span><br><span class="line"><span class="string">cmp_to_key排序：ccc-----21</span></span><br><span class="line"><span class="string">cmp_to_key排序：bbb-----28</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="装饰器深入剖析"><a href="#装饰器深入剖析" class="headerlink" title="装饰器深入剖析"></a>装饰器深入剖析</h2><p><img src="4、函数式编程和核心特性.assets/image-20240107183115735.png" alt="image-20240107183115735"></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>装饰器来自 <code>Decorator</code> 的直译。什么叫装饰，就是装点、提供一些额外的功能。在 Python 中的装饰器则是提供了一些额外的功能。</p><p>装饰器本质上是一个Python函数（其实就是<strong>闭包</strong>），它可以让其他函数在==不需要做任何代码变动的前提下增加额外功能==，装饰器的返回值也是一个函数对象。</p><p>装饰器用于有以下场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。</p><h3 id="装饰器解决日志问题"><a href="#装饰器解决日志问题" class="headerlink" title="装饰器解决日志问题"></a>装饰器解决日志问题</h3><p>闭包解决日志问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mylog</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录,start&quot;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录,end&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能2&quot;</span>, a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1 = mylog(fun1)</span><br><span class="line">fun2 = mylog(fun2)</span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line">fun2(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">日志记录,start</span></span><br><span class="line"><span class="string">使用功能1</span></span><br><span class="line"><span class="string">日志记录,end</span></span><br><span class="line"><span class="string">日志记录,start</span></span><br><span class="line"><span class="string">使用功能2 10 20 30</span></span><br><span class="line"><span class="string">日志记录,end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>装饰器解决日志问题（增加参数处理，可以装饰任意多个参数的函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mylog</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录,start&quot;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录,end&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mylog  </span><span class="comment"># 本质 fun1 = mylog(fun1)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mylog  </span><span class="comment"># 本质 fun2 = mylog(fun2)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能2&quot;</span>, a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line">fun2(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">日志记录,start</span></span><br><span class="line"><span class="string">使用功能1</span></span><br><span class="line"><span class="string">日志记录,end</span></span><br><span class="line"><span class="string">日志记录,start</span></span><br><span class="line"><span class="string">使用功能2 10 20 30</span></span><br><span class="line"><span class="string">日志记录,end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="多个装饰器"><a href="#多个装饰器" class="headerlink" title="多个装饰器"></a>多个装饰器</h3><p>有时候，我们需要多个装饰器修饰一个函数。比如：需要增加日志功能、增加执行效率测试功能。</p><p>装饰器函数的执行顺序是分为（被装饰函数）定义阶段和（被装饰函数）执行阶段的，装饰器函数在被装饰函数定义好后立即执行。</p><blockquote><p>在函数定义阶段：执行顺序是从最靠近函数的装饰器开始，自内而外的执行</p><p>在函数执行阶段：执行顺序由外而内，一层层执行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mylog</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;mylog start&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录开始&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;mylog end&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cost_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cost time start&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始计时&quot;</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;耗费时间：<span class="subst">&#123;end - start&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cost time start&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于 mylog(cost_time(fun2))</span></span><br><span class="line"><span class="meta">@mylog</span></span><br><span class="line"><span class="meta">@cost_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fun2,start&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fun2,end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun2()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">cost time start</span></span><br><span class="line"><span class="string">cost time start</span></span><br><span class="line"><span class="string">mylog start</span></span><br><span class="line"><span class="string">mylog end</span></span><br><span class="line"><span class="string">日志记录开始</span></span><br><span class="line"><span class="string">开始计时</span></span><br><span class="line"><span class="string">fun2,start</span></span><br><span class="line"><span class="string">fun2,end</span></span><br><span class="line"><span class="string">耗费时间：3.014333486557007</span></span><br><span class="line"><span class="string">日志记录结束</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mylog</span>(<span class="params"><span class="built_in">type</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">infunc</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;文件&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;文件中：日志记录&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;控制台：日志记录&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mylog(<span class="params"><span class="string">&quot;文件&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能2:&quot;</span>, a, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fun2(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">文件中：日志记录</span></span><br><span class="line"><span class="string">使用功能2: 100 200</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="wraps装饰器"><a href="#wraps装饰器" class="headerlink" title="wraps装饰器"></a>wraps装饰器</h3><p>一个函数不止有他的执行语句，还有着 <code>__name__</code> （函数名）， <code>__doc__</code>（说明文档）等属性，我们之前的例子会导致这些属性改变。</p><p><code>functool.wraps</code> 可以将原函数对象的指定属性赋值给包装函数对象，默认有module、name、doc，或者通过参数选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mylog</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;函数文档：&quot;</span>, func.__doc__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mylog    </span><span class="comment"># 等价于 fun2 = mylog(fun2)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;强大的功能2&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能2:&quot;</span>, a, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fun2(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数文档---&gt;&quot;</span>, fun2.__doc__)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">日志记录</span></span><br><span class="line"><span class="string">函数文档： 强大的功能2</span></span><br><span class="line"><span class="string">使用功能2: 100 200</span></span><br><span class="line"><span class="string">函数文档---&gt; 强大的功能2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器</h3><p>我们在面向对象学习时，学习过三种装饰器： <code>property</code> 、 <code>staticmethod</code> 、<code>classmethod</code> 。（详见Python入门的面向对象部分）</p><p><strong>property装饰器</strong></p><p><code>property</code> 装饰器用于类中的函数，使得我们可以像访问属性一样来获取一个函数的返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__salary = salary</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property                      </span><span class="comment"># 只能读 print(emp1.salary) 相当于属性的调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;薪资是：&quot;</span>, self.__salary)</span><br><span class="line">        <span class="keyword">return</span> self.__salary</span><br><span class="line"></span><br><span class="line"><span class="meta">    @salary.setter                 </span><span class="comment"># 修改使用这个函数 emp1.salary = 50000</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">salary</span>(<span class="params">self, salary</span>): </span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; salary &lt; <span class="number">100000</span>:</span><br><span class="line">            self.__salary = salary</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;薪资录入错误！只能在0-100000之间&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">emp1 = Employee(<span class="string">&quot;john&quot;</span>, <span class="number">20000</span>)</span><br><span class="line">emp1.salary = <span class="number">50000</span></span><br><span class="line"><span class="built_in">print</span>(emp1.salary)</span><br><span class="line"></span><br><span class="line">emp1.salary = <span class="number">100000000</span></span><br><span class="line"><span class="built_in">print</span>(emp1.salary)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">薪资是： 50000</span></span><br><span class="line"><span class="string">50000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">薪资录入错误！只能在0-100000之间</span></span><br><span class="line"><span class="string">薪资是： 50000</span></span><br><span class="line"><span class="string">50000</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>staticmethod装饰器</strong></p><p><code>staticmethod</code> 装饰器同样是用于类中的方法，这表示这个方法将会是一个静态方法，意味着该方法可以直接被调用无需实例化，但同样意味着它没有 <code>self</code> 参数，也无法访问实例化后的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school = <span class="string">&quot;HNU&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):  <span class="comment"># 静态方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(a, b, a + b))</span><br><span class="line">        <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student.add(<span class="number">30</span>, <span class="number">40</span>)</span><br></pre></td></tr></table></figure><p><strong>classmethod装饰器</strong></p><p><code>classmethod</code> 这个方法是一个类方法。该方法无需实例化，没有 <code>self</code> 参数。相对于 <code>staticmethod</code> 的区别在于它会接收一个指向类本身的 <code>cls</code> 参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school = <span class="string">&quot;HNU&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printSchool</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls.school)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student.printSchool()</span><br></pre></td></tr></table></figure><h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p>上面写的装饰器都是函数来完成的。我们用类也可以实现装饰器。</p><p>类能实现装饰器的功能， 是由于当我们调用一个对象时，实际上调用的是它的 <code>__call__</code> 方法。</p><p>调用对象， <code>__call__</code> 方法的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是Demo&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">demo Demo()</span><br><span class="line">demo()<span class="comment"># 直接调用对象，实质是调用了他的__ca11__()</span></span><br></pre></td></tr></table></figure><p>类装饰器的使用案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 类装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLogDecorator</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志记录&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyLogDecorator  </span><span class="comment"># fun2 = MyLogDecorator(fun2)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用功能2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fun2()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">日志记录</span></span><br><span class="line"><span class="string">使用功能2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="缓存装饰器和计时装饰器综合练习"><a href="#缓存装饰器和计时装饰器综合练习" class="headerlink" title="缓存装饰器和计时装饰器综合练习"></a>缓存装饰器和计时装饰器综合练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CacheDecorator</span>():</span><br><span class="line">    __cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 如果缓存中有对应的方法名，则直接返回对应的返回值</span></span><br><span class="line">        <span class="keyword">if</span> self.func.__name__ <span class="keyword">in</span> CacheDecorator.__cache:</span><br><span class="line">            <span class="keyword">return</span> CacheDecorator.__cache[self.func.__name__]</span><br><span class="line">        <span class="comment"># 如果缓存中没有对应的方法名，则进行计算，并将结果缓存</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = self.func(*args, **kwargs)</span><br><span class="line">            CacheDecorator.__cache[self.func.__name__] = result</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cost_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infunc</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;耗时：<span class="subst">&#123;end - start&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> infunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@cost_time</span></span><br><span class="line"><span class="meta">@CacheDecorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1_long_time</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;模拟耗时较长，每次执行返回结果都一样的情况&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start func1&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end func1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第一次执行&quot;</span>)</span><br><span class="line">    r1 = func1_long_time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第二次执行&quot;</span>)</span><br><span class="line">    r2 = func1_long_time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;打印结果：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r1)</span><br><span class="line">    <span class="built_in">print</span>(r2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第一次执行</span></span><br><span class="line"><span class="string">start func1</span></span><br><span class="line"><span class="string">end func1</span></span><br><span class="line"><span class="string">耗时：3.009289264678955</span></span><br><span class="line"><span class="string">第二次执行</span></span><br><span class="line"><span class="string">耗时：0.0</span></span><br><span class="line"><span class="string">打印结果：</span></span><br><span class="line"><span class="string">999</span></span><br><span class="line"><span class="string">999</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="生成器、迭代器、动态性"><a href="#生成器、迭代器、动态性" class="headerlink" title="生成器、迭代器、动态性"></a>生成器、迭代器、动态性</h2><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p><img src="4、函数式编程和核心特性.assets/image-20240107222700567.png" alt="image-20240107222700567"></p><h4 id="生成器定义"><a href="#生成器定义" class="headerlink" title="生成器定义"></a>生成器定义</h4><p>在Python中，一边循环一边计算的机制，称为生成器：generator</p><h4 id="为什么要有生成器"><a href="#为什么要有生成器" class="headerlink" title="为什么要有生成器"></a>为什么要有生成器</h4><p>列表所有数据都在内存中，如果有海量数据的话将会非常耗内存。</p><p>如：仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p>如果列表元素按照某种算法推算出来，那我们就可以在循环的过程中不断推算出后续的元素，这样就不必创建完整的list，从而节省大</p><p>量的空间。</p><p><strong>简单说：</strong></p><p>时间换空间！想要得到庞大的数据，又想让它占用空间少，那就用生成器！</p><p>延迟计算！需要的时候，再计算出数据！</p><h4 id="创建生成器的方式一（生成器表达式）"><a href="#创建生成器的方式一（生成器表达式）" class="headerlink" title="创建生成器的方式一（生成器表达式）"></a>创建生成器的方式一（生成器表达式）</h4><p>生成器表达式很简单，只要把一个列表推导式的 <code>[]</code> 改成 <code>()</code> ，就创建了一个生成器(generator)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line"><span class="built_in">print</span>(g.__next__())</span><br><span class="line"><span class="built_in">print</span>(g.__next__())</span><br><span class="line"><span class="built_in">print</span>(g.__next__())</span><br><span class="line"><span class="built_in">print</span>(g.__next__())</span><br><span class="line"><span class="built_in">print</span>(g.__next__())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"><span class="string">&lt;generator object &lt;genexpr&gt; at 0x000002AD5900C430&gt;</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">16</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>创建 L 和 g 的区别仅在于最外层的 <code>[]</code> 和 <code>()</code> ， L 是一个list，而 g 是一个generator。</p><h4 id="创建生成器的方式二（生成器函数）"><a href="#创建生成器的方式二（生成器函数）" class="headerlink" title="创建生成器的方式二（生成器函数）"></a>创建生成器的方式二（生成器函数）</h4><blockquote><p>如果一个函数中包含 <code>yield</code> 关键字，那么这个函数就不再是一个普通函数，调用函数就是创建了一个生成器（generator）对象。</p><p>生成器函数：其实就是利用关键字 <code>yield</code> 一次性返回一个结果，阻塞，重新开始</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.函数有了yield之后，调用它，就会生成一个生成器</span></span><br><span class="line"><span class="string">2.yield的作用：程序挂起，返回相应的值。下次从下一个语句开始执行。</span></span><br><span class="line"><span class="string">3.return在生成器中代表生成器终止，直接报错：StopIteration</span></span><br><span class="line"><span class="string">4.next方法作用：唤醒并继续执行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;i:<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;done&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = demo()</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    a.__next__()</span><br><span class="line">    a.__next__()</span><br><span class="line">    a.__next__()</span><br><span class="line">    a.__next__()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;D:\2022百战Python\函数式编程和核心特性\生成器、迭代器、动态性\生成器函数的创建_yield.py&quot;, line 27, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    a.__next__()</span></span><br><span class="line"><span class="string">StopIteration: done</span></span><br><span class="line"><span class="string">&lt;generator object demo at 0x000001B4F30DC430&gt;</span></span><br><span class="line"><span class="string">start</span></span><br><span class="line"><span class="string">i:0</span></span><br><span class="line"><span class="string">i:1</span></span><br><span class="line"><span class="string">i:2</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="生成器函数的工作原理"><a href="#生成器函数的工作原理" class="headerlink" title="生成器函数的工作原理"></a>生成器函数的工作原理</h4><p>原理是这样的：</p><ol><li>生成器函数返回一个迭代器，for循环对这个迭代器不断调用 <code>__next__()</code> 函数，不断运行到下一个<code>yield</code> 语句，一次一次取得每一个返回值，直到没有 <code>yield</code> 语句为止，最终引发 <code>StopIteration</code> 异常。</li><li><code>yield</code> 相当于 <code>return</code> 返回一个值，并且记住这个返回的位置，下次迭代时，代码从 <code>yield</code> 的<strong>下一条语句(不是下一行)</strong>开始执行。</li><li><code>send()</code> 和 <code>next()</code> 一样，都能让生成器继续往下走一步（下次遇到 <code>yield</code> 停），但 <code>send()</code> 能传一个值，这个值作为 <code>yield</code> 表达式整体的结果</li></ol><blockquote><p>生成器推导式底层原理也是这样的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># send的作用是唤醒并继续执行，发送一个消息到生成器内部</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">        temp = <span class="keyword">yield</span> i</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;temp:<span class="subst">&#123;temp&#125;</span>&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = foo()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))  <span class="comment"># g.__next__()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(g.send(<span class="number">100</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">start</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">**********</span></span><br><span class="line"><span class="string">temp:100</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">temp:None</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>什么是生成器？</p><blockquote><p>生成器仅仅保存了一套生成数值的算法，并且没有让这个算法现在就开始执行，而是我什么时候调它，它什么时候开始</p><p>计算一个新的值，并给你返回。</p></blockquote><p>生成器特点：</p><blockquote><ol><li>生成器函数生成一系列结果。通过 <code>yield</code> 关键字返回一个值后，还能从其退出的地方继续运行，因此可以随时间产生一系列的值。</li><li>生成器和迭代是密切相关的，<strong>迭代器都有一个</strong> <code>__next__()</code> <strong>成员方法，</strong>这个方法要么返回迭代的下一项，要么引起异常结束迭代。</li><li>生成器是一个特殊的程序，可以被用作控制循环的迭代行为，Python中生成器是迭代器的一种，使用<code>yield</code>返回值函数，每次调用<code>yield</code>会暂停，而可以使用 <code>next()</code> 函数和<code>send()</code> 函数恢复生成器。</li><li>生成器看起来像是一个函数，但是表现得却像是迭代器</li></ol></blockquote><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p><img src="4、函数式编程和核心特性.assets/image-20240109000525212.png" alt="image-20240109000525212"></p><ol><li>迭代是Python最强大的功能之一，是访问集合元素的一种方式。</li><li>迭代器是一个可以<strong>记住遍历的位置</strong>的对象。</li><li>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。</li><li>迭代器只能往前不会后退。</li><li>迭代器有两个基本的方法： <code>iter()</code> 和 <code>next()</code></li></ol><h4 id="可迭代对象和迭代器区别"><a href="#可迭代对象和迭代器区别" class="headerlink" title="可迭代对象和迭代器区别"></a>可迭代对象和迭代器区别</h4><ol><li>一个实现了 <code>iter</code> 方法的对象，称为”可迭代对象Ieratable”</li><li>一个实现 了<code>next</code> 方法并且是可迭代的对象，称为”迭代器Iterator”</li></ol><blockquote><p>即：实现了 <code>iter</code> 方法和 <code>next</code> 方法的对象就是迭代器。</p><p>:warning:生成器都是 <code>Iterator</code> 对象，但 <code>list</code> 、 <code>dict</code> 、 <code>str</code> 虽然是 <code>Iterable（可迭代对象）</code> ，却不是 <code>Iterator（迭代器）</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># python3.6之前不加.abc，之后的加</span></span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterator</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">isinstance</span>([], Iterable)</span><br><span class="line">a = <span class="built_in">isinstance</span>([], Iterator)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><code>list</code> 、 <code>dict</code> 、 <code>str</code> 等 <code>Iterable</code> 变成 <code>Iterator</code> , 可以使用 <code>iter()</code> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="built_in">iter</span>([]), Iterator)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="built_in">iter</span>(<span class="string">&#x27;abc&#x27;</span>), Iterator)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></blockquote><p><img src="4、函数式编程和核心特性.assets/image-20240109000916190.png" alt="image-20240109000916190"></p><p>为什么 <code>list</code> 、 <code>dict</code> 、 <code>str</code> 等数据类型不是 <code>Iterator</code> ？</p><p>Python的 <code>Iterator</code> 对象表示的是一个<strong>数据流</strong>。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过 <code>next()</code> 函数实现按需计算下一个数据，所以 <code>Iterator</code> 的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p><p>所以，生成器一定是迭代器。</p><p><code>Iterator</code> 甚至可以表示一个无限大的数据流，例如全体自然数。而使用<code>list</code>是永远不可能存储全体自然数的。</p><h4 id="for循环的本质"><a href="#for循环的本质" class="headerlink" title="for循环的本质"></a>for循环的本质</h4><p>Python3的 for 循环本质上就是通过不断调用 <code>next()</code> 函数实现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>本质是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先获得Iterator对象:</span></span><br><span class="line">it = <span class="built_in">iter</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># 循环:</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># 获得下一个值:</span></span><br><span class="line">x = <span class="built_in">next</span>(it)</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    <span class="comment"># 遇到StopIteration就退出循环</span></span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="创建一个迭代器"><a href="#创建一个迭代器" class="headerlink" title="创建一个迭代器"></a>创建一个迭代器</h4><p>一个类作为一个迭代器使用需要在类中实现两个方法 <code>__iter__()</code> 与<code>__next__()</code></p><ol><li><code>__iter__()</code> 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 <code>__next__()</code> 方法并通过<code>StopIteration</code> 异常标识迭代的完成。</li><li><code>__next__()</code> 方法会返回下一个迭代器对象。 </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 创建一个依次返回10,20,30,...这样数字的迭代器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNumbers</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        self.num = <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.num &lt; <span class="number">40</span>:</span><br><span class="line">            x = self.num</span><br><span class="line">            self.num += <span class="number">10</span></span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myclass = MyNumbers()</span><br><span class="line">myiter = <span class="built_in">iter</span>(myclass)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">20</span></span><br><span class="line"><span class="string">30</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;D:\2022百战Python\函数式编程和核心特性\生成器、迭代器、动态性\创建一个迭代器.py&quot;, line 22, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(next(myiter))</span></span><br><span class="line"><span class="string">  File &quot;D:\2022百战Python\函数式编程和核心特性\生成器、迭代器、动态性\创建一个迭代器.py&quot;, line 14, in __next__</span></span><br><span class="line"><span class="string">    raise StopIteration</span></span><br><span class="line"><span class="string">StopIteration</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="动态添加属性和方法"><a href="#动态添加属性和方法" class="headerlink" title="动态添加属性和方法"></a>动态添加属性和方法</h3><p><img src="4、函数式编程和核心特性.assets/image-20240109002706032.png" alt="image-20240109002706032"></p><p>动态编程语言是高级程序设计语言的一个类别，在计算机科学领域已被广泛应用。</p><p>它是指在运行时可以改变其结构的语言 ：例如新的函数、 对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。</p><h4 id="给对象动态的添加属性和方法"><a href="#给对象动态的添加属性和方法" class="headerlink" title="给对象动态的添加属性和方法"></a>给对象动态的添加属性和方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">&quot;jhon&quot;</span>, <span class="number">20</span>)</span><br><span class="line">p2 = Person(<span class="string">&quot;parker&quot;</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态给对象添加属性</span></span><br><span class="line">p1.score = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(p1.score)</span><br><span class="line"><span class="comment"># 只给p1添加了属性，p2没有</span></span><br><span class="line"><span class="comment"># print(p2.score)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态给对象添加方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>, running&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># types.MethodType(run,p1)则是告诉解释器，self指的就是p1</span></span><br><span class="line">p1.run = types.MethodType(run, p1)</span><br><span class="line">p1.run()</span><br></pre></td></tr></table></figure><h4 id="type-MethonType的使用"><a href="#type-MethonType的使用" class="headerlink" title="type.MethonType的使用"></a>type.MethonType的使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># types.MethodType(run,p1)则是告诉解释器，self指的就是p1</span></span><br></pre></td></tr></table></figure><h4 id="给类动态的添加属性、静态方法以及类方法"><a href="#给类动态的添加属性、静态方法以及类方法" class="headerlink" title="给类动态的添加属性、静态方法以及类方法"></a>给类动态的添加属性、静态方法以及类方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">staticfunc</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---static method---&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态给类添加静态方法</span></span><br><span class="line">Person.staticfunc = staticfunc</span><br><span class="line">Person.staticfunc()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clsfunc</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---cls method---&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态给类添加类方法</span></span><br><span class="line">Person.clsfunc = clsfunc</span><br><span class="line">Person.clsfunc()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态给类添加属性</span></span><br><span class="line">Person.sorce = <span class="number">100</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="slots-的作用"><a href="#slots-的作用" class="headerlink" title="__slots__ 的作用"></a><code>__slots__</code> 的作用</h4><ol><li><code>__slots__</code> 对==动态添加成员变量、成员方法有限制==。<strong>对动态添加类属性、类方法没有限制</strong>。 </li><li><code>__slots__</code> 只对本类有限制，不限制子类。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    __slots__ = &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;eat!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p1 = Person(<span class="string">&quot;jhon&quot;</span>, <span class="number">21</span>)</span><br><span class="line">    <span class="comment"># p1.gender = &quot;man&quot;</span></span><br><span class="line">    <span class="comment"># AttributeError: &#x27;Person&#x27; object has no attribute &#x27;gender&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="正则表达式概念"><a href="#正则表达式概念" class="headerlink" title="正则表达式概念"></a>正则表达式概念</h3><p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑（可以用来做检索，截取或者替换操作）。</p><p>作用</p><ol><li>给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）。</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分。</li><li>还可以对目标字符串进行替换操作。</li></ol><p>基本函数</p><p>Python语言通过标准库中的<code>re</code>模块支持正则表达式。<code>re</code>模块提供了一些根据正则表达式进行查找、替换、分隔字符串的函数，</p><p>这些函数使用一个正则表达式作为第一个参数。</p><div class="table-container"><table><thead><tr><th><strong>函数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>match(pattern,string,flags=0)</code></td><td>根据pattern从string的头部开始匹配字符串，只返回第1次匹配成功的对象；否则，返回None</td></tr><tr><td><code>findall(pattern,string,flags=0)</code></td><td>根据pattern在string中匹配字符串。如果匹配成功，返回包含匹配结果的列表；否则，返回空列表。当pattern中有分组时，返回包含多个元组的列表，每个元组对应1个分组。flags表示规则选项，规则选项用于辅助匹配。</td></tr><tr><td><code>sub(pattern,repl,string,count=0)</code></td><td>根据指定的正则表达式，替换源字符串中的子串。pattern是一个正则表达式，repl是用于替换的字符串，string是源字符串。如果count等于0，则返回string中匹配的所有结果；如果count大于0，则返回前count个匹配结果</td></tr><tr><td><code>subn(pattern,repl,string,count=0)</code></td><td>作用和sub()相同，返回一个二元的元组。第1个元素是替换结果，第2个元素是替换的次数</td></tr><tr><td><code>search(pattern,string,flags=0)</code></td><td>根据pattern在string中匹配字符串，只返回第1次匹配成功的对象。如果匹配失败，返回None</td></tr><tr><td><code>compile(pattern,flags=0)</code></td><td>编译正则表达式pattern，返回1个pattern的对象</td></tr><tr><td><code>split(pattern,string,maxsplit=0)</code></td><td>根据pattern分隔string，maxsplit表示最大的分隔数</td></tr><tr><td><code>escape(pattern)</code></td><td>匹配字符串中的特殊字符，如*、+、?等</td></tr></tbody></table></div><h3 id="match函数的使用"><a href="#match函数的使用" class="headerlink" title="match函数的使用"></a>match函数的使用</h3><p><code>re.match</code> 尝试从字符串的<strong>起始位置匹配一个模式</strong>，如果不是起始位置匹配成功的话，match()就返回None。语法格式如下：</p><p><code>re.match(pattern, string, flags=0)</code></p><div class="table-container"><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。如下表列出正则表达式修饰符 - 可选标志</td></tr></tbody></table></div><p><strong>正则表达式修饰符</strong></p><div class="table-container"><table><thead><tr><th><strong>修饰符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>re.I</td><td>使匹配对大小写不敏感</td></tr><tr><td>re.L</td><td>做本地化识别（locale-aware）匹配</td></tr><tr><td>re.M</td><td>多行匹配，影响 ^ 和 $</td></tr><tr><td>re.S</td><td>使 . 匹配包括换行在内的所有字符</td></tr><tr><td>re.U</td><td>根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B</td></tr><tr><td>re.X</td><td>该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td></tr></tbody></table></div><p>意义：</p><ol><li><code>re.match</code>是用来进行正则匹配检查的方法，如果字符串开头的0个或多个字符匹配正则表达式模式，则返回相应的match对象。如果字符串不匹配模式，返回None（注意不是空字符串””）</li><li>匹配对象Match Object具有<code>group()</code>方法， 用来返回字符串的匹配部分。具有<code>span()</code>方法，返回匹配字符串的位置（元组存储开始，结束位置）。具有<code>start()</code>，<code>end()</code>方法，存储匹配数据的开始和结束位置。（也可以通过对象的dir(对象查看对象的方法)）</li></ol><blockquote><p>:warning:<strong>注意：</strong></p><p>如果想在目标字符串的==任意位置查找==，需要使用search</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义正则表达式</span></span><br><span class="line">pattern = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 目标字符串</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment"># match函数的使用</span></span><br><span class="line">result = re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(result))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;匹配内容：&quot;</span>, result.group())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;匹配字符串的位置: &quot;</span>, result.span())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 5), match=&#x27;hello&#x27;&gt;</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__class_getitem__&#x27;, &#x27;__copy__&#x27;, &#x27;__deepcopy__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__getitem__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;end&#x27;, &#x27;endpos&#x27;, &#x27;expand&#x27;, &#x27;group&#x27;, &#x27;groupdict&#x27;, &#x27;groups&#x27;, &#x27;lastgroup&#x27;, &#x27;lastindex&#x27;, &#x27;pos&#x27;, &#x27;re&#x27;, &#x27;regs&#x27;, &#x27;span&#x27;, &#x27;start&#x27;, &#x27;string&#x27;]</span></span><br><span class="line"><span class="string">匹配内容： hello</span></span><br><span class="line"><span class="string">匹配字符串的位置:  (0, 5)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义正则表达式</span></span><br><span class="line">pattern = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 目标字符串</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Hello world&quot;</span></span><br><span class="line"><span class="comment"># match函数的使用</span></span><br><span class="line"><span class="comment"># 忽略大小写</span></span><br><span class="line">result = re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>, re.I)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="常用匹配符"><a href="#常用匹配符" class="headerlink" title="常用匹配符"></a>常用匹配符</h3><p>一个正则表达式是由字母、数字和特殊字符（括号、星号、问号等）组成。正则表达式中有许多特殊的字符，这些特殊字符是构成正则表达式的要素。</p><div class="table-container"><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配任何一个字符（除了\n）</td></tr><tr><td>[]</td><td>匹配列表中的字符</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线，即a-z,A-Z,0-9,_</td></tr><tr><td>\W</td><td>匹配不是字母、数字、下划线</td></tr><tr><td>\s</td><td>匹配空白字符，即空格（\n,\t）</td></tr><tr><td>\S</td><td>匹配不是空白的字符</td></tr><tr><td>\d</td><td>匹配数字，即0-9</td></tr><tr><td>\D</td><td>匹配非数字的字符</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用匹配符.的使用：匹配任意一个字符（除了\n）</span></span><br><span class="line">pattern = <span class="string">&quot;.&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;9&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;a&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;B&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 常用匹配符\d的使用：匹配数字</span></span><br><span class="line">pattern = <span class="string">&quot;\d&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;a&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;B&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 常用匹配符\D的使用：匹配非数字</span></span><br><span class="line">pattern = <span class="string">&quot;\D&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;B&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 常用匹配符\s的使用：匹配空白字符,即空格（\n,\t）</span></span><br><span class="line">pattern = <span class="string">&quot;\s&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;\t&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 常用匹配符\S的使用：匹配不是空白的字符</span></span><br><span class="line">pattern = <span class="string">&quot;\S&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;B&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 常用匹配符\w的使用：匹配字母、数字、下划线</span></span><br><span class="line">pattern = <span class="string">&quot;\w&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;8&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 常用匹配符\W的使用：匹配不是字母、数字、下划线</span></span><br><span class="line">pattern = <span class="string">&quot;\W&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;#&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;@&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># []匹配列表中的字符</span></span><br><span class="line">pattern = <span class="string">&quot;[12345]&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;2&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;3&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 匹配手机号码</span></span><br><span class="line">s = <span class="string">&quot;13456788789&quot;</span></span><br><span class="line">pattern = <span class="string">&quot;1[35789]\d\d\d\d\d\d\d\d\d&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;匹配手机号码：&quot;</span>, re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;9&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;0&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;a&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;\n&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;a&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;a&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;#&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;1&#x27;&gt;</span></span><br><span class="line"><span class="string">匹配手机号码： &lt;re.Match object; span=(0, 11), match=&#x27;13456788789&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>其中，匹配符“[]”可以指定一个范围，例如：“[ok]”将匹配包含“o”或“k”的字符。同时“[]”可以与\w、\s、\d等标记等价。例如，<code>[0-9a-zAZ]</code>等价于\w，<code>[ ^0-9 ]</code> 等价于\D。</p><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>从上面示例中可以看到如果要匹配手机号码，需要形如<code>\d\d\d\d\d\d\d\d\d\d\d</code>这样的正则表达式。其中表现了11次<code>\d</code>，表达方式烦琐。正则表达式作为一门小型的语言，还提供了对表达式的一部分进行重复处理的功能。例如，<code>*</code>可以对正则表达式的某个部分重复匹配多次。这种匹配符号称为限定符。</p><div class="table-container"><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配零次或多次</td></tr><tr><td>+</td><td>匹配一次或多次</td></tr><tr><td>?</td><td>匹配一次或零次</td></tr><tr><td>{m}</td><td>重复m次</td></tr><tr><td>{m,n}</td><td>重复m到n次，其中n可以省略，表示m到任意次</td></tr><tr><td>{m,}</td><td>重复至少m次</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限定符 *、+、? 的使用</span></span><br><span class="line"><span class="comment"># * 匹配0次或多次</span></span><br><span class="line">partten = <span class="string">&quot;\d*&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123abc&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;abc&quot;   # re.Match object; span=(0, 0), match=&#x27;&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># + 匹配1次或多次</span></span><br><span class="line">partten = <span class="string">&quot;\d+&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123abc&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;abc&quot;   # None</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># ? 匹配1次或0次</span></span><br><span class="line">partten = <span class="string">&quot;\d?&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123abc&quot;</span></span><br><span class="line"><span class="comment"># str = &quot;abc&quot;   # re.Match object; span=(0, 0), match=&#x27;&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># &#123;m&#125; 重复m次</span></span><br><span class="line">partten = <span class="string">&quot;\d&#123;3&#125;&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;1234abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># &#123;m,n&#125; 重复m到n次</span></span><br><span class="line">partten = <span class="string">&quot;\d&#123;3,5&#125;&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;1234abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># &#123;m,&#125; 重复至少m次</span></span><br><span class="line">partten = <span class="string">&quot;\d&#123;3,&#125;&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123456abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 3), match=&#x27;123&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 3), match=&#x27;123&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 1), match=&#x27;1&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 3), match=&#x27;123&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 4), match=&#x27;1234&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 6), match=&#x27;123456&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="限定符使用实例"><a href="#限定符使用实例" class="headerlink" title="限定符使用实例"></a>限定符使用实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配出一个字符串首字母为大写字符，后边都是小写字符，这些小写字母可有可无</span></span><br><span class="line">partten = <span class="string">&quot;[A-Z][a-z]*&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 匹配出有效的变量名</span></span><br><span class="line"><span class="comment"># partten = &quot;[A-Za-z_][A-Za-z_0-9]*&quot;</span></span><br><span class="line">partten = <span class="string">&quot;[A-Za-z_]\w*&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Abc_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 匹配出1-99之间的数字</span></span><br><span class="line">partten = <span class="string">&quot;[1-9]\d?&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"><span class="comment"># 匹配出一个随机密码8-20位以内 (大写字母 小写字母 下划线 数字)</span></span><br><span class="line">partten = <span class="string">&quot;\w&#123;8,20&#125;&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123abc_12D&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, <span class="built_in">str</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 3), match=&#x27;Abc&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 4), match=&#x27;Abc_&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 2), match=&#x27;12&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 10), match=&#x27;123abc_12D&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="原生字符串"><a href="#原生字符串" class="headerlink" title="原生字符串"></a>原生字符串</h3><p>和大多数编程语言相同，正则表达式里使用<code>\</code>作为转义字符，这就可以能造成反斜杠困扰。</p><p>假如你需要匹配文本中的字符<code>\</code>，那么使用编程语言表示的正则表达式里将需要4个反斜杠<code>\</code>：前面两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。</p><p>Python里的原生字符串很好地解决了这个问题，使用Python的r前缀。例如匹配一个数字的<code>&quot;\d&quot;</code>可以写成<code>r&quot;\d&quot;</code>。有了原生字符串，再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反斜杠作为转义</span></span><br><span class="line">s = <span class="string">&quot;\n123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">s = <span class="string">&quot;\\n123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 使用原生字符串 r</span></span><br><span class="line">s = <span class="string">r&quot;\n123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 在正则表达式中反斜杠作为转义</span></span><br><span class="line">s = <span class="string">&quot;\n123&quot;</span></span><br><span class="line">partten = <span class="string">&quot;\\n\d&#123;3&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, s))</span><br><span class="line"><span class="comment"># 目标字符串多个反斜杠</span></span><br><span class="line">s = <span class="string">&quot;\\n123&quot;</span></span><br><span class="line">partten = <span class="string">&quot;\\\\n\d&#123;3&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, s))</span><br><span class="line"><span class="comment"># 使用原生字符串 r</span></span><br><span class="line">s = <span class="string">&quot;\\\\n123&quot;</span></span><br><span class="line">partten = <span class="string">r&quot;\\\\n\d&#123;3&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(partten, s))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">\n123</span></span><br><span class="line"><span class="string">\n123</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 4), match=&#x27;\n123&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 5), match=&#x27;\\n123&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 6), match=&#x27;\\\\n123&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="边界字符串"><a href="#边界字符串" class="headerlink" title="边界字符串"></a>边界字符串</h3><div class="table-container"><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串开头</td></tr><tr><td>$</td><td>匹配字符串结尾</td></tr><tr><td>\b</td><td>匹配一个单词的边界</td></tr><tr><td>\B</td><td>匹配非单词的边界</td></tr></tbody></table></div><blockquote><p>:warning:<strong>注意：</strong></p><p><code>^</code>与<code>[^m]</code> 中的<code>^</code>的含义并不相同，后者<code>^</code>表示“除了….”的意思</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配字符串结尾 $</span></span><br><span class="line"><span class="comment"># 匹配一个5-10为的qq邮箱</span></span><br><span class="line">pattern = <span class="string">&quot;[1-9]\d&#123;4,9&#125;@qq.com$&quot;</span></span><br><span class="line">qq = <span class="string">&quot;12345@qq.com&quot;</span></span><br><span class="line">qq = <span class="string">&quot;12345@qq.com.cn&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, qq))</span><br><span class="line"><span class="comment"># 匹配字符串开头 ^</span></span><br><span class="line">pattern = <span class="string">&quot;^hello.*&quot;</span></span><br><span class="line">s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"><span class="comment"># 匹配单词边界 \b</span></span><br><span class="line"><span class="comment"># 左边界</span></span><br><span class="line">pattern = <span class="string">r&quot;.*\bqwe&quot;</span></span><br><span class="line">s = <span class="string">&quot;abc qweAB&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"><span class="comment"># 右边界</span></span><br><span class="line">pattern = <span class="string">r&quot;.*ing\b&quot;</span></span><br><span class="line">s = <span class="string">&quot;123 runing&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"><span class="comment"># 匹配非单词边界 \B</span></span><br><span class="line"><span class="comment"># 左边界</span></span><br><span class="line">pattern = <span class="string">r&quot;.*\Bqwe&quot;</span></span><br><span class="line">s = <span class="string">&quot;abc aqweBC&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"><span class="comment"># 右边界</span></span><br><span class="line">pattern = <span class="string">r&quot;.*ing\B&quot;</span></span><br><span class="line">s = <span class="string">&quot;123 runingA&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 11), match=&#x27;hello world&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 7), match=&#x27;abc qwe&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 10), match=&#x27;123 runing&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 8), match=&#x27;abc aqwe&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 10), match=&#x27;123 runing&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="search函数"><a href="#search函数" class="headerlink" title="search函数"></a>search函数</h3><p>search在一个字符串中搜索满足文本模式的字符串。语法格式如下：</p><p><code>re.search(pattern, string, flags=0)</code></p><p>函数参数与match类似</p><div class="table-container"><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。如下表列出正则表达式修饰符 - 可选标志</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义正则表达式</span></span><br><span class="line">pattern = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 目标字符串</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment"># search函数的使用</span></span><br><span class="line">result = re.search(pattern, <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;匹配结果：&quot;</span>, result.group())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 5), match=&#x27;hello&#x27;&gt;</span></span><br><span class="line"><span class="string">匹配结果： hello</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="match和search的区别"><a href="#match和search的区别" class="headerlink" title="match和search的区别"></a>match和search的区别</h4><p><code>re.match</code>只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而<code>re.search</code>匹配整个字符串，直到找到一个匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义正则表达式</span></span><br><span class="line">pattern = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 目标字符串</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Hello world, hello Python&quot;</span></span><br><span class="line"><span class="comment"># search函数的使用</span></span><br><span class="line">result = re.search(pattern, <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;search:&quot;</span>, result)</span><br><span class="line">r = re.<span class="keyword">match</span>(pattern, <span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;match:&quot;</span>, r)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">search: &lt;re.Match object; span=(13, 18), match=&#x27;hello&#x27;&gt;</span></span><br><span class="line"><span class="string">match: None</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="择一匹配（-）的使用"><a href="#择一匹配（-）的使用" class="headerlink" title="择一匹配（|）的使用"></a>择一匹配（|）的使用</h3><p>search方法搜索一个字符串，要想搜索多个字符串，如搜索aa、bb和cc，最简单的方法是在文本模式字符串中使用择一匹配符号<code>|</code>。择一匹配符号和<strong>逻辑或</strong>类似，只要满足任何一个，就算匹配成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 择一匹配符号（|）的使用</span></span><br><span class="line">pattern = <span class="string">&quot;aa|bb|cc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="string">&quot;aa&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="string">&quot;bb&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, <span class="string">&quot;cc&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(re.search(pattern, <span class="string">&quot;where is bb&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配0-100之间所有的数字</span></span><br><span class="line">s = <span class="string">&quot;0&quot;</span></span><br><span class="line">s = <span class="string">&quot;9&quot;</span></span><br><span class="line">s = <span class="string">&quot;91&quot;</span></span><br><span class="line">s = <span class="string">&quot;100&quot;</span></span><br><span class="line">s = <span class="string">&quot;101&quot;</span></span><br><span class="line">s = <span class="string">&quot;1000&quot;</span></span><br><span class="line">pattern = <span class="string">&quot;[1-9]?/d$|100$&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 2), match=&#x27;aa&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 2), match=&#x27;bb&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 2), match=&#x27;cc&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(9, 11), match=&#x27;bb&#x27;&gt;</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>如果待匹配的字符串中，某些字符可以有多个选择，就需要使用字符集<code>[]</code>，也就是一对中括号括起来的字符串。例如，<code>[xyz]</code>表示x、y、z三个字符可以取其中任何一个，相当于<code>x|y|z</code>，所以对单个字符使用或关系时，字符集和择一匹配符的效果是一样的。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">&#x27;[xyz]&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)  <span class="comment"># 匹配成功</span></span><br><span class="line"><span class="built_in">print</span>(m.group())</span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">&#x27;x|y|z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)  <span class="comment"># 匹配成功</span></span><br><span class="line"><span class="built_in">print</span>(m.group())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符集（[]）和择一匹配符(|)的用法，及它们的差异</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以第1个字母是a或者b，第2个字母是c或者d，如ac、bc、ad、bd</span></span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">&#x27;[ab][cd]&#x27;</span>, <span class="string">&#x27;aceg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 匹配以ab开头，第3个字母是c或者d，如abc、abd</span></span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">&#x27;ab[cd]&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 匹配ab或者cd</span></span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">&#x27;ab|cd&#x27;</span>, <span class="string">&#x27;cd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>如果一个模式字符串中有用一对圆括号括起来的部分，那么这部分就会作为一组，可以通过group方法的参数获取指定的组匹配的字</p><p>符串。当然，如果模式字符串中没有任何用圆括号括起来的部分，那么就不会对待匹配的字符串进行分组。</p><div class="table-container"><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>(ab)</td><td>将括号中的字符作为一个分组</td></tr><tr><td>\num</td><td>引用分组num匹配到的字符串</td></tr><tr><td>(?p<name>)</td><td>分别起组名</td></tr><tr><td>(?p=name)</td><td>引用别名为name分组匹配到的字符串</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配座机号码  区号&#123;3，4&#125;-电话号码&#123;5，8&#125;</span></span><br><span class="line">pattern = <span class="string">&quot;/d&#123;3,4&#125;-[1-9]/d&#123;4,7&#125;$&quot;</span></span><br><span class="line">s = <span class="string">&quot;010-1234567&quot;</span></span><br><span class="line">result = re.<span class="keyword">match</span>(pattern, s)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用分组</span></span><br><span class="line">pattern = <span class="string">r&quot;(\d&#123;3,4&#125;)-([1-9]\d&#123;4,7&#125;$)&quot;</span></span><br><span class="line">s = <span class="string">&quot;010-1234567&quot;</span></span><br><span class="line">result = re.<span class="keyword">match</span>(pattern, s)</span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取第一个分组结果：&quot;</span>, result.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取第二个分组结果：&quot;</span>, result.group(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用groups(): &quot;</span>, result.groups())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取第一个分组结果：&quot;</span>, result.groups()[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取第二个分组结果：&quot;</span>, result.groups()[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># \num的使用</span></span><br><span class="line">s = <span class="string">&quot;&lt;html&gt;&lt;head&gt;分组的使用&lt;/head&gt;&lt;/html&gt;&quot;</span></span><br><span class="line">s = <span class="string">&quot;&lt;html&gt;&lt;head&gt;分组的使用&lt;/body&gt;&lt;/h1&gt;&quot;</span></span><br><span class="line">pattern = <span class="string">r&quot;&lt;(.+)&gt;&lt;(.+)&gt;.+&lt;/\2&gt;&lt;/\1&gt;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"><span class="comment"># (?P&lt;别名&gt;)</span></span><br><span class="line"><span class="comment"># 引用 (?P=别名)</span></span><br><span class="line">s = <span class="string">&quot;&lt;html&gt;&lt;head&gt;分组的使用&lt;/head&gt;&lt;/html&gt;&quot;</span></span><br><span class="line">pattern = <span class="string">r&quot;&lt;(?P&lt;k1&gt;.+)&gt;&lt;(?P&lt;k2&gt;.+)&gt;.+&lt;/(?P=k2)&gt;&lt;/(?P=k1)&gt;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">010-1234567</span></span><br><span class="line"><span class="string">获取第一个分组结果： 010</span></span><br><span class="line"><span class="string">获取第二个分组结果： 1234567</span></span><br><span class="line"><span class="string">使用groups():  (&#x27;010&#x27;, &#x27;1234567&#x27;)</span></span><br><span class="line"><span class="string">获取第一个分组结果： 010</span></span><br><span class="line"><span class="string">获取第二个分组结果： 1234567</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(0, 31), match=&#x27;&lt;html&gt;&lt;head&gt;分组的使用&lt;/head&gt;&lt;/html&gt;&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>使用分组要了解如下几点：</p><ol><li>只有圆括号括起来的部分才算一组，如果模式字符串中既有圆括号括起来的部分，也有没有被圆括号括起来的部分，那么只会将被圆括号括起来的部分算作一组，其它的部分忽略。</li><li>用<code>group</code>方法获取指定组的值时，组从1开始，也就是说，<code>group(1)</code>获取第1组的值，<code>group(2)</code>获取第2组的值，以此类推。</li><li><code>groups</code>方法用于获取所有组的值，以<strong>元组</strong>形式返回。所以除了使用group(1)获取第1组的值外，还可以使用<code>groups()[0]</code>获取第1组的值。<code>groups()[1]</code>获取第2组以及其它组的值的方式类似。</li></ol><h3 id="re模块中其他常用的函数"><a href="#re模块中其他常用的函数" class="headerlink" title="re模块中其他常用的函数"></a>re模块中其他常用的函数</h3><h4 id="sub和subn搜索与替换"><a href="#sub和subn搜索与替换" class="headerlink" title="sub和subn搜索与替换"></a>sub和subn搜索与替换</h4><p>sub函数和subn函数用于实现搜索和替换功能。这两个函数的功能几乎完全相同，都是将某个字符串中所有匹配正则表达式的部分替</p><p>换成其他字符串。用来替换的部分可能是一个字符串，也可以是一个函数，该函数返回一个用来替换的字符串。<strong>sub函数返回替换后</strong></p><p><strong>的结果，subn函数返回一个元组，元组的第1个元素是替换后的结果</strong>，第2个元素是替换的总数。语法格式如下：</p><p><code>re.sub(pattern, repl, string, count=0,flags=0)</code></p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>repl</td><td>替换的字符串，也可以是一个函数</td></tr><tr><td>string</td><td>要被查找替换的原始字符串</td></tr><tr><td>count</td><td>模式匹配后替换的最大次数，默认0表示替换所有的匹配</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># sub和subn</span></span><br><span class="line">phone = <span class="string">&quot;2004-959-559 # 这是一个国外电话号码&quot;</span></span><br><span class="line"><span class="comment"># 替换目标字符串中的注释</span></span><br><span class="line">pattern = <span class="string">&quot;#.*&quot;</span></span><br><span class="line">result = re.sub(pattern, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 删除非数字的字符串 \D</span></span><br><span class="line">pattern = <span class="string">&quot;\D&quot;</span></span><br><span class="line">result = re.sub(pattern, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 调用subn</span></span><br><span class="line">result = re.subn(pattern, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;替换的结果：&quot;</span>, result[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;替换的次数：&quot;</span>, result[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2004-959-559 </span></span><br><span class="line"><span class="string">2004959559</span></span><br><span class="line"><span class="string">(&#x27;2004959559&#x27;, 15)</span></span><br><span class="line"><span class="string">替换的结果： 2004959559</span></span><br><span class="line"><span class="string">替换的次数： 15</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="compile函数"><a href="#compile函数" class="headerlink" title="compile函数"></a>compile函数</h4><p>compile 函数用于编译正则表达式，生成一个正则表达式（Pattern）对象，供 <code>match()</code> 和 <code>search()</code> 这两个函数使用。语法格式为：</p><p><code>re.compile(pattern[, flags])</code></p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>pattern</td><td>一个字符串形式的正则表达式</td></tr><tr><td>flags</td><td>可选，表示匹配模式，比如忽略大小写，多行模式等</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile函数的使用</span></span><br><span class="line">s = <span class="string">&#x27;first123 line&#x27;</span></span><br><span class="line">pattern = <span class="string">r&#x27;\w+&#x27;</span></span><br><span class="line">regex = re.<span class="built_in">compile</span>(pattern)  <span class="comment"># 匹配至少一个字母或数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用compile函数:&quot;</span>, regex.<span class="keyword">match</span>(s))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;直接使用re.match:&quot;</span>, re.<span class="keyword">match</span>(pattern, s))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用compile函数: &lt;re.Match object; span=(0, 8), match=&#x27;first123&#x27;&gt;</span></span><br><span class="line"><span class="string">直接使用re.match: &lt;re.Match object; span=(0, 8), match=&#x27;first123&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="findall函数"><a href="#findall函数" class="headerlink" title="findall函数"></a>findall函数</h4><p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。语法格式如下：</p><p><code>findall(pattern, string, flags=0)</code></p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。如下表列出正则表达式修饰符 - 可选标志</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># findall 函数的使用</span></span><br><span class="line">pattern = <span class="string">r&#x27;\w+&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;first 1 second 2 third 3 _ $$&#x27;</span></span><br><span class="line">o = re.findall(pattern, s)</span><br><span class="line"><span class="built_in">print</span>(o)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;first&#x27;, &#x27;1&#x27;, &#x27;second&#x27;, &#x27;2&#x27;, &#x27;third&#x27;, &#x27;3&#x27;, &#x27;_&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>:warning:<strong>注意：</strong></p><p>match 和 search 是匹配一次, findall 匹配所有</p></blockquote><h4 id="finditer函数"><a href="#finditer函数" class="headerlink" title="finditer函数"></a>finditer函数</h4><p>和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># finditer函数的使用</span></span><br><span class="line">pattern = <span class="string">r&#x27;\w+&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;first 1 second 2 third 3 _ $$&#x27;</span></span><br><span class="line">o = re.finditer(pattern, s)</span><br><span class="line"><span class="built_in">print</span>(o)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> o:</span><br><span class="line">    <span class="built_in">print</span>(i.group())</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;callable_iterator object at 0x000002598770DE50&gt;</span></span><br><span class="line"><span class="string">first</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">second</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">third</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="split函数"><a href="#split函数" class="headerlink" title="split函数"></a>split函数</h4><p>split函数用于根据正则表达式分隔字符串，也就是说，将字符串与模式匹配的子字符串都作为分隔符来分隔这个字符串。split函数返</p><p>回一个列表形式的分隔结果，每一个列表元素都是分隔的子字符串。语法格式如下：</p><p><code>re.split(pattern, string[, maxsplit=0,flags=0])</code></p><div class="table-container"><table><thead><tr><th>数</th><th>描述</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>maxsplit</td><td>分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。</td></tr><tr><td>flags</td><td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># split函数的使用</span></span><br><span class="line">pattern = <span class="string">r&#x27;\d+&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;a 1 b 2 c 3 d&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.split(pattern, s))</span><br><span class="line"><span class="comment"># maxsplit 参数限定分隔的次数，这里限定为1，也就是只分隔一次</span></span><br><span class="line"><span class="built_in">print</span>(re.split(pattern, s, maxsplit=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;a &#x27;, &#x27; b &#x27;, &#x27; c &#x27;, &#x27; d&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;a &#x27;, &#x27; b 2 c 3 d&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h3><p><strong>贪婪模式</strong>指Python里数量词默认是贪婪的，总是尝试<strong>匹配尽可能多的字符</strong>。<strong>非贪婪模式</strong>与贪婪相反，总是尝试<strong>匹配尽可能少的字符</strong>，</p><p>可以使用<code>*</code>，<code>?</code>，<code>+</code>，<code>&#123;m,n&#125;</code>后面加上<code>?</code>，使贪婪变成非贪婪。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;This is mytel:133-1234-1234&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------贪婪模式---------&#x27;</span>)</span><br><span class="line">pattern = <span class="string">r&quot;(.+)(\d+-\d+-\d+)&quot;</span></span><br><span class="line">result = re.<span class="keyword">match</span>(pattern, s)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个分组匹配结果：&quot;</span>, result.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第二个分组匹配结果：&quot;</span>, result.group(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------非贪婪模式---------&#x27;</span>)</span><br><span class="line">pattern = <span class="string">r&quot;(.+?)(\d+-\d+-\d+)&quot;</span></span><br><span class="line">result = re.<span class="keyword">match</span>(pattern, s)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个分组匹配结果：&quot;</span>, result.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第二个分组匹配结果：&quot;</span>, result.group(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;贪婪模式&#x27;</span>)</span><br><span class="line">s = <span class="string">&quot;abc123&quot;</span></span><br><span class="line">v = re.<span class="keyword">match</span>(<span class="string">r&#x27;abc(\d+)&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(v.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;非贪婪模式&#x27;</span>)</span><br><span class="line">v = re.<span class="keyword">match</span>(<span class="string">r&#x27;abc(\d+?)&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(v.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">----------贪婪模式---------</span></span><br><span class="line"><span class="string">This is mytel:133-1234-1234</span></span><br><span class="line"><span class="string">第一个分组匹配结果： This is mytel:13</span></span><br><span class="line"><span class="string">第二个分组匹配结果： 3-1234-1234</span></span><br><span class="line"><span class="string">----------非贪婪模式---------</span></span><br><span class="line"><span class="string">This is mytel:133-1234-1234</span></span><br><span class="line"><span class="string">第一个分组匹配结果： This is mytel:</span></span><br><span class="line"><span class="string">第二个分组匹配结果： 133-1234-1234</span></span><br><span class="line"><span class="string">-------------------------------</span></span><br><span class="line"><span class="string">贪婪模式</span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">非贪婪模式</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="python新特性"><a href="#python新特性" class="headerlink" title="python新特性"></a>python新特性</h2><h3 id="formatted字符串字面值"><a href="#formatted字符串字面值" class="headerlink" title="formatted字符串字面值"></a>formatted字符串字面值</h3><p>formatted字符串是带有<code>f</code>字符前缀的字符串，可以很方便的格式化字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line">name = <span class="string">&quot;jhon&quot;</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name: %s, age: %d&quot;</span> % (name, age))</span><br><span class="line"><span class="comment"># 使用format</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name: &#123;&#125;, age: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;name: <span class="subst">&#123;name&#125;</span>, age: <span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br><span class="line">names = [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;c++&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;name1: <span class="subst">&#123;names[<span class="number">0</span>]&#125;</span>, name2: <span class="subst">&#123;names[<span class="number">1</span>]&#125;</span>, name3: <span class="subst">&#123;names[<span class="number">2</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 表达式</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a+b运算: <span class="subst">&#123;a + b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;表达式运算的结果：<span class="subst">&#123;<span class="number">3</span> * (a + b)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">name: jhon, age: 20</span></span><br><span class="line"><span class="string">name: jhon, age: 20</span></span><br><span class="line"><span class="string">name: jhon, age: 20</span></span><br><span class="line"><span class="string">name1: java, name2: python, name3: c++</span></span><br><span class="line"><span class="string">a+b运算: 30</span></span><br><span class="line"><span class="string">表达式运算的结果：90</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="formatted字符串支持"><a href="#formatted字符串支持" class="headerlink" title="formatted字符串支持 ="></a>formatted字符串支持 <code>=</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># formatted字符串支持 =</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a=&#125;</span>, <span class="subst">&#123;b=&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用指定的字符填充</span></span><br><span class="line"><span class="comment"># 使用 * 居中填充</span></span><br><span class="line">name = <span class="string">&quot;jhon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:*^20&#125;&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name:*^<span class="number">20</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 使用 * 居右填充</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name:*&gt;<span class="number">20</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 使用 * 居左填充</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name:*&lt;<span class="number">20</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对数值变量的格式化</span></span><br><span class="line">price = <span class="number">12.235</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(price))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;price:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">num = <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num=:<span class="number">.1</span>f&#125;</span>&quot;</span>)</span><br><span class="line">pct = <span class="number">0.789</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;%&quot;</span>.<span class="built_in">format</span>(pct*<span class="number">100</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pct*<span class="number">100</span>:<span class="number">.0</span>f&#125;</span>%&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">a=10, b=20</span></span><br><span class="line"><span class="string">*******jhon********</span></span><br><span class="line"><span class="string">********jhon********</span></span><br><span class="line"><span class="string">****************jhon</span></span><br><span class="line"><span class="string">jhon****************</span></span><br><span class="line"><span class="string">12.23</span></span><br><span class="line"><span class="string">12.23</span></span><br><span class="line"><span class="string">num=12.0</span></span><br><span class="line"><span class="string">78.90%</span></span><br><span class="line"><span class="string">79%</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="字符串新方法"><a href="#字符串新方法" class="headerlink" title="字符串新方法"></a>字符串新方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>功能描述</th></tr></thead><tbody><tr><td><code>str.removeprefix()</code></td><td>如果str以它开头的话，将会返回一个修改过前缀的新字符串，否则它将返回原始字符串</td></tr><tr><td><code>str.removesuffix()</code></td><td>如果str以其结尾，则返回带有修改过后缀的新字符串，否则它将返回原始字符串</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">info = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="comment"># 删除前缀</span></span><br><span class="line"><span class="built_in">print</span>(info.removeprefix(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(info.removeprefix(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line"><span class="comment"># 删除后缀</span></span><br><span class="line"><span class="built_in">print</span>(info.removesuffix(<span class="string">&#x27;world&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(info.removesuffix(<span class="string">&#x27;World&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">helloworld</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">helloworld</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="变量类型标注"><a href="#变量类型标注" class="headerlink" title="变量类型标注"></a>变量类型标注</h3><p>变量类型注解是用来对变量和函数的参数返回值类型做注解（暗示），帮助开发者写出更加严谨的代码，让调用方减少类型方面的错误，也可以提高代码的可读性和易用性。</p><p>但是，变量类型注解语法传入的类型表述能力有限，不能说明复杂的类型组成情况，因此引入了 <code>typing</code> 模块，来实现复杂的类型表达。</p><h4 id="常用的数据类型"><a href="#常用的数据类型" class="headerlink" title="常用的数据类型"></a>常用的数据类型</h4><p><img src="4、函数式编程和核心特性.assets/image-20240112185445452.png" alt="image-20240112185445452"></p><p><img src="4、函数式编程和核心特性.assets/image-20240112185500423.png" alt="image-20240112185500423"></p><blockquote><p><strong>注意：</strong></p><ul><li>mypy是Python的可选静态类型检查器</li><li>安装mypy模块</li><li>使用mypy进行静态类型检查 mypy 执行python文件</li></ul></blockquote><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 简化变量类型标注</span></span><br><span class="line">a: <span class="built_in">int</span> = <span class="number">10</span></span><br><span class="line">b: <span class="built_in">str</span> = <span class="string">&quot;hello&quot;</span></span><br><span class="line">c: <span class="built_in">float</span> = <span class="number">3.14</span></span><br><span class="line">d: <span class="built_in">bool</span> = <span class="literal">True</span></span><br><span class="line">e: <span class="built_in">bytes</span> = <span class="string">b&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂类型</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Set</span>, <span class="type">Dict</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line">x: <span class="type">List</span>[<span class="built_in">int</span>] = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y: <span class="type">Set</span>[<span class="built_in">str</span>] = &#123;<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;cd&quot;</span>&#125;</span><br><span class="line">z: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>] = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jhon&quot;</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">h: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">object</span>] = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jhon&quot;</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;male&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;</span><br><span class="line">j: <span class="type">Tuple</span>[<span class="built_in">int</span>] = (<span class="number">3</span>,)</span><br><span class="line">k: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>] = (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">l: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">str</span>, <span class="built_in">float</span>] = (<span class="number">3</span>, <span class="string">&quot;name&quot;</span>, <span class="number">5.1</span>)</span><br><span class="line"><span class="comment"># 定义可变大小的元组，使用省略号</span></span><br><span class="line">m: <span class="type">Tuple</span>[<span class="built_in">int</span>, ...] = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="简化变量类型标注"><a href="#简化变量类型标注" class="headerlink" title="简化变量类型标注"></a>简化变量类型标注</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.10新特性可以直接使用 list,tuple,dict,set</span></span><br><span class="line">n: <span class="built_in">list</span>[<span class="built_in">str</span>] = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line">q: <span class="built_in">tuple</span>[<span class="built_in">int</span>] = (<span class="number">2</span>,)</span><br><span class="line">p: <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>] = (<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 定义可变大小的元组，使用省略号</span></span><br><span class="line">i: <span class="built_in">tuple</span>[<span class="built_in">int</span>, ...] = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">f: <span class="built_in">set</span>[<span class="built_in">str</span>] = &#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>&#125;</span><br><span class="line">u: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">object</span>] = &#123;<span class="string">&quot;k1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;k2&quot;</span>: <span class="string">&quot;aa&quot;</span>, <span class="string">&quot;k3&quot;</span>: <span class="literal">True</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="函数参数返回值添加类型标注"><a href="#函数参数返回值添加类型标注" class="headerlink" title="函数参数返回值添加类型标注"></a>函数参数返回值添加类型标注</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="comment"># 参数 num：int类型</span></span><br><span class="line"><span class="comment"># 返回值：str类型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num_fun</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，两个参数都是int，返回int</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sun_fun</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，参数添加默认值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_test</span>(<span class="params">num1: <span class="built_in">int</span>, num2: <span class="built_in">float</span> = <span class="number">12.34</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fun_test(<span class="number">10</span>, <span class="number">29</span>))  <span class="comment"># 30</span></span><br><span class="line"><span class="built_in">print</span>(fun_test(<span class="number">10</span>))  <span class="comment"># 22.34</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量指向函数</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Callable[[参数类型, 参数类型], 返回值类型]</span></span><br><span class="line">f: <span class="type">Callable</span>[[<span class="built_in">int</span>, <span class="built_in">int</span>], <span class="built_in">int</span>] = sun_fun</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">10</span>, <span class="number">20</span>))  <span class="comment"># 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数，产生整数的生成器，每次返回一个</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">return_fun</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; Iterable[<span class="built_in">int</span>]:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; num:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(return_fun(<span class="number">10</span>))   <span class="comment"># &lt;generator object return_fun at 0x00000241595FC430&gt;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> return_fun(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">7</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="混合类型检查改进"><a href="#混合类型检查改进" class="headerlink" title="混合类型检查改进"></a>混合类型检查改进</h4><p>联合运算符使用<code>|</code>线来代替了旧版本中<code>Union[]</code>方法，使得程序更加简洁。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">oldFunc</span>(<span class="params">para: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>]</span>) -&gt; <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>]:</span><br><span class="line">    <span class="keyword">return</span> para ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">oldFunc(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newFunc</span>(<span class="params">para: <span class="built_in">int</span> | <span class="built_in">float</span></span>) -&gt; <span class="built_in">int</span> | <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> para + <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="built_in">print</span>(newFunc(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(newFunc(<span class="number">10.10</span>))</span><br></pre></td></tr></table></figure><h4 id="类型别名更改"><a href="#类型别名更改" class="headerlink" title="类型别名更改"></a>类型别名更改</h4><p>之前是直接通过不同类型的赋值操作来赋予类型新的名字，在新版本中通过<code>TypeAlias</code>来规定了类型名字的替换。这样操作的优势在于能够让程序开发人员和Python编辑器更加清楚的知道newname是一个变量名还是一个类型的别名，提升程序开发的可靠性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line">oldname = <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">oldFunc</span>(<span class="params">param: oldname</span>) -&gt; oldname:</span><br><span class="line">    <span class="keyword">return</span> param + param</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">oldFunc(<span class="string">&#x27;oldFunc:百战程序员&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeAlias</span><br><span class="line"></span><br><span class="line">newstr: TypeAlias = <span class="built_in">str</span></span><br><span class="line">newint: TypeAlias = <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newFunc</span>(<span class="params">num: newint, msg: newstr</span>) -&gt; newstr:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(num) + msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(newFunc(<span class="number">100</span>, <span class="string">&quot;类型别名更改&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">100类型别名更改</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="二进制表示频率为1的数量统计"><a href="#二进制表示频率为1的数量统计" class="headerlink" title="二进制表示频率为1的数量统计"></a>二进制表示频率为1的数量统计</h3><p><img src="4、函数式编程和核心特性.assets/image-20240113170649031.png" alt="image-20240113170649031"></p><p>通过调用<code>bit_count</code>函数来统计二进制中数字“1”的个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># bit_count()函数</span></span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line">value = <span class="number">5</span></span><br><span class="line"><span class="comment"># bin()转化为二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(value))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;出现1的次数：&quot;</span>, <span class="built_in">bin</span>(value).count(<span class="string">&quot;1&quot;</span>))</span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;出现1的次数：&quot;</span>, value.bit_count())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0b101</span></span><br><span class="line"><span class="string">出现1的次数： 2</span></span><br><span class="line"><span class="string">出现1的次数： 2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="字典的三个方法新增mapping属性"><a href="#字典的三个方法新增mapping属性" class="headerlink" title="字典的三个方法新增mapping属性"></a>字典的三个方法新增mapping属性</h3><p>在Python 3.10中，针对于字典的三个方法，<code>items</code>，<code>keys</code>，和<code>values</code>都增加了一个<code>mapping</code>属性，通过下面的程序可以发现，对三个方法调用<code>mapping</code>属性后都会<strong>返回原字典数据</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">mydict = &#123;<span class="string">&quot;一&quot;</span>: <span class="number">1</span>, <span class="string">&quot;二&quot;</span>: <span class="number">2</span>, <span class="string">&quot;三&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典数据：&quot;</span>, mydict)</span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line"><span class="built_in">print</span>(mydict.keys(), mydict.values(), mydict.items())</span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line">keys = mydict.keys()</span><br><span class="line">values = mydict.values()</span><br><span class="line">items = mydict.items()</span><br><span class="line"><span class="built_in">print</span>(keys.mapping, values.mapping, items.mapping)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字典数据： &#123;&#x27;一&#x27;: 1, &#x27;二&#x27;: 2, &#x27;三&#x27;: 3&#125;</span></span><br><span class="line"><span class="string">dict_keys([&#x27;一&#x27;, &#x27;二&#x27;, &#x27;三&#x27;]) dict_values([1, 2, 3]) dict_items([(&#x27;一&#x27;, 1), (&#x27;二&#x27;, 2), (&#x27;三&#x27;, 3)])</span></span><br><span class="line"><span class="string">&#123;&#x27;一&#x27;: 1, &#x27;二&#x27;: 2, &#x27;三&#x27;: 3&#125; &#123;&#x27;一&#x27;: 1, &#x27;二&#x27;: 2, &#x27;三&#x27;: 3&#125; &#123;&#x27;一&#x27;: 1, &#x27;二&#x27;: 2, &#x27;三&#x27;: 3&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="函数zip-新增strict参数"><a href="#函数zip-新增strict参数" class="headerlink" title="函数zip()新增strict参数"></a>函数zip()新增strict参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line">keys = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;sex&quot;</span>]</span><br><span class="line">values = [<span class="string">&quot;jhon&quot;</span>, <span class="number">23</span>, <span class="string">&quot;man&quot;</span>, <span class="number">12</span>, <span class="string">&quot;nan&quot;</span>]</span><br><span class="line">data_dict = <span class="built_in">dict</span>(<span class="built_in">zip</span>(keys, values))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;创建的字典对象：&quot;</span>, data_dict)</span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line">data_dict2 = <span class="built_in">dict</span>(<span class="built_in">zip</span>(keys, values, strict=<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;新版本添加strict属性：&quot;</span>, data_dict2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建的字典对象： &#123;&#x27;name&#x27;: &#x27;jhon&#x27;, &#x27;age&#x27;: 23, &#x27;sex&#x27;: &#x27;man&#x27;&#125;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;D:\2022百战Python\函数式编程和核心特性\python新特性\函数zip()新增strict参数.py&quot;, line 8, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    data_dict2 = dict(zip(keys,values,strict=True))</span></span><br><span class="line"><span class="string">ValueError: zip() argument 2 is longer than argument 1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>对于<code>zip</code>函数加了<code>strict</code>参数，顾名思义<code>strict</code>参数就是要严格的通过参数长度的匹配原则，在以上代码中，<code>keys</code>和<code>values</code>列表的长度并不一致。旧版本的<code>zip</code>函数会根据长度最短的参数创建字典。新版本的<code>zip</code>函数中，当设定<code>strict</code>参数为<code>True</code>，则要求<code>zip</code>的输入数必须要长度一致，否则报错。</p><h3 id="dataclass"><a href="#dataclass" class="headerlink" title="dataclass"></a>dataclass</h3><h4 id="使用类"><a href="#使用类" class="headerlink" title="使用类"></a>使用类</h4><p>为了支持数据修改, 默认值, 比较等功能。更加好一些的方法是：使用自定义类来实现数据类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name:<span class="built_in">str</span>,number:<span class="built_in">int</span>,postion:<span class="built_in">str</span>,age:<span class="built_in">int</span> = <span class="number">18</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.name = name</span><br><span class="line">        self.number = number</span><br><span class="line">        self.postion = postion</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;Player: <span class="subst">&#123;self.name&#125;</span> <span class="subst">&#123;self.number&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, __o: <span class="built_in">object</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> self.age == __o.age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__gt__</span>(<span class="params">self,__o: <span class="built_in">object</span></span>) -&gt;<span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> self.age &gt; __o.age</span><br><span class="line">    </span><br><span class="line">p1 = Player(<span class="string">&#x27;SXT&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;PG&#x27;</span>,<span class="number">26</span>)</span><br><span class="line"><span class="built_in">print</span>(p1)</span><br></pre></td></tr></table></figure><blockquote><p><strong>缺点</strong></p><ul><li><code>__init__</code> 方法中重复代码 (示例中每个属性都需要写3遍)</li><li>需要自己实现 <code>__repr__</code> 方法, 和比较方法 <code>__eq__</code> , <code>__gt__</code> 等</li></ul></blockquote><h4 id="使用dataclass"><a href="#使用dataclass" class="headerlink" title="使用dataclass"></a>使用dataclass</h4><p><code>dataclass</code> 可以认为是提供了一个简写 <code>__init__</code> 方法的语法糖，类型注释是必填项 (不限制数据类型时, 添加<code>typing.Any</code>为类型注释)，默认值的传递方式和 <code>__init__</code> 方法的参数格式一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    postion: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例对象</span></span><br><span class="line">p = Player(<span class="string">&quot;jhon&quot;</span>, <span class="string">&quot;beijing&quot;</span>, <span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Player(name=&#x27;jhon&#x27;, postion=&#x27;beijing&#x27;, age=21)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>优点</strong></p><p>可以使用 dataclasses 模块中的其它方法，比如：</p><ul><li>转为字典 asdict</li><li>转为元组 astuple</li></ul></blockquote><h5 id="dataclass装饰器上的参数"><a href="#dataclass装饰器上的参数" class="headerlink" title="dataclass装饰器上的参数"></a>dataclass装饰器上的参数</h5><p><code>dataclass</code> 装饰器将根据类属性生成数据类和数据类需要的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataclasses.dataclass(*, init = <span class="literal">True</span>, <span class="built_in">repr</span> = <span class="literal">True</span>, eq = <span class="literal">True</span>, order = <span class="literal">False</span>, unsafe_hash = <span class="literal">False</span>, frozen = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="4、函数式编程和核心特性.assets/image-20240113173132614.png" alt="image-20240113173132614"></p><h5 id="dataclass成员变量额外设置"><a href="#dataclass成员变量额外设置" class="headerlink" title="dataclass成员变量额外设置"></a>dataclass成员变量额外设置</h5><p>可以通过 <code>dataclass.filed</code> 方法设置变量的额外功能</p><ol><li><p><code>defualt</code>:设置默认值</p><p>值为具体的值</p></li><li><p><code>default_factory</code>:设置默认值</p><p>值为类型名，程序会根据类型名创建一个空的对象，若使用<code>defualt</code>设置需要手动创建空对象</p></li><li><p><code>repr</code>设置生成的 <code>__repr__</code> 方法中是否加入此属性，默认是<code>True</code></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass, field</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    postion: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    sex: <span class="built_in">str</span> = field(default=<span class="string">&quot;man&quot;</span>, <span class="built_in">repr</span>=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># msg: str = field(default=&quot;&quot;)</span></span><br><span class="line">    <span class="comment"># 创建空对象</span></span><br><span class="line">    msg: <span class="built_in">str</span> = field(default_factory=<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例对象</span></span><br><span class="line">p = Player(<span class="string">&quot;jhon&quot;</span>, <span class="string">&quot;beijing&quot;</span>, <span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Player(name=&#x27;jhon&#x27;, postion=&#x27;beijing&#x27;, age=21, msg=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="dataclass建立类变量"><a href="#dataclass建立类变量" class="headerlink" title="dataclass建立类变量"></a>dataclass建立类变量</h5><p>在类中建立变量，默认是成员变量，若需要设置类变量，需要设置类型为： <code>ClassVar</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass, field</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> ClassVar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    postion: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    sex: <span class="built_in">str</span> = field(default=<span class="string">&quot;man&quot;</span>, <span class="built_in">repr</span>=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># msg: str = field(default=&quot;&quot;)</span></span><br><span class="line">    <span class="comment"># 创建空对象</span></span><br><span class="line">    msg: <span class="built_in">str</span> = field(default_factory=<span class="built_in">str</span>)</span><br><span class="line">    <span class="comment"># 类变量（类属性）</span></span><br><span class="line">    country: ClassVar[<span class="built_in">str</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例对象</span></span><br><span class="line">p = Player(<span class="string">&quot;jhon&quot;</span>, <span class="string">&quot;beijing&quot;</span>, <span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">Player.country = <span class="string">&quot;China&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类属性：&quot;</span>, Player.country)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Player(name=&#x27;jhon&#x27;, postion=&#x27;beijing&#x27;, age=21, msg=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">类属性： China</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="字典合并"><a href="#字典合并" class="headerlink" title="字典合并"></a>字典合并</h3><p>字典添加两个新的运算符：<code>|</code>和<code>|=</code>。<code>|</code>运算符用于合并字典。<code>|=</code>用于更新字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line">dict1.update(dict2)</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line"><span class="comment"># |合并字典</span></span><br><span class="line">dict3 = dict1 | dict2</span><br><span class="line"><span class="built_in">print</span>(dict3)</span><br><span class="line"><span class="comment"># |= 更新字典</span></span><br><span class="line">dict1 |= dict2  <span class="comment"># 等价于 dict1 = dict1 | dict2</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;2&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;2&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;2&#x27;&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="match语法"><a href="#match语法" class="headerlink" title="match语法"></a>match语法</h3><p><code>match...case</code>结构化模式匹配，可以匹配字典、类以及其他更复杂的结构。<code>match...case</code>的匹配模式匹配于Java或C++中的switch的使用很相似。语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> subject:</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_1&gt;:</span><br><span class="line">        &lt;action_1&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_2&gt;:</span><br><span class="line">        &lt;action_2&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_3&gt;:</span><br><span class="line">        &lt;action_3&gt;</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        &lt;action_wildcard&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">status = <span class="number">404</span></span><br><span class="line"><span class="keyword">match</span> status:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;访问成功&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;访问的资源不存在&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;服务器错误&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;以上都没有匹配成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">p1 = (<span class="string">&quot;superman&quot;</span>, <span class="number">23</span>, <span class="string">&quot;man&quot;</span>)</span><br><span class="line">p2 = (<span class="string">&quot;joker&quot;</span>, <span class="number">21</span>, <span class="string">&quot;woman&quot;</span>)</span><br><span class="line">p3 = (<span class="string">&quot;parker&quot;</span>, <span class="number">20</span>, <span class="string">&quot;male&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_test</span>(<span class="params">person</span>):</span><br><span class="line">    <span class="keyword">match</span> person:</span><br><span class="line">        <span class="keyword">case</span> (name, _, <span class="string">&quot;man&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> is man&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> (name, _, <span class="string">&quot;woman&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> is woman&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> (name, age, sex):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;age&#125;</span>, <span class="subst">&#123;sex&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">func_test(p1)</span><br><span class="line">func_test(p2)</span><br><span class="line">func_test(p3)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">访问的资源不存在</span></span><br><span class="line"><span class="string">superman is man</span></span><br><span class="line"><span class="string">joker is woman</span></span><br><span class="line"><span class="string">parker,20,male</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>上述代码中，<code>case</code>函数通过匹配元组，如果元组第三个参数是<code>female</code>，匹配到第一个<code>case</code>。如果元组第三个参数是<code>male</code>，匹配到第二个<code>case</code>。如果前面两个都不匹配，则输出最后的默认结果。</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h3><ol><li>类也是对象（属于元类的对象）</li><li>使用动态创建类：</li></ol><p>语法：<code>type(类名，由父类名称组成的元组（可以为空），包含属性的字典（名称和值）)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">元类：</span></span><br><span class="line"><span class="string">    什么是元类？</span></span><br><span class="line"><span class="string">        动态创建类</span></span><br><span class="line"><span class="string">        元类-&gt;类</span></span><br><span class="line"><span class="string">        类-&gt;对象</span></span><br><span class="line"><span class="string">    用途？</span></span><br><span class="line"><span class="string">        可以动态创建类</span></span><br><span class="line"><span class="string">    如何使用？</span></span><br><span class="line"><span class="string">    type()</span></span><br><span class="line"><span class="string">        1.查看目标对象的数据类型</span></span><br><span class="line"><span class="string">        2.可以使用type，动态创建类</span></span><br><span class="line"><span class="string">        语法:</span></span><br><span class="line"><span class="string">            类 = type(类名,(父类...),&#123;属性，方法&#125;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 创建一个默认父类，不包含任何属性方法的类</span></span><br><span class="line">Person = <span class="built_in">type</span>(<span class="string">&#x27;Person&#x27;</span>, (), &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否可以用Person创建对象</span></span><br><span class="line">p1 = Person()</span><br><span class="line"><span class="built_in">print</span>(p1)</span><br><span class="line"><span class="comment"># mro()   父类是object</span></span><br><span class="line"><span class="built_in">print</span>(Person.mro())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传统静态方式创建类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, color</span>):</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;动物需要吃东西&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;狗狗趴着睡觉&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用type动态创建一个类，父类就是Animal</span></span><br><span class="line">Dog = <span class="built_in">type</span>(<span class="string">&#x27;Dog&#x27;</span>, (Animal,), &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;sleep&#x27;</span>: sleep&#125;)</span><br><span class="line">dog = Dog(<span class="string">&#x27;Yellow&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dog.age)</span><br><span class="line">dog.sleep()</span><br><span class="line"><span class="comment"># 是否继承了父类中的特性</span></span><br><span class="line"><span class="comment"># 父类中的属性</span></span><br><span class="line"><span class="built_in">print</span>(dog.color)</span><br><span class="line"><span class="comment"># 是否继承了父类的方法</span></span><br><span class="line">dog.eat()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Dog.__name__)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;__main__.Person object at 0x00000183883FFFD0&gt;</span></span><br><span class="line"><span class="string">[&lt;class &#x27;__main__.Person&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">狗狗趴着睡觉</span></span><br><span class="line"><span class="string">Yellow</span></span><br><span class="line"><span class="string">动物需要吃东西</span></span><br><span class="line"><span class="string">Dog</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="类装饰器-1"><a href="#类装饰器-1" class="headerlink" title="类装饰器"></a>类装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">类装饰器：</span></span><br><span class="line"><span class="string">    在不修改函数源代码的前提下，增加新的功能</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AAA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        <span class="comment"># print(&quot;我是AAA.init()&quot;)</span></span><br><span class="line">        self.__func = func</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 报错：TypeError: &#x27;AAA&#x27; object is not callable</span></span><br><span class="line">    <span class="comment"># 要实现call方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在这里可以实现新增任意功能&quot;</span>)</span><br><span class="line">        self.addFunc()</span><br><span class="line">        self.__func()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addFunc</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户权限验证&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日志系统处理&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@AAA</span></span><br><span class="line"><span class="comment"># TypeError: __init__() takes 1 positional argument but 2 were given</span></span><br><span class="line"><span class="comment"># @AAA等价于test1 = AAA(test1)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是功能1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test1()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在这里可以实现新增任意功能</span></span><br><span class="line"><span class="string">用户权限验证</span></span><br><span class="line"><span class="string">日志系统处理</span></span><br><span class="line"><span class="string">我是功能1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">对象池</span></span><br><span class="line"><span class="string">    1.数值类型</span></span><br><span class="line"><span class="string">        小整数池</span></span><br><span class="line"><span class="string">            小整数：  [-5,256]</span></span><br><span class="line"><span class="string">                程序开始时，一次性加载到内存</span></span><br><span class="line"><span class="string">                LEGB（局部变量，闭包中的变量，全局变量，内建变量）</span></span><br><span class="line"><span class="string">                全局都是同一个</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                id()：</span></span><br><span class="line"><span class="string">                is:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        大整数池</span></span><br><span class="line"><span class="string">            每创建一个不是小整数范围内的变量，都会被自动存储到大整数池中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    2.字符串</span></span><br><span class="line"><span class="string">        intern机制</span></span><br><span class="line"><span class="string">        每个单词(字符串)，不夹杂空格或者其他符号，默认开启intern机制，共享内存，靠引用计数决定是否销毁</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="小整数池"><a href="#小整数池" class="headerlink" title="小整数池"></a>小整数池</h4><ul><li>系统默认创建好的，等着你使用。</li><li>概述：<br>整数在程序中的使用非常广泛，Python为了优化速度，使用了小整数对象池， 避免为整数频繁申请和销毁内存空间。Python 对小整数的定义是 <code>[-5, 256]</code> 这些整数对象是提前建立好的，不会被垃圾回收。在一个 Python 的程序中，无论这个整数处于LEGB（局部变量，闭包，全局，内建模块）中的哪个位置，所有位于这个范围内的整数使用的都是同一个对象。</li></ul><h4 id="大整数池"><a href="#大整数池" class="headerlink" title="大整数池"></a>大整数池</h4><p>默认创建出来，池内为空的，创建一个就会往池中存储一个</p><h4 id="intern机制"><a href="#intern机制" class="headerlink" title="intern机制"></a>intern机制</h4><p>每个单词(字符串)，不夹杂空格或者其他符号，默认开启intern机制，共享内存，靠引用计数决定是否销毁</p><h3 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>现在的高级语言如Java，C#等，都采用了垃圾收集机制，而不再是C，C++里用户自己管理维护内存的方式。自己管理内存极其自由，可以任意申请内存，但如同一把双刃剑，为大量内存泄露，悬空指针等bug埋下隐患。Python里也同Java一样采用了垃圾收集机制，不过不一样的是：Python采用的是引用计数机制为主，标记-清除和分代收集两种机制为辅的策略。</p><h4 id="引用计数机制"><a href="#引用计数机制" class="headerlink" title="引用计数机制"></a>引用计数机制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">垃圾回收机制：GC机制</span></span><br><span class="line"><span class="string">    Python：</span></span><br><span class="line"><span class="string">    1.引用计数机制为主</span></span><br><span class="line"><span class="string">        如何获取一个对象的引用计数？</span></span><br><span class="line"><span class="string">            sys.getrefcount(a)</span></span><br><span class="line"><span class="string">            刚创建对象引用计数为2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        a.增加引用计数操作</span></span><br><span class="line"><span class="string">            1、如果有新的对象对象使用该对象，+1</span></span><br><span class="line"><span class="string">            2、装进列表 +1</span></span><br><span class="line"><span class="string">            3、作为函数参数</span></span><br><span class="line"><span class="string">        b.减少引用计数操作</span></span><br><span class="line"><span class="string">            1.如果有新的对象对象使用该对象，新对象不在使用-1</span></span><br><span class="line"><span class="string">            2.从列表中移除-1</span></span><br><span class="line"><span class="string">            3.函数调用结束</span></span><br><span class="line"><span class="string">            4.del 显示销毁</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    2.隔代回收为辅助</span></span><br><span class="line"><span class="string">        循环引用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span>():</span><br><span class="line">    <span class="comment"># 创建对象开辟内存时调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开辟内存空间&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(AA, cls).__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建对象at:%s&quot;</span> % <span class="built_in">hex</span>(<span class="built_in">id</span>(self)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对象被系统回之前，会调用该方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s say bye bye&quot;</span> % <span class="built_in">hex</span>(<span class="built_in">id</span>(self)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">aaa</span>):</span><br><span class="line">    <span class="built_in">print</span>(aaa)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = AA()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line">b = a</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line">list1 = [a]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line">test1(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line">list1.remove(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a的引用计数为:%d&#x27;</span> % sys.getrefcount(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------程序结束-----------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">开辟内存空间</span></span><br><span class="line"><span class="string">创建对象at:0x1dd4d9dfeb0</span></span><br><span class="line"><span class="string">a的引用计数为:2</span></span><br><span class="line"><span class="string">a的引用计数为:3</span></span><br><span class="line"><span class="string">a的引用计数为:4</span></span><br><span class="line"><span class="string">&lt;__main__.AA object at 0x000001DD4D9DFEB0&gt;</span></span><br><span class="line"><span class="string">a的引用计数为:6</span></span><br><span class="line"><span class="string">a的引用计数为:4</span></span><br><span class="line"><span class="string">**************************************************</span></span><br><span class="line"><span class="string">a的引用计数为:3</span></span><br><span class="line"><span class="string">a的引用计数为:2</span></span><br><span class="line"><span class="string">0x1dd4d9dfeb0 say bye bye</span></span><br><span class="line"><span class="string">----------------程序结束-----------------</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>引用计数机制的优点：</p><ul><li>简单</li><li>实时性：一旦没有引用，内存就直接释放了。不用像其他机制等到特定时机。<br>实时性还带来一个好处：处理回收内存的时间分摊到了平时。</li></ul><p>引用计数机制的缺点：</p><ul><li>维护引用计数消耗资源</li><li>循环引用的问题无法解决（DOS窗口，查看内存tasklist，或者内存表，任务管理器）</li></ul><h4 id="隔代回收机制"><a href="#隔代回收机制" class="headerlink" title="隔代回收机制"></a>隔代回收机制</h4><p>分代回收是用来解决交叉引用(循环引用)，并增加数据回收的效率。 </p><p>原理：通过对象存在的时间不同，采用不同的算法来回收垃圾。 形象的比喻，三个链表，零代链表上的对象（新创建的对象都加入到零代链表），引用数都是一，每增加一个指针，引用加一，随后Python会检测列表中的互相引用的对象，根据规则减掉其引用计数。GC算法对链表一的引用减一，引用为0的，清除，不为0的到链表二，链表二也执行GC算法，链表三一样。存在时间越长的数据，越是有用的数据。</p><h5 id="隔代回收触发时间？（GC阈值）"><a href="#隔代回收触发时间？（GC阈值）" class="headerlink" title="隔代回收触发时间？（GC阈值）"></a>隔代回收触发时间？（GC阈值）</h5><p>随着你的程序运行，Python解释器保持对新创建的对象，以及因为引用计数为零而被释放掉的对象的追踪。从理论上说，这两个值应该保持一致，因为程序新建的每个对象都应该最终被释放掉。当然，事实并非如此。因为循环引用的原因，从而被分配对象的计数值与被释放对象的计数值之间的差异在逐渐增长。一旦这个差异累计超过某个阈值，则Python的收集机制就启动了，并且触发上边所说到的零代算法，释放“浮动的垃圾”，并且将剩下的对象移动到一代列表。随着时间的推移，程序所使用的对象逐渐从零代列表移动到一代列表。而Python对于一代列表中对象的处理遵循同样的方法，一旦被分配计数值与被释放计数值累计到达一定阈值，Python会将剩下的活跃对象移动到二代列表。通过这种方法，你的代码所长期使用的对象，那些你的代码持续访问的活跃对象，会从零代链表转移到一代再转移到二代。</p><p>通过不同的阈值设置，Python可以在不同的时间间隔处理这些对象。</p><p>Python处理零代最为频繁，其次是一代然后才是二代。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">垃圾回收机制：</span></span><br><span class="line"><span class="string">    1.引用计数机制</span></span><br><span class="line"><span class="string">        相互引用，引用计数无法删除类似的对象</span></span><br><span class="line"><span class="string">    2.隔代回收机制</span></span><br><span class="line"><span class="string">        原理：</span></span><br><span class="line"><span class="string">            随着时间的推进，程序冗余对象逐渐增多，达到一定数量（阈值），系统进行回收</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            (0代，1代，2代)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        代码：</span></span><br><span class="line"><span class="string">        import gc</span></span><br><span class="line"><span class="string">        gc.get_count()</span></span><br><span class="line"><span class="string">        gc.get_threshold()   -&gt;(700,10,10)</span></span><br><span class="line"><span class="string">        gc.disable()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;new&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(AA, cls).__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;object:born at %s&quot;</span> % <span class="built_in">hex</span>(<span class="built_in">id</span>(self)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 被系统回收&quot;</span> % <span class="built_in">hex</span>(<span class="built_in">id</span>(self)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = AA()</span><br><span class="line">        b = AA()</span><br><span class="line">        a.v = b</span><br><span class="line">        b.v = a</span><br><span class="line">        <span class="keyword">del</span> a</span><br><span class="line">        <span class="keyword">del</span> b</span><br><span class="line">        <span class="built_in">print</span>(gc.get_threshold())</span><br><span class="line">        <span class="built_in">print</span>(gc.get_count())</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动关闭垃圾回收机制</span></span><br><span class="line"><span class="comment"># gc.disable()</span></span><br><span class="line">gc.set_threshold(<span class="number">200</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">start()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafeb0</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafe80</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(2, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafdc0</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafd90</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(4, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafd00</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafcd0</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(6, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafc40</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafc10</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(8, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafb80</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafb50</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(10, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafac0</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafa90</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(12, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acafa00</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acaf9d0</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(14, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acaf940</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acaf910</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(16, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acaf880</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acaf850</span></span><br><span class="line"><span class="string">(20, 10, 10)</span></span><br><span class="line"><span class="string">(18, 4, 1)</span></span><br><span class="line"><span class="string">new</span></span><br><span class="line"><span class="string">object:born at 0x2442acaf7c00x2442acafeb0 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafe80 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafdc0 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafd90 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafd00 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafcd0 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafc40 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafc10 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafb80 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafb50 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafac0 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafa90 被系统回收</span></span><br><span class="line"><span class="string">0x2442acafa00 被系统回收</span></span><br><span class="line"><span class="string">0x2442acaf9d0 被系统回收</span></span><br><span class="line"><span class="string">0x2442acaf940 被系统回收</span></span><br><span class="line"><span class="string">0x2442acaf910 被系统回收</span></span><br><span class="line"><span class="string">0x2442acaf880 被系统回收</span></span><br><span class="line"><span class="string">0x2442acaf850 被系统回收</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="查看引用计数"><a href="#查看引用计数" class="headerlink" title="查看引用计数"></a>查看引用计数</h5><h6 id="gc模块的使用"><a href="#gc模块的使用" class="headerlink" title="gc模块的使用"></a>gc模块的使用</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用函数：</span></span><br><span class="line"><span class="comment"># 1、获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表</span></span><br><span class="line">gc.get_count()</span><br><span class="line"><span class="comment"># 2、获取gc模块中自动执行垃圾回收的频率</span></span><br><span class="line">gc.get_threshold()</span><br><span class="line"><span class="comment"># 3、设置自动执行垃圾回收的频率</span></span><br><span class="line">gc.set_threshold(threshold0[,threshold1,threshold2])</span><br><span class="line"><span class="comment"># 4、python3默认开启gc机制，可以使用该方法手动关闭gc机制</span></span><br><span class="line">gc.disable()</span><br><span class="line"><span class="comment"># 5、手动调用垃圾回收机制回收垃圾</span></span><br><span class="line">gc.collect()</span><br></pre></td></tr></table></figure><h6 id="增加引用计数的条件"><a href="#增加引用计数的条件" class="headerlink" title="增加引用计数的条件"></a>增加引用计数的条件</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建对象</span></span><br><span class="line">stu = Student()</span><br><span class="line"><span class="comment"># 2.将对象加入列表</span></span><br><span class="line">list1.append(stu)</span><br><span class="line"><span class="comment"># 3.对象被引用</span></span><br><span class="line">stu2 = stu</span><br><span class="line"><span class="comment"># 4.将对象作为参数，传入某个函数</span></span><br><span class="line">func(stu)</span><br></pre></td></tr></table></figure><h6 id="减少对象引用计数的情况"><a href="#减少对象引用计数的情况" class="headerlink" title="减少对象引用计数的情况"></a>减少对象引用计数的情况</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.对象被显示销毁</span></span><br><span class="line"><span class="keyword">del</span> stu</span><br><span class="line"><span class="comment"># 2.对象名指向新的对象</span></span><br><span class="line">stu = Student()</span><br><span class="line"><span class="comment"># 3.从容器中移除，或者显示销毁列表</span></span><br><span class="line">list1.remove(stu)</span><br><span class="line">list1.pop(stu)</span><br><span class="line"><span class="comment"># 4.局部变量对象，作为函数参数</span></span><br><span class="line"><span class="comment"># 函数结束时，引用计数-1</span></span><br></pre></td></tr></table></figure><h6 id="获取某个对象的引用计数"><a href="#获取某个对象的引用计数" class="headerlink" title="获取某个对象的引用计数"></a>获取某个对象的引用计数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">obj = <span class="string">&#x27;Helloworld&#x27;</span></span><br><span class="line">sys.getrefcount(obj)</span><br><span class="line">list1 = []</span><br><span class="line"><span class="built_in">list</span>.append(obj)</span><br><span class="line">sys.getrefcount(obj)</span><br></pre></td></tr></table></figure><h3 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h3><p>什么叫内建函数：启动python解释器后，默认加载的函数称为内建函数</p><h4 id="如何查看内建函数"><a href="#如何查看内建函数" class="headerlink" title="如何查看内建函数"></a>如何查看内建函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两种方式：</span></span><br><span class="line">a. </span><br><span class="line"><span class="built_in">dir</span>(__builtins__)</span><br><span class="line">b. </span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="built_in">dir</span>(builtins)</span><br></pre></td></tr></table></figure><h4 id="常用内建函数"><a href="#常用内建函数" class="headerlink" title="常用内建函数"></a>常用内建函数</h4><h5 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h5><p>Python <code>range()</code> 函数可创建一个整数列表，一般用在 for 循环中。<br>        语法：<code>range(start, stop[, step])</code></p><p>参数说明：</p><p>start: 计数从 start 开始。默认是从 0 开始。例如<code>range(5)</code>等价于<code>range(0, 5)</code>;</p><p>stop: 计数到 stop 结束，但不包括 stop。例如：<code>range(0, 5)</code> 是<code>[0, 1, 2, 3, 4]</code>没有5</p><p>step：步长，默认为1。例如：<code>range(0, 5)</code> 等价于 <code>range(0, 5, 1)</code></p><p>返回：range</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">range(stop)</span></span><br><span class="line"><span class="string">    默认从0开始，直到stop-1</span></span><br><span class="line"><span class="string">    list1 = list(range(10))</span></span><br><span class="line"><span class="string">print(list1)</span></span><br><span class="line"><span class="string">range(start[,stop,step])</span></span><br><span class="line"><span class="string">    start:表示开始</span></span><br><span class="line"><span class="string">    stop：表示结束(不包括该元素)</span></span><br><span class="line"><span class="string">        负值</span></span><br><span class="line"><span class="string">    step:表示迭代的步长</span></span><br><span class="line"><span class="string">        默认为1</span></span><br><span class="line"><span class="string">        负值，表示递减</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 创建列表的时候</span></span><br><span class="line">list1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">list1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>))</span><br><span class="line">list1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="comment"># 打印[1-10]之间的数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, -<span class="number">1</span>, -<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="built_in">range</span>(<span class="number">10</span>), Iterable))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><p><code>map()</code> 会根据提供的函数对指定序列做映射。</p><p>第一个参数 function 以参数序列中的每一个元素调用 function 函数，</p><p>返回包含每次 function 函数返回值的新列表。</p><p>语法：</p><p><code>map(function, iterable, ...)</code></p><p>参数说明：</p><p>function：函数</p><p>iterable：一个或多个序列</p><p>返回：</p><p>Python 2.x 返回列表。</p><p>Python 3.x 返回迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">map()</span></span><br><span class="line"><span class="string">map(func, *iterables) --&gt; map object</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Make an iterator that computes the function using arguments from</span></span><br><span class="line"><span class="string">    each of the iterables.  Stops when the shortest iterable is exhausted.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable, Iterator</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个迭代器</span></span><br><span class="line"><span class="comment"># it1 = map(func1,list1)</span></span><br><span class="line">it1 = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="number">2</span> * x, list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(it1, Iterator))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it1:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------------------&#x27;</span>)</span><br><span class="line"><span class="comment"># it2 = map(func2,list1,list2)</span></span><br><span class="line">it2 = <span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x + y, list1, list2)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it2:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------------------&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h5><p>filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p><p>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判断，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p><p>语法：</p><p><code>filter(function, iterable)</code></p><p>参数说明：</p><p>function：判断函数。</p><p>iterable：可迭代对象。</p><p>返回：</p><p>返回迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">filter()</span></span><br><span class="line"><span class="string">filter(function or None, iterable) --&gt; filter object</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Return an iterator yielding those items of iterable for which function(item)</span></span><br><span class="line"><span class="string">    is true. If function is None, return the items that are true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">25</span>]</span><br><span class="line"><span class="comment"># 遍历列表中不为0的元素</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># it1 = filter(None,list1)</span></span><br><span class="line"><span class="comment"># for i in it1:</span></span><br><span class="line"><span class="comment">#     print(i,end=&#x27; &#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># it1 = filter(lambda x:x != 0,list1)</span></span><br><span class="line"><span class="comment"># for i in it1:</span></span><br><span class="line"><span class="comment">#     print(i,end=&#x27; &#x27;)</span></span><br><span class="line">it1 = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &gt;= <span class="number">5</span>, list1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it1:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h5><p>3.x后，需要先<code>from functools import reduce</code></p><p><code>reduce()</code> 函数会对参数序列中元素进行累积。函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：</p><p>用传给reduce中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p><p>语法：</p><p><code>reduce(function, iterable[, initializer])</code></p><p>参数说明：</p><p>function：函数，有两个参数</p><p>iterable：可迭代对象</p><p>initializer：可选，初始参数</p><p>返回：</p><p>返回函数计算结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">reduce()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">需要先从functools 引入</span></span><br><span class="line"><span class="string">需求：</span></span><br><span class="line"><span class="string">    有一个存储了5个随机整数的列表，求列表中所有元素的和</span></span><br><span class="line"><span class="string">    1.生成随机列表</span></span><br><span class="line"><span class="string">    2.遍历求和/或者用其他方式求和  reduce()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    rand_num = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    list1.append(rand_num)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">sum1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    sum1 += i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;和为:%g&#x27;</span> % sum1)</span><br><span class="line"></span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x, y: x + y, list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;和为:%g&#x27;</span> % result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h5><p>sorted() 函数对所有可迭代的对象进行排序操作。</p><p>sort 与 sorted 区别：</p><p>sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。</p><p>list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</p><p>语法：</p><p><code>sorted(iterable[, key[, reverse]])</code></p><p>参数说明：</p><p>iterable：可迭代对象。</p><p>key：主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</p><p>reverse：排序规则，reverse = True 降序 ， reverse = False 升序（默认）</p><p>返回：</p><p>返回重新排序的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">list.sort()</span></span><br><span class="line"><span class="string">无返回值，对源数据进行排序</span></span><br><span class="line"><span class="string">sorted()</span></span><br><span class="line"><span class="string">有返回值，返回排序备份</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sort(iterable,key=None,reverse=False)</span></span><br><span class="line"><span class="string">Return a new list containing all items from the iterable in ascending order.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A custom key function can be supplied to customize the sort order, and the</span></span><br><span class="line"><span class="string">    reverse flag can be set to request the result in descending order.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">29</span>, <span class="number">3</span>]</span><br><span class="line">list2 = <span class="built_in">sorted</span>(list1)</span><br><span class="line">list3 = <span class="built_in">sorted</span>(list1, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"><span class="comment"># 正数从小到大，负数从大到小</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">0</span>, -<span class="number">9</span>, <span class="number">29</span>, <span class="number">3</span>, -<span class="number">10</span>, -<span class="number">2</span>, -<span class="number">5</span>]</span><br><span class="line">list2 = <span class="built_in">sorted</span>(list1, key=<span class="keyword">lambda</span> x: (x &lt; <span class="number">0</span>, <span class="built_in">abs</span>(x)))</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表中自定义对象的排序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">&#x27;aaa&#x27;</span>, <span class="number">19</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;ccc&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">stu3 = Student(<span class="string">&#x27;bbb&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">list1 = [stu1, stu2, stu3]</span><br><span class="line"><span class="keyword">for</span> stu <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(stu.name, stu.age)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------&quot;</span>)</span><br><span class="line"><span class="comment"># list2 = sorted(list1,key=lambda x:x.age)</span></span><br><span class="line">list2 = <span class="built_in">sorted</span>(list1, key=<span class="keyword">lambda</span> x: x.name)</span><br><span class="line"><span class="keyword">for</span> stu <span class="keyword">in</span> list2:</span><br><span class="line">    <span class="built_in">print</span>(stu.name, stu.age)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="偏函数-1"><a href="#偏函数-1" class="headerlink" title="偏函数"></a>偏函数</h3><p>概念：python 中提供一种用于对函数固定属性的函数</p><p>定义:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">int3 = partial(<span class="built_in">int</span>,base=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(int3(<span class="string">&#x27;1010&#x27;</span>))</span><br></pre></td></tr></table></figure><p>作用：把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">偏函数的使用：</span></span><br><span class="line"><span class="string">partial</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&#x27;1010&#x27;</span></span><br><span class="line">result = <span class="built_in">int</span>(str1, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新定义一个函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int2</span>(<span class="params">n, base=<span class="number">2</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(n, base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># result = int(str1,2)</span></span><br><span class="line">result = int2(str1)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用偏函数完成类似的功能</span></span><br><span class="line">int3 = partial(<span class="built_in">int</span>, base=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># print(type(int3))</span></span><br><span class="line"><span class="built_in">print</span>(int3(str1))</span><br></pre></td></tr></table></figure><h3 id="wraps"><a href="#wraps" class="headerlink" title="wraps"></a>wraps</h3><p>作用：<code>functools.wraps</code> 可以将原函数对象的指定属性复制给包装函数对象, 默认有 <code>__module__</code>、<code>__name__</code>、<code>__doc__</code>,或者通过参数选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">wraps函数的使用</span></span><br><span class="line"><span class="string">from functools import wraps</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">作用：</span></span><br><span class="line"><span class="string">functools.wraps 可以将原函数对象的指定属性</span></span><br><span class="line"><span class="string">复制给包装函数对象, 默认有 module、name、doc,或者通过参数选择</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">with_logging</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s was calling&quot;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> with_logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="comment"># test = log(test)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;求x*x的值&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test.__name__)</span><br><span class="line"><span class="built_in">print</span>(test.__doc__)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">with_logging</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 网络与并发编程</title>
      <link href="/archives/984515cf.html"/>
      <url>/archives/984515cf.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="Python-网络与并发编程"><a href="#Python-网络与并发编程" class="headerlink" title="Python 网络与并发编程"></a>Python 网络与并发编程</h1><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><h3 id="并发编程介绍"><a href="#并发编程介绍" class="headerlink" title="并发编程介绍"></a>并发编程介绍</h3><h4 id="串行-并行-并发的区别"><a href="#串行-并行-并发的区别" class="headerlink" title="串行-并行-并发的区别"></a>串行-并行-并发的区别</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345214.png" alt="image-20231218211529713"></p><ol><li>串行(serial)):一个CPU上，按顺序完成多个任务</li><li>并行(parallelism):指的是任务数小于等于cpu核数，即任务真的是一起执行的</li><li>并发(concurrency):一个CPU采用时间片管理方式，交替的处理多个任务。一般是是任务数多余cu核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换任务的速度相当快，看上去一起执行而已)</li></ol><h4 id="进程-线程-协程的区别"><a href="#进程-线程-协程的区别" class="headerlink" title="进程-线程-协程的区别"></a>进程-线程-协程的区别</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345216.png" alt="image-20231218212430086"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345217.png" alt="image-20231218212524691"></p><ol><li><strong>线程是程序执行的最小单位</strong>，而==进程==是操作系统==分配资源==的最小单位；</li><li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；</li><li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间（包括代码段、数据集、堆等)及一些进程级的资源（如打开文件和信号），某进程内的线程在其它进程不可见；</li><li>调度和切换：线程上下文切换比进程上下文切换要快得多。</li></ol><blockquote><p>进程(Process):拥有自己独立的堆和栈，既不共享堆，也不共享栈，进程由操作系统调度；进程切换需要的资源很最大，效率低</p><p>线程(Thread):拥有自己独立的栈和共享的堆，共享堆，不共享栈，标准线程由操作系统调度；线程切换需要的资源一般，效率一般（当然了在不考虑GL的情况下）</p><p>协程(coroutine):拥有自己独立的栈和共享的堆，共享堆，不共享栈，协程由程序员在协程的代码里显示调度；协程切换任务资源很小，效率高</p></blockquote><p><strong>进程是什么？</strong></p><p><strong>进程（Process）</strong>是一个具有一定独立功能的程序关于某个数据集合的一次运行活动</p><p><strong>线程是什么？</strong></p><p><strong>线程（Thread）</strong>是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</p><p>==<strong>并发编程解决方案：</strong>==</p><p>多任务的实现有3种方式：</p><ol><li>多进程模式</li><li>多线程模式</li><li>多进程+多线程模式</li></ol><p><strong>协程是什么？</strong></p><p>协程，Coroutines，也叫作纤程(Fiber)，是一种在线程中，比线程更加轻量级的存在，由程序员自己写程序来管理。</p><p>当出现IO阻塞时，CPU一直等待IO返回，处于空转状态。这时候用协程，可以执行其他任务。当IO返回结果后，再回来处理数据。充</p><p>分利用了IO等待的时间，提高了效率。</p><h4 id="同步和异步通信机制的区别"><a href="#同步和异步通信机制的区别" class="headerlink" title="同步和异步通信机制的区别"></a>同步和异步通信机制的区别</h4><p>同步和异步强调的是消息通信机制 (synchronous communication/asynchronous communication)。</p><p>同步(synchronous)：A调用B，等待B返回结果后，A继续执行</p><p>异步(asynchronous )：A调用B，A继续执行，不等待B返回结果；B有结果了，通知A，A再做处理。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345218.png" alt="image-20231219163757077"></p><blockquote><p>同步方式通信：</p><p>1 高淇买一本书《Python实战笔记》。</p><p>2 书店老板说：等三分钟啊，我帮你查查。</p><p>3 高淇等一小时</p><p>4 老板说，找到书了，发给你</p><p>异步方式通信：</p><p>1 高淇买一本电子书《Python实战笔记》。</p><p>2 书店老板说：我查一下，有结果了告诉你。</p><p>3 高淇刷抖音一小时</p><p>4 老板说，找到书了，发给你</p></blockquote><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345219.png" alt="image-20231219172145633"></p><p>线程(Thread)特点：</p><p>1 <strong>线程（Thread）</strong>是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位</p><p>2 线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；</p><p>3 一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；</p><p>4 拥有自己独立的栈和共享的堆，共享堆，不共享栈，标准线程由操作系统调度；</p><p>5 调度和切换：线程上下文切换比进程上下文切换要快得多。</p><h4 id="线程的创建方式"><a href="#线程的创建方式" class="headerlink" title="线程的创建方式"></a>线程的创建方式</h4><p>Python的标准库提供了两个模块： <code>_thread</code> 和 <code>threading</code> ， <code>_thread</code> 是低级模块， <code>threading</code> 是高级模块，对 <code>_thread</code> 进行了封装。绝大多数情况下，我们只需要使用 <code>threading</code> 这个高级模块。</p><p>线程的创建可以通过分为两种方式：</p><ol><li>方法包装</li><li>类包装</li></ol><p>线程的执行统一通过 <code>start()</code> 方法</p><h5 id="方法包装创建线程"><a href="#方法包装创建线程" class="headerlink" title="方法包装创建线程"></a>方法包装创建线程</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">方法包装建立线程</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;name&#125;</span>, start&quot;</span>)  <span class="comment"># format</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线程：<span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;name&#125;</span>, end&quot;</span>)  <span class="comment"># format</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，start&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建线程</span></span><br><span class="line">    t1 = Thread(target=function1, args=(<span class="string">&quot;t1&quot;</span>,))</span><br><span class="line">    t2 = Thread(target=function1, args=(<span class="string">&quot;t2&quot;</span>,))</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">运行结果可能会出现换行问题，是因为多个线程抢夺控制台输出的IO流。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">主线程，start</span></span><br><span class="line"><span class="string">线程t1, start</span></span><br><span class="line"><span class="string">线程：t1, 0</span></span><br><span class="line"><span class="string">线程t2, start</span></span><br><span class="line"><span class="string">线程：t2, 0</span></span><br><span class="line"><span class="string">主线程，end</span></span><br><span class="line"><span class="string">线程：t2, 1线程：t1, 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">线程：t2, 2</span></span><br><span class="line"><span class="string">线程：t1, 2</span></span><br><span class="line"><span class="string">线程t1, end线程t2, end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>    </span><br></pre></td></tr></table></figure><h5 id="类包装创建线程"><a href="#类包装创建线程" class="headerlink" title="类包装创建线程"></a>类包装创建线程</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">类包装创建线程</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写run方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;self.name&#125;</span>, start&quot;</span>)  <span class="comment"># format</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;线程：<span class="subst">&#123;self.name&#125;</span>, <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;self.name&#125;</span>, end&quot;</span>)  <span class="comment"># format</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，start&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建线程</span></span><br><span class="line">    t1 = MyThread(<span class="string">&quot;t1&quot;</span>)</span><br><span class="line">    t2 = MyThread(<span class="string">&quot;t2&quot;</span>)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，end&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="join-和守护线程"><a href="#join-和守护线程" class="headerlink" title="join()和守护线程"></a>join()和守护线程</h4><p><strong>join()</strong></p><p>之前的代码，主线程不会等待子线程结束。</p><p>如果需要==等待子线程结束后，再结束主线程==，可使用join()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;name&#125;</span>, start&quot;</span>)  <span class="comment"># format</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线程：<span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;name&#125;</span>, end&quot;</span>)  <span class="comment"># format</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，start&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建线程</span></span><br><span class="line">    t1 = Thread(target=function1, args=(<span class="string">&quot;t1&quot;</span>,))</span><br><span class="line">    t2 = Thread(target=function1, args=(<span class="string">&quot;t2&quot;</span>,))</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="comment"># 主线程会等待t1,t2结束后，再往下执行</span></span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，end&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>守护线程</strong></p><p>在行为上还有一种叫守护线程，主要的特征是它的生命周期。==主线程死亡，它也就随之死亡==。在python中，线程通过 <code>setDaemon(True|False)</code>来设置是否为守护线程。</p><p>守护线程的作用：</p><p>守护线程作用是为其他线程提供便利服务，守护线程最典型的应用就是 GC (垃圾收集器)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写run方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;self.name&#125;</span>, start&quot;</span>)  <span class="comment"># format</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;线程：<span class="subst">&#123;self.name&#125;</span>, <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线程<span class="subst">&#123;self.name&#125;</span>, end&quot;</span>)  <span class="comment"># format</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，start&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建线程(类的方式)</span></span><br><span class="line">    t1 = MyThread(<span class="string">&quot;t1&quot;</span>)</span><br><span class="line">    <span class="comment"># t1设置为守护线程</span></span><br><span class="line">    t1.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    t1.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程，end&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="全局解释器锁GIL问题"><a href="#全局解释器锁GIL问题" class="headerlink" title="全局解释器锁GIL问题"></a>全局解释器锁GIL问题</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345220.png" alt="image-20231220203021256"></p><p>在python中，无论你有多少核，在Cpython解释器中永远都是假象。无论你是4核，8核，还是16核…….不好意思，==同一时间执行的线程只有一个线程==，它就是这个样子的。这个是python的一个开发时候，设计的一个缺陷，所以说python中的线程是“含有水分的线程”。</p><p><strong>Python GIL(Global Interpreter Lock)</strong></p><p>Python代码的执行由Python 虚拟机(也叫解释器主循环，CPython版本)来控制，Python 在设计之初就考虑到要在解释器的主循环中，同时只有一个线程在执行，即在任意时刻，只有一个线程在解释器中运行。对Python 虚拟机的访问由全局解释器锁（GIL）来控制，正是这个锁能保证同一时刻只有一个线程在运行。</p><blockquote><p>:warning:GIL并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念,同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行,就没有GIL的问题。然而因为CPython是大部分环境下默认的Python执行环境。所以在很多人的概念里CPython就是Python，也就想当然的把GIL归结为Python语言的缺陷。</p></blockquote><h4 id="线程同步和互斥锁资源冲突案例"><a href="#线程同步和互斥锁资源冲突案例" class="headerlink" title="线程同步和互斥锁资源冲突案例"></a>线程同步和互斥锁资源冲突案例</h4><p><strong>线程同步的概念</strong></p><p>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象。 这时候，我们就需要用到“线程同步”。 线程同步其实就是一种==等待机制==，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面的线程使用完毕后，下一个线程再使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">未使用线程同步和互斥锁的情况</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, money, name</span>):</span><br><span class="line">        self.money = money</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟提款操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Drawing</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, drawingNum, account</span>):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.drawingNum = drawingNum</span><br><span class="line">        self.account = account</span><br><span class="line">        self.expenseTotal = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.account.money &lt; self.drawingNum:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        sleep(<span class="number">1</span>)  <span class="comment"># 判断完后阻塞</span></span><br><span class="line">        self.account.money -= self.drawingNum</span><br><span class="line">        self.expenseTotal += self.drawingNum</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;账户<span class="subst">&#123;self.account.name&#125;</span>，余额<span class="subst">&#123;self.account.money&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;账户<span class="subst">&#123;self.account.name&#125;</span>，总共取了<span class="subst">&#123;self.expenseTotal&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a1 = Account(<span class="number">100</span>, <span class="string">&quot;gaoqi&quot;</span>)</span><br><span class="line">    draw1 = Drawing(<span class="number">80</span>, a1)  <span class="comment"># 定义取钱线程对象；</span></span><br><span class="line">    draw2 = Drawing(<span class="number">80</span>, a1)  <span class="comment"># 定义取钱线程对象；</span></span><br><span class="line">    draw1.start()  <span class="comment"># 你取钱</span></span><br><span class="line">    draw2.start()  <span class="comment"># 你老婆取钱</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">账户gaoqi，余额20账户gaoqi，余额-60</span></span><br><span class="line"><span class="string">账户gaoqi，总共取了80</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">账户gaoqi，总共取了80</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="互斥锁典型案例"><a href="#互斥锁典型案例" class="headerlink" title="互斥锁典型案例"></a>互斥锁典型案例</h4><p>我们可以通过“<strong>锁机制</strong>”来实现线程同步问题，锁机制有如下几个要点：</p><ol><li>必须使用同一个锁对象</li><li>互斥锁的作用就是保证同一时刻只能有一个线程去操作共享数据，保证共享数据不会出现错误问题</li><li>使用互斥锁的好处确保某段关键代码只能由一个线程从头到尾完整地去执行</li><li>使用互斥锁会影响代码的执行效率</li><li>同时持有多把锁，容易出现死锁的情况</li></ol><p><strong>互斥锁是什么？</strong></p><p>互斥锁: 对共享数据进行锁定，保证同一时刻只能有一个线程去操作。</p><p>注意: 互斥锁是<strong>==多个线程一起去抢==</strong>，抢到锁的线程先执行，没有抢到锁的线程需要等待，等互斥锁使用完释放后，其它等待的线程再去抢这个锁</p><p><code>threading</code> 模块中定义了 <code>Lock</code> 变量，这个变量本质上是一个函数，通过调用这个函数可以获取一把互斥锁。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">互斥锁典型案例</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, money, name</span>):</span><br><span class="line">        self.money = money</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟提款操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Drawing</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, drawingNum, account</span>):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.drawingNum = drawingNum</span><br><span class="line">        self.account = account</span><br><span class="line">        self.expenseTotal = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        lock1.acquire()</span><br><span class="line">        <span class="keyword">if</span> self.account.money &lt; self.drawingNum:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;账户余额不足&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        sleep(<span class="number">1</span>)  <span class="comment"># 判断完后阻塞</span></span><br><span class="line">        self.account.money -= self.drawingNum</span><br><span class="line">        self.expenseTotal += self.drawingNum</span><br><span class="line">        lock1.release()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;账户<span class="subst">&#123;self.account.name&#125;</span>，余额<span class="subst">&#123;self.account.money&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;账户<span class="subst">&#123;self.account.name&#125;</span>，总共取了<span class="subst">&#123;self.expenseTotal&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a1 = Account(<span class="number">100</span>, <span class="string">&quot;gaoqi&quot;</span>)</span><br><span class="line">    lock1 = Lock()</span><br><span class="line">    draw1 = Drawing(<span class="number">80</span>, a1)  <span class="comment"># 定义取钱线程对象；</span></span><br><span class="line">    draw2 = Drawing(<span class="number">80</span>, a1)  <span class="comment"># 定义取钱线程对象；</span></span><br><span class="line">    draw1.start()  <span class="comment"># 你取钱</span></span><br><span class="line">    draw2.start()  <span class="comment"># 你老婆取钱</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="死锁问题和解决方案"><a href="#死锁问题和解决方案" class="headerlink" title="死锁问题和解决方案"></a>死锁问题和解决方案</h4><p><strong>死锁</strong></p><p>在多线程程序中，死锁问题很大一部分是由于一个线程同时获取多个锁造成的。</p><p><strong>死锁的解决方法</strong></p><p>死锁是由于“同步块需要同时持有多个锁造成”的，要解决这个问题，思路很简单，就是：同一个代码块，不要同时持有两个对象锁。</p><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p>互斥锁使用后，一个资源同时只有一个线程访问。如果某个资源，我们同时想让N个(定数值）线程访问？这时候，可以使用信号量。信号量控制同时访问资源的数量。信号量和锁相似，锁同一时间只允许一个对象(进程)通过，信号量同一时间允许多个对象(进程)通过。</p><p><strong>应用场景</strong></p><ol><li>在读写文件的时候，一般只能只有一个线程在写，而读可以有多个线程同时进行，如果需要限制同时读文件的线程个数，这时候就可以用到信号量了（如果用互斥锁，就是限制同一时刻只能有一个线程读取文件）。</li><li>在做爬虫抓取数据时。</li></ol><p><strong>底层原理</strong></p><p>信号量底层就是一个内置的计数器。每当资源获取时（调用acquire）计数器-1，资源释放时（调用release）计数器+1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">信号量的使用案例</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Semaphore</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一个房间一次只允许两个人通过</span></span><br><span class="line"><span class="string">若不使用信号量，会造成所有人都进入这个房子</span></span><br><span class="line"><span class="string">若只允许一人通过可以用锁-Lock()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name, se</span>):</span><br><span class="line">    se.acquire()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>进入房间&quot;</span>)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;***<span class="subst">&#123;name&#125;</span>走出房间&quot;</span>)</span><br><span class="line">    se.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    se = Semaphore(<span class="number">2</span>)  <span class="comment"># 信号量对象</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        t = Thread(target=home, args=(<span class="string">f&quot;tom<span class="subst">&#123;i&#125;</span>&quot;</span>, se))</span><br><span class="line">        t.start()</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tom0进入房间</span></span><br><span class="line"><span class="string">tom1进入房间</span></span><br><span class="line"><span class="string">***tom0走出房间***tom1走出房间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tom3进入房间</span></span><br><span class="line"><span class="string">tom2进入房间</span></span><br><span class="line"><span class="string">***tom3走出房间***tom2走出房间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tom4进入房间</span></span><br><span class="line"><span class="string">tom5进入房间</span></span><br><span class="line"><span class="string">***tom5走出房间</span></span><br><span class="line"><span class="string">***tom4走出房间</span></span><br><span class="line"><span class="string">tom6进入房间</span></span><br><span class="line"><span class="string">***tom6走出房间</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="事件Event对象"><a href="#事件Event对象" class="headerlink" title="事件Event对象"></a>事件Event对象</h4><p>事件Event主要用于唤醒正在阻塞等待状态的线程。</p><blockquote><p><strong>原理</strong></p><p>Event 对象包含一个可由线程设置的信号标志，它允许线程等待某些事件的发生。在初始情况下，event 对象中的信号标志被设置假。如果有线程等待一个 event 对象，而这个 event 对象的标志为假，那么这个线程将会被一直阻塞直至该标志为真。一个线程如果将一个 event 对象的信号标志设置为真，它将唤醒所有等待个 event 对象的线程。如果一个线程等待一个已经被设置为真的 event 对象，那么它将忽略这个事件，继续执行</p></blockquote><p><code>Event()</code> 可以创建一个事件管理标志，该标志（event）默认为False，event对象主要有四种方法可以调用：</p><div class="table-container"><table><thead><tr><th><strong>方法名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>event.wait(timeout=None)</code></td><td>调用该方法的线程会被阻塞，如果设置了timeout参数，超时后，线程会停止阻塞继续执行</td></tr><tr><td><code>event.set()</code></td><td>将event的标志设置为True，调用wait方法的所有线程将被唤醒</td></tr><tr><td><code>event.clear()</code></td><td>将event的标志设置为False，调用wait方法的所有线程将被阻塞</td></tr><tr><td><code>event.is_set()</code></td><td>判断event的标志是否为True</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">小伙伴们，围着吃火锅，当菜上齐了，请客的主人说：开吃！</span></span><br><span class="line"><span class="string">于是小伙伴一起动筷子，这种场景如何实现</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chihuoguo</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="comment"># 等待事件，进入等待阻塞状态</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>已经启动&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;小伙伴<span class="subst">&#123;name&#125;</span>已经进入就餐状态！&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    event.wait()</span><br><span class="line">    <span class="comment"># 收到事件后进入运行状态</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>收到通知了.&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;小伙伴<span class="subst">&#123;name&#125;</span>开始吃咯！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    <span class="comment"># 创建新线程</span></span><br><span class="line">    thread1 = threading.Thread(target=chihuoguo, args=(<span class="string">&quot;tom&quot;</span>,))</span><br><span class="line">    thread2 = threading.Thread(target=chihuoguo, args=(<span class="string">&quot;cherry&quot;</span>,))</span><br><span class="line">    <span class="comment"># 开启线程</span></span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 发送事件通知</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----&gt;&gt;&gt;主线程通知小伙伴开吃咯！&#x27;</span>)</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tom已经启动</span></span><br><span class="line"><span class="string">小伙伴tom已经进入就餐状态！</span></span><br><span class="line"><span class="string">cherry已经启动</span></span><br><span class="line"><span class="string">小伙伴cherry已经进入就餐状态！</span></span><br><span class="line"><span class="string">----&gt;&gt;&gt;主线程通知小伙伴开吃咯！</span></span><br><span class="line"><span class="string">tom收到通知了.</span></span><br><span class="line"><span class="string">小伙伴tom开始吃咯！</span></span><br><span class="line"><span class="string">cherry收到通知了.</span></span><br><span class="line"><span class="string">小伙伴cherry开始吃咯！</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="生产者-消费者模式"><a href="#生产者-消费者模式" class="headerlink" title="生产者-消费者模式"></a>生产者-消费者模式</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345221.png" alt="image-20231221222417350"></p><p>多线程环境下，我们经常需要<strong>多个线程的并发和协作</strong>。这个时候，就需要了解一个重要的多线程并发协作模型“生产者/消费者模式”。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345222.png" alt="image-20231221222800905"></p><p><strong>什么是生产者？</strong></p><p>生产者指的是负责生产数据的模块（这里模块可能是：方法、对象、线程、进程）。</p><p><strong>什么是消费者？</strong></p><p>消费者指的是负责处理数据的模块（这里模块可能是：方法、对象、线程、进程）</p><p><strong>什么是缓冲区？</strong></p><p>消费者不能直接使用生产者的数据，它们之间有个“缓冲区”。生产者将生产好的数据放入“缓冲区”，消费者从“缓冲区”拿要处理的数据。</p><blockquote><p>缓冲区是实现并发的核心，缓冲区的设置有3个好处：</p><ol><li><p><strong>实现线程的并发协作</strong></p><p>有了缓冲区以后，生产者线程只需要往缓冲区里面放置数据，而不需要管消费者消费的情况；同样，消费者只需要从缓冲区拿数据处理即可，也不需要管生产者生产的情况。 这样，就从逻辑上实现了“生产者线程”和“消费者线程”的分离。</p></li><li><p><strong>解耦了生产者和消费者</strong></p><p>生产者不需要和消费者直接打交道。</p></li><li><p><strong>解决忙闲不均，提高效率</strong></p></li></ol><p>生产者生产数据慢时，缓冲区仍有数据，不影响消费者消费；消费者处理数据慢时，生产者仍然可以继续往缓冲区里面放置数据。</p></blockquote><p><strong>缓冲区和queue对象</strong></p><p>从一个线程向另一个线程发送数据最安全的方式可能就是使用queue 库中的队列了。创建一个被多个线程共享的 Queue 对象，这些线程通过使用 <code>put()</code> 和 <code>get()</code> 操作来向队列中添加或者删除元素。Queue 对象已经包含了必要的锁，所以你可以通过它在多个线程间多安全地共享数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>():</span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> queue.qsize() &lt; <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;生产<span class="subst">&#123;num&#125;</span>号，大馒头&quot;</span>)</span><br><span class="line">            queue.put(<span class="string">f&quot;大馒头: <span class="subst">&#123;num&#125;</span>号&quot;</span>)</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;馒头框满了，等待来人消费&quot;</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;获取馒头：<span class="subst">&#123;queue.get()&#125;</span>&quot;</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    queue = Queue()</span><br><span class="line">    t1 = Thread(target=producer)</span><br><span class="line">    t2 = Thread(target=consumer)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">生产1号，大馒头</span></span><br><span class="line"><span class="string">获取馒头：大馒头: 1号</span></span><br><span class="line"><span class="string">生产2号，大馒头</span></span><br><span class="line"><span class="string">获取馒头：大馒头: 2号</span></span><br><span class="line"><span class="string">生产3号，大馒头</span></span><br><span class="line"><span class="string">获取馒头：大馒头: 3号</span></span><br><span class="line"><span class="string">生产4号，大馒头</span></span><br><span class="line"><span class="string">获取馒头：大馒头: 4号</span></span><br><span class="line"><span class="string">生产5号，大馒头</span></span><br><span class="line"><span class="string">获取馒头：大馒头: 5号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345223.png" alt="image-20231221223750713"></p><p>进程(Process)：==拥有自己独立的堆和栈，既不共享堆，也不共享栈==，进程由操作系统调度；进程切换需要的资源很最大，效率低。</p><p>对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程，就启动了一个记事本进程，打开两个记事本就启动了两个记事本进程，打开一个Word就启动了一个Word进程。</p><p><strong>进程的优缺点</strong></p><p>进程的<strong>优点</strong>：</p><ol><li>可以使用计算机多核，进行任务的并行执行，提高执行效率</li><li>运行不受其他进程影响，创建方便</li><li>空间独立，数据安全</li></ol><p>进程的<strong>缺点</strong>：</p><p>进程的创建和删除消耗的系统资源较多</p><p><strong>进程的创建方式(方法模式)</strong></p><p>Python的标准库提供了个模块： <code>multiprocessing</code></p><p>进程的创建可以通过分为两种方式：</p><ol><li>方法包装</li><li>类包装</li></ol><p>创建进程后，使用start()启动进程</p><h4 id="方法模式创建进程"><a href="#方法模式创建进程" class="headerlink" title="方法模式创建进程"></a>方法模式创建进程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 方法包装-多进程实现</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前进程ID：&quot;</span>, os.getpid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;父进程ID：&quot;</span>, os.getppid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Process:<span class="subst">&#123;name&#125;</span> start&quot;</span>)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Process:<span class="subst">&#123;name&#125;</span> end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是一个关于windows上多进程实现的bug。</span></span><br><span class="line"><span class="string">在windows上，子进程会自动import启动它的这个文件，而在import的时候是会自动执行这些语句的。</span></span><br><span class="line"><span class="string">如果不加__main__限制的话，就会无限递归创建子进程，进而报错。</span></span><br><span class="line"><span class="string">于是import的时候使用 __name__ ==&quot;__main__&quot; 保护起来就可以了。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前进程ID：&quot;</span>, os.getpid())</span><br><span class="line">    <span class="comment"># 创建进程</span></span><br><span class="line">    p1 = Process(target=func1, args=(<span class="string">&#x27;p1&#x27;</span>,))</span><br><span class="line">    p2 = Process(target=func1, args=(<span class="string">&#x27;p2&#x27;</span>,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">当前进程ID： 8132</span></span><br><span class="line"><span class="string">当前进程ID： 2100</span></span><br><span class="line"><span class="string">当前进程ID： 4468</span></span><br><span class="line"><span class="string">父进程ID： 8132</span></span><br><span class="line"><span class="string">Process:p1 start</span></span><br><span class="line"><span class="string">父进程ID： 8132</span></span><br><span class="line"><span class="string">Process:p2 start</span></span><br><span class="line"><span class="string">Process:p1 end</span></span><br><span class="line"><span class="string">Process:p2 end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="windows-多进程的一个bug"><a href="#windows-多进程的一个bug" class="headerlink" title="windows:多进程的一个bug"></a>windows:多进程的一个bug</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这是一个关于windows上多进程实现的bug。</span><br><span class="line">在windows上，子进程会自动import启动它的这个文件，而在import的时候是会自动执行这些语句的。</span><br><span class="line">如果不加__main__限制的话，就会无限递归创建子进程，进而报错。</span><br><span class="line">于是import的时候使用 __name__ ==&quot;__main__&quot; 保护起来就可以了。</span><br></pre></td></tr></table></figure><h4 id="类模式创建进程"><a href="#类模式创建进程" class="headerlink" title="类模式创建进程"></a>类模式创建进程</h4><p>和使用Thread 类创建子线程的方式非常类似，使用 Process 类创建实例化对象，其本质是调用该类的构造方法创建新进程。Process类的构造方法格式如下：</p><p><code>def __init__(self,group=None,target=None,name=None,args=(),kwargs=&#123;&#125;)</code></p><p>其中，各个参数的含义为：</p><p><code>group</code> ：该参数未进行实现，不需要传参；</p><p><code>target</code> ：为新建进程指定执行任务，也就是指定一个函数；</p><p><code>name</code> ：为新建进程设置名称；</p><p><code>args</code> ：为 target 参数指定的参数传递非关键字参数；</p><p><code>kwargs</code> ：为 target 参数指定的参数传递关键字参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyProcess</span>(<span class="title class_ inherited__">Process</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        Process.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;process:<span class="subst">&#123;self.name&#125;</span>,start&quot;</span>)</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;process:<span class="subst">&#123;self.name&#125;</span>,end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建进程</span></span><br><span class="line">    p1 = MyProcess(<span class="string">&quot;p1&quot;</span>)</span><br><span class="line">    p1.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Queue实现进程通信"><a href="#Queue实现进程通信" class="headerlink" title="Queue实现进程通信"></a>Queue实现进程通信</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345224.png" alt="image-20231230153859622"></p><p>前面讲解了使用 <code>Queue</code> 模块中的 <code>Queue</code> 类实现==线程==间通信，但要实现进程间通信，需要使用 <code>multiprocessing</code> 模块中的 <code>Queue</code> 类。简单的理解 <code>Queue</code> 实现==进程==间通信的方式，就是使用了操作系统给开辟的一个队列空间，各个进程可以把数据放到该队列中，当然也可以从队列中把自己需要的信息取走。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyProcess</span>(<span class="title class_ inherited__">Process</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, mq</span>):</span><br><span class="line">        Process.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.mq = mq</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;process:<span class="subst">&#123;self.name&#125;</span>,start&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;get data:<span class="subst">&#123;self.mq.get()&#125;</span>&quot;</span>)</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;process:<span class="subst">&#123;self.name&#125;</span>,end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mq = Queue()</span><br><span class="line">    mq.put(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    mq.put(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    mq.put(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进程列表</span></span><br><span class="line">    p_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        p = MyProcess(<span class="string">f&quot;p<span class="subst">&#123;i&#125;</span>&quot;</span>, mq)</span><br><span class="line">        p_list.append(p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> p_list:</span><br><span class="line">        p.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Pipe管道实现进程通信"><a href="#Pipe管道实现进程通信" class="headerlink" title="Pipe管道实现进程通信"></a>Pipe管道实现进程通信</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345225.png" alt="image-20231230213855878"></p><p>Pipe 直译过来的意思是“管”或“管道”，和实际生活中的管（管道）是非常类似的。</p><p>Pipe方法返回<code>（conn1， conn2）</code>代表一个管道的两个端。</p><blockquote><p>Pipe方法有duplex参数，如果duplex参数为True（默认值），那么这个参数是全双工模式，也就是说<code>conn1</code>和<code>conn2</code>均可收发。若duplex为False，<code>conn1</code>只负责接收消息，<code>conn2</code>只负责发送消息。send和recv方法分别是发送和接受消息的方法。例如，在全双工模式下，可以调用<code>conn1.send</code>发送消息，<code>conn1.recv</code>接收消息。如果没有消息可接收，recv方法会一直阻塞。如果管道已经被关闭，那么recv方法会抛出EOFError。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">conn1</span>):</span><br><span class="line">    sub_info = <span class="string">&quot;Hello!&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;进程1--<span class="subst">&#123;multiprocessing.current_process().pid&#125;</span>发送数据：<span class="subst">&#123;sub_info&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    conn1.send(sub_info)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;来自进程2:<span class="subst">&#123;conn1.recv()&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">conn2</span>):</span><br><span class="line">    sub_info = <span class="string">&quot;你好!&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;进程2--<span class="subst">&#123;multiprocessing.current_process().pid&#125;</span>发送数据：<span class="subst">&#123;sub_info&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    conn2.send(sub_info)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;来自进程1:<span class="subst">&#123;conn2.recv()&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建管道</span></span><br><span class="line">    conn1, conn2 = multiprocessing.Pipe()</span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    process1 = multiprocessing.Process(target=func1, args=(conn1,))</span><br><span class="line">    process2 = multiprocessing.Process(target=func2, args=(conn2,))</span><br><span class="line">    <span class="comment"># 启动子进程</span></span><br><span class="line">    process1.start()</span><br><span class="line">    process2.start()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">进程1--22424发送数据：Hello!</span></span><br><span class="line"><span class="string">进程2--17168发送数据：你好!</span></span><br><span class="line"><span class="string">来自进程1:Hello!来自进程2:你好!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Manager管理器实现进程通信"><a href="#Manager管理器实现进程通信" class="headerlink" title="Manager管理器实现进程通信"></a>Manager管理器实现进程通信</h4><p>管理器提供了一种创建共享数据的方法，从而可以在不同进程中共享。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, current_process</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name, m_list, m_dict</span>):</span><br><span class="line">    m_dict[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;尚学堂&#x27;</span></span><br><span class="line">    m_list.append(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> Manager() <span class="keyword">as</span> mgr:</span><br><span class="line">        m_list = mgr.<span class="built_in">list</span>()</span><br><span class="line">        m_dict = mgr.<span class="built_in">dict</span>()</span><br><span class="line">        m_list.append(<span class="string">&#x27;Hello!!&#x27;</span>)</span><br><span class="line">        <span class="comment"># 两个进程不能直接互相使用对象，需要互相传递</span></span><br><span class="line">        p1 = Process(target=func, args=(<span class="string">&#x27;p1&#x27;</span>, m_list, m_dict))</span><br><span class="line">        p1.start()</span><br><span class="line">        p1.join()  <span class="comment"># 等p1进程结束，主进程继续执行</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;主进程：<span class="subst">&#123;m_list&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;主进程：<span class="subst">&#123;m_dict&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="进程池-Pool-管理进程的两种典型案例"><a href="#进程池-Pool-管理进程的两种典型案例" class="headerlink" title="进程池(Pool)管理进程的两种典型案例"></a>进程池(Pool)管理进程的两种典型案例</h4><p>Python提供了更好的管理多个进程的方式，就是使用进程池。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345226.png" alt="image-20231230215358880"></p><p>进程池可以提供指定数量的进程给用户使用，即当有新的请求提交到进程池中时，如果池未满，则会创建一个新的进程用来执行该请求；反之，如果池中的进程数已经达到规定最大值，那么该请求就会等待，只要池中有进程空闲下来，该请求就能得到执行。</p><p>使用进程池的优点：</p><ol><li>提高效率，节省开辟进程和开辟内存空间的时间及销毁进程的时间</li><li>节省内存空间</li></ol><div class="table-container"><table><thead><tr><th><strong>类/方法</strong></th><th><strong>功能</strong></th><th><strong>参数</strong></th></tr></thead><tbody><tr><td><code>Pool(processes)</code></td><td>创建进程池对象</td><td>processes表示进程池中有多少进程</td></tr><tr><td><code>pool.apply_async(func,args,kwds)</code></td><td>异步执行；将事件放入到进程池队列</td><td>func 事件函数 args 以元组形式给func传参kwds 以字典形式给func传参 返回值：返回一个代表进程池事件的对象，通过返回值的get方法可以得到事件函数的返回值</td></tr><tr><td><code>pool.apply(func,args,kwds)</code></td><td>同步执行；将事件放入到进程池队列</td><td>func 事件函数 args 以元组形式给func传参kwds 以字典形式给func传参</td></tr><tr><td><code>pool.close()</code></td><td>关闭进程池</td><td></td></tr><tr><td><code>pool.join()</code></td><td>回收进程池</td><td></td></tr><tr><td><code>pool.map(func,iter)</code></td><td>类似于python的map函数，将要做的事件放入进程</td><td>func 要执行的函数 iter 迭代对象</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;打印当前进程的id:<span class="subst">&#123;os.getpid()&#125;</span>,<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = Pool(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt1&quot;</span>,), callback=func2)</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt2&quot;</span>,), callback=func2)</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt3&quot;</span>,), callback=func2)</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt4&quot;</span>,))</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt5&quot;</span>,))</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt6&quot;</span>,))</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt7&quot;</span>,))</span><br><span class="line">    pool.apply_async(func=func1, args=(<span class="string">&quot;sxt8&quot;</span>,))</span><br><span class="line"></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">打印当前进程的id:26676,sxt1</span></span><br><span class="line"><span class="string">打印当前进程的id:15944,sxt2</span></span><br><span class="line"><span class="string">打印当前进程的id:1352,sxt3</span></span><br><span class="line"><span class="string">打印当前进程的id:27176,sxt4</span></span><br><span class="line"><span class="string">打印当前进程的id:22592,sxt5</span></span><br><span class="line"><span class="string">打印当前进程的id:26676,sxt6</span></span><br><span class="line"><span class="string">sxt1</span></span><br><span class="line"><span class="string">打印当前进程的id:22592,sxt7</span></span><br><span class="line"><span class="string">打印当前进程的id:27176,sxt8</span></span><br><span class="line"><span class="string">sxt2</span></span><br><span class="line"><span class="string">sxt3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>使用with管理进程池</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;打印当前进程的id:<span class="subst">&#123;os.getpid()&#125;</span>,<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> Pool(<span class="number">5</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        args = pool.<span class="built_in">map</span>(func1, (<span class="string">&quot;sxt1,&quot;</span>, <span class="string">&quot;sxt2,&quot;</span>, <span class="string">&quot;sxt3,&quot;</span>, <span class="string">&quot;sxt4,&quot;</span>, <span class="string">&quot;sxt5,&quot;</span>, <span class="string">&quot;sxt6,&quot;</span>, <span class="string">&quot;sxt7,&quot;</span>, <span class="string">&quot;sxt8,&quot;</span>))</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> args:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345227.png" alt="image-20231230221221571"></p><h4 id="核心概念面试重点"><a href="#核心概念面试重点" class="headerlink" title="核心概念面试重点"></a>核心概念面试重点</h4><p>协程，Coroutines，也叫作纤程(Fiber)协程，全称是“协同程序”，用来实现任务协作。是一种在线程中，比线程更加轻量级的存在，由<strong>程序员自己写程序来管理</strong>。</p><p>当出现IO阻塞时，CPU一直等待IO返回，处于空转状态。这时候用协程，可以执行其他任务。当IO返回结果后，再回来处理数据。充分利用了IO等待的时间，提高了效率。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345228.png" alt="image-20231230231457305"></p><p><strong>协程的核心(控制流的让出和恢复)</strong></p><ol><li>每个协程有自己的执行栈，可以保存自己的执行现场</li><li>可以由用户程序按需创建协程（比如：遇到io操作）</li><li>协程“主动让出（yield）”执行权时候,会保存执行现场(保存中断时的寄存器上下文和栈)，然后切换到其他协程</li><li>协程恢复执行（resume）时，根据之前保存的执行现场恢复到中断前的状态，继续执行，这样就通过协程实现了轻量的由用户态调度的多任务模型</li></ol><p><strong>协程和多线程比较</strong></p><p>比如，有3个任务需要完成，每个任务都在等待I/O操作时阻塞自身。阻塞在I/O操作上所花费的时间已经用灰色框标示出来了。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312302345229.png" alt="image-20231230231731772"></p><ol><li>在单线程同步模型中，任务按照顺序执行。如果某个任务因为I/O而阻塞，其他所有的任务都必须等待，直到它完成之后它们才能依次执行。</li><li>多线程版本中，这3个任务分别在独立的线程中执行。这些线程由操作系统来管理，在多处理器系统上可以并行处理，或者在单处理器系统上交错执行。这使得当某个线程阻塞在某个资源的同时其他线程得以继续执行。</li><li>协程版本的程序中，3个任务交错执行，但仍然在一个单独的线程控制中。当处理I/O或者其他昂贵的操作时，注册一个回调到事件循环中，然后当I/O操作完成时继续执行。回调描述了该如何处理某个事件。事件循环轮询所有的事件，当事件到来时将它们分配给等待处理事件的回调函数。</li></ol><p><strong>协程的优点</strong></p><ol><li>由于自身带有上下文和栈，无需线程上下文切换的开销,属于程序级别的切换，操作系统完全感知不到，因而更加==轻量级==；</li><li>无需原子操作的锁定及同步的开销</li><li>方便切换控制流，简化编程模型</li><li>单线程内就可以实现并发的效果，最大限度地利用cpu，且可扩展性高，成本低（注：一个CPU支持上万的协程都不是问题。所以很适合用于高并发处理）</li></ol><blockquote><p>asyncio协程是写爬虫比较好的方式。比多线程和多进程都好.</p><p>开辟新的线程和进程是非常耗时的。</p></blockquote><p><strong>协程的缺点</strong></p><ol><li>无法利用多核资源：协程的本质是个单线程,它不能同时将 单个CPU 的多个核用上,协程需要和进程配合才能运行在多CPU上。</li><li>当然我们日常所编写的绝大部分应用都没有这个必要，除非是cpu密集型应用。</li></ol><h4 id="yield方式实现（已淘汰，了解即可）"><a href="#yield方式实现（已淘汰，了解即可）" class="headerlink" title="yield方式实现（已淘汰，了解即可）"></a>yield方式实现（已淘汰，了解即可）</h4><p>Python中的协程经历了很长的一段发展历程。其大概经历了如下三个阶段：</p><ol><li>最初的生成器变形 <code>yield/send</code></li><li>引入 <code>@asyncio.coroutine</code> 和 <code>yield from</code></li><li>Python3.5版本后，引入 <code>async/await</code> 关键字</li></ol><h4 id="asyncio异步IO实现协程-重点）"><a href="#asyncio异步IO实现协程-重点）" class="headerlink" title="asyncio异步IO实现协程(重点）"></a>asyncio异步IO实现协程(重点）</h4><ol><li>正常的函数执行时是不会中断的，所以你要写一个能够中断的函数，就需要加 <code>async</code></li><li><code>async</code> 用来声明一个函数为异步函数，异步函数的特点是能在函数执行过程中挂起，去执行其他异步函数，等到挂起条件（假设挂起条件是 <code>sleep(5)</code> ）消失后，也就是5秒到了再回来执行</li><li><code>await</code> 用来用来声明程序挂起，比如异步程序执行到某一步时需要等待的时间很长，就将此挂起，去执行其他的异步程序。</li><li><code>asyncio</code> 是python3.5之后的协程模块，是python实现并发重要的包，这个包使用<strong>事件循环</strong>驱动实现并发。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():  <span class="comment"># async表示方法是异步的</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;北京：第<span class="subst">&#123;i&#125;</span>次打印啦&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;func1执行完毕&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;上海：第<span class="subst">&#123;k&#125;</span>次打印了&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;func2执行完毕&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    res = <span class="keyword">await</span> asyncio.gather(func1(), func2())</span><br><span class="line">    <span class="comment"># await异步执行func1方法</span></span><br><span class="line">    <span class="comment"># 返回值为函数的返回值列表,本例为[&quot;func1执行完毕&quot;, &quot;func2执行完毕&quot;]</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;耗时<span class="subst">&#123;end_time - start_time&#125;</span>&quot;</span>)  <span class="comment"># 耗时3秒,效率极大提高</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">北京：第0次打印啦</span></span><br><span class="line"><span class="string">上海：第0次打印了</span></span><br><span class="line"><span class="string">北京：第1次打印啦</span></span><br><span class="line"><span class="string">上海：第1次打印了</span></span><br><span class="line"><span class="string">北京：第2次打印啦</span></span><br><span class="line"><span class="string">上海：第2次打印了</span></span><br><span class="line"><span class="string">[&#x27;func1执行完毕&#x27;, &#x27;func2执行完毕&#x27;]</span></span><br><span class="line"><span class="string">耗时3.0080811977386475</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923216.png" alt="image-20231230234542948"></p><p>IP是Internet Protocol Address，即”互联网协议地址”。</p><p>用来标识网络中的一个通信实体的地址。通信实体可以是计算机、路由器等。 比如互联网的每个服务器都要有自己的IP地址，而每个局域网的计算机要通信也要配置IP地址。</p><p>路由器是连接两个或多个网络的网络设备。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923217.png" alt="image-20231230234844602"></p><p>IP地址实际上是一个32位整数（称为IPv4），以字符串表示的IP地址如 <code>192.168.0.1</code> 实际上是把32位整数按8位分组后的数字表示，目的是便于阅读。</p><p>IPv6地址实际上是一个128位整数，它是目前使用的IPv4的升级版，以字符串表示类似于 <code>2001:0db8:85a3:0042:1000:8a2e:0370:7334</code></p><p><strong>公有地址</strong></p><p>公有地址（Public address）由Inter NIC（Internet NetworkInformation Center互联网信息中心）负责。这些IP地址分配给注册并向Inter NIC提出申请的组织机构。通过它直接访问互联网。</p><p><strong>私有地址</strong></p><p>私有地址（Private address）属于非注册地址，专门为组织机构内部使用。</p><p>以下列出留用的内部私有地址</p><p>A类 10.0.0.0—10.255.255.255</p><p>B类 172.16.0.0—172.31.255.255</p><p>C类 192.168.0.0—192.168.255.255</p><h4 id="端口port"><a href="#端口port" class="headerlink" title="端口port"></a>端口port</h4><p>端口号用来识别计算机中进行通信的应用程序。因此，它也被称为程序地址。</p><p>一台计算机上同时可以运行多个程序。传输层协议正是利用这些端口号识别本机中正在进行通信的应用程序，并准确地进行数据传输。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923218.png" alt="image-20231230235342700"></p><p><strong>端口分配</strong></p><p>端口是虚拟的概念，并不是说在主机上真的有若干个端口。通过端口，可以在一个主机上运行多个网络应用程序。 端口的表示是一个16位的二进制整数，对应十进制的0-65535。操作系统中一共提供了0~65535可用端口范围。</p><p>按端口号分类：</p><p><strong>公认端口（Well Known Ports）：</strong>从0到1023，它们紧密绑定（binding）于一些服务。通常这些端口的通讯明确表明了某种服务</p><p>的协议。例如：80端口实际上总是HTTP通讯</p><p><strong>注册端口（Registered Ports）：</strong>从1024到65535。它们松散地绑定于一些服务。也就是说有许多服务绑定于这些端口，这些        端        口同样用于许多其它目的。例如：许多系统处理动态端口从1024左右开始。</p><h4 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h4><p>国际标准化组织(ISO，即International Organization forStandardization)定义了网络通信协议的基本框架，被称为OSI（Open System Interconnect，即开放系统互联）模型。</p><p>OSI模型制定的七层标准模型，分别是：应用层，表示层，会话层，传输层，网络层，数据链路层，物理层。</p><p>OSI七层协议模型如图所示：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923219.png" alt="image-20231230235839168"></p><h4 id="网络通信协议的分层-ISO分层模型"><a href="#网络通信协议的分层-ISO分层模型" class="headerlink" title="网络通信协议的分层-ISO分层模型"></a>网络通信协议的分层-ISO分层模型</h4><p>虽然国际标准化组织制定了这样一个网络通信协议的模型，但是实际上互联网通讯使用最多的网络通信协议是TCP/IP网络通信协议。</p><p>TCP/IP 是一个协议族，也是按照层次划分，共四层：应用层，传输层，互连网络层，网络接口层（物理+数据链路层）。</p><p>把用户应用程序作为最高层，把物理通信线路作为最低层，将其间的协议处理分为若干层，规定每层处理的任务，也规定每层的接口标准。</p><p>ISO模型与TCP/IP模型的对应关系如图所示。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923220.png" alt="image-20231230235947847"></p><h4 id="TCP和UDP传输数据的区别"><a href="#TCP和UDP传输数据的区别" class="headerlink" title="TCP和UDP传输数据的区别"></a>TCP和UDP传输数据的区别</h4><p>TCP 和 UDP 的优缺点无法简单地、绝对地去做比较：</p><p>TCP 用于在传输层有必要实现<strong>可靠</strong>传输的情况；</p><p>UDP 主要用于那些对高速传输和实时性有较高要求的通信或广播通信。</p><p>TCP 和 UDP 应该根据应用的目的按需使用。</p><p><strong>TCP</strong></p><p>TCP（Transmission Control Protocol，传输控制协议）。TCP方式就类似于拨打电话，使用该种方式进行网络通讯时，需要建立专门的虚拟连接，然后进行可靠的数据传输，如果数据发送失败，则客户端会自动重发该数据。</p><p><strong>UDP</strong></p><p>UDP（User Data Protocol，用户数据报协议）</p><p>UDP是一个非连接的协议，传输数据之前源端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。 在发送端，UDP传送数据的速度仅仅是受应用程序生成数据的速度、 计算机的能力和传输带宽的限制； 在接收端，UDP把每个消息段放在队列中，应用程序每次从队列中读一个消息段。</p><p>UDP方式就类似于发送短信，使用这种方式进行网络通讯时，不需要建立专门的虚拟连接，传输也不是很可靠，如果发送失败则客户端无法获得。</p><p>UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p><p><strong>TCP和UDP区别</strong></p><p>这两种传输方式都在实际的网络编程中使用，重要的数据一般使用TCP方式进行数据传输，而大量的非核心数据则可以通过UDP方式进行传递，在一些程序中甚至结合使用这两种方式进行数据传递。由于TCP需要建立专用的虚拟连接以及确认传输是否正确，所以使用TCP方式的速度稍微慢一些，而且传输时产生的数据量要比UDP稍微大一些。</p><div class="table-container"><table><thead><tr><th></th><th><strong>UDP</strong></th><th><strong>TCP</strong></th></tr></thead><tbody><tr><td>是否连接</td><td>无连接</td><td>面向连接</td></tr><tr><td>是否可靠</td><td>不可靠传输，不使用流量控制和拥塞控制</td><td>可靠传输，使用流量控制和拥塞控制</td></tr><tr><td>连接对象个数</td><td>支持一对一，一对多，多对一和多对多交互通信</td><td>只能是一对一通信</td></tr><tr><td>传输方式</td><td>面向报文</td><td>面向字节流</td></tr><tr><td>首部开销</td><td>首部开销小，仅8字节</td><td>首部最小20字节，最大60字节</td></tr><tr><td>适用场景</td><td>适用于实时应用（IP电话、视频会议、直播等）</td><td>适用于要求可靠传输的应用，例如文件传输</td></tr></tbody></table></div><blockquote><p><strong>总结</strong></p><p>TCP是面向连接的，传输数据安全，稳定，效率相对较低。</p><p>UDP是面向无连接的，传输数据不安全，效率较高。</p></blockquote><h4 id="TCP建立连接的三次握手"><a href="#TCP建立连接的三次握手" class="headerlink" title="TCP建立连接的三次握手"></a>TCP建立连接的三次握手</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923222.png" alt="image-20231231164116510"></p><p>TCP是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接。 一个TCP连接必须要经过三次“对话”才能建立起来，其中的过程非常复杂， 只简单的描述下这三次对话的简单过程：</p><p>1）主机A向主机B发出连接请求：“我想给你发数据，可以吗？”，这是第一次对话；</p><p>2）主机B向主机A发送同意连接和要求同步 （同步就是两台主机一个在发送，一个在接收，协调工作）的数据包 ：“可以，你什么时              候发？”，这是第二次对话；</p><p>3）主机A再发出一个数据包确认主机B的要求同步：“我现在就发，你接着吧！”， 这是第三次握手。三次“对话”的目的是使数据包              的发送和接收同步， 经过三次“对话”之后，主机A才向主机B正式发送数据。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923223.png" alt="image-20231231164057483"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923224.png" alt="image-20231231164208963"></p><ol><li>第一步，客户端发送一个包含SYN即同步（Synchronize）标志的TCP报文，SYN同步报文会指明客户端使用的端口以及TCP连接的初始序号。</li><li>第二步，服务器在收到客户端的SYN报文后，将返回一个SYN+ACK的报文，表示客户端的请求被接受，同时TCP序号被加一，ACK即确认（Acknowledgement）</li><li>第三步，客户端也返回一个确认报文ACK给服务器端，同样TCP序列号被加一，到此一个TCP连接完成。然后才开始通信的第二步：数据处理。</li></ol><p>这就是所说的TCP的三次握手（Three-way Handshake）。</p><blockquote><p>为什么TCP协议有三次握手,而UDP协议没有？</p><p>因为三次握手的目的是在client端和server端建立可靠的连接。保证双方发送的数据对方都能接受到，这也是TCP协议的被</p><p>称为可靠的数据传输协议的原因。而UDP就不一样，UDP不提供可靠的传输模式，发送端并不需要得到接收端的状态，因此</p><p>UDP协议就用不着使用三次握手。</p></blockquote><h4 id="TCP断开连接的四次挥手"><a href="#TCP断开连接的四次挥手" class="headerlink" title="TCP断开连接的四次挥手"></a>TCP断开连接的四次挥手</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923225.png" alt="image-20231231164341302"></p><p><strong>TCP建立连接要进行3次握手，而断开连接要进行4次：</strong></p><p>第一次： 当主机A完成数据传输后,将控制位FIN置1，提出停止TCP连接的请求 ；</p><p>第二次： 主机B收到FIN后对其作出响应，确认这一方向上的TCP连接将关闭,将ACK置1；</p><p>第三次： 由B 端再提出反方向的关闭请求,将FIN置1；</p><p>第四次： 主机A对主机B的请求进行确认，将ACK置1，双方向的关闭结束。</p><p>由TCP的三次握手和四次断开可以看出，TCP使用面向连接的通信方式， 大大提高了数据通信的可靠性，使发送数据端和接收端在数据</p><p>正式传输前就有了交互， 为数据正式传输打下了可靠的基础。</p><h4 id="数据包与处理流程"><a href="#数据包与处理流程" class="headerlink" title="数据包与处理流程"></a>数据包与处理流程</h4><p><strong>什么是数据包</strong></p><p>通信传输中的数据单位，一般也称“数据包”。在数据包中包括：</p><p>包、帧、数据包、段、消息。</p><p>网络中传输的数据包由两部分组成：一部分是协议所要用到的首部，另一部分是上一层传过来的数据。首部的结构由协议的具体规</p><p>范详细定义。在数据包的首部，明确标明了协议应该如何读取数据。反过来说，看到首部，也就能够了解该协议必要的信息以及所</p><p>要处理的数据。包首部就像协议的脸。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923226.png" alt="image-20231231164541622"></p><p><strong>数据包处理流程</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923227.png" alt="image-20231231204815467"></p><h3 id="套接字编程实战"><a href="#套接字编程实战" class="headerlink" title="套接字编程实战"></a>套接字编程实战</h3><h4 id="socket编程介绍"><a href="#socket编程介绍" class="headerlink" title="socket编程介绍"></a>socket编程介绍</h4><p>TCP协议和UDP协议是传输层的两种协议。Socket是==传输层供给应用层的编程接口==，所以Socket编程就分为TCP编程和UDP编程两类。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923228.png" alt="image-20231231205201674"></p><p>Socket编程封装了常见的TCP、UDP操作，可以实现非常方便的网络编程。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923229.png" alt="image-20231231205316288"></p><h4 id="socket-函数介绍"><a href="#socket-函数介绍" class="headerlink" title="socket()函数介绍"></a>socket()函数介绍</h4><p>在Python语言标准库中，通过使用socket模块提供的socket对象，可以在计算机网络中建立可以互相通信的服务器与客户端。在服务</p><p>器端需要建立一个socket对象，并等待客户端的连接。客户端使用socket对象与服务器端进行连接，一旦连接成功，客户端和服务器</p><p>端就可以进行通信了。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923230.png" alt="image-20231231205344694"></p><blockquote><p>:warning:上图中，我们可以看出socket通讯中，发送和接收数据，都是通过操作系统控制网卡来进行。因此，我们在使用之后，必须关闭socket。</p></blockquote><p>在Python 中，通常用一个Socket表示“打开了一个网络连接”，语法格式如下：</p><p><code>socket.socket([family[, type[, proto]]])</code></p><p><code>family</code> : 套接字家族可以使 <code>AF_UNIX</code> 或者 <code>AF_INET</code> ；</p><blockquote><p>AF 表示ADDRESS FAMILY 地址族</p><p>AF_INET（又称 PF_INET）是 IPv4 网络协议的套接字类型；而AF_UNIX 则是 Unix 系统本地通信。</p></blockquote><p><code>type</code> : 套接字类型可以根据是面向连接的还是非连接分为 <code>SOCK_STREAM</code>或 <code>SOCK_DGRAM</code> ； </p><p><code>protocol</code> : 一般不填，默认为0。</p><p>Socket主要分为面向连接的Socket和无连接的Socket。</p><p>无连接Socket的主要协议是用户数据报协议，也就是常说的UDP，UDP Socket的名字是 <code>SOCK_DGRAM</code> 。创建套接字UDP/IP套接字，可以调用 <code>socket.socket()</code> 。示例代码如下    ：</p><p><code>udpSocket=socket.socket (AF_INET,SOCK_DGRAM)</code></p><h4 id="socket对象的内置函数和属性"><a href="#socket对象的内置函数和属性" class="headerlink" title="socket对象的内置函数和属性"></a>socket对象的内置函数和属性</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923231.png" alt="image-20240101001210654"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923232.png" alt="image-20240101001227868"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923233.png" alt="image-20240101001236545"></p><h4 id="UDP编程介绍"><a href="#UDP编程介绍" class="headerlink" title="UDP编程介绍"></a>UDP编程介绍</h4><p>UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。</p><p>创建Socket时， <code>SOCK_DGRAM</code> 指定了这个Socket的类型是UDP。绑定端口和TCP一样，但是不需要调用 <code>listen()</code> 方法，而是直接接收来自任何客户端的数据。 <code>recvfrom()</code> 方法返回数据和客户端的地址与端口，这样，服务器收到数据后，直接调用 <code>sendto()</code> 就可以把数据用UDP发给客户端。</p><h4 id="UDP编程的实现"><a href="#UDP编程的实现" class="headerlink" title="UDP编程的实现"></a>UDP编程的实现</h4><p>UDP接收数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最简化的UDP服务端代码</span></span><br><span class="line">s = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建UDP类型的套接字</span></span><br><span class="line">s.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>))  <span class="comment"># 绑定端口，IP可以不写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;等待接收的数据！&quot;</span>)</span><br><span class="line">recv_data = s.recvfrom(<span class="number">1024</span>)  <span class="comment"># 1024表示本次接受的最大字节数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;收到的远程信息：<span class="subst">&#123;recv_data[<span class="number">0</span>].decode(<span class="string">&#x27;gbk&#x27;</span>)&#125;</span>, form<span class="subst">&#123;recv_data[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>UDP发送数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最简化的UDP客户端发送消息代码</span></span><br><span class="line">s = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建UDP类型的套接字</span></span><br><span class="line">addr = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>)</span><br><span class="line">data = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line">s.sendto(data.encode(<span class="string">&quot;gbk&quot;</span>), addr)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h4 id="UDP持续通信"><a href="#UDP持续通信" class="headerlink" title="UDP持续通信"></a>UDP持续通信</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># UDP服务端持续接收消息代码</span></span><br><span class="line">s = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建UDP类型的套接字</span></span><br><span class="line">s.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>))  <span class="comment"># 绑定端口，IP可以不写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;等待接收的数据！&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    recv_data = s.recvfrom(<span class="number">1024</span>)  <span class="comment"># 1024表示本次接受的最大字节数</span></span><br><span class="line">    recv_content = recv_data[<span class="number">0</span>].decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;收到的远程信息：<span class="subst">&#123;recv_content&#125;</span>, form<span class="subst">&#123;recv_data[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> recv_content == <span class="string">&quot;88&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;结束聊天&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># UDP客户端持续发送消息代码</span></span><br><span class="line">s = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建UDP类型的套接字</span></span><br><span class="line">addr = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line">    s.sendto(data.encode(<span class="string">&quot;gbk&quot;</span>), addr)</span><br><span class="line">    <span class="keyword">if</span> data == <span class="string">&quot;88&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;结束聊天&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h4 id="结合多线程实现UDP双向自由通信"><a href="#结合多线程实现UDP双向自由通信" class="headerlink" title="结合多线程实现UDP双向自由通信"></a>结合多线程实现UDP双向自由通信</h4><blockquote><p>UDP 不同于 TCP，不存在请求连接和受理过程，因此在某种意义上无法明确区分服务器端和客户端，只是因为其提供服务而</p><p>称为服务器端。</p></blockquote><p>如下服务端、客户端代码几乎一模一样，注意接收和发送端口对应，即可。</p><p><strong>UDP实现多线程服务端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># UDP实现多线程服务端代码</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        recv_data = s.recvfrom(<span class="number">1024</span>)  <span class="comment"># 1024表示本次接受的最大字节数</span></span><br><span class="line">        recv_content = recv_data[<span class="number">0</span>].decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;收到的远程信息：<span class="subst">&#123;recv_content&#125;</span>, form<span class="subst">&#123;recv_data[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> recv_content == <span class="string">&quot;88&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束聊天&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>():</span><br><span class="line">    addr = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line">        s.sendto(data.encode(<span class="string">&quot;gbk&quot;</span>), addr)</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">&quot;88&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束聊天&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建UDP类型的套接字</span></span><br><span class="line">    s.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>))  <span class="comment"># 绑定端口，IP可以不写</span></span><br><span class="line">    <span class="comment"># 创建两个线程</span></span><br><span class="line">    t1 = Thread(target=recv_data)</span><br><span class="line">    t2 = Thread(target=send_data)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><p><strong>UDP实现多线程客户端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># UDP实现多线程客户端代码</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        recv_data = s.recvfrom(<span class="number">1024</span>)  <span class="comment"># 1024表示本次接受的最大字节数</span></span><br><span class="line">        recv_content = recv_data[<span class="number">0</span>].decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;收到的远程信息：<span class="subst">&#123;recv_content&#125;</span>, form<span class="subst">&#123;recv_data[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> recv_content == <span class="string">&quot;88&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束聊天&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>():</span><br><span class="line">    addr = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line">        s.sendto(data.encode(<span class="string">&quot;gbk&quot;</span>), addr)</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">&quot;88&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束聊天&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建UDP类型的套接字</span></span><br><span class="line">    s.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>))  <span class="comment"># 绑定端口，IP可以不写</span></span><br><span class="line">    <span class="comment"># 创建两个线程</span></span><br><span class="line">    t1 = Thread(target=recv_data)</span><br><span class="line">    t2 = Thread(target=send_data)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><h4 id="TCP编程介绍"><a href="#TCP编程介绍" class="headerlink" title="TCP编程介绍"></a>TCP编程介绍</h4><p>面向连接的Socket使用的协议是TCP协议。TCP的Socket名称是<code>SOCK_STREAM</code> 。创建套接字TCP套接字，可以调用 <code>socket.socket()</code> 。示例代码如下：</p><p><code>tcpSocket=socket.socket(AF_INET,SOCK_STREAM)</code></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202401061923234.png" alt="image-20240106181134943"></p><h4 id="TCP编程的实现"><a href="#TCP编程的实现" class="headerlink" title="TCP编程的实现"></a>TCP编程的实现</h4><p>在Python语言中创建Socket服务端程序，需要使用socket模块中的socket类。创建Socket服务器程序的步骤如下：</p><p>（1） 创建Socket对象。</p><p>（2） 绑定端口号。</p><p>（3） 监听端口号。</p><p>（4） 等待客户端Socket的连接。</p><p>（5） 读取客户端发送过来的数据。</p><p>（6） 向客户端发送数据。</p><p>（7） 关闭客户端Socket连接。</p><p>（8） 关闭服务端Socket连接。</p><p><strong>TCP服务器端接收数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">server_socket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建TCP类型的套接字</span></span><br><span class="line">server_socket.bind(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>)  <span class="comment"># 本机监听8899端口</span></span><br><span class="line">server_socket.listen(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;等待接收连接！&quot;</span>)</span><br><span class="line">client_socket, client_info = server_socket.accept()</span><br><span class="line">recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 最大接收1024字节</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;收到信息，<span class="subst">&#123;recv_data.decode(<span class="string">&#x27;gbk&#x27;</span>)&#125;</span>,来自:<span class="subst">&#123;client_info&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">client_socket.close()</span><br><span class="line">server_socket.close()</span><br></pre></td></tr></table></figure><p><strong>TCP客户端发送数据到服务端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client_socket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建TCP类型的套接字</span></span><br><span class="line">client_socket.connect((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>))</span><br><span class="line">client_socket.send(<span class="string">&quot;hello&quot;</span>.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure><h4 id="TCP双向持续通信"><a href="#TCP双向持续通信" class="headerlink" title="TCP双向持续通信"></a>TCP双向持续通信</h4><p><strong>TCP：双向通信Socket之服务器端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">server_socket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建TCP类型的套接字</span></span><br><span class="line">server_socket.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>))  <span class="comment"># 本机监听8899端口</span></span><br><span class="line">server_socket.listen(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;等待接收连接！&quot;</span>)</span><br><span class="line">client_socket, client_info = server_socket.accept()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一个客户端建立成功&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 最大接收1024字节</span></span><br><span class="line">    recv_content = recv_data.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;客户端说：<span class="subst">&#123;recv_content&#125;</span>,来自:<span class="subst">&#123;client_info&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> recv_content == <span class="string">&quot;end&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    client_socket.send(msg.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"></span><br><span class="line">client_socket.close()</span><br><span class="line">server_socket.close()</span><br></pre></td></tr></table></figure><p><strong>TCP：双向通信Socke之客户端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client_socket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建TCP类型的套接字</span></span><br><span class="line">client_socket.connect((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 给服务端发消息</span></span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    client_socket.send(msg.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">&quot;end&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 接收服务端消息</span></span><br><span class="line">    recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 最大接收1024字节</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;服务端说：<span class="subst">&#123;recv_data.decode(<span class="string">&#x27;gbk&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure><h4 id="结合多线程实现TCP双向传送-自由聊天"><a href="#结合多线程实现TCP双向传送-自由聊天" class="headerlink" title="结合多线程实现TCP双向传送(自由聊天)"></a>结合多线程实现TCP双向传送(自由聊天)</h4><p><strong>TCP服务端结合多线程实现自由收发信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">双向通信Socket之服务器端</span></span><br><span class="line"><span class="string">    读取客户端发送的数据，将内容输出到控制台</span></span><br><span class="line"><span class="string">    将控制台输入的信息发送给客户器端</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 读取客户端的消息</span></span><br><span class="line">        recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 最大接收1024字节</span></span><br><span class="line">        recv_content = recv_data.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将消息输出到控制台</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;客户端说：<span class="subst">&#123;recv_content&#125;</span>,来自:<span class="subst">&#123;client_info&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> recv_content == <span class="string">&quot;end&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束接收消息！&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 获取控制台信息</span></span><br><span class="line">        msg = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">        client_socket.send(msg.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> msg == <span class="string">&quot;end&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束发送消息！&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建Socket对象</span></span><br><span class="line">    server_socket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建TCP类型的套接字</span></span><br><span class="line">    <span class="comment"># 绑定端口</span></span><br><span class="line">    server_socket.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>))  <span class="comment"># 本机监听8899端口</span></span><br><span class="line">    <span class="comment"># 监听客户端的连接</span></span><br><span class="line">    server_socket.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;等待接收连接！&quot;</span>)</span><br><span class="line">    <span class="comment"># 接收客户端连接</span></span><br><span class="line">    client_socket, client_info = server_socket.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;一个客户端建立成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">    t1 = Thread(target=recv_data)</span><br><span class="line">    t2 = Thread(target=send_data)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    client_socket.close()</span><br><span class="line">    server_socket.close()</span><br></pre></td></tr></table></figure><p><strong>TCP客户端结合多线程实现自由收发信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">双向通信Socket之客户端</span></span><br><span class="line"><span class="string">    将控制台输入的信息发送给服务器端</span></span><br><span class="line"><span class="string">    读取服务器端的数据，将内容输出到控制台</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 接收服务端消息</span></span><br><span class="line">        recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 最大接收1024字节</span></span><br><span class="line">        recv_content = recv_data.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;服务端说：<span class="subst">&#123;recv_content&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> recv_content == <span class="string">&quot;end&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束接收消息！&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 给服务端发消息</span></span><br><span class="line">        msg = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">        client_socket.send(msg.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> msg == <span class="string">&quot;end&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束发送消息！&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client_socket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建TCP类型的套接字</span></span><br><span class="line">    client_socket.connect((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8899</span>))</span><br><span class="line"></span><br><span class="line">    t1 = Thread(target=recv_data)</span><br><span class="line">    t2 = Thread(target=send_data)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    client_socket.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python深入和提高</title>
      <link href="/archives/8df5f8b9.html"/>
      <url>/archives/8df5f8b9.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Python深入和提高"><a href="#Python深入和提高" class="headerlink" title="Python深入和提高"></a>Python深入和提高</h1><h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><h3 id="异常的本质-调试错误的核心理念"><a href="#异常的本质-调试错误的核心理念" class="headerlink" title="异常的本质-调试错误的核心理念"></a>异常的本质-调试错误的核心理念</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555906.png" alt="image-20231119182040284"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555908.png" alt="image-20231121150902973"></p><h3 id="try-except基本结构"><a href="#try-except基本结构" class="headerlink" title="try_except基本结构"></a>try_except基本结构</h3><p><strong>try…一个except结构</strong></p><p>try…except是最常见的异常处理结构。结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被监控可能发生引起异常的语句块</span><br><span class="line"><span class="keyword">except</span> BaseException [<span class="keyword">as</span> e]:</span><br><span class="line">    异常处理语句</span><br></pre></td></tr></table></figure><ol><li><code>try</code>块包含着可能引发异常的代码，<code>except</code>块则用来捕捉和处理发生的异常。</li><li>执行的时候，如果<code>try</code>块中没有引发异常，则跳过<code>except</code>块继续执行后续代码；</li><li>执行的时候，如果<code>try</code>块中发生了异常，则跳过<code>try</code>块中的后续代码，跳到相应的<code>except</code></li><li>块中处理异常；异常处理完后，继续执行后续代码。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">    a = <span class="number">2</span> / <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step2&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step3&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;step4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">step1</span></span><br><span class="line"><span class="string">step3</span></span><br><span class="line"><span class="string">division by zero</span></span><br><span class="line"><span class="string">step4</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="try-多个except结构"><a href="#try-多个except结构" class="headerlink" title="try_多个except结构"></a>try_多个except结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;请输入被除数：&quot;</span>)</span><br><span class="line">    b = <span class="built_in">input</span>(<span class="string">&quot;请输入除数：&quot;</span>)</span><br><span class="line">    c = <span class="built_in">float</span>(a)/<span class="built_in">float</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;异常，除数不能为0&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;异常：除数和被除数都应该为数值类型&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请输入被除数：1</span></span><br><span class="line"><span class="string">请输入除数：dd</span></span><br><span class="line"><span class="string">could not convert string to float: &#x27;dd&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;ValueError&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="try…except…else结构"><a href="#try…except…else结构" class="headerlink" title="try…except…else结构"></a>try…except…else结构</h3><p><code>try..except...else</code>结构增加了<code>else</code>块。如果<code>try</code>块中没有抛出异常，则执行<code>else</code>块。如果<code>try</code>块中抛出异常，则执行<code>except</code>块，不执行<code>else</code>块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;请输入被除数：&quot;</span>)</span><br><span class="line">    b = <span class="built_in">input</span>(<span class="string">&quot;请输入除数：&quot;</span>)</span><br><span class="line">    c = <span class="built_in">float</span>(a)/<span class="built_in">float</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;除的结果为：&quot;</span>, c)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请输入被除数：3</span></span><br><span class="line"><span class="string">请输入除数：4</span></span><br><span class="line"><span class="string">0.75</span></span><br><span class="line"><span class="string">除的结果为： 0.75</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="try…except…finally结构和return语句位置"><a href="#try…except…finally结构和return语句位置" class="headerlink" title="try…except…finally结构和return语句位置"></a>try…except…finally结构和return语句位置</h3><p><code>try...except..finally</code>结构中，<code>finally</code>块无论是否发生异常都会被执行；通常用来释放<code>try</code>块中申请的资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;请输入被除数：&quot;</span>)</span><br><span class="line">    b = <span class="built_in">input</span>(<span class="string">&quot;请输入除数：&quot;</span>)</span><br><span class="line">    c = <span class="built_in">float</span>(a)/<span class="built_in">float</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;除的结果为：&quot;</span>, c)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是finally语句，无论是否发生异常我都会被执行&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请输入被除数：3</span></span><br><span class="line"><span class="string">请输入除数：0</span></span><br><span class="line"><span class="string">float division by zero</span></span><br><span class="line"><span class="string">&lt;class &#x27;ZeroDivisionError&#x27;&gt;</span></span><br><span class="line"><span class="string">我是finally语句，无论是否发生异常我都会被执行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>return语句和异常处理问题</strong></p><p>由于<code>return</code>有两种作用：结束方法运行、返回值。我们一般不把<code>return</code>放到异常处理结构中，而是放到方法最后。</p><h3 id="常见异常汇总说明"><a href="#常见异常汇总说明" class="headerlink" title="常见异常汇总说明"></a>常见异常汇总说明</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555909.png" alt="image-20231120213240849"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555910.png" alt="image-20231120213330316"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555911.png" alt="image-20231120213358038"></p><div class="table-container"><table><thead><tr><th><strong>异常名称</strong></th><th style="text-align:center"><strong>说明</strong></th></tr></thead><tbody><tr><td>ArithmeticError</td><td style="text-align:center">所有数值计算错误的基类</td></tr><tr><td>AssertionError</td><td style="text-align:center">断言语句失败</td></tr><tr><td>AttributeError</td><td style="text-align:center">对象没有这个属性</td></tr><tr><td>BaseException</td><td style="text-align:center">所有异常的基类</td></tr><tr><td>DeprecationWarning</td><td style="text-align:center">关于被弃用的特征的警告</td></tr><tr><td>EnvironmentError</td><td style="text-align:center">操作系统错误的基类</td></tr><tr><td>EOFError</td><td style="text-align:center">没有内建输入,到达EOF 标记</td></tr><tr><td>Exception</td><td style="text-align:center">常规错误的基类</td></tr><tr><td>FloatingPointError</td><td style="text-align:center">浮点计算错误</td></tr><tr><td>FutureWarning</td><td style="text-align:center">关于构造将来语义会有改变的警告</td></tr><tr><td>GeneratorExit</td><td style="text-align:center">生成器(generator)发生异常来通知退出</td></tr><tr><td>ImportError</td><td style="text-align:center">导入模块/对象失败</td></tr><tr><td>IndentationError</td><td style="text-align:center">缩进错误</td></tr><tr><td>IndexError</td><td style="text-align:center">序列中没有此索引(index)</td></tr><tr><td>IOError</td><td style="text-align:center">输入/输出操作失败</td></tr><tr><td>KeyboardInterrupt</td><td style="text-align:center">用户中断执行(通常是输入^C)</td></tr><tr><td>KeyError</td><td style="text-align:center">映射中没有这个键</td></tr><tr><td>LookupError</td><td style="text-align:center">无效数据查询的基类</td></tr><tr><td>MemoryError</td><td style="text-align:center">内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td>NameError</td><td style="text-align:center">未声明/初始化对象 (没有属性)</td></tr><tr><td>NotImplementedError</td><td style="text-align:center">尚未实现的方法</td></tr><tr><td>OSError</td><td style="text-align:center">操作系统错误</td></tr><tr><td>OverflowError</td><td style="text-align:center">数值运算超出最大限制</td></tr><tr><td>OverflowWarning</td><td style="text-align:center">旧的关于自动提升为长整型(long)的警告</td></tr><tr><td>PendingDeprecationWarning</td><td style="text-align:center">关于特性将会被废弃的警告</td></tr><tr><td>ReferenceError</td><td style="text-align:center">弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td>RuntimeError</td><td style="text-align:center">一般的运行时错误</td></tr><tr><td>RuntimeWarning</td><td style="text-align:center">可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td>StandardError</td><td style="text-align:center">所有的内建标准异常的基类</td></tr><tr><td>StopIteration</td><td style="text-align:center">迭代器没有更多的值</td></tr><tr><td>SyntaxError</td><td style="text-align:center">Python 语法错误</td></tr><tr><td>SyntaxWarning</td><td style="text-align:center">可疑的语法的警告</td></tr><tr><td>SystemError</td><td style="text-align:center">一般的解释器系统错误</td></tr><tr><td>SystemExit</td><td style="text-align:center">解释器请求退出</td></tr><tr><td>TabError</td><td style="text-align:center">Tab 和空格混用</td></tr><tr><td>TypeError</td><td style="text-align:center">对类型无效的操作</td></tr><tr><td>UnboundLocalError</td><td style="text-align:center">访问未初始化的本地变量</td></tr><tr><td>UnicodeDecodeError</td><td style="text-align:center">Unicode 解码时的错误</td></tr><tr><td>UnicodeEncodeError</td><td style="text-align:center">Unicode 编码时错误</td></tr><tr><td>UnicodeError</td><td style="text-align:center">Unicode 相关的错误</td></tr><tr><td>UnicodeTranslateError</td><td style="text-align:center">Unicode 转换时错误</td></tr><tr><td>UserWarning</td><td style="text-align:center">用户代码生成的警告</td></tr><tr><td>ValueError</td><td style="text-align:center">传入无效的参数</td></tr><tr><td>Warning</td><td style="text-align:center">警告的基类</td></tr><tr><td>WindowsError</td><td style="text-align:center">系统调用失败</td></tr><tr><td>ZeroDivisionError</td><td style="text-align:center">除(或取模)零 (所有数据类型)</td></tr></tbody></table></div><h3 id="with上下文管理资源"><a href="#with上下文管理资源" class="headerlink" title="with上下文管理资源"></a>with上下文管理资源</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555912.png" alt="image-20231121151122084"></p><p>​    </p><p><code>finally</code>块由于是否发生异常都会执行，通常我们放释放资源的代码。其实，我们可以通过<code>with</code>上下文管理，更方便的实现释放资源的操作。</p><p><code>with</code>上下文管理的语法结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> context_expr [ <span class="keyword">as</span> var]:</span><br><span class="line">    语句块</span><br></pre></td></tr></table></figure><blockquote><p><code>with</code>上下文管理可以自动管理资源，在<code>with</code>代码块执行完毕后自动还原进入该代码之前的现场或上下文。不论何种原因跳出<code>with</code>块，不论是否有异常，==总能保证资源正常释放==。极大的简化了工作，在文件操作、网络通信相关的场合非常常用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;d:/test.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    context = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(context)</span><br></pre></td></tr></table></figure><h3 id="traceback模块的使用-异常写入日志文件"><a href="#traceback模块的使用-异常写入日志文件" class="headerlink" title="traceback模块的使用-异常写入日志文件"></a>traceback模块的使用-异常写入日志文件</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555913.png" alt="image-20231121152312711"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">    num = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    traceback.print_exc()  <span class="comment"># 打印异常信息</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">    num = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="comment"># 将异常信息输出到文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;d:/test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        traceback.print_exc(file=f)</span><br></pre></td></tr></table></figure><h3 id="自定义异常-raise抛出异常"><a href="#自定义异常-raise抛出异常" class="headerlink" title="自定义异常-raise抛出异常"></a>自定义异常-raise抛出异常</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555914.png" alt="image-20231121153406627"></p><p>程序开发中，有时候我们也需要自己定义异常类。自定义异常类一般都是运行时异常，通常继承<code>Exception</code>或其子类即可。命名一般以<code>Error</code>、<code>Exception</code>为后缀。</p><p><strong>自定义异常由<code>raise</code>语句主动抛出。</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义异常类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, errorinfo</span>):</span><br><span class="line">        Exception.__init__(self)</span><br><span class="line">        self.errorinfo = errorinfo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.errorinfo) + <span class="string">&quot;,年龄错误，应该在1-150之间&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  <span class="comment"># 如果是true，则模块是作独立文件执行，下面可以写测试代码</span></span><br><span class="line">    age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个年龄：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="number">1</span> <span class="keyword">or</span> age &gt; <span class="number">150</span>:</span><br><span class="line">        <span class="keyword">raise</span> AgeError(age)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正常的年龄：&quot;</span>, age)</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入一个年龄：170</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;D:\2022百战Python\Python深入和提高\异常机制\practice.py&quot;, line 86, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    raise AgeError(age)</span></span><br><span class="line"><span class="string">__main__.AgeError: 170,年龄错误，应该在1-150之间</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Pycharm调试模式debug视图"><a href="#Pycharm调试模式debug视图" class="headerlink" title="Pycharm调试模式debug视图"></a>Pycharm调试模式debug视图</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555915.png" alt="image-20231121155153724"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555917.png" alt="image-20231121155224700"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555918.png" alt="image-20231121155244514"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555919.png" alt="image-20231121155300946"></p><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><h3 id="fle文件操作-操作系统底层关系-写入文件"><a href="#fle文件操作-操作系统底层关系-写入文件" class="headerlink" title="fle文件操作-操作系统底层关系-写入文件"></a>fle文件操作-操作系统底层关系-写入文件</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220078.png" alt="image-20231121161102367"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220080.png" alt="image-20231121161205752"></p><p>Python标准库中，如下是文件操作相关的模块:</p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>io模块</td><td>文件流的输入和输出操作 input output</td></tr><tr><td>os模块</td><td>基本操作系统功能，包括文件操作</td></tr><tr><td>glob模块</td><td>查找符合特定规则的文件路径名</td></tr><tr><td>fnmatch模块</td><td>使用模式来匹配文件路径名</td></tr><tr><td>fileinput模块</td><td>处理多个输入文件</td></tr><tr><td>filecmp模块</td><td>用于文件的比较</td></tr><tr><td>csv模块</td><td>用于csv文件处理</td></tr><tr><td>pickle和cPickle</td><td>用于序列化和反序列化</td></tr><tr><td>xml包</td><td>用于XML数据处理</td></tr><tr><td>bz2、gzip、zipfile、zlib、tarfile</td><td>用于处理压缩和解压缩文件（分别对应不同的算法）</td></tr></tbody></table></div><p><strong>创建文件对象open()</strong></p><p>open0函数用于创建文件对象，基本语法格式如下：</p><p><code>open(文件名[打开方式])</code></p><p>如果只是文件名，代表在当前目录下的文件。文件名可以录入全路径，比如：<code>D:\a\b.txt</code></p><p>为了减少<code>\</code>的输入，可以使用原始字符串：<code>r &quot;d:\b.txt”</code>示例如下：</p><p><code>f = open(r&quot;d:\b.txt&quot;, &quot;w&quot;)</code></p><p>打开方式有如下几种：</p><div class="table-container"><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>读read模式</td></tr><tr><td>w</td><td>写wite模式。如果文件不存在则创建；如果文件存在，则重写新内容</td></tr><tr><td>a</td><td>追加append模式。如果文件不存在则创建；如果文件存在，则在文件<strong>末尾追加内容</strong></td></tr><tr><td>b</td><td>二进制binary模式（可与其他模式组合使用）</td></tr><tr><td>+</td><td>读、写模式（可与其他模式组合使用）</td></tr></tbody></table></div><blockquote><p>文本文件对象和二进制文件对象的创建：</p><ol><li>如果没有增加模式<code>b</code>,则<strong>默认创建的是文本文件对象</strong>，处理的基本单元是“字符”。</li><li>如果是二进制模式<code>b</code>,则创建的是二进制文件对象，处理的基本单元是“字节”。</li></ol></blockquote><p><strong>基本的文件写入操作</strong></p><p>文本文件的写入一般就是三个步骤：</p><ol><li>创建文件对象</li><li>写入数据</li><li>关闭文件对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="编码知识-中文乱码问题解决"><a href="#编码知识-中文乱码问题解决" class="headerlink" title="编码知识-中文乱码问题解决"></a>编码知识-中文乱码问题解决</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220081.png" alt="image-20231121194831439"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220082.png" alt="image-20231121195124583"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定文件编码解决中文乱码问题</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;你好&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>write()/writelines()写入数据</strong></p><p><code>write(a)</code>:把字符串a写入到文件中</p><p><code>writelines(b)</code>：把字符串列表事入文件中，不添加换行符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># f.write(&quot;你好&quot;)</span></span><br><span class="line">    s = [<span class="string">&quot;年龄\n&quot;</span>, <span class="string">&quot;姓名\n&quot;</span>, <span class="string">&quot;学校\n&quot;</span>]</span><br><span class="line">    f.writelines(s)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220083.png" alt="image-20231121195750398"></p><h3 id="关闭流要点"><a href="#关闭流要点" class="headerlink" title="关闭流要点"></a>关闭流要点</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220084.png" alt="image-20231121195847695"></p><p>由于文件底层是由操作系统控制，所以我们打开的文件对象必须<strong>显式调用</strong><code>close()</code>方法关闭文件对象。当调用<code>close()</code>方法时，首先会把缓冲区数据写入文件（也可以直接调用<code>flush()</code>方法），再关闭文件，释放文件对象。</p><p>为了确保打开的文件对象正常关闭，一般结合异常机制的<code>finally</code>或者<code>with</code>关键字实现无论何种情况都能关闭打开的文件对象。</p><h4 id="finally异常管理"><a href="#finally异常管理" class="headerlink" title="finally异常管理"></a>finally异常管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结合异常机制的finally,确保关闭文件对象</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    f.write(s)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h4 id="with上下文管理"><a href="#with上下文管理" class="headerlink" title="with上下文管理"></a>with上下文管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用with管理文件写入操作</span></span><br><span class="line">s = [<span class="string">&quot;年龄\n&quot;</span>, <span class="string">&quot;姓名\n&quot;</span>, <span class="string">&quot;学校\n&quot;</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(s)</span><br></pre></td></tr></table></figure><h3 id="文本文件的读取"><a href="#文本文件的读取" class="headerlink" title="文本文件的读取"></a>文本文件的读取</h3><p>文件的读取一般使用如下三个方法：</p><ol><li><p><code>read([size])</code></p><p>从文件中读取<code>size</code>个字符，并作为结果返回。<strong>如果没有<code>size</code>参数，则读取整个文件。</strong></p><p>读取到文件末尾，会返回空字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.read(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    s2 = f.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第二次读的：&quot;</span>, s2)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">年龄</span></span><br><span class="line"><span class="string">姓名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第二次读的： 学校</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p><code>readline()</code></p><p>读取一行内容作为结果返回。读取到文件末尾，会返回空字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">年龄</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p><code>readlines()</code></p><p>文本文件中，每一行作为一个字符串存入列表中，返回该列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.readlines()</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;年龄\n&#x27;, &#x27;姓名\n&#x27;, &#x27;学校\n&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">年龄</span></span><br><span class="line"><span class="string">姓名</span></span><br><span class="line"><span class="string">学校</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = f.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(line, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">                     </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">年龄</span></span><br><span class="line"><span class="string">姓名</span></span><br><span class="line"><span class="string">学校</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="文本文件操作-为每行的末尾添加行号"><a href="#文本文件操作-为每行的末尾添加行号" class="headerlink" title="文本文件操作-为每行的末尾添加行号"></a>文本文件操作-为每行的末尾添加行号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为文本文件每行的末尾添加行号</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    <span class="built_in">print</span>(lines)</span><br><span class="line">    lines2 = [lines.rstrip() + <span class="string">&quot;#&quot;</span> + <span class="built_in">str</span>(index) + <span class="string">&quot;\n&quot;</span> <span class="keyword">for</span> index, lines <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(lines) + <span class="number">1</span>), lines)]</span><br><span class="line">    <span class="built_in">print</span>(lines2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(lines2)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;年龄\n&#x27;, &#x27;姓名\n&#x27;, &#x27;学校\n&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;年龄#1\n&#x27;, &#x27;姓名#2\n&#x27;, &#x27;学校#3\n&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="二进制文件的读写-图片文件的拷贝"><a href="#二进制文件的读写-图片文件的拷贝" class="headerlink" title="二进制文件的读写-图片文件的拷贝"></a>二进制文件的读写-图片文件的拷贝</h3><p>二进制文件的处理流程和文本文件流程一致。首先还是要创建文件对象，不过，我们需要指定二进制模式，从而创建出二进制文件对象。例如：</p><p><code>f=open(r&quot;d:\a.txt&quot;,wb)</code>        #可写的、重写模式的二进制文件对象</p><p><code>f=open(r&quot;d\a.txt&quot;,&#39;ab&#39;)</code>      #可写的、追加模式的二进制文件对象</p><p><code>f=open(r&quot;d:\a.txt&quot;,&#39;rb&#39;)</code>     #可读的二进制文件对象</p><p>创建好二进制文件对象后，仍然可以使用<code>wite()</code>、<code>read()</code>实现文件的读写操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;src.png&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> srcFile, <span class="built_in">open</span>(<span class="string">r&quot;dist.png&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> distFile:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> srcFile:</span><br><span class="line">        distFile.write(line)</span><br></pre></td></tr></table></figure><h3 id="文件对象常用方法和属性总结-seek-任意位置操作"><a href="#文件对象常用方法和属性总结-seek-任意位置操作" class="headerlink" title="文件对象常用方法和属性总结-seek()任意位置操作"></a>文件对象常用方法和属性总结-seek()任意位置操作</h3><p><strong>文件对象的属性</strong></p><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>返回文件名字</td></tr><tr><td>mode</td><td>返回文件的打开模式</td></tr><tr><td>closed</td><td>若文件被关闭，则返回True</td></tr></tbody></table></div><p><strong>文件对象的打开方式</strong></p><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>读模式</td></tr><tr><td>w</td><td>写模式</td></tr><tr><td>a</td><td>追加模式</td></tr><tr><td>b</td><td>二进制模式（可与其他模式组合）</td></tr><tr><td>+</td><td>读写模式（可与其他模式组合）</td></tr></tbody></table></div><p><strong>文件对象的常用方法</strong></p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>read([size])</td><td>从文件中读取size个字节或字符的内容返回。若省略[size],则读取到文件末尾，即一次读取文件所有内容</td></tr><tr><td>readline()</td><td>从文本文件中读取一行内容</td></tr><tr><td>readlines()</td><td>把文本文件中每一行都作为独立的字符串对象，并将这些对象放入列表返回</td></tr><tr><td>write(str)</td><td>将字符串str内容写入文件</td></tr><tr><td>writelines(s)</td><td>将字符串列表s写入文件文件，不添加换行符</td></tr><tr><td>seek(offset [,whence])</td><td>把文件指针移动到新的位置，offset表示相对于whencet的多少个字节的偏移量。offset: off为正往结束方向移动，为负往开始方向移动                                            whence不同的值代表不同含义：0:从文件头开始计算（默认值）1：从当前位置开始计算2：从文件尾开始计算</td></tr><tr><td>tell()</td><td>返回文件指针的当前位置</td></tr><tr><td>truncate([size])</td><td>不论指针在什么位置，只留下指针前sz个字节的内容，其余全部删除；如果没有传入size,则当指针当前位置到文件末尾内容全部删除</td></tr><tr><td>flush()</td><td>把缓冲区的内容写入文件，但不关闭文件</td></tr><tr><td>close()</td><td>把缓冲区内容写入文件，同时关闭文件，释放文件对象相关资源</td></tr></tbody></table></div><h3 id="使用pickle实现序列化和反序列化"><a href="#使用pickle实现序列化和反序列化" class="headerlink" title="使用pickle实现序列化和反序列化"></a>使用pickle实现序列化和反序列化</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220085.png" alt="image-20231121220236689"></p><p>序列化指的是：将对象转化成“串行化”数据形式，存储到硬盘或通过网络传输到其他地方。</p><p>反序列化是指相反的过程，将读取到的“串行化数据”转化成对象。</p><p>我们可以使用pickle模块中的函数，实现序列化和反序列操作。</p><blockquote><p>Python中，一切皆对象，对象本质上就是一个“存储数据的内存块”。有时候，我们需要将“内存块的数据”保存到硬盘上，或者通过网络传输到其他的计算机上。这时候，就需要“对象的序列化和反序列化”。对象的序列化机制广泛的应用在分布式、并行系统上。</p></blockquote><p>序列化我们使用：</p><p><code>pickle.dump(obj, file)</code>   <code>obj</code>就是要被序列化的对象，<code>file</code>指的是存储的文件</p><p><code>pickle.load(file)</code>  从<code>file</code>读取数据，反序列化成对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    name = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">    age = <span class="number">20</span></span><br><span class="line">    sorce = [<span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>]</span><br><span class="line">    resume = &#123;<span class="string">&#x27;name&#x27;</span>: name, <span class="string">&#x27;age&#x27;</span>: age, <span class="string">&#x27;sorce&#x27;</span>: sorce&#125;</span><br><span class="line">    pickle.dump(resume, f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.dat&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    resume2 = pickle.load(f)</span><br><span class="line">    <span class="built_in">print</span>(resume2)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;&#x27;name&#x27;: &#x27;jack&#x27;, &#x27;age&#x27;: 20, &#x27;sorce&#x27;: [70, 80, 90]&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="csv文件的读取和写入"><a href="#csv文件的读取和写入" class="headerlink" title="csv文件的读取和写入"></a>csv文件的读取和写入</h3><p>csv是逗号分隔符文本格式，常用于数据交换、Ec文件和数据库数据的导入和导出。</p><blockquote><p>与excel文件不同，csv文件中：</p><ul><li>值没有类型，所有值都是字符串</li><li>不能指定字体颜色等样式</li><li>不能指定单元格的宽高，不能合并单元格</li><li>没有多个工作表</li><li>不能嵌入图像图表</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 写csv文件</span></span><br><span class="line">headers = [<span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;姓名&quot;</span>]</span><br><span class="line">rows = [(<span class="number">20</span>, <span class="string">&#x27;jack&#x27;</span>), (<span class="number">40</span>, <span class="string">&#x27;john&#x27;</span>)]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 创建csv对象</span></span><br><span class="line">    b_csv = csv.writer(f)</span><br><span class="line">    <span class="comment"># 写入一行（标题）</span></span><br><span class="line">    b_csv.writerow(headers)</span><br><span class="line">    <span class="comment"># 写入多行（数据）</span></span><br><span class="line">    b_csv.writerows(rows)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 读取csv文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 创建csv对象，他是一个包含所有数据的列表，每一行为一个元素</span></span><br><span class="line">    a_csv = csv.reader(f)</span><br><span class="line">    <span class="comment"># 获得列表对象，它包含标题列的信息</span></span><br><span class="line">    headers = <span class="built_in">next</span>(a_csv)</span><br><span class="line">    <span class="comment"># 循环打印各行内容</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> a_csv:</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220086.png" alt="image-20231122135649592"></p><p>os模块可以帮助我们直接对操作系统进行操作。我们可以直接调用操作系统的可执行文件、命令，直接操作文件、目录等等。</p><blockquote><p>:warning:os模块是做系统运维非常重要的基础。</p></blockquote><h4 id="调用操作系统可执行文件-控制台乱码问题"><a href="#调用操作系统可执行文件-控制台乱码问题" class="headerlink" title="调用操作系统可执行文件-控制台乱码问题"></a>调用操作系统可执行文件-控制台乱码问题</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220087.png" alt="image-20231122140107241"></p><p><strong>控制台乱码问题</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220088.png" alt="image-20231122140130581"></p><h4 id="获取文件信息-创建和删除文件夹"><a href="#获取文件信息-创建和删除文件夹" class="headerlink" title="获取文件信息-创建和删除文件夹"></a>获取文件信息-创建和删除文件夹</h4><p>我们可以通过前面讲的文件对象实现对于文件内容的读写操作。如果，还需要对文件和目录做其他操作，可以使用<code>os</code>和<code>os.path</code>模块。</p><p><strong><code>os</code>模块下常用操作文件的方法</strong></p><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>remove(path)</td><td>删除指定的文件</td></tr><tr><td>rename(src,dest)</td><td>重命名文件或目录</td></tr><tr><td>stat(path)</td><td>返回文件的所有属性</td></tr><tr><td>listdir(path)</td><td>返回path目录下的文件和目录列表</td></tr></tbody></table></div><p><code>os</code>模块下关于目录操作的相关方法，汇总如下：</p><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>mkdir(path)</td><td>创建目录</td></tr><tr><td>makedirs(path1/path2/path3/…)</td><td>创建多级目录</td></tr><tr><td>rmdir(path)</td><td>删除目录</td></tr><tr><td>removedirs(path1/path2…)</td><td>删除多级目录</td></tr><tr><td>getcwd()</td><td>返回当前工作目录：current work dir</td></tr><tr><td>chdir(path)</td><td>把path设为当前工作目录</td></tr><tr><td>walk()</td><td>遍历目录树</td></tr><tr><td>sep</td><td>当前操作系统所使用的路径分隔符</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印基本信息</span></span><br><span class="line"><span class="built_in">print</span>(os.name)  <span class="comment"># windows--nt  linux--&gt;posix</span></span><br><span class="line"><span class="built_in">print</span>(os.sep)  <span class="comment"># windows--&gt;\  linux--&gt;/</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(os.linesep))  <span class="comment"># windows--&gt;\r\n  linux--&gt;\n</span></span><br><span class="line">a = <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(a))  <span class="comment"># repr可显示数据信息</span></span><br><span class="line"><span class="comment"># 获取文件和文件夹的相关信息</span></span><br><span class="line"><span class="built_in">print</span>(os.stat(<span class="string">&quot;practice.py&quot;</span>))</span><br><span class="line"><span class="comment"># 关于工作目录的操作</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd())  <span class="comment"># 获取当前工作目录</span></span><br><span class="line">os.chdir(<span class="string">&quot;d:&quot;</span>)  <span class="comment"># 当前工作目录就变成了d: 的根目录</span></span><br><span class="line"><span class="comment"># 创建目录，删除目录</span></span><br><span class="line">os.mkdir(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">os.rmdir(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="comment"># 创建多级目录</span></span><br><span class="line">os.makedirs(<span class="string">&quot;test1/test2/test3&quot;</span>)</span><br><span class="line"><span class="comment"># 更改目录名字</span></span><br><span class="line">os.rename(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;测试&quot;</span>)</span><br><span class="line"><span class="comment"># 列出子目录</span></span><br><span class="line">dirs = os.listdir(<span class="string">&quot;test1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dirs)</span><br></pre></td></tr></table></figure><h4 id="os-path模块-常用方法"><a href="#os-path模块-常用方法" class="headerlink" title="os.path模块-常用方法"></a>os.path模块-常用方法</h4><p>os.path模块提供了目录相关（路径判断、路径切分、路径连接、文件夹遍历）的操作</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>isabs(path)</td><td>判断path是否绝对路径</td></tr><tr><td>isdir(path)</td><td>判断path是否为目录</td></tr><tr><td>isfile(path)</td><td>判断path是否为文件</td></tr><tr><td>exists(path)</td><td>判断指定路径的文件是否存在</td></tr><tr><td>getsize(filename)</td><td>返回文件的大小</td></tr><tr><td>abspath(path)</td><td>返回绝对路径</td></tr><tr><td>dirname(p)</td><td>返回目录的路径</td></tr><tr><td>getatime(filename)</td><td>返回文件的最后访问时间</td></tr><tr><td>getmtime(filename)</td><td>返回文件的最后修改时间</td></tr><tr><td>walk(top,func,arg)</td><td>递归方式遍历目录</td></tr><tr><td>join(path,*paths)</td><td>连接多个path</td></tr><tr><td>split(path)</td><td>对路径进行分割，以列表形式返回</td></tr><tr><td>splitext(path)</td><td>从路径中分割文件的扩展名</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line">path = os.getcwd()</span><br><span class="line"><span class="comment"># 列出子目录和子文件</span></span><br><span class="line">file_list = os.listdir(path)</span><br><span class="line"><span class="comment"># 只打印以.py结尾的文件名</span></span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</span><br><span class="line">    pos = file_name.rfind(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> file_name[pos + <span class="number">1</span>:] == <span class="string">&quot;py&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(file_name)</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">practice.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*********************************&quot;</span>)</span><br><span class="line"><span class="comment"># 用推导式列出目录下所有的.py文件</span></span><br><span class="line">file_list2 = [file_name <span class="keyword">for</span> file_name <span class="keyword">in</span> os.listdir(path) <span class="keyword">if</span> file_name.endswith(<span class="string">&quot;.py&quot;</span>)]</span><br><span class="line"><span class="built_in">print</span>(file_list2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;practice.py&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="使用walk递归遍历所有子目录和子文件"><a href="#使用walk递归遍历所有子目录和子文件" class="headerlink" title="使用walk递归遍历所有子目录和子文件"></a>使用walk递归遍历所有子目录和子文件</h4><p>os.walk()方法是一个简单易用的文件、目录遍历器，可以帮助我们高效的处理文件、目录方面的事情。格式如下：</p><p><code>os.walk(top[,topdown=True[,onerror=None[,followlinks=False]]])</code></p><p>其中，<code>top</code>:是要遍历的目录。<code>topdown</code>:可选，<code>True</code>, 先遍历<code>top</code>目录再遍历子目录。</p><p>返回三元组<code>(root、dirs、files)</code>:</p><p><code>root</code>: 当前正在遍历的文件夹本身</p><p><code>dirs</code>: 一个列表，该文件夹中所有的目录的名字</p><p><code>files</code>: 一个列表，该文件夹中所有的文件的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = os.getcwd()</span><br><span class="line"><span class="comment"># topdown=False:先遍历子目录再遍历top目录</span></span><br><span class="line">list_files = os.walk(path, topdown=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> list_files:</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(root, name))</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(root, name))</span><br></pre></td></tr></table></figure><h3 id="shutil模块"><a href="#shutil模块" class="headerlink" title="shutil模块"></a>shutil模块</h3><h4 id="shutil模块（拷贝和压缩）"><a href="#shutil模块（拷贝和压缩）" class="headerlink" title="shutil模块（拷贝和压缩）"></a>shutil模块（拷贝和压缩）</h4><p><code>shutil</code>模块是python<strong>标准库</strong>中提供的，主要用来做文件和文件夹的<strong>拷贝、移动、删除</strong>等；还可以做文件和文件夹的<strong>压缩、解压缩</strong>操作。</p><p><code>os</code>模块提供了对目录或文件的一般操作。<code>shutil</code>模块作为补充，提供了移动、复制、压缩、解压等操作，这些os模块都没有提供。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">shutil.copyfile(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test_copy.tet&quot;</span>)</span><br><span class="line"><span class="comment"># 递归拷贝  忽略所有的html,htm文件</span></span><br><span class="line">shutil.copytree(<span class="string">&quot;source&quot;</span>, <span class="string">&quot;destination&quot;</span>, ignore=shutil.ignore_patterns(<span class="string">&quot;*.html&quot;</span>, <span class="string">&quot;*.htm&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="shutil和zipfile模块-压缩和解压缩"><a href="#shutil和zipfile模块-压缩和解压缩" class="headerlink" title="shutil和zipfile模块-压缩和解压缩"></a>shutil和zipfile模块-压缩和解压缩</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩某个文件</span></span><br><span class="line">shutil.make_archive(<span class="string">&quot;d:/destination&quot;</span>, <span class="string">&quot;zip&quot;</span>, <span class="string">&quot;d:/source&quot;</span>)</span><br><span class="line"><span class="comment"># 压缩：将指定多个文件压缩到一个zip文件</span></span><br><span class="line">z = zipfile.ZipFile(<span class="string">&quot;test.zip&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">z.write(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line">z.write(<span class="string">&quot;b.txt&quot;</span>)</span><br><span class="line">z.write(<span class="string">&quot;c.txt&quot;</span>)</span><br><span class="line">z.close()</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">z2 = zipfile.ZipFile(<span class="string">&quot;test.zip&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment"># 解压到的位置</span></span><br><span class="line">z2.extractall(<span class="string">&quot;d:/&quot;</span>)</span><br><span class="line">z2.close()</span><br></pre></td></tr></table></figure><h3 id="递归算法原理-自己复习前面讲过的算法原理"><a href="#递归算法原理-自己复习前面讲过的算法原理" class="headerlink" title="递归算法原理-自己复习前面讲过的算法原理"></a>递归算法原理-自己复习前面讲过的算法原理</h3><h3 id="递归算法-目录树结构的展示"><a href="#递归算法-目录树结构的展示" class="headerlink" title="递归算法-目录树结构的展示"></a>递归算法-目录树结构的展示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归遍历目录树</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_print_file</span>(<span class="params">path, level</span>):</span><br><span class="line">    child_files = os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> child_files:</span><br><span class="line">        file_path = os.path.join(path, file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> * level + file_path[file_path.rfind(os.sep) + <span class="number">1</span>:])</span><br><span class="line">        <span class="comment"># 如果是文件夹，递归打印</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">            my_print_file(file_path, level + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_print_file(<span class="string">&quot;test1&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">test2 </span></span><br><span class="line"><span class="string">test3</span></span><br><span class="line"><span class="string">test.txt</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="模块化编程理念-什么是模块-哲学思想"><a href="#模块化编程理念-什么是模块-哲学思想" class="headerlink" title="模块化编程理念-什么是模块-哲学思想"></a>模块化编程理念-什么是模块-哲学思想</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220089.png" alt="image-20231123153943364"></p><ol><li><p>Python程序由模块组成。一个模块对应python源文件，一般后缀名是：<code>.py</code></p></li><li><p>模块由语句组成。运行Python程序时，按照模块中语句的顺序依次执行</p></li><li><p>语句是Python程序的构造单元，用于创建对象、变量赋值、调用函数、控制语句等</p></li></ol><p><strong>标准库模块(standard library)</strong></p><p>与函数类似，模块也分为标准库模块和用户自定义模块。</p><p>Python标准库提供了操作系统功能、网络通信、文本处理、文件处理、数学运算等基本的功能。比如：random(随机数)、math(数学运算)、time(时间处理)、file(文件处理)、os(和操作系统交互)、sys(和解释器交互)等。</p><p>另外，Pythor还提供了海量的第三方模块，使用方式和标准库类似。功能覆盖了我们能想象到的所有领域，比如：科学计算、WEB开发、大数据、人工智能、图形系统等。</p><p><strong>为什么需要模块化编程</strong></p><p>模块(module)对应于Python源代码文件(.py文件)。模块中可以定义变量、函数、类、普通语句。这样，我们可以将一个Pythona程序分解成多个模块，便于后期的重复应用。</p><p>模块化编程(Modular Programming)将一个任务分解成多个模块。每个模块就像一个积木一样，便于后期的反复使用、反复搭建。</p><p><strong>模块化编程有如下几个重要优势：</strong></p><ol><li>便于将一个任务分解成多个模块，实现团队协同开发，完成大规模程序</li><li>实现代码复用。一个模块实现后，可以被反复调用</li><li>可维护性增强</li></ol><h3 id="模块化编程的流程-设计和实现分离的思想"><a href="#模块化编程的流程-设计和实现分离的思想" class="headerlink" title="模块化编程的流程-设计和实现分离的思想"></a>模块化编程的流程-设计和实现分离的思想</h3><p><strong>模块化编程的流程</strong></p><p>模块化编程的一般流程：</p><p>①设计API，进行功能描述。</p><p>②编码实现API中描述的功能。</p><p>③在模块中编写测试代码，并消除全局代码。</p><p>④使用私有函数实现不被外部客户端调用的模块函数。</p><p><strong>模块的API和功能描述要点</strong></p><p>API(Application Programming Interface应用程序编程接口)是用于描述模块中提供的函数和类的功能描述和使用方式描述。</p><p>模块化编程中，首先设计的就是模块的AP!(即要实现的功能描述)，然后开始编码实现API中描述的功能。最后，在其他模块中导入本模块进行调用。</p><p>可以通过help(模块名)查看模块的API。一般使用时先导入模块然后通过help函数查看。</p><p> 【示例】设计计算薪水模块的API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">本模块是用来计算公司员工的薪资</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">company = <span class="string">&quot;ailbaba&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yearSalary</span>(<span class="params">monthSalary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据传入的月薪，计算年薪</span></span><br><span class="line"><span class="string">    :param monthSalary: 月薪</span></span><br><span class="line"><span class="string">    :return: 年薪</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">daySalary</span>(<span class="params">monthSalary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据传入的月薪，计算日薪(按照一个月22.5天计算)</span></span><br><span class="line"><span class="string">    :param monthSalary: 月薪</span></span><br><span class="line"><span class="string">    :return: 日薪</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在别的模块中使用</span></span><br><span class="line"><span class="keyword">import</span> salary</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary.__doc__)</span><br><span class="line"><span class="built_in">print</span>(salary.yearSalary.__doc__)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>模块的创建和测试代码</strong></p><p>每个模块都有一个名称，通过特殊变量<code>__name__</code>可以获取模块的名称。在正常情况下，模块名字对应源文件名。仅有一个例外，就是当<strong>一个模块被作为程序入口时（主程序、交互式提示符下)</strong>，它的<code>__name__</code>的值为<code>__main__</code>。我们可以根据这个特点，将模块源代码文件中的测试代码进行独立的处理。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">本模块是用来计算公司员工的薪资</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">company = <span class="string">&quot;ailbaba&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yearSalary</span>(<span class="params">monthSalary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据传入的月薪，计算年薪</span></span><br><span class="line"><span class="string">    :param monthSalary: 月薪</span></span><br><span class="line"><span class="string">    :return: 年薪</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> monthSalary * <span class="number">12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">daySalary</span>(<span class="params">monthSalary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据传入的月薪，计算日薪(按照一个月22.5天计算)</span></span><br><span class="line"><span class="string">    :param monthSalary: 月薪</span></span><br><span class="line"><span class="string">    :return: 日薪</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> monthSalary / <span class="number">22.5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 这是一个测试</span></span><br><span class="line">    <span class="built_in">print</span>(yearSalary(<span class="number">6000</span>))</span><br></pre></td></tr></table></figure><p><strong>模块文档字符串和API设计</strong></p><p>我们可以在模块的第一行增加一个文档字符串，用于描述模块的相关功能。然后，通过<code>__doc__</code>可以获得文档字符串的内容。</p><h3 id="模块导入-import和from-import详解和区别"><a href="#模块导入-import和from-import详解和区别" class="headerlink" title="模块导入-import和from_import详解和区别"></a>模块导入-import和from_import详解和区别</h3><p>模块化设计的好处之一就是“代码复用性高”。写好的模块可以被反复调用，重复使用。模块的导入就是“在本模块中使用其他模块”。</p><p><strong>import语句导入</strong></p><p><code>import</code>语句的基本语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名             <span class="comment"># 导入一个模块</span></span><br><span class="line"><span class="keyword">import</span> 模块<span class="number">1</span>, 模块<span class="number">2</span>       <span class="comment"># 导入多个模块</span></span><br><span class="line"><span class="keyword">import</span> 模块名 <span class="keyword">as</span> 模块名<span class="comment"># 导入模块并使用新名字</span></span><br></pre></td></tr></table></figure><p> <code>import</code>加载的模块分为四种类型：</p><ol><li>使用python编写的代码<code>.py</code>文件</li><li>已被编译为共享库或<code>DLL</code>的C或C++扩展</li><li>一组模块的包</li><li>使用C编写并链接到python解释器的内置模块</li></ol><p>我们一般通过<code>import</code>语句实现模块的导入和使用，import本质上是使用了内置函数<code>__import__()</code>。</p><p>当我们通过<code>import</code>导入一个模块时，python解释器进行执行，最终会生成一个对象，这个对象就代表了被加载的模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(m))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m))</span><br><span class="line"><span class="built_in">print</span>(m.sqrt(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1630061747552</span></span><br><span class="line"><span class="string">&lt;class &#x27;module&#x27;&gt;</span></span><br><span class="line"><span class="string">2.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>由上，我们可以看到<code>math</code>模块被加载后，实际会生成一个<code>module</code>类的对象，该对象被<code>math</code>变量引用。我们可以通过<code>math</code>变量引用模块中所有的内容。</p><p>我们通过<code>import</code>导入多个模块，本质上也是生成多个<code>module</code>类的对象而已。</p><p>有时候，我们也需要给模块起个别名，本质上，这个别名仅仅是新创建一个变量引用加载的模块对象而已。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(m))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m))</span><br><span class="line"><span class="built_in">print</span>(m.sqrt(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">m2 = math</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m2))</span><br><span class="line"><span class="built_in">print</span>(m2.sqrt(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1769170820448</span></span><br><span class="line"><span class="string">&lt;class &#x27;module&#x27;&gt;</span></span><br><span class="line"><span class="string">2.0</span></span><br><span class="line"><span class="string">&lt;class &#x27;module&#x27;&gt;</span></span><br><span class="line"><span class="string">2.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>from…import导入</strong></p><p>Python中可以使用<code>from...import</code>导入<strong>模块中的成员</strong>。基本语法格式如下：</p><p><code>from 模块名 import 成员1，成员2，…</code></p><p>如果希望导入一个模块中的所有成员，则可以采用如下方式：</p><p><code>from 模块名 import *</code></p><blockquote><p>:warning:尽量避免 <code>from 模块名 import *</code>这种写法。<code>*</code>它表示导入模块中所有的不是以下划线<code>_</code>开头的名字都导入到当前位置。但你不知道你导入什么名字，很有可能会覆盖掉你之前已经定义的名字。而且可读性极其的差。一般生产环境中尽量避免使用，学习时没有关系。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt, sin</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">9</span>))</span><br><span class="line"><span class="built_in">print</span>(sin(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">3.0</span></span><br><span class="line"><span class="string">0.479425538604203</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>import语句和from…importi语句的区别</strong></p><p><code>import</code>导入的是模块。<code>from...import</code>导入的是<strong>模块中的一个函数/一个类</strong>。</p><blockquote><p>如果进行类比的话，<code>import</code>导入的是“文件””，我们要使用该“文件”下的内容，必须前面加“文件名称”。<code>from...import</code>导入的是文件下的“内容”，我们直接使用这些内容”即可，前面再也不需要加“文件名称”了。</p></blockquote><h3 id="import加载底层原理-importlib实现动态导入"><a href="#import加载底层原理-importlib实现动态导入" class="headerlink" title="import加载底层原理-importlib实现动态导入"></a>import加载底层原理-importlib实现动态导入</h3><p><strong><code>__import__()</code>动态导入</strong></p><p><code>import</code>语句本质上就是调用内置函数<code>__import__()</code>,我们可以通过它实现动态导入。给<code>__import__()</code>动态传递不同的的参数值，就能导入不同的模块</p><p>注意：一般不建议我们自行使用<em>`<em>import</em></em>()<code>导入，其行为在python.2和python.3中有差异，会导致意外错误。如果需要动态导入可以使用</code>importlib`模块</p><p><strong>模块的加载问题</strong></p><p>当导入一个模块时，模块中的代码都会被执行。不过，如果再次导入这个模块，则不会再次执行。</p><p>Python的设计者为什么这么设计？因为，导入模块更多的时候需要的是定义模块中的变量、函数、对象等。这些并不需要反复定义和执行。“只导入一次<code>import-only-once</code>“就成了一种优化。</p><blockquote><p>一个模块无论导入多少次，这个模块在整个解释器进程内有且仅有一个实例对象。</p></blockquote><p><strong>重新加载</strong></p><p>有时候我们确实需要重新加载一个模块，这时候可以使用：<code>importlib.reload()</code>方法</p><h3 id="包的概念-创建包-导入包"><a href="#包的概念-创建包-导入包" class="headerlink" title="包的概念-创建包-导入包"></a>包的概念-创建包-导入包</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220090.png" alt="image-20231123204236853"></p><p> 包(package)的概念和结构</p><p>当一个项目中有很多个模块时，需要再进行组织。我们将功能类似的模块放到一起，形成了“包”。==本质上，“包”就是一个必须有<code>__init__.py</code>的文件夹==。典型结构如下：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220092.png" alt="image-20231123204807813"></p><p>包下面可以包含“模块(module)”,也可以再包含“子包(subpackage)”。就像文件夹下面可以有文件，也可以有子文件夹一样。</p><p><strong>Pycharm里建包：</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220093.png" alt="image-20231123204627446"></p><p><strong>导入包操作和本质</strong></p><p>上一节中的包结构，我们需要导入<code>module_AA.py</code>。方式如下：</p><ol><li><p><code>import a.aa.module_AA</code></p><p>在使用时，必须加完整名称来引用，比如：<code>a.aa.module_AA.fun_AA()</code></p></li><li><p><code>from a.aa import module_AA</code></p><p>在使用时，直接可以使用模块名。比如：<code>module_AA.fun_AA()</code></p></li><li><p><code>from a.aa.module_AA import fun_AA</code> 直接导入函数</p></li></ol><p>在使用时，直接可以使用函数名。比如：<code>fun_AA()</code></p><blockquote><ol><li><code>from package import item</code>这种语法中，item可以是包、模块，也可以是函数、类、变量。</li><li><code>import item1.item2</code>这种语法中，item必须是包或模块，不能是其他。</li></ol></blockquote><p><strong>导入包的本质</strong>其实是“==导入了包的<code>__init__.py</code>“文件==。也就是说，<code>import pack1</code>意味着执行了包<code>pack1</code>下面的<code>__init__.py</code>文件。这样，可以在<code>__init__.py</code>中批量导入我们需要的模块，而不再需要一个个导入。</p><p><code>__init__.py</code>的三个核心作用：</p><p>①作为包的标识，不能删除。</p><p>②导入包实质是执行<code>__init__.py</code>文件，可以在<code>__init__.py</code>文件中做这个<strong>包的初始化、以及需要统一执行代码、批量导入</strong></p><blockquote><p>如上测试我们可以看出python的设计者非常巧妙的通过<code>__init__.py</code>文件将包转成了模块的操作。</p></blockquote><h3 id="包的模糊导入"><a href="#包的模糊导入" class="headerlink" title="包的模糊导入"></a>包的模糊导入</h3><p>用<code>*</code>导入包</p><p><code>import *</code> 这样的语句理论上是希望文件系统找出包中所有的子模块，然后导入它们。这可能会花长时间等。Python解决方案是提供一个明确的包索引。</p><p>这个索引由<code>__init__.py</code>定义<code>__all__</code>变量，该变量为一个列表，如上例<code>a</code>包下的<code>__init__.py</code>中，可定义<code>__all__= [&quot;module_A&quot;,&quot;module_A2&quot;]</code></p><p>这意味着，<code>from sound.effects import *</code>会从对应的包中导入以上两个子模块</p><blockquote><p>:warning:尽管提供<code>import *</code>的方法，仍不建议在生产代码中使用这种写法。</p></blockquote><h3 id="PIP安装第三方库"><a href="#PIP安装第三方库" class="headerlink" title="PIP安装第三方库"></a>PIP安装第三方库</h3><p><strong>库(Library)</strong></p><p>Python中库是借用其他编程语言的概念，没有特别具体的定义。</p><p>模块和包侧重于代码组织，有明确的定义。库强调的是功能性，而不是代码组织。</p><p>我们通常将某个功能的“模块的集合”，称为库。</p><p><strong>标准库(Standard Library)</strong></p><p>Python拥有一个强大的标准库。Python语言的核心只包含数字、字符串、列表、字典、文件等常见类型和函数，而由Python标准库提供了系统管理、网络通信、文本处理、数据库接口、图形系统、ML处理等额外的功能。</p><p>Python标准库的主要功能有：</p><p>①文本处理，包含文本格式化、正则表达式匹配、文本差异计算与合并、Unicode支持，二进制数据处理等功能</p><p>②文件处理，包含文件操作、创建临时文件、文件压缩与归档、操作配置文件等功能</p><p>③操作系统功能，包含线程与进程支持、IO复用、日期与时间处理、调用系统函数、日志(logging)等功能</p><p>④网络通信，包含网络套接字，SSL加密通信、异步网络通信等功能</p><p>⑤网络协议，支持HTTP，FTP，SMTP，POP，IMAP，NNTP，XMLRPC等多种网络协议，并提供了编写网络服务器的框架</p><p>⑥W3C格式支持，包含HTML，SGML，XML的处理。</p><p>⑦其它功能，包括国际化支持、数学运算、HASH、Tkinter等</p><blockquote><p>目前学过的有：random、math、time、file、os、sys等模块。</p><p>①random模块实现随机数处理</p><p>②math模块实现数学相关的运算</p><p>③time模块实现时间的处理</p><p>④file模块实现对文件的操作</p><p>⑤os模块实现和操作系统的交互</p><p>⑥sys模块实现和解释器的交互</p></blockquote><p><strong>PIP模块管理工具</strong></p><p>pip是一个现代的，通用的Python包管理工具。提供了对Python包的查找、下载、安装、卸载的功能。</p><p><strong>安装第三方扩展库的2种方式</strong></p><p>第三方库有数十万种之多，以pymysql库为例讲解第三方扩展库的安装。</p><p><strong>第一种方式：命令行下远程安装</strong></p><p>以安装第三方pymysql库为例，在命令行提示符下输入：<code>pip install pymysql</code>即可。</p><p><strong>第二种方式：Pycharm中直接安装到项目中</strong></p><p>在Pycharm中，依次点击：<code>file-&gt;setting-&gt;Project 本项目名-&gt;Project Interpreter</code></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220094.png" alt="image-20231123211713736"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220095.png" alt="image-20231123211743087"></p><h2 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程</h2><h3 id="GUI编程和tkinter介绍-第一个GUI程序"><a href="#GUI编程和tkinter介绍-第一个GUI程序" class="headerlink" title="GUI编程和tkinter介绍-第一个GUI程序"></a>GUI编程和tkinter介绍-第一个GUI程序</h3><p>我们前面实现的都是基于控制台的程序，程序和用户的交互通过控制台来完成。</p><p>本章，我们将学习 GUI（Graphics User Interface），即<strong>图形用户界面编程</strong>，我们可以通过 python 提供的丰富的组件，快速的实现使用图形界面和用户交互。</p><p>GUI 编程类似于“搭积木”，将一个个组件(Widget)放到窗口中。如下是 windows 中的画图软件，就是一个典型的 GUI 程序</p><p><strong>常用的 GUI 库</strong></p><ol><li><p>Tkinter</p><p>tkinter（Tk interface）是 Python 的标准 GUI 库，支持跨平台的 GUI 程序开发。tkinter适合小型的 GUI 程序编写，也特别适合初学者学习 GUI 编程。本书以 tkinter 为核心进行讲解。</p></li><li><p>wxPython</p><p>wxPython 是比较流行的 GUI 库，适合大型应用程序开发，功能强于 tkinter，整体设计框架类似于 MFC(Microsoft Foundation Classes 微软基础类库)。</p></li><li><p>PyQT</p></li></ol><p>Qt 是一种开源的 GUI 库，适合大型 GUI 程序开发，PyQT 是 Qt 工具包标准的 Python 实现。我们也可以使用 Qt Desginer 界面设计器快速开发 GUI 应用程序。</p><p><strong>基于 tkinter 模块创建 GUI 程序包含如下 4 个核心步骤：</strong></p><ol><li>创建应用程序主窗口对象（也称：根窗口）</li><li>在主窗口中，添加各种可视化组件，比如：按钮（Button）、文本框（Label）等。</li><li>通过几何布局管理器，管理组件的大小和位置</li><li>事件处理</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.创建应用程序主窗口对象（也称：根窗口）</span></span><br><span class="line">root = Tk()</span><br><span class="line"><span class="comment"># 2.在主窗口中，添加各种可视化组件，比如：按钮（Button）、文本框（Label）等。</span></span><br><span class="line">btn01 = Button(root)</span><br><span class="line">btn01[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;点击送花&quot;</span></span><br><span class="line"><span class="comment"># 3.通过几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">btn01.pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.事件处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">songhua</span>(<span class="params">e</span>):  <span class="comment"># e就是事件对象</span></span><br><span class="line">    messagebox.showinfo(<span class="string">&quot;Message&quot;</span>, <span class="string">&quot;送你花&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;送花&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">btn01.bind(<span class="string">&quot;&lt;Button-1&gt;&quot;</span>, songhua)</span><br><span class="line"></span><br><span class="line">root.mainloop()  <span class="comment"># 调用组件的mainloop()方法，进入事件循环</span></span><br></pre></td></tr></table></figure><h3 id="PEP8编码规范-窗口大小和位置"><a href="#PEP8编码规范-窗口大小和位置" class="headerlink" title="PEP8编码规范-窗口大小和位置"></a>PEP8编码规范-窗口大小和位置</h3><p><strong>主窗口位置和大小</strong></p><p>通过 <code>geometry(&#39;wxh±x±y&#39;)</code>进行设置。<code>w</code> 为宽度，<code>h</code> 为高度。<code>+x</code> 表示距屏幕左边的距离；<code>-x</code> 表示距屏幕右边的距离；<code>+y</code> 表示距屏幕上边的距离；<code>-y</code> 表示距屏幕下边的距离。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.title(<span class="string">&quot;测试主窗口的位置和大小&quot;</span>)</span><br><span class="line">root.geometry(<span class="string">&quot;500x400+100+200&quot;</span>)  <span class="comment"># 宽度 500，高度 400；距屏幕左边 100，距屏幕上边200</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h3 id="GU编程整体描述-常用组件汇总"><a href="#GU编程整体描述-常用组件汇总" class="headerlink" title="GU编程整体描述-常用组件汇总"></a>GU编程整体描述-常用组件汇总</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113910.png" alt="image-20231124174304488"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113911.png" alt="image-20231124174456418">                                                                                            </p><p>​                                                                                        <strong>常用组件汇总列表</strong></p><div class="table-container"><table><thead><tr><th><strong>Tkinter 类</strong></th><th style="text-align:center"><strong>名称</strong></th><th><strong>简介</strong></th></tr></thead><tbody><tr><td>Toplevel</td><td style="text-align:center">顶层</td><td>容器类，可用于为其他组件提供单独的容器；Toplevel 有点类似于窗口</td></tr><tr><td>Button</td><td style="text-align:center">按钮</td><td>代表按钮组件</td></tr><tr><td>Canvas</td><td style="text-align:center">画布</td><td>提供绘图功能，包括直线、矩形、椭圆、多边形、位图等</td></tr><tr><td>Checkbutton</td><td style="text-align:center">复选框</td><td>可供用户勾选的复选框</td></tr><tr><td>Entry</td><td style="text-align:center">单行输入框</td><td>用户可输入内容</td></tr><tr><td>Frame</td><td style="text-align:center">容器</td><td>用于装载其它 GUI 组件</td></tr><tr><td>Label</td><td style="text-align:center">标签</td><td>用于显示不可编辑的文本或图标</td></tr><tr><td>LabelFrame</td><td style="text-align:center">容器</td><td>也是容器组件，类似于 Frame，但它支持添加标题</td></tr><tr><td>Listbox</td><td style="text-align:center">列表框</td><td>列出多个选项，供用户选择</td></tr><tr><td>Menu</td><td style="text-align:center">菜单</td><td>菜单组件</td></tr><tr><td>Menubutton</td><td style="text-align:center">菜单按钮</td><td>用来包含菜单的按钮（包括下拉式、层叠式等）</td></tr><tr><td>OptionMenu</td><td style="text-align:center">菜单按钮</td><td>Menubutton 的子类，也代表菜单按钮，可通过按钮打开一个菜单</td></tr><tr><td>Message</td><td style="text-align:center">消息框</td><td>类似于标签，但可以显示多行文本；后来当 Label 也能显示多行文本之后，该组件基本处于废弃状态</td></tr><tr><td>PanedWindow</td><td style="text-align:center">分区窗口</td><td>该容器会被划分成多个区域，每添加一个组件占一个区域，用户可通过拖动分隔线来改变各区域的大小</td></tr><tr><td>Radiobutton</td><td style="text-align:center">单选钮</td><td>可供用户点边的单选钮</td></tr><tr><td>Scale</td><td style="text-align:center">滑动条</td><td>拖动滑块可设定起始值和结束值，可显示当前位置的精确值</td></tr><tr><td>Spinbox</td><td style="text-align:center">微调选择器</td><td>用户可通过该组件的向上、向下箭头选择不同的值</td></tr><tr><td>Scrollbar</td><td style="text-align:center">滚动条</td><td>用于为组件（文本域、画布、列表框、文本框）提供滚动功能</td></tr><tr><td>Text</td><td style="text-align:center">多行文本框</td><td>显示多行文本</td></tr></tbody></table></div><h3 id="GU程序的经典面向对象写法"><a href="#GU程序的经典面向对象写法" class="headerlink" title="GU程序的经典面向对象写法"></a>GU程序的经典面向对象写法</h3><p>本节程序也是 GUI 应用程序编写的一个主要结构，采用了==面向对象==的方式，更加合理的组织代码。</p><p>通过类 <code>Application</code> 组织整个 GUI 程序，类 <code>Application</code> 继承了 <code>Frame</code> 及通过继承拥有了父类的特性。通过构造函数<code>__init__()</code>初始化窗口中的对象，通过 <code>createWidgets()</code>方法创建窗口中的对象。</p><p><code>Frame</code> 框架是一个 <code>tkinter</code> 组件，表示一个矩形的区域。<code>Frame</code> 一般作为容器使用，可以放置其他组件，从而实现复杂的布局。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试一个经典的GUI程序的写法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个经典的GUI程序类的写法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        <span class="comment"># 几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建组件&quot;&quot;&quot;</span></span><br><span class="line">        self.btn01 = Button(self)</span><br><span class="line">        self.btn01[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;点击送花&quot;</span></span><br><span class="line">        self.btn01.pack()</span><br><span class="line">        self.btn01[<span class="string">&quot;command&quot;</span>] = self.songhua</span><br><span class="line">        <span class="comment"># 创建一个退出按钮</span></span><br><span class="line">        self.btnQuit = Button(self, text=<span class="string">&quot;退出&quot;</span>, command=root.destroy)</span><br><span class="line">        <span class="comment"># 将组件放入application里</span></span><br><span class="line">        self.btnQuit.pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">songhua</span>(<span class="params">self</span>):</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;送花&quot;</span>, <span class="string">&quot;送你花&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x100+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;一个经典的GUI程序类的测试&quot;</span>)</span><br><span class="line">    app = Application(master=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113912.png" alt="image-20231124220642885" style="zoom:50%;" /></p><h3 id="简单组件"><a href="#简单组件" class="headerlink" title="简单组件"></a>简单组件</h3><h4 id="Label标签-tkinter中图像正确显示全局变量写法"><a href="#Label标签-tkinter中图像正确显示全局变量写法" class="headerlink" title="Label标签-tkinter中图像正确显示全局变量写法"></a>Label标签-tkinter中图像正确显示全局变量写法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个经典的GUI程序类的写法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        <span class="comment"># 几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建组件&quot;&quot;&quot;</span></span><br><span class="line">        self.label01 = Label(self, text=<span class="string">&quot;label test&quot;</span>, width=<span class="number">10</span>, height=<span class="number">2</span>,</span><br><span class="line">                             bg=<span class="string">&quot;black&quot;</span>, fg=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">        self.label01.pack()</span><br><span class="line">        <span class="comment"># 设置字体</span></span><br><span class="line">        self.label02 = Label(self, text=<span class="string">&quot;字体测试&quot;</span>, width=<span class="number">10</span>, height=<span class="number">2</span>,</span><br><span class="line">                             bg=<span class="string">&quot;blue&quot;</span>, fg=<span class="string">&quot;white&quot;</span>, font=(<span class="string">&quot;黑体&quot;</span>, <span class="number">10</span>))</span><br><span class="line">        self.label02.pack()</span><br><span class="line">        <span class="comment"># 显示图片</span></span><br><span class="line">        <span class="keyword">global</span> photo   <span class="comment"># photo声明为全局变量，如果是局部变量，本方法执行完毕后，图像对象会被销毁，窗口显示不出图像</span></span><br><span class="line">        photo = PhotoImage(file=<span class="string">&quot;../images/logo.gif&quot;</span>)</span><br><span class="line">        self.label03 = Label(self, image=photo)</span><br><span class="line">        self.label03.pack()</span><br><span class="line">        <span class="comment"># 显示多行文本</span></span><br><span class="line">        self.label04 = Label(self, text=<span class="string">&quot;这是第一行\n这是第二行\n这是第三行\n&quot;</span>,</span><br><span class="line">                             borderwidth=<span class="number">1</span>, relief=<span class="string">&quot;solid&quot;</span>, justify=<span class="string">&quot;center&quot;</span>)</span><br><span class="line">        self.label04.pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x250+500+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;Label的测试&quot;</span>)</span><br><span class="line">    app = Application(master=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113914.png" alt="image-20231130152234046"></p><h4 id="Options选项详解-底层源码分析和阅读-可变参数和运算符重载复习"><a href="#Options选项详解-底层源码分析和阅读-可变参数和运算符重载复习" class="headerlink" title="Options选项详解-底层源码分析和阅读-可变参数和运算符重载复习"></a>Options选项详解-底层源码分析和阅读-可变参数和运算符重载复习</h4><p>通过学习 Label 组件，我们发现可以通过 Options 设置组件的属性，从而控制组件的各种状态。比如：宽度、高度、颜色、位置等等。</p><p>我们可以通过三种方式设置 Options 选项，这在各种 GUI 组件中用法都一致。</p><ol><li><p>创建对象时，使用可变参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fred = Button(self, fg=<span class="string">&quot;red&quot;</span>, bg=<span class="string">&quot;blue&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建对象后，使用字典索引方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fred[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;red&quot;</span></span><br><span class="line">fred[<span class="string">&quot;bg&quot;</span>] = <span class="string">&quot;blue&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>创建对象后，使用 config()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fred.config(fg=<span class="string">&quot;red&quot;</span>, bg=<span class="string">&quot;blue&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Button-anchor位置控制"><a href="#Button-anchor位置控制" class="headerlink" title="Button-anchor位置控制"></a>Button-anchor位置控制</h4><p>Button（按钮）用来执行用户的单击操作。Button 可以包含文本，也可以包含图像。按钮被单击后会自动调用对应事件绑定的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个经典的GUI程序类的写法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        <span class="comment"># 几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建组件&quot;&quot;&quot;</span></span><br><span class="line">        self.btn01 = Button(root, text=<span class="string">&quot;登录&quot;</span>, anchor=E, command=self.login)  <span class="comment"># anchor控制字体位置</span></span><br><span class="line">        self.btn01.pack()</span><br><span class="line">        <span class="comment"># 显示图片</span></span><br><span class="line">        <span class="keyword">global</span> photo   <span class="comment"># photo声明为全局变量，如果是局部变量，本方法执行完毕后，图像对象会被销毁，窗口显示不出图像</span></span><br><span class="line">        photo = PhotoImage(file=<span class="string">&quot;../images/start.gif&quot;</span>)</span><br><span class="line">        self.btn02 = Button(root, image=photo, command=self.login)</span><br><span class="line">        self.btn02.pack()</span><br><span class="line">        self.btn02.config(state=<span class="string">&quot;disabled&quot;</span>)  <span class="comment"># 设置按钮为禁用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x250+500+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;Button的测试&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Entry单行文本框-StringVar-登录界面设计和功实现"><a href="#Entry单行文本框-StringVar-登录界面设计和功实现" class="headerlink" title="Entry单行文本框-StringVar-登录界面设计和功实现"></a>Entry单行文本框-StringVar-登录界面设计和功实现</h4><p>Entry 用来接收一行字符串的控件。如果用户输入的文字长度长于 Entry 控件的宽度时, 文字会自动向后滚动。如果想输入多行文本, 需要使用 Text 控件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个经典的GUI程序类的写法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        <span class="comment"># 几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建组件&quot;&quot;&quot;</span></span><br><span class="line">        self.label01 = Label(self, text=<span class="string">&quot;用户名&quot;</span>)</span><br><span class="line">        self.label01.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># StringVar变量绑定到指定的组件</span></span><br><span class="line">        <span class="comment"># StringVar变量的值发生变化，组件内容也发生变化</span></span><br><span class="line">        <span class="comment"># 组件内容发生变化，StringVar变量的值也发生变化</span></span><br><span class="line">        username = StringVar()</span><br><span class="line">        self.entry01 = Entry(self, textvariable=username)</span><br><span class="line">        self.entry01.pack()</span><br><span class="line">        username.<span class="built_in">set</span>(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(username.get())       <span class="comment"># admin</span></span><br><span class="line">        <span class="built_in">print</span>(self.entry01.get())   <span class="comment"># admin</span></span><br><span class="line"></span><br><span class="line">        password = StringVar()</span><br><span class="line">        self.entry02 = Entry(self, textvariable=password, show=<span class="string">&quot;*&quot;</span>)  <span class="comment"># 密码以*显示</span></span><br><span class="line">        self.entry02.pack()</span><br><span class="line"></span><br><span class="line">        Button(root, text=<span class="string">&quot;登录&quot;</span>, anchor=E, command=self.login).pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        username = self.entry01.get()</span><br><span class="line">        password = self.entry02.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;去数据库对比用户名密码&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户名：&quot;</span> + username)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;密码：&quot;</span> + password)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> password == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;登录系统&quot;</span>, <span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;登录系统&quot;</span>, <span class="string">&quot;登陆失败，用户名或密码错误&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x250+500+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;Entry 的测试&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113915.png" alt="image-20231130161750672"></p><h4 id="Text多行文本框详解-复杂tag标记"><a href="#Text多行文本框详解-复杂tag标记" class="headerlink" title="Text多行文本框详解-复杂tag标记"></a>Text多行文本框详解-复杂tag标记</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Text 多行文本框组件的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 宽度 20 个字母(10 个汉字)，高度一个行高</span></span><br><span class="line">        self.w1 = Text(root, width=<span class="number">40</span>, height=<span class="number">12</span>, bg=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line">        self.w1.pack()</span><br><span class="line">        self.w1.insert(<span class="number">1.0</span>, <span class="string">&quot;0123456789\nabcdefg&quot;</span>)  <span class="comment"># 1.0 第一行第一列  行号以 1 开始 列号以 0 开始</span></span><br><span class="line">        self.w1.insert(<span class="number">2.3</span>, <span class="string">&quot;锄禾日当午，汗滴禾下土。谁知盘中餐，粒粒皆辛苦\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">        Button(self, text=<span class="string">&quot;重复插入文本&quot;</span>, command=self.insertText).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;返回文本&quot;</span>, command=self.returnText).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;添加图片&quot;</span>, command=self.addImage).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;添加组件&quot;</span>, command=self.addWidget).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;通过 tag 精确控制文本&quot;</span>, command=self.testTag).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertText</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># INSERT 索引表示在光标处插入</span></span><br><span class="line">        self.w1.insert(INSERT, <span class="string">&#x27; Gaoqi &#x27;</span>)</span><br><span class="line">        <span class="comment"># END 索引号表示在最后插入</span></span><br><span class="line">        self.w1.insert(END, <span class="string">&#x27;[sxt]&#x27;</span>)</span><br><span class="line">        self.w1.insert(<span class="number">1.8</span>, <span class="string">&quot;gaoqi&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">returnText</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Indexes(索引)是用来指向 Text 组件中文本的位置，Text 的组件索引也是对应实际字符之间的位置。</span></span><br><span class="line">        <span class="comment"># 核心：行号以 1 开始 列号以 0 开始</span></span><br><span class="line">        <span class="built_in">print</span>(self.w1.get(<span class="number">1.2</span>, <span class="number">1.6</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;所有文本内容：\n&quot;</span> + self.w1.get(<span class="number">1.0</span>, END))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addImage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># global photo</span></span><br><span class="line">        self.photo = PhotoImage(file=<span class="string">&quot;../images/logo.gif&quot;</span>)</span><br><span class="line">        self.w1.image_create(END, image=self.photo)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addWidget</span>(<span class="params">self</span>):</span><br><span class="line">        b1 = Button(self.w1, text=<span class="string">&#x27;爱尚学堂&#x27;</span>)</span><br><span class="line">        <span class="comment"># 在 text 创建组件的命令</span></span><br><span class="line">        self.w1.window_create(INSERT, window=b1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testTag</span>(<span class="params">self</span>):</span><br><span class="line">        self.w1.delete(<span class="number">1.0</span>, END)</span><br><span class="line">        self.w1.insert(INSERT, <span class="string">&quot;good good study,day day up!\n 北京尚学堂\n 百战程序员\n百度，搜一下就知道&quot;</span>)</span><br><span class="line">        self.w1.tag_add(<span class="string">&quot;good&quot;</span>, <span class="number">1.0</span>, <span class="number">1.9</span>)</span><br><span class="line">        self.w1.tag_config(<span class="string">&quot;good&quot;</span>, background=<span class="string">&quot;yellow&quot;</span>, foreground=<span class="string">&quot;red&quot;</span>)  <span class="comment"># 改变tag的背景，字体颜色</span></span><br><span class="line">        self.w1.tag_add(<span class="string">&quot;baidu&quot;</span>, <span class="number">4.0</span>, <span class="number">4.2</span>)</span><br><span class="line">        self.w1.tag_config(<span class="string">&quot;baidu&quot;</span>, underline=<span class="literal">True</span>)  <span class="comment"># tag加下划线</span></span><br><span class="line">        self.w1.tag_bind(<span class="string">&quot;baidu&quot;</span>, <span class="string">&quot;&lt;Button-1&gt;&quot;</span>, self.webshow)  <span class="comment"># tag绑定事件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">webshow</span>(<span class="params">self, event</span>):</span><br><span class="line">        webbrowser.<span class="built_in">open</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;450x300+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><blockquote><p><strong>利用 Tags 实现更加强大的文本显示和控制</strong></p><p>Tags 通常用于改变 Text 组件中内容的样式和功能。你可以修改文本的字体、尺寸和颜色。另外，Tags 还允许你将文本、嵌入的组件和图片与鼠标和键盘等事件相关联。</p></blockquote><h4 id="Radiobutton单选按钮"><a href="#Radiobutton单选按钮" class="headerlink" title="Radiobutton单选按钮"></a>Radiobutton单选按钮</h4><p><strong>Radiobutton 控件用于选择同一组单选按钮中的一个。Radiobutton 可以显示文本，也可以显示图像。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Radiobutton 组件的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)   <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        self.v = StringVar()</span><br><span class="line">        self.v.<span class="built_in">set</span>(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">        self.r1 = Radiobutton(self, text=<span class="string">&quot;男性&quot;</span>, value=<span class="string">&quot;M&quot;</span>, variable=self.v)</span><br><span class="line">        self.r2 = Radiobutton(self, text=<span class="string">&quot;女性&quot;</span>, value=<span class="string">&quot;F&quot;</span>, variable=self.v)</span><br><span class="line">        self.r1.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        self.r2.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;确定&quot;</span>, command=self.confirm).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">confirm</span>(<span class="params">self</span>):</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;选择的性别:&quot;</span> + self.v.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x50+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Checkbutton复选按钮"><a href="#Checkbutton复选按钮" class="headerlink" title="Checkbutton复选按钮"></a>Checkbutton复选按钮</h4><p><strong>Checkbutton 控件用于选择多个按钮的情况。Checkbutton 可以显示文本，也可以显示图像。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Checkbutton 组件的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        self.codeHobby = IntVar()</span><br><span class="line">        self.videoHobby = IntVar()</span><br><span class="line">        <span class="built_in">print</span>(self.codeHobby.get())  <span class="comment"># 默认值是 0</span></span><br><span class="line">        self.c1 = Checkbutton(self, text=<span class="string">&quot;敲代码&quot;</span>, variable=self.codeHobby, onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>)</span><br><span class="line">        self.c2 = Checkbutton(self, text=<span class="string">&quot;看视频&quot;</span>, variable=self.videoHobby, onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>)</span><br><span class="line">        self.c1.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        self.c2.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;确定&quot;</span>, command=self.confirm).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">confirm</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.videoHobby.get() == <span class="number">1</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;看视频，都是正常人有的爱好！你喜欢看什么类型？&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.codeHobby.get() == <span class="number">1</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;抓获野生程序猿一只，赶紧送给他尚学堂的视频充饥&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x50+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="Canvasl画布组件"><a href="#Canvasl画布组件" class="headerlink" title="Canvasl画布组件"></a>Canvasl画布组件</h4><p>canvas（画布）是一个矩形区域，可以放置图形、图像、组件等。本节我们简单介绍canvas 的使用，更加详细和深入的内容将在后面的“图形绘制”章节讲解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Canvas 组件的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        self.canvas = Canvas(self, width=<span class="number">300</span>, height=<span class="number">200</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">        self.canvas.pack()</span><br><span class="line">        <span class="comment"># 画一条直线</span></span><br><span class="line">        line = self.canvas.create_line(<span class="number">10</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">50</span>)  <span class="comment"># 三个点 (x, y)</span></span><br><span class="line">        <span class="comment"># 画一个矩形.</span></span><br><span class="line">        rect = self.canvas.create_rectangle(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>)  <span class="comment"># 对角坐标，左上角和右下角坐标</span></span><br><span class="line">        <span class="comment"># 画一个椭圆.坐标两双。为椭圆的外切矩形左上角和底部右下角</span></span><br><span class="line">        oval = self.canvas.create_oval(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="keyword">global</span> photo</span><br><span class="line">        photo = PhotoImage(file=<span class="string">&quot;../images/logo.gif&quot;</span>)</span><br><span class="line">        self.canvas.create_image(<span class="number">150</span>, <span class="number">170</span>, image=photo)</span><br><span class="line">        Button(self, text=<span class="string">&quot;画 10 个矩形&quot;</span>, command=self.draw50Recg).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw50Recg</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="comment"># 左上角坐标</span></span><br><span class="line">            x1 = random.randrange(<span class="built_in">int</span>(self.canvas[<span class="string">&quot;width&quot;</span>]) / <span class="number">2</span>)</span><br><span class="line">            y1 = random.randrange(<span class="built_in">int</span>(self.canvas[<span class="string">&quot;height&quot;</span>]) / <span class="number">2</span>)</span><br><span class="line">            <span class="comment"># 右下角坐标</span></span><br><span class="line">            x2 = x1 + random.randrange(<span class="built_in">int</span>(self.canvas[<span class="string">&quot;width&quot;</span>]) / <span class="number">2</span>)</span><br><span class="line">            y2 = y1 + random.randrange(<span class="built_in">int</span>(self.canvas[<span class="string">&quot;height&quot;</span>]) / <span class="number">2</span>)</span><br><span class="line">            self.canvas.create_rectangle(x1, y1, x2, y2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x300+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h3><p>一个 GUI 应用程序必然有大量的组件，这些组件如何排布？这时候，就需要使用 tkinter提供的布局管理器帮助我们组织、管理在父组件中子组件的布局方式。tkinter 提供了三种管理器：<code>pack</code>、<code>grid</code>、<code>place</code>。</p><h4 id="Grid布局管理器详解"><a href="#Grid布局管理器详解" class="headerlink" title="Grid布局管理器详解"></a>Grid布局管理器详解</h4><p>grid 表格布局，采用==表格结构==组织组件。子组件的位置由行和列的单元格来确定，并且可以跨行和跨列，从而实现复杂的布局。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113916.png" alt="image-20231208162956284"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Grid 布局管理器的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过 grid 布局实现登录界面&quot;&quot;&quot;</span></span><br><span class="line">        self.label01 = Label(self, text=<span class="string">&quot;用户名&quot;</span>)</span><br><span class="line">        self.label01.grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">        self.entry01 = Entry(self)</span><br><span class="line">        self.entry01.grid(row=<span class="number">0</span>, column=<span class="number">1</span>)</span><br><span class="line">        Label(self, text=<span class="string">&quot;用户名为手机号&quot;</span>).grid(row=<span class="number">0</span>, column=<span class="number">2</span>)</span><br><span class="line">        Label(self, text=<span class="string">&quot;密码&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">0</span>)</span><br><span class="line">        Entry(self, show=<span class="string">&quot;*&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">1</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;登录&quot;</span>).grid(row=<span class="number">2</span>, column=<span class="number">1</span>, sticky=EW)  <span class="comment"># 东西两边对齐，拉长</span></span><br><span class="line">        Button(self, text=<span class="string">&quot;取消&quot;</span>).grid(row=<span class="number">2</span>, column=<span class="number">2</span>, sticky=E)   <span class="comment"># 东边对齐</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x90+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="计算器软件界面的设计"><a href="#计算器软件界面的设计" class="headerlink" title="计算器软件界面的设计"></a>计算器软件界面的设计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;计算器软件界面的设计&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)    <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过 grid 布局实现计算器软件的界面&quot;&quot;&quot;</span></span><br><span class="line">        btnText = ((<span class="string">&quot;MC&quot;</span>, <span class="string">&quot;M+&quot;</span>, <span class="string">&quot;M-&quot;</span>, <span class="string">&quot;MR&quot;</span>),</span><br><span class="line">                   (<span class="string">&quot;C&quot;</span>, <span class="string">&quot;±&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;✖&quot;</span>),</span><br><span class="line">                   (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="string">&quot;-&quot;</span>),</span><br><span class="line">                   (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&quot;+&quot;</span>),</span><br><span class="line">                   (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;=&quot;</span>),</span><br><span class="line">                   (<span class="number">0</span>, <span class="string">&quot;.&quot;</span>))</span><br><span class="line">        Entry(self).grid(row=<span class="number">0</span>, column=<span class="number">0</span>, columnspan=<span class="number">4</span>, pady=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">for</span> rindex, r <span class="keyword">in</span> <span class="built_in">enumerate</span>(btnText):</span><br><span class="line">            <span class="keyword">for</span> cindex, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(r):</span><br><span class="line">                <span class="keyword">if</span> c == <span class="string">&quot;=&quot;</span>:                      <span class="comment"># rowspan跨行，columnspan跨列</span></span><br><span class="line">                    Button(self, text=c, width=<span class="number">2</span>)\</span><br><span class="line">                        .grid(row=rindex + <span class="number">1</span>, column=cindex, rowspan=<span class="number">2</span>, sticky=EW)</span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">0</span>:</span><br><span class="line">                    Button(self, text=c, width=<span class="number">2</span>)\</span><br><span class="line">                        .grid(row=rindex + <span class="number">1</span>, column=cindex, columnspan=<span class="number">2</span>, sticky=EW)</span><br><span class="line">                <span class="keyword">elif</span> c == <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                    Button(self, text=c, width=<span class="number">2</span>)\</span><br><span class="line">                        .grid(row=rindex + <span class="number">1</span>, column=cindex+<span class="number">1</span>, sticky=EW)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    Button(self, text=c, width=<span class="number">2</span>)\</span><br><span class="line">                        .grid(row=rindex+<span class="number">1</span>, column=cindex, sticky=EW)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;200x300+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113917.png" alt="image-20231208171458029"></p><h4 id="Pack布局管理器"><a href="#Pack布局管理器" class="headerlink" title="Pack布局管理器"></a>Pack布局管理器</h4><p>pack 按照组件的创建顺序将子组件添加到父组件中，按照垂直或者水平的方向自然排布。如果不指定任何选项，默认在父组件中自顶向下垂直添加组件。</p><p>pack 是代码量最少，最简单的一种，可以用于快速生成界面。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113918.png" alt="image-20231208171547373"></p><h4 id="钢琴软件界面设计"><a href="#钢琴软件界面设计" class="headerlink" title="钢琴软件界面设计"></a>钢琴软件界面设计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 pack 布局管理</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;700x220&quot;</span>)</span><br><span class="line"><span class="comment"># Frame 是一个矩形区域，就是用来防止其他子组件</span></span><br><span class="line">f1 = Frame(root)</span><br><span class="line">f1.pack()</span><br><span class="line">f2 = Frame(root)</span><br><span class="line">f2.pack()</span><br><span class="line">btnText = (<span class="string">&quot;流行风&quot;</span>, <span class="string">&quot;中国风&quot;</span>, <span class="string">&quot;日本风&quot;</span>, <span class="string">&quot;重金属&quot;</span>, <span class="string">&quot;轻音乐&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> txt <span class="keyword">in</span> btnText:</span><br><span class="line">    Button(f1, text=txt).pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">        Button(f2, width=<span class="number">5</span>, height=<span class="number">10</span>, bg=<span class="string">&quot;black&quot;</span> <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;white&quot;</span>).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113919.png" alt="image-20231208171932560"></p><h4 id="Place管理器"><a href="#Place管理器" class="headerlink" title="Place管理器"></a>Place管理器</h4><p>place 布局管理器可以通过坐标精确控制组件的位置，适用于一些布局更加灵活的场景。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113920.png" alt="image-20231208172220911"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;500x300&quot;</span>)</span><br><span class="line">root.title(<span class="string">&quot;布局管理 place&quot;</span>)</span><br><span class="line">root[<span class="string">&quot;bg&quot;</span>] = <span class="string">&quot;white&quot;</span></span><br><span class="line">f1 = Frame(root, width=<span class="number">200</span>, height=<span class="number">200</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">f1.place(x=<span class="number">30</span>, y=<span class="number">30</span>) </span><br><span class="line">Button(root, text=<span class="string">&quot;尚学堂&quot;</span>).place(relx=<span class="number">0.5</span>, rely=<span class="number">0</span>,        <span class="comment"># 相对宽度和相对高度</span></span><br><span class="line">                               x=<span class="number">100</span>, y=<span class="number">200</span>, relwidth=<span class="number">0.2</span>, relheight=<span class="number">0.2</span>)  </span><br><span class="line">Button(f1, text=<span class="string">&quot;百战程序员&quot;</span>).place(relx=<span class="number">0.6</span>, rely=<span class="number">0.7</span>)</span><br><span class="line">Button(f1, text=<span class="string">&quot;高淇老师&quot;</span>).place(relx=<span class="number">0.2</span>, rely=<span class="number">0.2</span>)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113922.png" alt="image-20231208172552488"></p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="扑克游戏界面设计-增加事件操作"><a href="#扑克游戏界面设计-增加事件操作" class="headerlink" title="扑克游戏界面设计-增加事件操作"></a>扑克游戏界面设计-增加事件操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;扑克牌游戏的界面设计&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.place()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过place布局管理器实现扑克牌位置控制&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 显示一张扑克</span></span><br><span class="line">        <span class="comment"># self.photo = PhotoImage(file=&quot;../images/puke/puke1.gif&quot;)</span></span><br><span class="line">        <span class="comment"># self.puke1 = Label(self.master, image=self.photo)</span></span><br><span class="line">        <span class="comment"># self.puke1.place(x=10, y=50)</span></span><br><span class="line">        <span class="comment"># 用列表推导式显示所有图片</span></span><br><span class="line">        self.photos = [PhotoImage(file=<span class="string">&quot;../images/puke/puke&quot;</span> + <span class="built_in">str</span>(i+<span class="number">1</span>) + <span class="string">&quot;.gif&quot;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">        self.pukes = [Label(self.master, image=self.photos[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            self.pukes[i].place(x=<span class="number">10</span>+i*<span class="number">40</span>, y=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为所有Label增加事件处理</span></span><br><span class="line">        self.pukes[<span class="number">0</span>].bind_class(<span class="string">&quot;Label&quot;</span>, <span class="string">&quot;&lt;Button-1&gt;&quot;</span>, self.chupai)  <span class="comment"># 绑定左键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chupai</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="built_in">print</span>(event.widget.winfo_geometry())</span><br><span class="line">        <span class="built_in">print</span>(event.widget.winfo_y())   <span class="comment"># 获得y坐标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> event.widget.winfo_y() == <span class="number">50</span>:</span><br><span class="line">            event.widget.place(y=<span class="number">30</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.widget.place(y=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;600x300+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113923.png" alt="image-20231208191429645"></p><h4 id="lambda表达式-事件传参应用"><a href="#lambda表达式-事件传参应用" class="headerlink" title="lambda表达式-事件传参应用"></a>lambda表达式-事件传参应用</h4><p>lambda 表达式定义的是一个匿名函数，只适合简单输入参数，简单计算返回结果，不适合功能复杂情况。</p><p>lambda 定义的匿名函数也有输入、也有输出，只是没有名字。语法格式如下：</p><p>​                                                                    <code>lambda 参数值列表：表达式</code></p><p>参数值列表即为输入。</p><p>表达式计算的结构即为输出。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113924.png" alt="image-20231208192609616"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 测试 command 属性绑定事件，测试 lambda 表达式帮助传参</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;270x50&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;command 方式，简单情况：不涉及获取 event 对象，可以使用&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a=&#123;0&#125;,b=&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;测试 command1&quot;</span>,</span><br><span class="line">       command=mouseTest1).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">Button(root, text=<span class="string">&quot;测试 command2&quot;</span>, </span><br><span class="line">       command=<span class="keyword">lambda</span>: mouseTest2(<span class="string">&quot;gaoqi&quot;</span>, <span class="string">&quot;xixi&quot;</span>)).pack(side=<span class="string">&quot;left&quot;</span>) <span class="comment"># lambda 表达式帮助传参</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="三种事件绑定方式总结"><a href="#三种事件绑定方式总结" class="headerlink" title="三种事件绑定方式总结"></a>三种事件绑定方式总结</h4><p><strong>多种事件绑定方式汇总</strong></p><p><strong>组件对象的绑定</strong></p><ol><li>通过 <code>command</code> 属性绑定（适合简单不需获取 event 对象）</li></ol><p><code>Button(root,text=&quot;登录&quot;,command=login)</code></p><ol><li>通过 <code>bind()</code>方法绑定（适合需要获取 event 对象）</li></ol><p><code>c1 = Canvas(); c1.bind(&quot;&lt;Button-1&gt;&quot;,drawLine)</code> </p><p><strong>组件类的绑定</strong></p><p>调用对象的 <code>bind_class</code> 函数，将该组件类所有的组件绑定事件：</p><p><code>w.bind_class(&quot;Widget&quot;,&quot;event&quot;,eventhanler)</code></p><p>比如：<code>btn01.bind_class(“Button”,&quot;&lt;Button-1&gt;&quot;,func)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 多种事件绑定方式汇总</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;270x30&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest1</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bind()方式绑定，可以获取 event 对象&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(event.widget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a=&#123;0&#125;,b=&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;command 方式绑定，不能直接获取 event 对象&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest3</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;右键单击事件，绑定给所有按钮啦！！&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(event.widget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b1 = Button(root, text=<span class="string">&quot;测试 bind()绑定&quot;</span>)</span><br><span class="line">b1.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"><span class="comment"># bind 方式绑定事件</span></span><br><span class="line">b1.bind(<span class="string">&quot;&lt;Button-1&gt;&quot;</span>, mouseTest1)</span><br><span class="line"><span class="comment"># command 属性直接绑定事件</span></span><br><span class="line">b2 = Button(root, text=<span class="string">&quot;测试 command2&quot;</span>,</span><br><span class="line">            command=<span class="keyword">lambda</span>: mouseTest2(<span class="string">&quot;gaoqi&quot;</span>, <span class="string">&quot;xixi&quot;</span>))</span><br><span class="line">b2.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"><span class="comment"># 给所有 Button 按钮都绑定右键单击事件&lt;Button-2&gt;</span></span><br><span class="line">b1.bind_class(<span class="string">&quot;Button&quot;</span>, <span class="string">&quot;&lt;Button-2&gt;&quot;</span>, mouseTest3)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h3 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h3><h4 id="optionmenu选项菜单"><a href="#optionmenu选项菜单" class="headerlink" title="optionmenu选项菜单"></a>optionmenu选项菜单</h4><p>OptionMenu（选择项）用来做多选一，选中的项在顶部显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;optionmenu 的使用测试&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;200x100&quot;</span>)</span><br><span class="line">v = StringVar(root)</span><br><span class="line">v.<span class="built_in">set</span>(<span class="string">&quot;百战程序员&quot;</span>)</span><br><span class="line">om = OptionMenu(root, v, <span class="string">&quot;尚学堂&quot;</span>, <span class="string">&quot;百战程序员&quot;</span>, <span class="string">&quot;卓越班[保底 18 万]&quot;</span>)</span><br><span class="line">om[<span class="string">&quot;width&quot;</span>] = <span class="number">10</span></span><br><span class="line">om.pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最喜爱的机构:&quot;</span>, v.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># v.set(&quot;尚学堂&quot;)    # 直接修改了 optionmenu 中选中的值</span></span><br><span class="line">Button(root, text=<span class="string">&quot;确定&quot;</span>, command=test1).pack()</span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113925.png" alt="image-20231208195755098"></p><h4 id="scale滑块"><a href="#scale滑块" class="headerlink" title="scale滑块"></a>scale滑块</h4><p>Scale（移动滑块）用于在指定的数值区间，通过滑块的移动来选择值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; Scale(移动滑块)的使用测试：使用Scale控制字体大小变化&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x150&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;滑块的值:&quot;</span>, value)</span><br><span class="line">    newFont = (<span class="string">&quot;宋体&quot;</span>, value)</span><br><span class="line">    a.config(font=newFont)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Scale(root, from_=<span class="number">10</span>, to=<span class="number">50</span>, length=<span class="number">200</span>, tickinterval=<span class="number">5</span>, orient=HORIZONTAL, command=test1)</span><br><span class="line">s1.pack()</span><br><span class="line">a = Label(root, text=<span class="string">&quot;百战程序员&quot;</span>, width=<span class="number">10</span>, height=<span class="number">1</span>, bg=<span class="string">&quot;black&quot;</span>, fg=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">a.pack()</span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113926.png" alt="image-20231208200121685"></p><h4 id="颜色框"><a href="#颜色框" class="headerlink" title="颜色框"></a>颜色框</h4><p>颜色选择框可以帮助我们设置背景色、前景色、画笔颜色、字体颜色等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;askcolor 颜色选择框的测试，改变背景色&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x150&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    s1 = askcolor(color=<span class="string">&quot;red&quot;</span>, title=<span class="string">&quot;选择背景色&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(s1)</span><br><span class="line">    <span class="comment"># s1 的值是：((0.0, 0.0, 255.99609375), &#x27;#0000ff&#x27;)</span></span><br><span class="line">    root.config(bg=s1[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;选择背景色&quot;</span>, command=test1).pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113927.png" alt="image-20231208201753386"></p><h4 id="文件选择框"><a href="#文件选择框" class="headerlink" title="文件选择框"></a>文件选择框</h4><p>文件对话框帮助我们实现可视化的==操作目录、操作文件==。最后，将文件、目录的信息传入到程序中。文件对话框包含如下一些常用函数：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113928.png" alt="image-20231208203352425"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113929.png" alt="image-20231208203403744"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;文件对话框获取文件&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk();</span><br><span class="line">root.geometry(<span class="string">&quot;400x100&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    f = askopenfilename(title=<span class="string">&quot;上传文件&quot;</span>,</span><br><span class="line">                        initialdir=<span class="string">&quot;d:/&quot;</span>, filetypes=[(<span class="string">&quot;视频文件&quot;</span>, <span class="string">&quot;.mp4&quot;</span>)])</span><br><span class="line">    <span class="comment"># print(f)</span></span><br><span class="line">    show[<span class="string">&quot;text&quot;</span>] = f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;选择编辑的视频文件&quot;</span>, command=test1).pack()</span><br><span class="line">show = Label(root, width=<span class="number">40</span>, height=<span class="number">3</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">show.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># askcolor 颜色选择框的测试，改变背景色</span></span><br><span class="line"><span class="comment"># 打开指定 txt 文件，并读出文件内容到窗口</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x100&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">with</span> askopenfile(title=<span class="string">&quot;上传文件&quot;</span>,</span><br><span class="line">                     initialdir=<span class="string">&quot;d:&quot;</span>, filetypes=[(<span class="string">&quot;文本文件&quot;</span>, <span class="string">&quot;.txt&quot;</span>)]) <span class="keyword">as</span> f:</span><br><span class="line">        show[<span class="string">&quot;text&quot;</span>] = f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;选择读取的文本文件&quot;</span>, command=test1).pack()</span><br><span class="line">show = Label(root, width=<span class="number">40</span>, height=<span class="number">3</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">show.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="简单对话框"><a href="#简单对话框" class="headerlink" title="简单对话框"></a>简单对话框</h4><p>simpledialog（简单对话框）包含如下常用函数：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113930.png" alt="image-20231208204359332"></p><p>参数中，title 表示窗口标题；</p><p>prompt 是提示信息；</p><p>命名参数 kw 为各种选项：initialvalue（初始值）、minvalue（最小值）、maxvalue（最大值）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;简单对话框&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter.simpledialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x100&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    a = askinteger(title=<span class="string">&quot;输入年龄&quot;</span>, prompt=<span class="string">&quot;请输入年龄&quot;</span>, initialvalue=<span class="number">18</span>, minvalue=<span class="number">1</span>, maxvalue=<span class="number">150</span>)</span><br><span class="line">    <span class="comment"># askstring、askfloat 框使用方式一样</span></span><br><span class="line">    show[<span class="string">&quot;text&quot;</span>] = a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;你多大了? 请输入&quot;</span>, command=test1).pack()</span><br><span class="line">show = Label(root, width=<span class="number">40</span>, height=<span class="number">3</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">show.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113931.png" alt="image-20231208205056943"></p><h4 id="通用消息框"><a href="#通用消息框" class="headerlink" title="通用消息框"></a>通用消息框</h4><p>messagebox（通用消息框）用于和用户简单的交互，用户点击确定、取消。如下列出了</p><p>messagebox 的常见函数：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113932.png" alt="image-20231208204952327"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113933.png" alt="image-20231208205010396"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;简单对话框&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.messagebox <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x100&quot;</span>)</span><br><span class="line">a1 = showinfo(title=<span class="string">&quot;尚学堂&quot;</span>, message=<span class="string">&quot;Python400 集从零开始，深入底层，\</span></span><br><span class="line"><span class="string">                                      深入算法，打好基础。还手写神经网络&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a1)</span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="ttk子模块问题"><a href="#ttk子模块问题" class="headerlink" title="ttk子模块问题"></a>ttk子模块问题</h4><p>我们再前面学的组件是 tkinter 模块下的组件，整体风格较老较丑。为了弥补这点不足，推出了 ttk 组件。ttk 组件更加美观、功能更加强大。 新增了 LabeledScale（带标签的Scale）、Notebook（多文档窗口）、Progressbar（进度条）、Treeview（树）等组件。</p><p>使用 ttk 组件与使用普通的 Tkinter 组件并没有多大的区别，只要导入 ttk 模块即可。</p><blockquote><p>:warning:此处我们不展开细讲 ttk。如果你的项目确实需要用到复杂的界面，推荐大家使用<code>wxpython</code> 或者 <code>pyQt</code>.</p></blockquote><h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><h4 id="主菜单"><a href="#主菜单" class="headerlink" title="主菜单"></a>主菜单</h4><p>主菜单一般包含：文件、编辑、帮助等，位于 GUI 窗口的上面。创建主菜单一般有如下 4步：</p><ol><li>创建主菜单栏对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menubar = tk.Menu(root)</span><br></pre></td></tr></table></figure><ol><li>创建菜单，并添加到主菜单栏对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_menu = tk.Menu(menubar)</span><br><span class="line">menubar.add_cascade(label=<span class="string">&quot;文件&quot;</span>,menu=file_menu)</span><br></pre></td></tr></table></figure><ol><li>添加菜单项到 2 步中的菜单</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file_menu.add_command(label=<span class="string">&quot;打开&quot;</span>)</span><br><span class="line">file_menu.add_command(label=<span class="string">&quot;保存&quot;</span>,accelerator=<span class="string">&quot;ctrl + s&quot;</span> command=mySaveFile)</span><br><span class="line">file_menu.add_separator()</span><br><span class="line">file_menu.add_command(label=<span class="string">&quot;退出&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>将主菜单栏添加到根窗口</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root[<span class="string">&quot;menu&quot;</span>]=menubar</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;开发记事本软件的菜单&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)    <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.textpad = <span class="literal">None</span>         <span class="comment"># textpad 表示 Text 文本框对象</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建主菜单栏</span></span><br><span class="line">        menubar = Menu(root)</span><br><span class="line">        <span class="comment"># 创建子菜单</span></span><br><span class="line">        menuFile = Menu(menubar)</span><br><span class="line">        menuEdit = Menu(menubar)</span><br><span class="line">        menuHelp = Menu(menubar)</span><br><span class="line">        <span class="comment"># 将子菜单加入到主菜单栏</span></span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;文件(F)&quot;</span>, menu=menuFile)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;编辑(E)&quot;</span>, menu=menuEdit)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;帮助(H)&quot;</span>, menu=menuHelp)</span><br><span class="line">        <span class="comment"># 添加菜单项</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;新建&quot;</span>, accelerator=<span class="string">&quot;ctrl+n&quot;</span>,</span><br><span class="line">                             command=self.test)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;打开&quot;</span>, accelerator=<span class="string">&quot;ctrl+o&quot;</span>,</span><br><span class="line">                             command=self.test)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;保存&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+s&quot;</span>, command=self.test)</span><br><span class="line">        menuFile.add_separator()  <span class="comment"># 添加分割线</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;退出&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+q&quot;</span>, command=self.test)</span><br><span class="line">        <span class="comment"># 将主菜单栏加到根窗口</span></span><br><span class="line">        root[<span class="string">&quot;menu&quot;</span>] = menubar</span><br><span class="line">        <span class="comment"># 文本编辑区</span></span><br><span class="line">        self.textpad = Text(root, width=<span class="number">50</span>, height=<span class="number">30</span>)</span><br><span class="line">        self.textpad.pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;450x300+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;简易记事本&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="上下文菜单"><a href="#上下文菜单" class="headerlink" title="上下文菜单"></a>上下文菜单</h4><p>快捷菜单（上下文菜单）是通过鼠标右键单击组件而弹出的菜单，一般是和这个组件相关的操作，比如：剪切、复制、粘贴、属性等。创建快捷菜单步骤如下：</p><ol><li>创建菜单</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menubar = tk.Menu(root)</span><br><span class="line">menubar.add_command(label=<span class="string">&quot;字体&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>绑定鼠标右键单击事件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">event</span>):</span><br><span class="line">    menubar.post(event.x_root,event.y_root)  <span class="comment">#在鼠标右键单击坐标处显示菜单</span></span><br><span class="line">    root.bind(<span class="string">&quot;&lt;Button-3&gt;&quot;</span>,test)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;开发记事本软件的菜单&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)    <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.textpad = <span class="literal">None</span>         <span class="comment"># textpad 表示 Text 文本框对象</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建主菜单栏</span></span><br><span class="line">        menubar = Menu(root)</span><br><span class="line">        <span class="comment"># 创建子菜单</span></span><br><span class="line">        menuFile = Menu(menubar)</span><br><span class="line">        menuEdit = Menu(menubar)</span><br><span class="line">        menuHelp = Menu(menubar)</span><br><span class="line">        <span class="comment"># 将子菜单加入到主菜单栏</span></span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;文件(F)&quot;</span>, menu=menuFile)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;编辑(E)&quot;</span>, menu=menuEdit)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;帮助(H)&quot;</span>, menu=menuHelp)</span><br><span class="line">        <span class="comment"># 添加菜单项</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;新建&quot;</span>, accelerator=<span class="string">&quot;ctrl+n&quot;</span>,</span><br><span class="line">                             command=self.test)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;打开&quot;</span>, accelerator=<span class="string">&quot;ctrl+o&quot;</span>,</span><br><span class="line">                             command=self.test)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;保存&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+s&quot;</span>, command=self.test)</span><br><span class="line">        menuFile.add_separator()  <span class="comment"># 添加分割线</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;退出&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+q&quot;</span>, command=self.test)</span><br><span class="line">        <span class="comment"># 将主菜单栏加到根窗口</span></span><br><span class="line">        root[<span class="string">&quot;menu&quot;</span>] = menubar</span><br><span class="line">        <span class="comment"># 文本编辑区</span></span><br><span class="line">        self.textpad = Text(root, width=<span class="number">50</span>, height=<span class="number">30</span>)</span><br><span class="line">        self.textpad.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建上下文菜单</span></span><br><span class="line">        self.contextMenu = Menu(root)</span><br><span class="line">        self.contextMenu.add_command(label=<span class="string">&quot;背景颜色&quot;</span>,  command=self.test)</span><br><span class="line">        <span class="comment"># 为右键绑定事件</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Button-3&gt;&quot;</span>, self.createContextMenu)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createContextMenu</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># 菜单在鼠标右键单击的坐标显示</span></span><br><span class="line">        self.contextMenu.post(event.x_root, event.y_root)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;450x300+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;简易记事本&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312122142441.png" alt="image-20231209170627199"></p><h3 id="记事本项目"><a href="#记事本项目" class="headerlink" title="记事本项目"></a>记事本项目</h3><p>结合所学 GUI 知识，开发一款模仿 windows 记事本的软件。包含了基本的功能：</p><ol><li><p>新建文本文件</p></li><li><p>保存文件</p></li><li><p>修改文件内容</p></li><li><p>退出</p></li><li><p>各种快捷键处理</p></li><li><p>修改文本区域背景色</p></li></ol><h4 id="【01】打开和保存修改文件的实现"><a href="#【01】打开和保存修改文件的实现" class="headerlink" title="【01】打开和保存修改文件的实现"></a>【01】打开和保存修改文件的实现</h4><h4 id="【02】新建文件-背景色改变-快捷键功能"><a href="#【02】新建文件-背景色改变-快捷键功能" class="headerlink" title="【02】新建文件-背景色改变-快捷键功能"></a>【02】新建文件-背景色改变-快捷键功能</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">开发一个简单的记事本。</span></span><br><span class="line"><span class="string">包含：新建、保存、修改文本内容、退出</span></span><br><span class="line"><span class="string">包含：各种快捷键的处理</span></span><br><span class="line"><span class="string">version 1.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.textpad = <span class="literal">None</span>  <span class="comment"># textpad 表示 Text 文本框对象</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建主菜单栏</span></span><br><span class="line">        menubar = Menu(root)</span><br><span class="line">        <span class="comment"># 创建子菜单</span></span><br><span class="line">        menuFile = Menu(menubar)</span><br><span class="line">        menuEdit = Menu(menubar)</span><br><span class="line">        menuHelp = Menu(menubar)</span><br><span class="line">        <span class="comment"># 将子菜单加入到主菜单栏</span></span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;文件(F)&quot;</span>, menu=menuFile)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;编辑(E)&quot;</span>, menu=menuEdit)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;帮助(H)&quot;</span>, menu=menuHelp)</span><br><span class="line">        <span class="comment"># 添加菜单项</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;新建&quot;</span>, accelerator=<span class="string">&quot;ctrl+n&quot;</span>,</span><br><span class="line">                             command=self.newfile)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;打开&quot;</span>, accelerator=<span class="string">&quot;ctrl+o&quot;</span>,</span><br><span class="line">                             command=self.openfile)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;保存&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+s&quot;</span>, command=self.savefile)</span><br><span class="line">        menuFile.add_separator()  <span class="comment"># 添加分割线</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;退出&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+q&quot;</span>, command=self.exit)</span><br><span class="line">        <span class="comment"># 将主菜单栏加到根窗口</span></span><br><span class="line">        root[<span class="string">&quot;menu&quot;</span>] = menubar</span><br><span class="line">        <span class="comment"># 增加快捷键的处理</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Control-n&gt;&quot;</span>, <span class="keyword">lambda</span> event: self.newfile())   <span class="comment"># 新建文件快捷键</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Control-o&gt;&quot;</span>, <span class="keyword">lambda</span> event: self.openfile())  <span class="comment"># 打开新文件快捷键</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Control-s&gt;&quot;</span>, <span class="keyword">lambda</span> event: self.savefile())  <span class="comment"># 保存文件快捷键</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Control-q&gt;&quot;</span>, <span class="keyword">lambda</span> event: self.exit())      <span class="comment"># 退出快捷键</span></span><br><span class="line">        <span class="comment"># 文本编辑区</span></span><br><span class="line">        self.textpad = Text(root, width=<span class="number">50</span>, height=<span class="number">30</span>)</span><br><span class="line">        self.textpad.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建上下文菜单</span></span><br><span class="line">        self.contextMenu = Menu(root)</span><br><span class="line">        self.contextMenu.add_command(label=<span class="string">&quot;背景颜色&quot;</span>, command=self.openAskColor)</span><br><span class="line">        <span class="comment"># 为右键绑定事件</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Button-3&gt;&quot;</span>, self.createContextMenu)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">newfile</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 每次打开文件之前清空text控件之前的内容</span></span><br><span class="line">        self.textpad.delete(<span class="number">1.0</span>, END)</span><br><span class="line">        self.filename = asksaveasfilename(title=<span class="string">&quot;另存为&quot;</span>, initialfile=<span class="string">&quot;未命名.txt&quot;</span>,</span><br><span class="line">                                          filetypes=[(<span class="string">&quot;文本文档&quot;</span>, <span class="string">&quot;*.txt&quot;</span>)],</span><br><span class="line">                                          defaultextension=<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">        self.savefile()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">openfile</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 每次打开文件之前清空text控件之前的内容</span></span><br><span class="line">        self.textpad.delete(<span class="number">1.0</span>, END)</span><br><span class="line">        <span class="keyword">with</span> askopenfile(title=<span class="string">&quot;打开文本文件&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.textpad.insert(INSERT, f.read())</span><br><span class="line">            self.filename = f.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">savefile</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.filename, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            c = self.textpad.get(<span class="number">1.0</span>, END)</span><br><span class="line">            f.write(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exit</span>(<span class="params">self</span>):</span><br><span class="line">        root.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">openAskColor</span>(<span class="params">self</span>):</span><br><span class="line">        color = askcolor(color=<span class="string">&quot;red&quot;</span>, title=<span class="string">&quot;选择背景颜色&quot;</span>)</span><br><span class="line">        <span class="comment"># 返回格式 ((0,0,0,255),&quot;0000ff&quot;)</span></span><br><span class="line">        self.textpad.config(bg=color[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createContextMenu</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># 菜单在鼠标右键单击的坐标显示</span></span><br><span class="line">        self.contextMenu.post(event.x_root, event.y_root)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;450x300+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;简易记事本&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="【03】python项目打包成exe可执行文件"><a href="#【03】python项目打包成exe可执行文件" class="headerlink" title="【03】python项目打包成exe可执行文件"></a>【03】python项目打包成exe可执行文件</h4><p>我们可以使用 pyinstaller 模块实现将 python 项目打包成 exe 文件。操作步骤如下：</p><ol><li><p>安装 pyinstaller 模块</p><p>在 pycharm 中操作：file—&gt;setting—&gt;Project：xxx —&gt;Project interpretor，再点击+即可。</p></li><li><p>在 pycharm 的 Terminal 终端输入如下命令：</p><p><code>pyinstaller  -F  xxxx.py</code></p><blockquote><p>:warning:相关参数如下：</p><p>—icon= 图标路径（<code>pyinstaller -F --icon=my.ico XXXX.py</code>）</p><p>-F 打包成一个 exe 文件</p><p>-w 使用窗口，无控制台</p><p>-c 使用控制台，无窗口</p><p>-D 创建一个目录，里面包含 exe 以及其他一些依赖性文件</p></blockquote></li><li><p>在项目的 dist 目录下可以看到生成了 exe 文件，直接在 windows 系统中使用即可</p></li></ol><blockquote><p>:warning:==exe 文件本质是将 python 解释器和程序打包到了一起，这样我们执行程序时就不用管 windows 系统是不是有 python 解释器。==</p></blockquote><h3 id="画图项目"><a href="#画图项目" class="headerlink" title="画图项目"></a>画图项目</h3><p>开发一款简单的画图软件, 包含如下功能：</p><ol><li><p>画笔</p></li><li><p>矩形/椭圆绘制</p></li><li><p>清屏</p></li><li><p>橡皮擦</p></li><li><p>直线/带箭头的直线</p></li><li><p>修改画笔颜色、背景颜色</p></li></ol><h4 id="【01】界面实现"><a href="#【01】界面实现" class="headerlink" title="【01】界面实现"></a>【01】界面实现</h4><h4 id="【02】绘制直线-拖动删除上一个图形"><a href="#【02】绘制直线-拖动删除上一个图形" class="headerlink" title="【02】绘制直线-拖动删除上一个图形"></a>【02】绘制直线-拖动删除上一个图形</h4><h4 id="【03】箭头直线-矩形绘制"><a href="#【03】箭头直线-矩形绘制" class="headerlink" title="【03】箭头直线-矩形绘制"></a>【03】箭头直线-矩形绘制</h4><h4 id="【04】画笔和橡皮擦实现"><a href="#【04】画笔和橡皮擦实现" class="headerlink" title="【04】画笔和橡皮擦实现"></a>【04】画笔和橡皮擦实现</h4><h4 id="【05】清屏-颜色框-快捷键处理"><a href="#【05】清屏-颜色框-快捷键处理" class="headerlink" title="【05】清屏-颜色框-快捷键处理"></a>【05】清屏-颜色框-快捷键处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">开发画图软件的菜单</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 　窗口的高度和宽度</span></span><br><span class="line">win_heigth = <span class="number">450</span></span><br><span class="line">win_width = <span class="number">900</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span>, bgcolor=<span class="string">&quot;#000000&quot;</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.bgcolor = bgcolor</span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line">        self.y = <span class="number">0</span></span><br><span class="line">        self.fgcolor = <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line">        <span class="comment"># 表示最后绘制图像的id</span></span><br><span class="line">        self.lastDraw = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 最初的绘画标记</span></span><br><span class="line">        self.startDrawFlag = <span class="literal">False</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建绘图区</span></span><br><span class="line">        self.drawpad = Canvas(root, width=win_width, height=win_heigth * <span class="number">0.9</span>, bg=self.bgcolor)</span><br><span class="line">        self.drawpad.pack()</span><br><span class="line">        <span class="comment"># 创建按钮</span></span><br><span class="line">        btn_start = Button(root, text=<span class="string">&quot;开始&quot;</span>, name=<span class="string">&quot;start&quot;</span>)</span><br><span class="line">        btn_start.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_pen = Button(root, text=<span class="string">&quot;画笔&quot;</span>, name=<span class="string">&quot;pen&quot;</span>)</span><br><span class="line">        btn_pen.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_rect = Button(root, text=<span class="string">&quot;矩形&quot;</span>, name=<span class="string">&quot;rect&quot;</span>)</span><br><span class="line">        btn_rect.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_clear = Button(root, text=<span class="string">&quot;清屏&quot;</span>, name=<span class="string">&quot;clear&quot;</span>)</span><br><span class="line">        btn_clear.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_eraser = Button(root, text=<span class="string">&quot;橡皮擦&quot;</span>, name=<span class="string">&quot;eraser&quot;</span>)</span><br><span class="line">        btn_eraser.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_lineArrow = Button(root, text=<span class="string">&quot;箭头直线&quot;</span>, name=<span class="string">&quot;lineArrow&quot;</span>)</span><br><span class="line">        btn_lineArrow.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_color = Button(root, text=<span class="string">&quot;颜色&quot;</span>, name=<span class="string">&quot;color&quot;</span>)</span><br><span class="line">        btn_color.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 事件处理</span></span><br><span class="line">        btn_pen.bind_class(<span class="string">&quot;Button&quot;</span>, <span class="string">&quot;&lt;1&gt;&quot;</span>, self.event_Manager)</span><br><span class="line">        self.drawpad.bind(<span class="string">&quot;ButtonRelease-1&quot;</span>, self.stopDraw)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 增加颜色切换的快捷键</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;KeyPress-r&gt;&quot;</span>,self.kuaijiejian)</span><br><span class="line">        root.bind(<span class="string">&quot;&lt;KeyPress-g&gt;&quot;</span>,self.kuaijiejian)</span><br><span class="line">        root.bind(<span class="string">&quot;&lt;KeyPress-y&gt;&quot;</span>,self.kuaijiejian)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">event_Manager</span>(<span class="params">self, event</span>):</span><br><span class="line">        name = event.widget.winfo_name()</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&quot;line&quot;</span>:</span><br><span class="line">            <span class="comment"># 绑定拖动鼠标</span></span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myLine)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;lineArrow&quot;</span>:</span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myLineArrow)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;rect&quot;</span>:</span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myRect)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;pen&quot;</span>:</span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myPen)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;eraser&quot;</span>:</span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myEraser)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;clear&quot;</span>:</span><br><span class="line">            self.drawpad.delete(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;color&quot;</span>:</span><br><span class="line">            c = askcolor(color=self.fgcolor, title=<span class="string">&quot;选择画笔颜色&quot;</span>)</span><br><span class="line">            <span class="comment"># [(255,0,0),&quot;#ff0000&quot;]</span></span><br><span class="line">            self.fgcolor = c[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stopDraw</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDrawFlag = <span class="literal">False</span></span><br><span class="line">        self.lastDraw = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startDraw</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.drawpad.delete(self.lastDraw)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.startDrawFlag:</span><br><span class="line">            self.startDrawFlag = <span class="literal">True</span></span><br><span class="line">            self.x = event.x</span><br><span class="line">            self.y = event.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myLine</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.lastDraw = self.drawpad.create_line(self.x, self.y, event.x, event.y, fill=self.fgcolor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myLineArrow</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.lastDraw = self.drawpad.create_line(self.x, self.y, event.x, event.y, arrow=LAST, fill=self.fgcolor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myRect</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.lastDraw = self.drawpad.create_rectangle(self.x, self.y, event.x, event.y, outline=self.fgcolor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myPen</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.drawpad.create_line(self.x, self.y, event.x, event.y, fill=self.fgcolor)</span><br><span class="line">        self.x = event.x</span><br><span class="line">        self.y = event.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myEraser</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.drawpad.create_rectangle(event.x - <span class="number">4</span>, event.y - <span class="number">4</span>, event.x + <span class="number">4</span>, event.y + <span class="number">4</span>, fill=self.bgcolor)</span><br><span class="line">        self.x = event.x</span><br><span class="line">        self.y = event.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kuaijiejian</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="keyword">if</span> event.char == <span class="string">&quot;r&quot;</span>:</span><br><span class="line">            self.fgcolor = <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line">        <span class="keyword">if</span> event.char == <span class="string">&quot;g&quot;</span>:</span><br><span class="line">            self.fgcolor = <span class="string">&quot;#00ff00&quot;</span></span><br><span class="line">        <span class="keyword">if</span> event.char == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">            self.fgcolor = <span class="string">&quot;#ffff00&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="built_in">str</span>(win_width) + <span class="string">&quot;x&quot;</span> + <span class="built_in">str</span>(win_heigth) + <span class="string">&quot;+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;画图软件&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312122142443.png" alt="image-20231212214159088"></p><h2 id="游戏开发-坦克大战"><a href="#游戏开发-坦克大战" class="headerlink" title="游戏开发-坦克大战"></a>游戏开发-坦克大战</h2><h3 id="pygame模块的安装"><a href="#pygame模块的安装" class="headerlink" title="pygame模块的安装"></a>pygame模块的安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pygame</span><br></pre></td></tr></table></figure><h3 id="面向对象分析项目需求"><a href="#面向对象分析项目需求" class="headerlink" title="面向对象分析项目需求"></a>面向对象分析项目需求</h3><p>坦克大战游戏的需求</p><p>1.顶目中有哪些类</p><p>2.每个类中有哪些方法</p><p>（1）坦克类（我方坦克、敌方坦克）</p><p>​            射击<br>​                    移动类<br>​                    显示坦克的方法</p><p>（2）子弹类</p><p>​            移动<br>​                    显示子弹的方法</p><p>（3）墙壁类</p><p>​            属性：是否可以通过</p><p>（4）爆炸效果类</p><p>​            展示爆炸效果</p><p>（5）音效类</p><p>​            播放音乐</p><p>（6）主类</p><p>​            开始游戏</p><p>​            结束游戏</p><h3 id="坦克大战项目框架搭建"><a href="#坦克大战项目框架搭建" class="headerlink" title="坦克大战项目框架搭建"></a>坦克大战项目框架搭建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainGame</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startGame</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">endGame</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tank</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 射击</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示坦克的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我方坦克</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTank</span>(<span class="title class_ inherited__">Tank</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 敌方坦克</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EnemyTank</span>(<span class="title class_ inherited__">Tank</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子弹类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示子弹的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayBullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 墙壁类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wall</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示墙壁的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆炸类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Expode</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示爆炸效果的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayExpode</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 音效类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Music</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 播放音乐的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="加载主窗口"><a href="#加载主窗口" class="headerlink" title="加载主窗口"></a>加载主窗口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    加载主窗口</span><br><span class="line">    pygame官方网址：www.pygame.org</span><br></pre></td></tr></table></figure><h3 id="坦克大战之事件处理"><a href="#坦克大战之事件处理" class="headerlink" title="坦克大战之事件处理"></a>坦克大战之事件处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    添加事件</span><br><span class="line">    1.点击关闭 关闭窗口</span><br><span class="line">    2.按下键盘时候，判断键盘按下的是什么键，分别对不同的键做处理</span><br></pre></td></tr></table></figure><h3 id="左上角文字的绘制"><a href="#左上角文字的绘制" class="headerlink" title="左上角文字的绘制"></a>左上角文字的绘制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    左上角文字绘制：</span><br><span class="line">    左上角输出敌方坦克的数量6</span><br></pre></td></tr></table></figure><h3 id="加载我方坦克"><a href="#加载我方坦克" class="headerlink" title="加载我方坦克"></a>加载我方坦克</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    加载我方坦克</span><br></pre></td></tr></table></figure><h3 id="我方坦克切换方向移动"><a href="#我方坦克切换方向移动" class="headerlink" title="我方坦克切换方向移动"></a>我方坦克切换方向移动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    1.我方坦克切换方向</span><br><span class="line">    2.我方坦克移动</span><br></pre></td></tr></table></figure><h3 id="我方坦克移动优化"><a href="#我方坦克移动优化" class="headerlink" title="我方坦克移动优化"></a>我方坦克移动优化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    优化我方坦克移动的方法</span><br></pre></td></tr></table></figure><h3 id="我方坦克优化2"><a href="#我方坦克优化2" class="headerlink" title="我方坦克优化2"></a>我方坦克优化2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    优化:按下方向键，坦克一直移动</span><br><span class="line">         松开方向键，坦克停止</span><br></pre></td></tr></table></figure><h3 id="加载敌方坦克"><a href="#加载敌方坦克" class="headerlink" title="加载敌方坦克"></a>加载敌方坦克</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    1.完善敌方坦克初始化方法</span><br><span class="line">    2.创建敌方坦克并展示</span><br></pre></td></tr></table></figure><h3 id="敌方坦克随机移动"><a href="#敌方坦克随机移动" class="headerlink" title="敌方坦克随机移动"></a>敌方坦克随机移动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    1.优化左上角 文字的显示，将敌方坦克的数量进行修改</span><br><span class="line">    2.敌方坦克随机移动</span><br><span class="line">      思路：新增加一个变量步数，当移动时候步数进行递减</span><br><span class="line">            当步数&lt;=0时候修改敌方坦克的方向,并将步数复位</span><br></pre></td></tr></table></figure><h3 id="完善子弹类"><a href="#完善子弹类" class="headerlink" title="完善子弹类"></a>完善子弹类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     完善子弹类</span><br></pre></td></tr></table></figure><h3 id="我方坦克发射子弹"><a href="#我方坦克发射子弹" class="headerlink" title="我方坦克发射子弹"></a>我方坦克发射子弹</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     完成我方坦克发射子弹</span><br></pre></td></tr></table></figure><h3 id="子弹移动"><a href="#子弹移动" class="headerlink" title="子弹移动"></a>子弹移动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     完成我方坦克发射子弹,并完成子弹的移动</span><br></pre></td></tr></table></figure><h3 id="子弹消亡及数量控制"><a href="#子弹消亡及数量控制" class="headerlink" title="子弹消亡及数量控制"></a>子弹消亡及数量控制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     优化：1.如果子弹碰到墙壁，让子弹消失</span><br><span class="line">           2.最多可以发射3颗子弹，不能一直发射</span><br></pre></td></tr></table></figure><h3 id="敌方坦克发射子弹"><a href="#敌方坦克发射子弹" class="headerlink" title="敌方坦克发射子弹"></a>敌方坦克发射子弹</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     优化：1.如果子弹碰到墙壁，让子弹消失</span><br><span class="line">           2.最多可以发射3颗子弹，不能一直发射</span><br></pre></td></tr></table></figure><h3 id="我方子弹与敌方坦克的碰撞"><a href="#我方子弹与敌方坦克的碰撞" class="headerlink" title="我方子弹与敌方坦克的碰撞"></a>我方子弹与敌方坦克的碰撞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     我方子弹与敌方坦克的碰撞</span><br><span class="line">       精灵类 Sprite类</span><br></pre></td></tr></table></figure><h3 id="实现爆炸效果"><a href="#实现爆炸效果" class="headerlink" title="实现爆炸效果"></a>实现爆炸效果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.完善爆炸效果类</span><br><span class="line">     2.在窗口中展示爆炸效果</span><br></pre></td></tr></table></figure><h3 id="我方坦克的消亡"><a href="#我方坦克的消亡" class="headerlink" title="我方坦克的消亡"></a>我方坦克的消亡</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.敌方子弹与我方坦克的碰撞</span><br><span class="line">     2.添加爆炸效果</span><br></pre></td></tr></table></figure><h3 id="我方坦克无限重生"><a href="#我方坦克无限重生" class="headerlink" title="我方坦克无限重生"></a>我方坦克无限重生</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    让我方坦克无限重生</span><br><span class="line">      1.按下键盘的Esc让重生</span><br><span class="line">      2.重生及重新创建我方坦克</span><br></pre></td></tr></table></figure><h3 id="加载墙壁"><a href="#加载墙壁" class="headerlink" title="加载墙壁"></a>加载墙壁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     添加墙壁</span><br><span class="line">     1.完善墙壁类，初始化方法</span><br><span class="line">     2.初始化墙壁，并将墙壁存储到列表中，在窗口中加载墙壁</span><br></pre></td></tr></table></figure><h3 id="子弹不穿墙"><a href="#子弹不穿墙" class="headerlink" title="子弹不穿墙"></a>子弹不穿墙</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.子弹不能穿墙</span><br><span class="line">        子弹碰撞到墙壁时候，让子弹消失</span><br><span class="line">     2.墙壁被击中，墙壁的生命值处理</span><br></pre></td></tr></table></figure><h3 id="坦克不能穿墙"><a href="#坦克不能穿墙" class="headerlink" title="坦克不能穿墙"></a>坦克不能穿墙</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.坦克不能穿墙</span><br><span class="line">        坦克碰撞到墙壁，不能再移动</span><br><span class="line">        不能再移动及坐标不能发生变化</span><br></pre></td></tr></table></figure><h3 id="敌我双方坦克发生碰撞"><a href="#敌我双方坦克发生碰撞" class="headerlink" title="敌我双方坦克发生碰撞"></a>敌我双方坦克发生碰撞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.我方坦克与敌方坦克发生碰撞</span><br><span class="line">       让我方坦克不能再继续移动   stay()</span><br><span class="line">     2.敌方坦克与我方坦克发生碰撞</span><br><span class="line">       让地方坦克不能再移动   stay()</span><br></pre></td></tr></table></figure><h3 id="音效处理"><a href="#音效处理" class="headerlink" title="音效处理"></a>音效处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.完善音效类</span><br><span class="line">     2.添加开场音效</span><br><span class="line">     3.我方坦克发射子弹添加音效</span><br></pre></td></tr></table></figure><h3 id="坦克大战完整代码"><a href="#坦克大战完整代码" class="headerlink" title="坦克大战完整代码"></a>坦克大战完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">pygame模块的安装</span></span><br><span class="line"><span class="string">面向对象分析项目需求</span></span><br><span class="line"><span class="string">坦克大战项目框架搭建</span></span><br><span class="line"><span class="string">加载主窗口</span></span><br><span class="line"><span class="string">坦克大战之事件处理</span></span><br><span class="line"><span class="string">左上角文字的绘制</span></span><br><span class="line"><span class="string">加载我方坦克</span></span><br><span class="line"><span class="string">我方坦克切换方向移动</span></span><br><span class="line"><span class="string">我方坦克移动优化</span></span><br><span class="line"><span class="string">我方坦克优化2</span></span><br><span class="line"><span class="string">加载敌方坦克</span></span><br><span class="line"><span class="string">敌方坦克随机移动</span></span><br><span class="line"><span class="string">完善子单类</span></span><br><span class="line"><span class="string">我方坦克发射子弹</span></span><br><span class="line"><span class="string">子弹移动</span></span><br><span class="line"><span class="string">子弹消亡及数量控制</span></span><br><span class="line"><span class="string">敌方坦克发射子弹</span></span><br><span class="line"><span class="string">我方子弹与敌方坦克的碰撞</span></span><br><span class="line"><span class="string">实现爆炸效果</span></span><br><span class="line"><span class="string">我方坦克的消亡</span></span><br><span class="line"><span class="string">我方坦克无限重生</span></span><br><span class="line"><span class="string">加载墙壁</span></span><br><span class="line"><span class="string">子弹不穿墙</span></span><br><span class="line"><span class="string">坦克不能穿墙</span></span><br><span class="line"><span class="string">敌我双方坦克发生碰撞</span></span><br><span class="line"><span class="string">音效处理</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> pygame, time, random</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line">SCREEN_WIDTH = <span class="number">800</span></span><br><span class="line">SCREEN_HEIGHT = <span class="number">500</span></span><br><span class="line">BG_COLOR = pygame.Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">TEXT_COLOR = pygame.Color(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseItem</span>(<span class="title class_ inherited__">Sprite</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, color, width, height</span>):</span><br><span class="line">        pygame.sprite.Sprite.__init__(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainGame</span>():</span><br><span class="line">    window = <span class="literal">None</span></span><br><span class="line">    my_tank = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 存储敌方坦克的列表</span></span><br><span class="line">    enemyTankList = []</span><br><span class="line">    <span class="comment"># 定义生成敌方坦克的数量</span></span><br><span class="line">    enemyTankCount = <span class="number">5</span></span><br><span class="line">    <span class="comment"># 存储我方子弹的列表</span></span><br><span class="line">    myBulletList = []</span><br><span class="line">    <span class="comment"># 存储敌方子弹的列表</span></span><br><span class="line">    enemyBulletList = []</span><br><span class="line">    <span class="comment"># 存储爆炸效果的列表</span></span><br><span class="line">    explodeList = []</span><br><span class="line">    <span class="comment"># 存储墙壁的列表</span></span><br><span class="line">    wallList = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startGame</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 加载主窗口</span></span><br><span class="line">        <span class="comment"># 初始化窗口</span></span><br><span class="line">        pygame.display.init()</span><br><span class="line">        <span class="comment"># 设置窗口的大小和显示</span></span><br><span class="line">        MainGame.window = pygame.display.set_mode([SCREEN_WIDTH, SCREEN_HEIGHT])</span><br><span class="line">        <span class="comment"># 初始化我方坦克</span></span><br><span class="line">        self.createMyTank()</span><br><span class="line">        <span class="comment"># 初始化敌方坦克，并将敌方坦克添加到列表中</span></span><br><span class="line">        self.createEnemyTank()</span><br><span class="line">        <span class="comment"># 初始化墙壁</span></span><br><span class="line">        self.createWall()</span><br><span class="line">        <span class="comment"># 设置窗口的标题</span></span><br><span class="line">        pygame.display.set_caption(<span class="string">&quot;坦克大战&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 使坦克移动的速度慢一点</span></span><br><span class="line">            time.sleep(<span class="number">0.02</span>)</span><br><span class="line">            <span class="comment"># 给窗口设置填充色</span></span><br><span class="line">            MainGame.window.fill(BG_COLOR)</span><br><span class="line">            <span class="comment"># 获取事件</span></span><br><span class="line">            self.getEvent()</span><br><span class="line">            <span class="comment"># 绘制文字</span></span><br><span class="line">            MainGame.window.blit(self.getTextSuface(<span class="string">&quot;敌方坦克剩余数量%d&quot;</span> % <span class="built_in">len</span>(MainGame.enemyTankList)), (<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">            <span class="comment"># 调用显示坦克的方法</span></span><br><span class="line">            <span class="comment"># 判断我方坦克是否是存活</span></span><br><span class="line">            <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                MainGame.my_tank.displayTank()</span><br><span class="line">            <span class="comment"># 删否则除我方坦克</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">del</span> MainGame.my_tank</span><br><span class="line">                MainGame.my_tank = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 循环遍历敌方坦克列表，展示敌方坦克</span></span><br><span class="line">            self.blitEnemyTank()</span><br><span class="line">            <span class="comment"># 循环遍历显示我方坦克的子弹</span></span><br><span class="line">            self.blitMyBullet()</span><br><span class="line">            <span class="comment"># 循环遍历显示敌方坦克的子弹</span></span><br><span class="line">            self.blitEnemyBullet()</span><br><span class="line">            <span class="comment"># 循环遍历爆炸列表,展示爆炸效果</span></span><br><span class="line">            self.blitExplode()</span><br><span class="line">            <span class="comment"># 循环遍历墙壁列表,展示墙壁</span></span><br><span class="line">            self.blitWall()</span><br><span class="line">            <span class="comment"># 调用坦克移动的方法</span></span><br><span class="line">            <span class="comment"># 如果坦克的开关是开启,才可以移动</span></span><br><span class="line">            <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> MainGame.my_tank.stop:</span><br><span class="line">                    MainGame.my_tank.move()</span><br><span class="line">                    <span class="comment"># 检查我方坦克是否与墙壁发生碰撞</span></span><br><span class="line">                    MainGame.my_tank.hitWall()</span><br><span class="line">                    <span class="comment"># 检测我方坦克是否与敌方坦克发生碰撞</span></span><br><span class="line">                    MainGame.my_tank.myTank_hit_enemyTank()</span><br><span class="line"></span><br><span class="line">            pygame.display.update()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化我方坦克</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createMyTank</span>(<span class="params">self</span>):</span><br><span class="line">        MainGame.my_tank = MyTank(<span class="number">350</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="comment"># 创建music对象</span></span><br><span class="line">        music = Music(<span class="string">&quot;./img/start.wav&quot;</span>)</span><br><span class="line">        <span class="comment"># 播放音乐</span></span><br><span class="line">        music.play()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化敌方坦克，并将敌方坦克添加到列表中</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createEnemyTank</span>(<span class="params">self</span>):</span><br><span class="line">        top = <span class="number">100</span></span><br><span class="line">        <span class="comment"># 循环生成敌方坦克</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MainGame.enemyTankCount):</span><br><span class="line">            left = random.randint(<span class="number">0</span>, <span class="number">600</span>)</span><br><span class="line">            speed = random.randint(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">            enemy = EnemyTank(left, top, speed)</span><br><span class="line">            MainGame.enemyTankList.append(enemy)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化墙壁</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">            <span class="comment"># 初始化墙壁</span></span><br><span class="line">            wall = Wall(i * <span class="number">130</span>, <span class="number">220</span>)</span><br><span class="line">            <span class="comment"># 将墙壁添加到列表中</span></span><br><span class="line">            MainGame.wallList.append(wall)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历敌方坦克列表，展示敌方坦克</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitEnemyTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> enemyTank <span class="keyword">in</span> MainGame.enemyTankList:</span><br><span class="line">            <span class="comment"># 判断敌方坦克是否活着</span></span><br><span class="line">            <span class="keyword">if</span> enemyTank.live:</span><br><span class="line">                enemyTank.displayTank()</span><br><span class="line">                enemyTank.randMove()</span><br><span class="line">                <span class="comment"># 调用检测敌方坦克是否和墙壁碰撞</span></span><br><span class="line">                enemyTank.hitWall()</span><br><span class="line">                <span class="comment"># 检测敌方坦克是否和我方坦克发生碰撞</span></span><br><span class="line">                <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                    enemyTank.enemyTank_hit_myTank()</span><br><span class="line">                <span class="comment"># 发射子弹</span></span><br><span class="line">                enemyBullet = enemyTank.shot()</span><br><span class="line">                <span class="comment"># 敌方子弹是否为None,如果不为None则添加到敌方子弹列表</span></span><br><span class="line">                <span class="keyword">if</span> enemyBullet:</span><br><span class="line">                    <span class="comment"># 将敌方坦克子弹存储到敌方子弹列表中</span></span><br><span class="line">                    MainGame.enemyBulletList.append(enemyBullet)</span><br><span class="line">            <span class="comment"># 从敌方坦克列表移除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.enemyTankList.remove(enemyTank)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历我方坦克的子弹存储列表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitMyBullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> myBullet <span class="keyword">in</span> MainGame.myBulletList:</span><br><span class="line">            <span class="comment"># 判断当前子弹是否是活着的状态，如果是则进行显示及移动</span></span><br><span class="line">            <span class="keyword">if</span> myBullet.live:</span><br><span class="line">                myBullet.displayBullet()</span><br><span class="line">                <span class="comment"># 调用子弹的移动方法</span></span><br><span class="line">                myBullet.move()</span><br><span class="line">                <span class="comment"># 调用检测我方子弹是否和敌方坦克发生碰撞</span></span><br><span class="line">                myBullet.myBullet_hit_enemyTank()</span><br><span class="line">                <span class="comment"># 检测我方子弹是否和墙壁碰撞</span></span><br><span class="line">                myBullet.hitWall()</span><br><span class="line">            <span class="comment"># 否则在列表中删除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.myBulletList.remove(myBullet)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历显示敌方坦克的子弹</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitEnemyBullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> enemyBullet <span class="keyword">in</span> MainGame.enemyBulletList:</span><br><span class="line">            <span class="comment"># 判断当前子弹是否是活着的状态，如果是则进行显示及移动</span></span><br><span class="line">            <span class="keyword">if</span> enemyBullet.live:</span><br><span class="line">                enemyBullet.displayBullet()</span><br><span class="line">                <span class="comment"># 调用子弹的移动方法</span></span><br><span class="line">                enemyBullet.move()</span><br><span class="line">                <span class="comment"># 调用检测敌方子弹是否和我方坦克发生碰撞</span></span><br><span class="line">                enemyBullet.enemyBullet_hit_myTank()</span><br><span class="line">                <span class="comment"># 检测敌方子弹是否和墙壁碰撞</span></span><br><span class="line">                enemyBullet.hitWall()</span><br><span class="line">            <span class="comment"># 否则在列表中删除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.enemyBulletList.remove(enemyBullet)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历爆炸列表,展示爆炸效果</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitExplode</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> explode <span class="keyword">in</span> MainGame.explodeList:</span><br><span class="line">            <span class="comment"># 判断是否是活着的状态，如果是则进行显示</span></span><br><span class="line">            <span class="keyword">if</span> explode.live:</span><br><span class="line">                explode.displayExplode()</span><br><span class="line">                <span class="comment"># 添加爆炸音效</span></span><br><span class="line">                music = Music(<span class="string">&quot;./img/fire.wav&quot;</span>)</span><br><span class="line">                music.play()</span><br><span class="line">            <span class="comment"># 否则在爆炸列表中删除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.explodeList.remove(explode)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历墙壁列表,展示墙壁</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> wall <span class="keyword">in</span> MainGame.wallList:</span><br><span class="line">            <span class="comment"># 判断墙壁是否存活</span></span><br><span class="line">            <span class="keyword">if</span> wall.live:</span><br><span class="line">                <span class="comment"># 调用墙壁展示方法</span></span><br><span class="line">                wall.displayWall()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 从墙壁列表移除</span></span><br><span class="line">                MainGame.wallList.remove(wall)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">endGame</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;感谢使用，欢迎再次使用&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 左上角文字绘制</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getTextSuface</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="comment"># 初始化字体模块</span></span><br><span class="line">        pygame.font.init()</span><br><span class="line">        <span class="comment"># 查看所有字体名称</span></span><br><span class="line">        <span class="comment"># print(pygame.font.get_fonts())</span></span><br><span class="line">        <span class="comment"># 获取字体font对象</span></span><br><span class="line">        font = pygame.font.SysFont(<span class="string">&quot;adobe宋体stdl&quot;</span>, <span class="number">18</span>)</span><br><span class="line">        <span class="comment"># 绘制字体信息</span></span><br><span class="line">        textSurface = font.render(text, <span class="literal">True</span>, TEXT_COLOR)</span><br><span class="line">        <span class="keyword">return</span> textSurface</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getEvent</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取事件</span></span><br><span class="line">        eventList = pygame.event.get()</span><br><span class="line">        <span class="comment"># 遍历事件</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> eventList:</span><br><span class="line">            <span class="comment"># 判断按下的键是关闭还是键盘按下</span></span><br><span class="line">            <span class="comment"># 如果按的是退出，关闭窗口</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                self.endGame()</span><br><span class="line">            <span class="comment"># 如果是键盘的按下</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">                <span class="comment"># 当坦克死亡或不存在</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> MainGame.my_tank:</span><br><span class="line">                    <span class="comment"># 如果按下的是ESC键,让我方坦克重生</span></span><br><span class="line">                    <span class="keyword">if</span> event.key == pygame.K_ESCAPE:</span><br><span class="line">                        <span class="comment"># 让我方坦克重生及调用创建坦克的方法</span></span><br><span class="line">                        self.createMyTank()</span><br><span class="line">                <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                    <span class="comment"># 判断的是按下的上、下、左、右</span></span><br><span class="line">                    <span class="keyword">if</span> event.key == pygame.K_LEFT:</span><br><span class="line">                        <span class="comment"># 切换方向</span></span><br><span class="line">                        MainGame.my_tank.direction = <span class="string">&quot;L&quot;</span></span><br><span class="line">                        <span class="comment"># MainGame.my_tank.move()</span></span><br><span class="line">                        <span class="comment"># 修改坦克的的开关</span></span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">False</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;按下左键，坦克左移&quot;</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                        <span class="comment"># 切换方向</span></span><br><span class="line">                        MainGame.my_tank.direction = <span class="string">&quot;R&quot;</span></span><br><span class="line">                        <span class="comment"># MainGame.my_tank.move()</span></span><br><span class="line">                        <span class="comment"># 修改坦克的的开关</span></span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">False</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;按下右键，坦克右移&quot;</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key == pygame.K_UP:</span><br><span class="line">                        <span class="comment"># 切换方向</span></span><br><span class="line">                        MainGame.my_tank.direction = <span class="string">&quot;U&quot;</span></span><br><span class="line">                        <span class="comment"># MainGame.my_tank.move()</span></span><br><span class="line">                        <span class="comment"># 修改坦克的的开关</span></span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">False</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;按下上键，坦克上移&quot;</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">                        <span class="comment"># 切换方向</span></span><br><span class="line">                        MainGame.my_tank.direction = <span class="string">&quot;D&quot;</span></span><br><span class="line">                        <span class="comment"># 修改坦克的的开关</span></span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">False</span></span><br><span class="line">                        <span class="comment"># MainGame.my_tank.move()</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;按下下键，坦克下移&quot;</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;发射子弹&quot;</span>)</span><br><span class="line">                        <span class="comment"># 如果当前我方子弹列表的大小&lt;3时候才可以创建</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">len</span>(MainGame.myBulletList) &lt; <span class="number">3</span>:</span><br><span class="line">                            <span class="comment"># 创建我方坦克发射的子弹</span></span><br><span class="line">                            myBullet = Bullet(MainGame.my_tank)</span><br><span class="line">                            MainGame.myBulletList.append(myBullet)</span><br><span class="line">                            <span class="comment"># 我方坦克发射子弹添加音效</span></span><br><span class="line">                            music = Music(<span class="string">&quot;./img/hit.wav&quot;</span>)</span><br><span class="line">                            music.play()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 松开方向键,坦克移动停止,修改坦克开关状态</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.KEYUP:</span><br><span class="line">                <span class="comment"># 判断松开的键是上、下、左、右的时候才停止坦克移动</span></span><br><span class="line">                <span class="keyword">if</span> event.key == pygame.K_LEFT <span class="keyword">or</span> event.key == pygame.K_RIGHT <span class="keyword">or</span> event.key == pygame.K_UP <span class="keyword">or</span> event.key == pygame.K_DOWN:</span><br><span class="line">                    <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 坦克类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tank</span>(<span class="title class_ inherited__">BaseItem</span>):</span><br><span class="line">    <span class="comment"># 添加距离左边left 距离上边top</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, left, top</span>):</span><br><span class="line">        <span class="comment"># 加载保存的图片</span></span><br><span class="line">        self.images = &#123;</span><br><span class="line">            <span class="string">&quot;U&quot;</span>: pygame.image.load(<span class="string">&quot;./img/p1tankU.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;D&quot;</span>: pygame.image.load(<span class="string">&quot;./img/p1tankD.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;L&quot;</span>: pygame.image.load(<span class="string">&quot;./img/p1tankL.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;R&quot;</span>: pygame.image.load(<span class="string">&quot;./img/p1tankR.gif&quot;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 方向</span></span><br><span class="line">        self.direction = <span class="string">&quot;U&quot;</span></span><br><span class="line">        <span class="comment"># 根据当前图片的方向获取图片</span></span><br><span class="line">        self.image = self.images[self.direction]</span><br><span class="line">        <span class="comment"># 根据图片获取区域</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment"># 设置区域的left和top</span></span><br><span class="line">        self.rect.left = left</span><br><span class="line">        self.rect.top = top</span><br><span class="line">        <span class="comment"># 速度决定移动的快慢</span></span><br><span class="line">        self.speed = <span class="number">5</span></span><br><span class="line">        <span class="comment"># 坦克移动的开关</span></span><br><span class="line">        self.stop = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 是否存活</span></span><br><span class="line">        self.live = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 新增属性原来坐标</span></span><br><span class="line">        self.oldLeft = self.rect.left</span><br><span class="line">        self.oldTop = self.rect.top</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 移动后记录原始的坐标</span></span><br><span class="line">        self.oldLeft = self.rect.left</span><br><span class="line">        self.oldTop = self.rect.top</span><br><span class="line">        <span class="comment"># 判断坦克的方向进行移动</span></span><br><span class="line">        <span class="keyword">if</span> self.direction == <span class="string">&quot;L&quot;</span>:</span><br><span class="line">            <span class="comment"># 判断是否超过边界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">                self.rect.left -= self.speed</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">            <span class="comment"># 判断是否超过边界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.left + self.rect.height &lt; SCREEN_WIDTH:</span><br><span class="line">                self.rect.left += self.speed</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;U&quot;</span>:</span><br><span class="line">            <span class="comment"># 判断是否超过边界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.top &gt; <span class="number">0</span>:</span><br><span class="line">                self.rect.top -= self.speed</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">            <span class="comment"># 判断是否超过边界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.top + self.rect.height &lt; SCREEN_HEIGHT:</span><br><span class="line">                self.rect.top += self.speed</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 射击</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Bullet(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stay</span>(<span class="params">self</span>):</span><br><span class="line">        self.rect.left = self.oldLeft</span><br><span class="line">        self.rect.top = self.oldTop</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查坦克是否和墙壁发生碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hitWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> wall <span class="keyword">in</span> MainGame.wallList:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(self, wall):</span><br><span class="line">                <span class="comment"># 将坐标设置移动之前的坐标</span></span><br><span class="line">                self.stay()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示坦克的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取展示对象</span></span><br><span class="line">        self.image = self.images[self.direction]</span><br><span class="line">        <span class="comment"># 调用blit方法展示</span></span><br><span class="line">        MainGame.window.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我方坦克</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTank</span>(<span class="title class_ inherited__">Tank</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, left, top</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyTank, self).__init__(left, top)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测我方坦克是否与敌方坦克发生碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myTank_hit_enemyTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 循环遍历敌方坦克列表</span></span><br><span class="line">        <span class="keyword">for</span> enemyTank <span class="keyword">in</span> MainGame.enemyTankList:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(self, enemyTank):</span><br><span class="line">                self.stay()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 敌方坦克</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EnemyTank</span>(<span class="title class_ inherited__">Tank</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, left, top, speed</span>):</span><br><span class="line">        <span class="comment"># 调用父类的初始化方法</span></span><br><span class="line">        <span class="built_in">super</span>(EnemyTank, self).__init__(left, top)</span><br><span class="line">        <span class="comment"># 加载啊图片集</span></span><br><span class="line">        self.images = &#123;</span><br><span class="line">            <span class="string">&quot;U&quot;</span>: pygame.image.load(<span class="string">&quot;./img/enemy1U.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;D&quot;</span>: pygame.image.load(<span class="string">&quot;./img/enemy1D.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;R&quot;</span>: pygame.image.load(<span class="string">&quot;./img/enemy1R.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;L&quot;</span>: pygame.image.load(<span class="string">&quot;./img/enemy1L.gif&quot;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 方向，随机生成敌方坦克的方向</span></span><br><span class="line">        self.direction = self.randDirection()</span><br><span class="line">        <span class="comment"># 根据方向获取图片</span></span><br><span class="line">        self.image = self.images[self.direction]</span><br><span class="line">        <span class="comment"># 根据图片获取区域</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment"># 设置区域的left和top</span></span><br><span class="line">        self.rect.left = left</span><br><span class="line">        self.rect.top = top</span><br><span class="line">        <span class="comment"># 速度决定移动的快慢</span></span><br><span class="line">        self.speed = <span class="number">5</span></span><br><span class="line">        <span class="comment"># 坦克移动的开关</span></span><br><span class="line">        self.stop = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 新增加一个步数变量 step</span></span><br><span class="line">        self.step = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机生成敌方坦克的方向</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randDirection</span>(<span class="params">self</span>):</span><br><span class="line">        num = random.randint(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;U&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;D&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> num == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;L&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> num == <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;R&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randMove</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.step &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 修改方向</span></span><br><span class="line">            self.direction = self.randDirection()</span><br><span class="line">            <span class="comment"># 让步数复位</span></span><br><span class="line">            self.step = <span class="number">50</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.move()</span><br><span class="line">            <span class="comment"># 让步数递减</span></span><br><span class="line">            self.step -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写shot()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 随机生成100以内的数</span></span><br><span class="line">        num = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> Bullet(self)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测敌方坦克是否和我方坦克发生碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enemyTank_hit_myTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> pygame.sprite.collide_rect(self, MainGame.my_tank):</span><br><span class="line">            self.stay()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子弹类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>(<span class="title class_ inherited__">BaseItem</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, tank</span>):</span><br><span class="line">        <span class="comment"># 加载图片</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&quot;./img/enemymissile.gif&quot;</span>)</span><br><span class="line">        <span class="comment"># 坦克的方向决定子弹的方向</span></span><br><span class="line">        self.direction = tank.direction</span><br><span class="line">        <span class="comment"># 获取区域</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment"># 子弹的left和top和方向有关</span></span><br><span class="line">        <span class="keyword">if</span> self.direction == <span class="string">&quot;U&quot;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left + tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">            self.rect.top = tank.rect.top - self.rect.height</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left + tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">            self.rect.top = tank.rect.top + self.rect.height</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left + self.rect.width</span><br><span class="line">            self.rect.top = tank.rect.top + tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;L&quot;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left - tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">            self.rect.top = tank.rect.top + tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">        <span class="comment"># 子弹的速度</span></span><br><span class="line">        self.speed = <span class="number">6</span></span><br><span class="line">        <span class="comment"># 子弹的状态，是否碰到墙壁，如果碰到墙壁，修改此状态</span></span><br><span class="line">        self.live = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 子弹的移动和方向有关</span></span><br><span class="line">        <span class="keyword">if</span> self.direction == <span class="string">&quot;U&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.top &gt; <span class="number">0</span>:</span><br><span class="line">                self.rect.top -= self.speed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 修改子弹状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.top + self.rect.height &lt; SCREEN_HEIGHT:</span><br><span class="line">                self.rect.top += self.speed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 修改子弹状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.left + self.rect.width &lt; SCREEN_WIDTH:</span><br><span class="line">                self.rect.left += self.speed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 修改子弹状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;L&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">                self.rect.left -= self.speed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 修改子弹状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 展示子弹的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子弹是否碰撞墙壁</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hitWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> wall <span class="keyword">in</span> MainGame.wallList:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(self, wall):</span><br><span class="line">                <span class="comment"># 修改子弹的生存状态,让子弹消失</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 墙壁的生命值减小</span></span><br><span class="line">                wall.hp -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> wall.hp &lt; <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 修改墙壁的生存状态</span></span><br><span class="line">                    wall.live = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayBullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 将图片surface加载到窗口</span></span><br><span class="line">        MainGame.window.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 我方子弹和敌方坦克碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myBullet_hit_enemyTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 循环遍历敌方坦克列表,判断是否发生碰撞</span></span><br><span class="line">        <span class="keyword">for</span> enemyTank <span class="keyword">in</span> MainGame.enemyTankList:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(enemyTank, self):</span><br><span class="line">                <span class="comment"># 修改敌方坦克和我方子弹的状态</span></span><br><span class="line">                enemyTank.live = <span class="literal">False</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 创建爆炸对象</span></span><br><span class="line">                explode = Expode(enemyTank)</span><br><span class="line">                <span class="comment"># 将爆炸对象添加到爆炸列表中</span></span><br><span class="line">                MainGame.explodeList.append(explode)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 敌方子弹和我方坦克碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enemyBullet_hit_myTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(MainGame.my_tank, self):</span><br><span class="line">                <span class="comment"># 创建爆炸对象</span></span><br><span class="line">                explode = Expode(MainGame.my_tank)</span><br><span class="line">                <span class="comment"># 将爆炸对象添加到爆炸列表中</span></span><br><span class="line">                MainGame.explodeList.append(explode)</span><br><span class="line">                <span class="comment"># 修改敌方子弹和我方坦克的状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">                MainGame.my_tank.live = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 墙壁类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wall</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, left, top</span>):</span><br><span class="line">        <span class="comment"># 加载墙壁图片</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&quot;./img/steels.gif&quot;</span>)</span><br><span class="line">        <span class="comment"># 获取墙壁区域</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment"># 设置位置left和top</span></span><br><span class="line">        self.rect.left = left</span><br><span class="line">        self.rect.top = top</span><br><span class="line">        <span class="comment"># 是否存活</span></span><br><span class="line">        self.live = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 设置生命值</span></span><br><span class="line">        self.hp = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示墙壁的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayWall</span>(<span class="params">self</span>):</span><br><span class="line">        MainGame.window.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆炸类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Expode</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, tank</span>):</span><br><span class="line">        <span class="comment"># 爆炸位置由当前子弹打中的坦克位置决定</span></span><br><span class="line">        self.rect = tank.rect</span><br><span class="line">        self.images = [</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast0.gif&quot;</span>),</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast1.gif&quot;</span>),</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast2.gif&quot;</span>),</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast3.gif&quot;</span>),</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast4.gif&quot;</span>),</span><br><span class="line">        ]</span><br><span class="line">        self.step = <span class="number">0</span></span><br><span class="line">        self.image = self.images[self.step]</span><br><span class="line">        <span class="comment"># 是否活着</span></span><br><span class="line">        self.live = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示爆炸效果的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayExplode</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.step &lt; <span class="built_in">len</span>(self.images):</span><br><span class="line">            <span class="comment"># 根据索引获取爆炸对象</span></span><br><span class="line">            self.image = self.images[self.step]</span><br><span class="line">            self.step += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 添加到主窗口</span></span><br><span class="line">            MainGame.window.blit(self.image, self.rect)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 修改活着的状态</span></span><br><span class="line">            self.live = <span class="literal">False</span></span><br><span class="line">            self.step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 音效类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Music</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        self.filename = filename</span><br><span class="line">        <span class="comment"># 初始化音乐混合器</span></span><br><span class="line">        pygame.mixer.init()</span><br><span class="line">        <span class="comment"># 加载音乐</span></span><br><span class="line">        pygame.mixer.music.load(self.filename)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 播放音乐的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        pygame.mixer.music.play()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    MainGame().startGame()</span><br><span class="line">    <span class="comment"># MainGame().getTextSuface()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过nginx访问tomcat中SpringMVC应用</title>
      <link href="/archives/7cb9f0a8.html"/>
      <url>/archives/7cb9f0a8.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="通过nginx访问tomcat中SpringMVC应用"><a href="#通过nginx访问tomcat中SpringMVC应用" class="headerlink" title="通过nginx访问tomcat中SpringMVC应用"></a>通过nginx访问tomcat中SpringMVC应用</h1><h1 id="amp-同一tomcat中部署多个SpringMVC应用"><a href="#amp-同一tomcat中部署多个SpringMVC应用" class="headerlink" title="&amp;同一tomcat中部署多个SpringMVC应用"></a>&amp;同一tomcat中部署多个SpringMVC应用</h1><h2 id="nginx简介"><a href="#nginx简介" class="headerlink" title="nginx简介"></a>nginx简介</h2><p>Nginx，也被称为”engine x”，是一个开源并且支持高性能和高并发的Web服务和代理服务软件。这款软件由俄罗斯人Igor Sysoev开发并首次在俄罗斯的大型网站www.rambler.ru上应用。它不仅可以作为HTTP服务器运行，还可以作为反向代理服务器使用，同时还提供了IMAP/POP3/SMTP等服务。Nginx因其轻量级和高效性在全球范围内得到了广泛的应用。</p><h2 id="Linux-安装-nginx"><a href="#Linux-安装-nginx" class="headerlink" title="Linux 安装 nginx"></a>Linux 安装 nginx</h2><p>这里安装nginx就不多说了，参考文档：<a href="https://blog.csdn.net/u013737132/article/details/134271857">Linux 安装 Nginx 并配置为系统服务（超详细）-CSDN博客</a></p><h2 id="tomcat部署SpringMVC应用"><a href="#tomcat部署SpringMVC应用" class="headerlink" title="tomcat部署SpringMVC应用"></a>tomcat部署SpringMVC应用</h2><ol><li><p>将SpringMVC应用打war包，通过idea的maven打包项目</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115659.png" alt="image-20231122204557462"></p></li><li><p>将 打包好的war包放到tomcat根目录下的webapp</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115660.png" alt="image-20231122204926969"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115661.png" alt="image-20231122204910265"></p></li><li><p>若在==同一个tomcat部署多个项目==，首先把webapp文件夹拷贝一份取名为webapp2，然后修改conf/server.xml文件</p></li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.startup.VersionLoggerListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="attr">SSLEngine</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">&quot;UserDatabase&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;Container&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">&quot;User database that can be updated and saved&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">factory</span>=<span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">pathname</span>=<span class="string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这是第一个webapp项目--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span>  <span class="comment">&lt;!--两个webapp项目Service name要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;18080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">maxParameterCount</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">               /&gt;</span>  <span class="comment">&lt;!--两个webapp项目的port要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/opt/moiveproject/tomcat9/webapps/Movie&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!--docBase的内容是你war包的位置, MovieManager是war包的名字,不带.war--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这是第二个webapp项目--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina2&quot;</span>&gt;</span>   <span class="comment">&lt;!--两个webapp项目Service name要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span>  </span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span>  <span class="comment">&lt;!--两个webapp项目的port要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8010&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8445&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span>  <span class="comment">&lt;!--appBase的内容要与你的文件名一致--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/opt/moiveproject/tomcat9/webapps2/MovieManager&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--docBase的内容是你war包的位置, MovieManager是war包的名字,不带.war--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115662.png" alt="image-20231122205930617"></p><ol><li><code>/tomcat9/bin/startup.sh</code> 启动tomcat访问对应端口号即可访问应用</li></ol><h2 id="nginx访问SpringMVC应用"><a href="#nginx访问SpringMVC应用" class="headerlink" title="nginx访问SpringMVC应用"></a>nginx访问SpringMVC应用</h2><ol><li><p>在nginx的配置文件目录下修改<code>/nginx/conf/nginx.conf</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    root /opt/moiveproject/moive_webapp;</span><br><span class="line">    index Home.jsp Home.jspx Home.do;</span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    </span><br><span class="line">    log_format  main &#x27;$status $http_referer&#x27;;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  niit01;</span><br><span class="line"></span><br><span class="line">        location /assets/  #静态分离</span><br><span class="line">        &#123;</span><br><span class="line">            root /opt/moiveproject/moive_webapp;  # 静态资源所放位置</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">         location /</span><br><span class="line">        &#123;</span><br><span class="line">            #==========Nginx提供的代理============</span><br><span class="line">            proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">            proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            #=== 如果遇到.jsp .jspx .do .action 的请求就进入该服务器(tomcat)===</span><br><span class="line">            proxy_pass http://niit01:18080;</span><br><span class="line">            # 日志文件位置</span><br><span class="line">       access_log /opt/moiveproject/movieLog/access.log main;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启nginx,访问<code>niit01:80/</code>即可访问应用</p></li></ol><p>参考文档:</p><p><a href="https://www.cnblogs.com/acm-bingzi/p/nginx-springmvc.html">springmvc搭配nginx 实现动静分离 - 贾树丙 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/starcraft501/article/details/82830152">通过nginx访问tomcat中web应用的jsp网页_nginx配置jsp首页-CSDN博客</a></p><p><a href="https://blog.csdn.net/shidebin/article/details/83746839">nginx安装和简单部署java web项目_nginx部署web项目-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43651277/article/details/107060581">服务器使用Nginx部署Springboot项目（jar包）-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_38494341/article/details/102624462">Nginx部署JavaWeb项目-CSDN博客</a></p><p><a href="https://www.cnblogs.com/jalja/p/6117523.html">Nginx服务器之Nginx与tomcat结合访问jsp - 小禾点点 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python入门</title>
      <link href="/archives/d9ef328.html"/>
      <url>/archives/d9ef328.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="Python入门"><a href="#Python入门" class="headerlink" title="Python入门"></a>Python入门</h1><h2 id="编程基本概念"><a href="#编程基本概念" class="headerlink" title="编程基本概念"></a>编程基本概念</h2><h3 id="Python程序的构成"><a href="#Python程序的构成" class="headerlink" title="Python程序的构成"></a>Python程序的构成</h3><ol><li>连接符  \    一行代码过长，变成多行时使用  </li><li>强制使用缩进，四个空格表示一个缩进</li></ol><h3 id="对象的基本组成和内存示意图"><a href="#对象的基本组成和内存示意图" class="headerlink" title="对象的基本组成和内存示意图"></a>对象的基本组成和内存示意图</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102017825.png" alt="image-20231110201745676"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102019862.png" alt="image-20231110201950773"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102022690.png" alt="image-20231110202237621"></p><h3 id="引用的本质-栈内存和堆内存-内存示意图"><a href="#引用的本质-栈内存和堆内存-内存示意图" class="headerlink" title="引用的本质-栈内存和堆内存-内存示意图"></a>引用的本质-栈内存和堆内存-内存示意图</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102025811.png" alt="image-20231110202507724"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102026455.png" alt="image-20231110202618382"></p><p><strong>==Python是动态类型语言==：变量不需要显式声明类型。根据变量引用的对象，Python解释器自动确定数据类型</strong></p><h3 id="标识符-帮助系统简单使用-命名规则"><a href="#标识符-帮助系统简单使用-命名规则" class="headerlink" title="标识符-帮助系统简单使用-命名规则"></a>标识符-帮助系统简单使用-命名规则</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102030659.png" alt="image-20231110203017623"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102031531.png" alt="image-20231110203126470"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102034233.png" alt="image-20231110203446167"></p><h3 id="变量的声明-初始化-垃圾回收机制"><a href="#变量的声明-初始化-垃圾回收机制" class="headerlink" title="变量的声明-初始化-垃圾回收机制"></a>变量的声明-初始化-垃圾回收机制</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102041345.png" alt="image-20231110204145297"></p><h3 id="常量-链式赋值-系列解包赋值"><a href="#常量-链式赋值-系列解包赋值" class="headerlink" title="常量-链式赋值-系列解包赋值"></a>常量-链式赋值-系列解包赋值</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102042669.png" alt="image-20231110204256608"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102047432.png" alt="image-20231110204725378"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102050729.png" alt="image-20231110205028675"></p><p><strong>使用系列解包复制可以轻松实现变量值交换</strong></p><h3 id="内置数据类型-基本算术运算符"><a href="#内置数据类型-基本算术运算符" class="headerlink" title="内置数据类型-基本算术运算符"></a>内置数据类型-基本算术运算符</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102103657.png" alt="image-20231110210320597"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102105449.png" alt="image-20231110210508378"></p><h3 id="整数-不同进制-其他类型转成整数"><a href="#整数-不同进制-其他类型转成整数" class="headerlink" title="整数-不同进制-其他类型转成整数"></a>整数-不同进制-其他类型转成整数</h3><p>==<strong>Python的整数可以无限大，任意大</strong>==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102107064.png" alt="image-20231110210750024"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102109168.png" alt="image-20231110210944115"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102110784.png" alt="image-20231110211017712"></p><h3 id="浮点数-自动转换强制转换-增强赋值运算符"><a href="#浮点数-自动转换强制转换-增强赋值运算符" class="headerlink" title="浮点数-自动转换强制转换-增强赋值运算符"></a>浮点数-自动转换强制转换-增强赋值运算符</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102114124.png" alt="image-20231110211408060"></p><p>==<strong>round(value))</strong>可以返回<strong>四舍五入</strong>的值==。但<strong>不会改变原有值</strong>，而是产生新的值</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102116576.png" alt="image-20231110211636512"></p><h3 id="时间的表示-unix时间点-毫秒微妙-time模块"><a href="#时间的表示-unix时间点-毫秒微妙-time模块" class="headerlink" title="时间的表示-unix时间点-毫秒微妙-time模块"></a>时间的表示-unix时间点-毫秒微妙-time模块</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102121561.png" alt="image-20231110212157494"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102124175.png" alt="image-20231110212401113"></p><h3 id="多点坐标-绘制折线图-计算两点距离"><a href="#多点坐标-绘制折线图-计算两点距离" class="headerlink" title="多点坐标-绘制折线图-计算两点距离"></a>多点坐标-绘制折线图-计算两点距离</h3><h3 id="布尔值本质-逻辑运算符-位运算符-比较运算符-短路问题"><a href="#布尔值本质-逻辑运算符-位运算符-比较运算符-短路问题" class="headerlink" title="布尔值本质-逻辑运算符-位运算符-比较运算符-短路问题"></a>布尔值本质-逻辑运算符-位运算符-比较运算符-短路问题<img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102153527.png" alt="image-20231110213752664"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102153409.png" alt="image-20231110213917617"></h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102154007.png" alt="image-20231110214203652"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102154153.png" alt="image-20231110214628683"></p><p><strong>关系运算符可以连用   如： <code>2&lt;a&lt;10</code></strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222183.png" alt="image-20231110214823887"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222184.png" alt="image-20231110220532227"></p><p><strong>字符串拼接 <code>&quot;3&quot;+&quot;4&quot;</code>   结果 <code>&quot;34&quot;</code></strong></p><p><strong>列表，元组等合并  <code>[1,2,3]+[4,5,6]</code>   结果  <code>[1,2,3,4,5,6]</code></strong></p><p><strong>字符串复制  <code>&quot;abc&quot;* 3</code>     结果  <code>&quot;abcabcabc&quot;</code></strong></p><p><strong>列表，元组等复制  <code>[1,2,3] * 3</code>     结果 <code>[1,2,3,1,2,3,1,2,3]</code></strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222185.png" alt="image-20231110220550583"></p><p><strong>与C和AVA不一样，Python不支持自增(++)和自减(—)</strong></p><h3 id="同一运算符-身份运算符-优先级问题"><a href="#同一运算符-身份运算符-优先级问题" class="headerlink" title="同一运算符-身份运算符-优先级问题"></a>同一运算符-身份运算符-优先级问题</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222186.png" alt="image-20231110220915376"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222187.png" alt="image-20231110221003673"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222188.png" alt="image-20231110221419620"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222189.png" alt="image-20231110221607995"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222190.png" alt="image-20231110221752500"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222191.png" alt="image-20231110221929772"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222192.png" alt="image-20231110222043769"></p><h3 id="类型转换总结"><a href="#类型转换总结" class="headerlink" title="类型转换总结"></a>类型转换总结</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327707.png" alt="image-20231111205424806"></p><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608618.png" alt="image-20231112203832984"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608619.png" alt="image-20231112204030526"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608620.png" alt="image-20231112204122105"></p><p>==序列中存储的是整数对象的地址，而不是整数对象的值==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608621.png" alt="image-20231112204257128"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="unicode字符集-三种创建字符串的方式-len"><a href="#unicode字符集-三种创建字符串的方式-len" class="headerlink" title="unicode字符集-三种创建字符串的方式-len()"></a>unicode字符集-三种创建字符串的方式-len()</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327671.png" alt="image-20231111165047001"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327672.png" alt="image-20231111165027593"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327673.png" alt="image-20231111165127201"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327675.png" alt="image-20231111165242915"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327676.png" alt="image-20231111165439485"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327677.png" alt="image-20231111165530787"></p><h4 id="转义字符-字符串拼接-字符串复制-input-获取键盘输入"><a href="#转义字符-字符串拼接-字符串复制-input-获取键盘输入" class="headerlink" title="转义字符-字符串拼接-字符串复制-input()获取键盘输入"></a>转义字符-字符串拼接-字符串复制-input()获取键盘输入</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327678.png" alt="image-20231111165827750"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327679.png" alt="image-20231111165929426"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327680.png" alt="image-20231111170036120"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327681.png" alt="image-20231111170117738"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327682.png" alt="image-20231111170146635"></p><h4 id="str-字符提取-replace-替换-内存分析"><a href="#str-字符提取-replace-替换-内存分析" class="headerlink" title="str()-字符提取-replace()替换-内存分析"></a>str()-字符提取-replace()替换-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327683.png" alt="image-20231111170618209"></p><p>==<strong>字符串是不可变的</strong>==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327684.png" alt="image-20231111170815318"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327685.png" alt="image-20231111170925169"></p><h4 id="切片slice操作-逆序"><a href="#切片slice操作-逆序" class="headerlink" title="切片slice操作-逆序"></a>切片slice操作-逆序</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327686.png" alt="image-20231111171200785"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327687.png" alt="image-20231111171239402"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327688.png" alt="image-20231111172118356"></p><p><strong>字符串逆序  <code>[::-1]</code></strong></p><h4 id="split-分割-join-合并-代码效率测试"><a href="#split-分割-join-合并-代码效率测试" class="headerlink" title="split()分割-join()合并-代码效率测试"></a>split()分割-join()合并-代码效率测试</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327689.png" alt="image-20231111172645302"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327690.png" alt="image-20231111172819686"></p><p>==<strong>join拼接字符串效率高</strong>==</p><h4 id="驻留机制-同一判断-值相等判断"><a href="#驻留机制-同一判断-值相等判断" class="headerlink" title="驻留机制-同一判断-值相等判断"></a>驻留机制-同一判断-值相等判断</h4><p><strong>常量字符串只保留一次</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327691.png" alt="image-20231111174312835"></p><p><strong>== 和!=比较是否含有相同字符</strong></p><p><strong>is和not is判断是否同一对象</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327692.png" alt="image-20231111175131889"></p><h4 id="常用查找方法-去除首尾信息-大小写转换-排版特征判断"><a href="#常用查找方法-去除首尾信息-大小写转换-排版特征判断" class="headerlink" title="常用查找方法-去除首尾信息-大小写转换-排版特征判断"></a>常用查找方法-去除首尾信息-大小写转换-排版特征判断</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327693.png" alt="image-20231111201844560"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327694.png" alt="image-20231111203006966"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327695.png" alt="image-20231111203117613"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327696.png" alt="image-20231111203321600"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327697.png" alt="image-20231111203437597"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327698.png" alt="image-20231111203604305"></p><h4 id="format格式化-数字格式化操作"><a href="#format格式化-数字格式化操作" class="headerlink" title="format格式化-数字格式化操作"></a>format格式化-数字格式化操作</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327699.png" alt="image-20231111203950779"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327700.png" alt="image-20231111204014400"></p><p><strong>我们可以通过{索引}/{参数名}，直接映射参数值，实现对字符串的格式化，非常方便。</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327701.png" alt="image-20231111204436867"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327703.png" alt="image-20231111204547054"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327704.png" alt="image-20231111204650861"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327705.png" alt="image-20231111204720997"></p><h4 id="可变字符串-io-StringlO"><a href="#可变字符串-io-StringlO" class="headerlink" title="可变字符串-io.StringlO"></a>可变字符串-io.StringlO</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327706.png" alt="image-20231111204913612"></p><p>使用io.StringlO可以将字符串变为可变字符串</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="列表特点-内存分析"><a href="#列表特点-内存分析" class="headerlink" title="列表特点-内存分析"></a>列表特点-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608622.png" alt="image-20231112204331155"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608623.png" alt="image-20231112204422542"></p><h4 id="创建列表的4种方式-推导式创建列表"><a href="#创建列表的4种方式-推导式创建列表" class="headerlink" title="创建列表的4种方式-推导式创建列表"></a>创建列表的4种方式-推导式创建列表</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608624.png" alt="image-20231112204700132"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608625.png" alt="image-20231112204759130"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608626.png" alt="image-20231112204952428"></p><h4 id="元素的5种添加方式-效率问题"><a href="#元素的5种添加方式-效率问题" class="headerlink" title="元素的5种添加方式-效率问题"></a>元素的5种添加方式-效率问题</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608627.png" alt="image-20231112205556826"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608628.png" alt="image-20231112205434899"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608629.png" alt="image-20231112205659199"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608630.png" alt="image-20231112205735953"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608631.png" alt="image-20231112205808761"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608632.png" alt="image-20231112205915556"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608636.png" alt="image-20231112210040473"></p><h4 id="删除的三种方式-删除的本质是元素拷贝"><a href="#删除的三种方式-删除的本质是元素拷贝" class="headerlink" title="删除的三种方式-删除的本质是元素拷贝"></a>删除的三种方式-删除的本质是元素拷贝</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608637.png" alt="image-20231112210206116"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608638.png" alt="image-20231112210255633"></p><p><strong>del()传的是索引</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608639.png" alt="image-20231112210559383"></p><p><strong>pop()传的是空或索引</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608640.png" alt="image-20231112210627240"></p><p><strong>remove() 传的是元素</strong></p><h4 id="元素的访问-出现次数统计-成员资格判断"><a href="#元素的访问-出现次数统计-成员资格判断" class="headerlink" title="元素的访问-出现次数统计-成员资格判断"></a>元素的访问-出现次数统计-成员资格判断</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608641.png" alt="image-20231112210953927"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608642.png" alt="image-20231112211020296"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608643.png" alt="image-20231112211129014"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608644.png" alt="image-20231112211250334"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608645.png" alt="image-20231112211302457"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608646.png" alt="image-20231112211335688"></p><h4 id="切片slice操作"><a href="#切片slice操作" class="headerlink" title="切片slice操作"></a>切片slice操作</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608647.png" alt="image-20231112211541644"></p><p>==包头不包尾==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608648.png" alt="image-20231112211649938"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608649.png" alt="image-20231112211716931"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608650.png" alt="image-20231112211850845"></p><h4 id="遍历-排序-max-min-sum"><a href="#遍历-排序-max-min-sum" class="headerlink" title="遍历-排序-max-min-sum"></a>遍历-排序-max-min-sum</h4><p><strong>遍历</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608651.png" alt="image-20231112212023863"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608652.png" alt="image-20231112212130083"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608653.png" alt="image-20231112212220696"></p><p><strong>排序</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608654.png" alt="image-20231112212254532"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608655.png" alt="image-20231112212447273"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608656.png" alt="image-20231112212646733"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608657.png" alt="image-20231113221519107"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608658.png" alt="image-20231113221603259"></p><h4 id="二维列表-表格数据存储和读取"><a href="#二维列表-表格数据存储和读取" class="headerlink" title="二维列表-表格数据存储和读取"></a>二维列表-表格数据存储和读取</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608659.png" alt="image-20231113221812609"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608660.png" alt="image-20231113221834012"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608662.png" alt="image-20231113221906067"></p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><h4 id="特点-创建的两种方式-tuple-要点"><a href="#特点-创建的两种方式-tuple-要点" class="headerlink" title="特点-创建的两种方式-tuple()要点"></a>特点-创建的两种方式-tuple()要点</h4><p>==元组不可变序列，不能修改元组中的元素==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608663.png" alt="image-20231113222120428"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608664.png" alt="image-20231113222212366"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608665.png" alt="image-20231114125912318"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608666.png" alt="image-20231114130013057"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608667.png" alt="image-20231114130106093"></p><h4 id="元素访问-计数方法-切片操作-成员资格判断-zip"><a href="#元素访问-计数方法-切片操作-成员资格判断-zip" class="headerlink" title="元素访问-计数方法-切片操作-成员资格判断-zip()"></a>元素访问-计数方法-切片操作-成员资格判断-zip()</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608668.png" alt="image-20231114130315997"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608670.png" alt="image-20231114130521850"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608671.png" alt="image-20231114130637287"></p><h4 id="生成器推导式创建元组"><a href="#生成器推导式创建元组" class="headerlink" title="生成器推导式创建元组"></a>生成器推导式创建元组</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608672.png" alt="image-20231114131109391"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608673.png" alt="image-20231114140211712"></p><h4 id="元组总结"><a href="#元组总结" class="headerlink" title="元组总结"></a>元组总结</h4><ol><li>元组的核心特点是：==不可变序列==。</li><li>元组的访问和处理速度比列表快。</li><li>与<strong>整数和字符串</strong>一样，<strong>元组可以作为字典的键</strong>，==列表则永远不能作为字典的键使用==。</li></ol><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h4 id="特点-4种创建方式-普通-dict-zip-fromkeys"><a href="#特点-4种创建方式-普通-dict-zip-fromkeys" class="headerlink" title="特点-4种创建方式-普通-dict-zip-fromkeys"></a>特点-4种创建方式-普通-dict-zip-fromkeys</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608674.png" alt="image-20231114141238792"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608675.png" alt="image-20231114145118028"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608676.png" alt="image-20231114145351787"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608677.png" alt="image-20231114145951487"></p><h4 id="元素的访问-键的访问-值的访问-键值对的访问"><a href="#元素的访问-键的访问-值的访问-键值对的访问" class="headerlink" title="元素的访问-键的访问-值的访问-键值对的访问"></a>元素的访问-键的访问-值的访问-键值对的访问</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608678.png" alt="image-20231114150056330"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608679.png" alt="image-20231114150304782"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608680.png" alt="image-20231114150352137"></p><h4 id="元素的添加-修改-删除"><a href="#元素的添加-修改-删除" class="headerlink" title="元素的添加-修改-删除"></a>元素的添加-修改-删除</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608681.png" alt="image-20231114150455560"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608682.png" alt="image-20231114151231414"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608683.png" alt="image-20231114151329321"></p><h4 id="序列解包用于列表元组字典"><a href="#序列解包用于列表元组字典" class="headerlink" title="序列解包用于列表元组字典"></a>序列解包用于列表元组字典</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608684.png" alt="image-20231114151937053"></p><p><strong>items()对键值进行操作返回的是元组，可以通过索引获得键和值</strong></p><h4 id="复杂表格数据存储-列表和字典综合嵌套"><a href="#复杂表格数据存储-列表和字典综合嵌套" class="headerlink" title="复杂表格数据存储-列表和字典综合嵌套"></a>复杂表格数据存储-列表和字典综合嵌套</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608685.png" alt="image-20231114154449214"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608686.png" alt="image-20231114155631350"></p><h4 id="核心底层原理-内存分析-存储键值对过程"><a href="#核心底层原理-内存分析-存储键值对过程" class="headerlink" title="核心底层原理-内存分析-存储键值对过程"></a>核心底层原理-内存分析-存储键值对过程</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608687.png" alt="image-20231114155547261"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608688.png" alt="image-20231114155919142"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608689.png" alt="image-20231114160012362"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608690.png" alt="image-20231114160119164"></p><h4 id="核心底层原理-内存分析-查找值对象过程"><a href="#核心底层原理-内存分析-查找值对象过程" class="headerlink" title="核心底层原理-内存分析-查找值对象过程"></a>核心底层原理-内存分析-查找值对象过程</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608691.png" alt="image-20231114160207088"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608692.png" alt="image-20231114160302223"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608693.png" alt="image-20231114160311802"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608694.png" alt="image-20231114160443418"></p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="特点-创建和删除-交集并集差集运算"><a href="#特点-创建和删除-交集并集差集运算" class="headerlink" title="特点-创建和删除-交集并集差集运算"></a>特点-创建和删除-交集并集差集运算</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608695.png" alt="image-20231114160624865"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608696.png" alt="image-20231114160658433"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608697.png" alt="image-20231114160745635"></p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="控制语句和现实逻辑表达"><a href="#控制语句和现实逻辑表达" class="headerlink" title="控制语句和现实逻辑表达"></a>控制语句和现实逻辑表达</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759573.png" alt="image-20231114162345686"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759574.png" alt="image-20231114162500957"></p><h3 id="单分支选择结构-条件表达式详解"><a href="#单分支选择结构-条件表达式详解" class="headerlink" title="单分支选择结构-条件表达式详解"></a>单分支选择结构-条件表达式详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759575.png" alt="image-20231114162917459"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759576.png" alt="image-20231114163006308"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759577.png" alt="image-20231114163510213"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759578.png" alt="image-20231114163945739"></p><h3 id="双分支选择结构-三元运算符的使用详解"><a href="#双分支选择结构-三元运算符的使用详解" class="headerlink" title="双分支选择结构-三元运算符的使用详解"></a>双分支选择结构-三元运算符的使用详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759579.png" alt="image-20231114164104286"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759580.png" alt="image-20231114164346690"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">input</span>(<span class="string">&quot;输入一个数字:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(num + <span class="string">&quot;&lt;10&quot;</span> <span class="keyword">if</span>(<span class="built_in">int</span>(num) &lt; <span class="number">10</span>) <span class="keyword">else</span> <span class="built_in">str</span>(num) + <span class="string">&quot;&gt;10&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="多分支选择结构"><a href="#多分支选择结构" class="headerlink" title="多分支选择结构"></a>多分支选择结构</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759581.png" alt="image-20231114164837210"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759582.png" alt="image-20231114165601161"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759583.png" alt="image-20231114170614275"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">### 多分支选择结构</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">score = <span class="built_in">input</span>(<span class="string">&quot;输入学生分数：&quot;</span>)</span><br><span class="line">grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt;= <span class="built_in">int</span>(score) &lt; <span class="number">60</span>:</span><br><span class="line">    grade = <span class="string">&quot;不及格&quot;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(score) &lt; <span class="number">80</span>:  <span class="comment"># 60&lt;=score&lt;=80  多分支之间具有逻辑关系</span></span><br><span class="line">    grade = <span class="string">&quot;及格&quot;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(score) &lt; <span class="number">90</span>:</span><br><span class="line">    grade = <span class="string">&quot;良好&quot;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(score) &lt;= <span class="number">100</span>:</span><br><span class="line">    grade = <span class="string">&quot;优秀&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    grade = <span class="string">&quot;成绩输入错误&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分数是&#123;0&#125;，等级是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(score, grade))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="选择结构的嵌套"><a href="#选择结构的嵌套" class="headerlink" title="选择结构的嵌套"></a>选择结构的嵌套</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759584.png" alt="image-20231114170713573"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个0-100之间的数字：&quot;</span>))</span><br><span class="line">grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> score &gt; <span class="number">100</span> <span class="keyword">or</span> score &lt; <span class="number">0</span>:</span><br><span class="line">    score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入错误，请重新输入0-100之间的数字：&quot;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">        grade = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">        grade = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">        grade = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">        grade = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        grade = <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分数是&#123;0&#125;，等级是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(score, grade))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更少的代码方法</span></span><br><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个0-100之间的数字：&quot;</span>))</span><br><span class="line">grade = <span class="string">&#x27;ABCDE&#x27;</span></span><br><span class="line"><span class="keyword">if</span> score &gt; <span class="number">100</span> <span class="keyword">or</span> score &lt; <span class="number">0</span>:</span><br><span class="line">    score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入错误，请重新输入0-100之间的数字：&quot;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    num = score // <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">6</span>:</span><br><span class="line">        num = <span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;分数是&#123;0&#125;，等级是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(score, grade[<span class="number">9</span>-num]))</span><br></pre></td></tr></table></figure><h3 id="while循环结构-死循环处理"><a href="#while循环结构-死循环处理" class="headerlink" title="while循环结构-死循环处理"></a>while循环结构-死循环处理</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759585.png" alt="image-20231114211935339"></p><h3 id="for循环结构-遍历各种可迭代对象-range对象"><a href="#for循环结构-遍历各种可迭代对象-range对象" class="headerlink" title="for循环结构-遍历各种可迭代对象-range对象"></a>for循环结构-遍历各种可迭代对象-range对象</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759586.png" alt="image-20231115235425967"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>):</span><br><span class="line">    <span class="built_in">print</span>(x*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> <span class="string">&quot;weqwewe&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;haha&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">12</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d:           <span class="comment"># 遍历字典所以key</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.keys():    <span class="comment"># 遍历字典所有的key</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.values():  <span class="comment"># 遍历字典所有的value</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.items():   <span class="comment"># 遍历字典所有键值对</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759587.png" alt="image-20231116154729368"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">10</span>, <span class="number">2</span>):  <span class="comment"># start=3 end=10 step=2 包头不包尾</span></span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 计算1-100累加和，奇数累加和，偶数累加和</span></span><br><span class="line">sum_all = <span class="number">0</span></span><br><span class="line">sum_even = <span class="number">0</span></span><br><span class="line">sum_odd = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    sum_all += x</span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        sum_even += x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sum_odd += x</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1-100累加和&#123;0&#125;，奇数累加和&#123;1&#125;，偶数累加和&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(sum_all, sum_odd, sum_even))</span><br></pre></td></tr></table></figure><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759588.png" alt="image-20231116160125551"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759589.png" alt="image-20231116160157632"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(x, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="嵌套循环练习-九九乘法表-打印表格数据"><a href="#嵌套循环练习-九九乘法表-打印表格数据" class="headerlink" title="嵌套循环练习-九九乘法表-打印表格数据"></a>嵌套循环练习-九九乘法表-打印表格数据</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759590.png" alt="image-20231116160523325"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 九九乘法表</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;*&#123;1&#125;=&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(m, n, m*n), end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1*1=1</span></span><br><span class="line"><span class="string">2*1=22*2=4</span></span><br><span class="line"><span class="string">3*1=33*2=63*3=9</span></span><br><span class="line"><span class="string">4*1=44*2=84*3=124*4=16</span></span><br><span class="line"><span class="string">5*1=55*2=105*3=155*4=205*5=25</span></span><br><span class="line"><span class="string">6*1=66*2=126*3=186*4=246*5=306*6=36</span></span><br><span class="line"><span class="string">7*1=77*2=147*3=217*4=287*5=357*6=427*7=49</span></span><br><span class="line"><span class="string">8*1=88*2=168*3=248*4=328*5=408*6=488*7=568*8=64</span></span><br><span class="line"><span class="string">9*1=99*2=189*3=279*4=369*5=459*6=549*7=639*8=729*9=81</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用列表和字典存储下表信息，并打印出表中工资高于15000的数据</span></span><br><span class="line">r1 = <span class="built_in">dict</span>(name=<span class="string">&quot;hycs&quot;</span>, age=<span class="number">18</span>, salary=<span class="number">10000</span>, city=<span class="string">&quot;shanghai&quot;</span>)</span><br><span class="line">r2 = <span class="built_in">dict</span>(name=<span class="string">&quot;sdaw&quot;</span>, age=<span class="number">28</span>, salary=<span class="number">20000</span>, city=<span class="string">&quot;beijing&quot;</span>)</span><br><span class="line">r3 = <span class="built_in">dict</span>(name=<span class="string">&quot;e1qe&quot;</span>, age=<span class="number">38</span>, salary=<span class="number">30000</span>, city=<span class="string">&quot;nanjing&quot;</span>)</span><br><span class="line">tb = [r1, r2, r3]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tb:</span><br><span class="line">    <span class="keyword">if</span> x.get(<span class="string">&quot;salary&quot;</span>)&gt;<span class="number">15000</span>:</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759591.png" alt="image-20231116161623031"></p><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759592.png" alt="image-20231116161924814"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要求输入员工的薪资，若薪资小于0则重新输入。最后打印出录入员王的数量和薪资明细，以及平均薪资</span></span><br><span class="line">empNum = <span class="number">0</span></span><br><span class="line">salarySum = <span class="number">0</span></span><br><span class="line">salarys = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&quot;请输入员工薪资（按Q或q退出）&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> s.upper() == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">float</span>(s) &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无效录入，请重新录入&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;录入成功&quot;</span>)</span><br><span class="line">    empNum += <span class="number">1</span></span><br><span class="line">    salarySum += <span class="built_in">float</span>(s)</span><br><span class="line">    salarys.append(<span class="built_in">float</span>(s))</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;员工数&quot;</span>, <span class="built_in">format</span>(empNum))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;录入薪资：&quot;</span>, salarys)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;总薪资：&quot;</span>, salarySum)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均薪资&quot;</span>, salarySum / empNum)</span><br></pre></td></tr></table></figure><h3 id="循环中的else子句"><a href="#循环中的else子句" class="headerlink" title="循环中的else子句"></a>循环中的else子句</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759593.png" alt="image-20231116163319060"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">salarySum = <span class="number">0</span></span><br><span class="line">salarys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&quot;请输入员工薪资（按Q或q退出）&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> s.upper() == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">float</span>(s) &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无效录入，请重新录入&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;录入成功&quot;</span>)</span><br><span class="line">    salarySum += <span class="built_in">float</span>(s)</span><br><span class="line">    salarys.append(<span class="built_in">float</span>(s))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;全部录入成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;录入薪资：&quot;</span>, salarys)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;总薪资：&quot;</span>, salarySum)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均薪资&quot;</span>, salarySum / <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请输入员工薪资（按Q或q退出）40</span></span><br><span class="line"><span class="string">录入成功</span></span><br><span class="line"><span class="string">请输入员工薪资（按Q或q退出）50</span></span><br><span class="line"><span class="string">录入成功</span></span><br><span class="line"><span class="string">请输入员工薪资（按Q或q退出）60</span></span><br><span class="line"><span class="string">录入成功</span></span><br><span class="line"><span class="string">请输入员工薪资（按Q或q退出）70</span></span><br><span class="line"><span class="string">录入成功</span></span><br><span class="line"><span class="string">全部录入成功</span></span><br><span class="line"><span class="string">录入薪资： [40.0, 50.0, 60.0, 70.0]</span></span><br><span class="line"><span class="string">总薪资： 220.0</span></span><br><span class="line"><span class="string">平均薪资 55.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759594.png" alt="image-20231116164105716"></p><h3 id="循环代码优化技巧"><a href="#循环代码优化技巧" class="headerlink" title="循环代码优化技巧"></a>循环代码优化技巧</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759595.png" alt="image-20231116164149547"></p><p><strong>其他优化手段</strong></p><ol><li>==连接多个字符串或列表，使用join()或append()而不使用+==     +会创建新的字符串，join不会</li><li>==列表进行元素插入和删除，尽量在列表尾部操作==</li></ol><h3 id="zip-并行送代多个序列"><a href="#zip-并行送代多个序列" class="headerlink" title="zip()并行送代多个序列"></a>zip()并行送代多个序列</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759596.png" alt="image-20231116164902092"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759597.png" alt="image-20231116165017217"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">names = (<span class="string">&quot;haohao&quot;</span>, <span class="string">&quot;hehe&quot;</span>, <span class="string">&quot;huaiyue&quot;</span>)</span><br><span class="line">ages = (<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>)</span><br><span class="line">jobs = (<span class="string">&quot;IT&quot;</span>, <span class="string">&quot;TEACHER&quot;</span>, <span class="string">&quot;POLICE&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用zip并行迭代多个序列</span></span><br><span class="line"><span class="keyword">for</span> name, age, job <span class="keyword">in</span> <span class="built_in">zip</span>(names, ages, jobs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;--&#123;1&#125;--&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(name, age, job))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 不使用zip也可以并使迭代多个序列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">min</span>(<span class="built_in">len</span>(names), <span class="built_in">len</span>(ages), <span class="built_in">len</span>(jobs))):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;--&#123;1&#125;--&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(names[i], ages[i], jobs[i]))</span><br></pre></td></tr></table></figure><h3 id="推导式创建序列-列表推导式-字典推导式-集合推导式-生成器推导式"><a href="#推导式创建序列-列表推导式-字典推导式-集合推导式-生成器推导式" class="headerlink" title="推导式创建序列-列表推导式-字典推导式-集合推导式-生成器推导式"></a>推导式创建序列-列表推导式-字典推导式-集合推导式-生成器推导式</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759598.png" alt="image-20231116165915358"></p><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759599.png" alt="image-20231116170101409"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cells = [(row, column) <span class="keyword">for</span> row, column <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>), <span class="built_in">range</span>(<span class="number">101</span>, <span class="number">110</span>))]</span><br><span class="line"><span class="built_in">print</span>(cells)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[2, 4, 6, 8]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[(1, 101), (2, 102), (3, 103), (4, 104), (5, 105), (6, 106), (7, 107), (8, 108), (9, 109)]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759600.png" alt="image-20231116171102217"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计字数</span></span><br><span class="line">my_text = <span class="string">&#x27;i love python, me too&#x27;</span></span><br><span class="line">char_count = &#123;c: my_text.count(c) <span class="keyword">for</span> c <span class="keyword">in</span> my_text&#125;</span><br><span class="line"><span class="built_in">print</span>(char_count)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;i&#x27;: 1, &#x27; &#x27;: 4, &#x27;l&#x27;: 1, &#x27;o&#x27;: 4, &#x27;v&#x27;: 1, &#x27;e&#x27;: 2, &#x27;p&#x27;: 1, &#x27;y&#x27;: 1, &#x27;t&#x27;: 2, &#x27;h&#x27;: 1, &#x27;n&#x27;: 1, &#x27;,&#x27;: 1, &#x27;m&#x27;: 1&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759601.png" alt="image-20231116171619541"></p><h4 id="生成器推导式（不直接生成元组）"><a href="#生成器推导式（不直接生成元组）" class="headerlink" title="生成器推导式（不直接生成元组）"></a>生成器推导式（不直接生成元组）</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759602.png" alt="image-20231116171724496"></p><h3 id="综合练习-绘制不同颜色的同心圆-绘制棋盘"><a href="#综合练习-绘制不同颜色的同心圆-绘制棋盘" class="headerlink" title="综合练习-绘制不同颜色的同心圆-绘制棋盘"></a>综合练习-绘制不同颜色的同心圆-绘制棋盘</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759604.png" alt="image-20231116173335354"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制不同颜色的同心圆</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">p = turtle.Pen()  <span class="comment"># 画笔对象</span></span><br><span class="line"></span><br><span class="line">radius = [x * <span class="number">10</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">my_color = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;black&quot;</span>, <span class="string">&quot;green&quot;</span>]</span><br><span class="line">p.width(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> r, i <span class="keyword">in</span> <span class="built_in">zip</span>(radius, <span class="built_in">range</span>(<span class="built_in">len</span>(radius))):  <span class="comment"># （10，0），(20,1)</span></span><br><span class="line">    p.penup()</span><br><span class="line">    p.goto(<span class="number">0</span>, -r)</span><br><span class="line">    p.pendown()</span><br><span class="line">    p.color(my_color[i % <span class="built_in">len</span>(my_color)])</span><br><span class="line">    p.circle(r)</span><br><span class="line"></span><br><span class="line">turtle.done()  <span class="comment"># 程序执行完毕，窗口还在</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制棋盘</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数和内存分析"><a href="#函数和内存分析" class="headerlink" title="函数和内存分析"></a>函数和内存分析</h2><h3 id="函数的基本概念-内存分析-函数分类-定义和调用"><a href="#函数的基本概念-内存分析-函数分类-定义和调用" class="headerlink" title="函数的基本概念-内存分析-函数分类-定义和调用"></a>函数的基本概念-内存分析-函数分类-定义和调用</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943309.png" alt="image-20231117163429235"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943310.png" alt="image-20231117163611378"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943311.png" alt="image-20231117163711793"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943312.png" alt="image-20231117163948916"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943313.png" alt="image-20231117164127321"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943314.png" alt="image-20231117164425172"></p><h3 id="形参和实参-文档字符串-函数的注释"><a href="#形参和实参-文档字符串-函数的注释" class="headerlink" title="形参和实参-文档字符串-函数的注释"></a>形参和实参-文档字符串-函数的注释</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943315.png" alt="image-20231117164624930"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943316.png" alt="image-20231117165253398"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943317.png" alt="image-20231117165341145"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printMax</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    求两个数较大的数</span></span><br><span class="line"><span class="string">    :param a: 一个参数</span></span><br><span class="line"><span class="string">    :param b: 一个参数</span></span><br><span class="line"><span class="string">    :return: 返回较大的数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>(printMax)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;print(printMax.__doc__)  &quot;</span>, printMax.__doc__)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Help on function printMax in module __main__:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">printMax(a, b)</span></span><br><span class="line"><span class="string">    求两个数较大的数</span></span><br><span class="line"><span class="string">    :param a: 一个参数</span></span><br><span class="line"><span class="string">    :param b: 一个参数</span></span><br><span class="line"><span class="string">    :return: 返回较大的数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">print(printMax.__doc__)   </span></span><br><span class="line"><span class="string">    求两个数较大的数</span></span><br><span class="line"><span class="string">    :param a: 一个参数</span></span><br><span class="line"><span class="string">    :param b: 一个参数</span></span><br><span class="line"><span class="string">    :return: 返回较大的数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="返回值详解"><a href="#返回值详解" class="headerlink" title="返回值详解"></a>返回值详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943318.png" alt="image-20231117165838027"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printShape</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回一个列表</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s1 = <span class="string">&quot;#&quot;</span> * n</span><br><span class="line">    s2 = <span class="string">&quot;$&quot;</span> * n</span><br><span class="line">    <span class="keyword">return</span> [s1, s2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = printShape(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;#####&#x27;, &#x27;$$$$$&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="函数也是对象-内存分析"><a href="#函数也是对象-内存分析" class="headerlink" title="函数也是对象-内存分析"></a>函数也是对象-内存分析</h3><p>==Python中，”一切都是对象”==。实际上，执行def定义函数后，系统就创建了相应的==函数对象==。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943319.png" alt="image-20231117170506090"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943320.png" alt="image-20231117170556762"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943321.png" alt="image-20231117170656317"></p><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><h4 id="全局变量-局部变量-栈帧内存分析讲解"><a href="#全局变量-局部变量-栈帧内存分析讲解" class="headerlink" title="全局变量-局部变量-栈帧内存分析讲解"></a>全局变量-局部变量-栈帧内存分析讲解</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943322.png" alt="image-20231117170903135"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943323.png" alt="image-20231117171022107"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">locals</span>())    <span class="comment"># 打印输出的局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;#&quot;</span> * <span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">globals</span>())   <span class="comment"># 打印输出的全局变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2 3 4</span></span><br><span class="line"><span class="string">&#123;&#x27;a&#x27;: 2, &#x27;b&#x27;: 3, &#x27;c&#x27;: 4&#125;</span></span><br><span class="line"><span class="string">####################</span></span><br><span class="line"><span class="string">&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x0000023373C06CD0&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;D:\\2022百战Python\\Python基础\\函数和内存分析\\practice.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;a&#x27;: 100, &#x27;f1&#x27;: &lt;function f1 at 0x0000023374387E50&gt;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="局部变量和全局变量-效率测试"><a href="#局部变量和全局变量-效率测试" class="headerlink" title="局部变量和全局变量-效率测试"></a>局部变量和全局变量-效率测试</h4><p>==局部变量的查询和访问速度比全局变量快，优先考虑使用，尤其是在循环的时候。==</p><p>==在特别强调效率的地方或者循环次数较多的地方，可以通过将全局变量转为局部变量提高运行速度。==</p><h3 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943324.png" alt="image-20231117172204514"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943325.png" alt="image-20231117172401914"></p><ul><li><strong>对“可变对象”进行“写操作”，直接作用于原对象本身。</strong></li></ul><ul><li><strong>对“不可变对象”进行“写操作”，会产生一个新的“对象空间”，并用新的值填充这块空间。</strong></li></ul><h4 id="传递可变对象-内存分析"><a href="#传递可变对象-内存分析" class="headerlink" title="传递可变对象-内存分析"></a>传递可变对象-内存分析</h4><h4 id="传递不可变对象-内存分析"><a href="#传递不可变对象-内存分析" class="headerlink" title="传递不可变对象-内存分析"></a>传递不可变对象-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943326.png" alt="image-20231117173137743"></p><h4 id="浅拷贝和深拷贝-内存分析"><a href="#浅拷贝和深拷贝-内存分析" class="headerlink" title="浅拷贝和深拷贝-内存分析"></a>浅拷贝和深拷贝-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943327.png" alt="image-20231117173444372"></p><p>①<strong>浅拷贝</strong>：==拷贝对象，但不拷贝子对象的内容，只是拷贝子对象的引用。==</p><p>②<strong>深拷贝</strong>：==拷贝对象，并且会连子对象的内存也全部（递归）拷贝一份，对子对象的修改不会影响源对象==</p><h4 id="不可变对象含可变子对象-内存分析"><a href="#不可变对象含可变子对象-内存分析" class="headerlink" title="不可变对象含可变子对象-内存分析"></a>不可变对象含可变子对象-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943328.png" alt="image-20231117174312493"></p><h3 id="参数的类型"><a href="#参数的类型" class="headerlink" title="参数的类型"></a>参数的类型</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943329.png" alt="image-20231117174934453"></p><h4 id="位置参数-默认值参数-命名参数"><a href="#位置参数-默认值参数-命名参数" class="headerlink" title="位置参数-默认值参数-命名参数"></a>位置参数-默认值参数-命名参数</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943330.png" alt="image-20231117181032226"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943331.png" alt="image-20231117181134330"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943332.png" alt="image-20231117181207414"></p><h4 id="可变参数-强制命名参数"><a href="#可变参数-强制命名参数" class="headerlink" title="可变参数-强制命名参数"></a>可变参数-强制命名参数</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943333.png" alt="image-20231117181448367"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943334.png" alt="image-20231117181534034"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943335.png" alt="image-20231117181557596"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943336.png" alt="image-20231117181931376"></p><h3 id="lambda表达式和匿名函数"><a href="#lambda表达式和匿名函数" class="headerlink" title="lambda表达式和匿名函数"></a>lambda表达式和匿名函数</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943337.png" alt="image-20231117182235722"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943338.png" alt="image-20231117182308842"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> a, b, c: a + b + c</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(f))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;function &lt;lambda&gt; at 0x000001AF907F7E50&gt;</span></span><br><span class="line"><span class="string">1853555179088</span></span><br><span class="line"><span class="string">&lt;class &#x27;function&#x27;&gt;</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">g = [<span class="keyword">lambda</span> a: a * <span class="number">2</span>, <span class="keyword">lambda</span> b: b * <span class="number">4</span>, <span class="keyword">lambda</span> c: c * <span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(g[<span class="number">0</span>](<span class="number">1</span>), g[<span class="number">1</span>](<span class="number">2</span>), g[<span class="number">2</span>](<span class="number">3</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2 8 24</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="eval-函数的用法和注入安全隐患问题"><a href="#eval-函数的用法和注入安全隐患问题" class="headerlink" title="eval()函数的用法和注入安全隐患问题"></a>eval()函数的用法和注入安全隐患问题</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943339.png" alt="image-20231117183923056"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943340.png" alt="image-20231117183958772"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;print(&#x27;abcd&#x27;)&quot;</span></span><br><span class="line"><span class="built_in">eval</span>(s)   <span class="comment"># eval会将字符串当成语句来执行</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;abcd&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = <span class="built_in">eval</span>(<span class="string">&quot;a+b&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;30&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">dict1 = <span class="built_in">dict</span>(a=<span class="number">100</span>, b=<span class="number">200</span>)</span><br><span class="line">d = <span class="built_in">eval</span>(<span class="string">&quot;a+b&quot;</span>, dict1)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;300&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943341.png" alt="image-20231117184610770"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943342.png" alt="image-20231117184633540"></p><h4 id="函数调用内存分析-栈帧的创建"><a href="#函数调用内存分析-栈帧的创建" class="headerlink" title="函数调用内存分析-栈帧的创建"></a>函数调用内存分析-栈帧的创建</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943343.png" alt="image-20231117185027038"></p><h4 id="阶乘计算案例"><a href="#阶乘计算案例" class="headerlink" title="阶乘计算案例"></a>阶乘计算案例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943344.png" alt="image-20231117185357907"></p><h3 id="嵌套函数-内部函数-数据隐藏"><a href="#嵌套函数-内部函数-数据隐藏" class="headerlink" title="嵌套函数(内部函数)-数据隐藏"></a>嵌套函数(内部函数)-数据隐藏</h3><p><strong>嵌套函数：在函数内部定义的函数</strong></p><p>一般在什么情况下使用嵌套函数？</p><ol><li>封装-数据隐藏 :外部无法访问“嵌套函数”。</li><li>贯彻DRY(Don’t Repeat Yourself)原则</li><li>嵌套函数，可以让我们在函数内部避免重复代码。</li><li>闭包（后面会讲解）</li></ol><h3 id="nonlocal和global关键字"><a href="#nonlocal和global关键字" class="headerlink" title="nonlocal和global关键字"></a>nonlocal和global关键字</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943345.png" alt="image-20231117190204820"></p><h3 id="LEGB规则"><a href="#LEGB规则" class="headerlink" title="LEGB规则"></a>LEGB规则</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943346.png" alt="image-20231117194110266"></p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="面向对象和面向过程的区别-设计者思维-执行者思维"><a href="#面向对象和面向过程的区别-设计者思维-执行者思维" class="headerlink" title="面向对象和面向过程的区别-设计者思维-执行者思维"></a>面向对象和面向过程的区别-设计者思维-执行者思维</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219980.png" alt="image-20231117194403836"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219981.png" alt="image-20231117194445222"></p><blockquote><p><strong>面向过程和面向对象的区别</strong></p><p>面向过程和面向对象都是对软件分析、设计和开发的一种思想，它指导着人们以不同的方式去分析、设计和开发软件。</p><p>==C语言是一种典型的面向过程语言，Java是一种典型的面向对象语言。==</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219982.png" alt="image-20231117194720826"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219983.png" alt="image-20231117194758398"></p><blockquote><p>面向对象可以帮助我们从宏观上把握、从整体上分析整个系统。但是，具体到实现部分的微观操作（就是一个个方法），仍然需要面向过程的思路去处理。</p><p>我们干万不要把面向过程和面向对象对立起来。他们是相辅相成的。==面向对象离不开面向过程！==</p></blockquote><p><strong>面向对象和面向过程总结</strong></p><p>①都是解决问题的思维方式，都是代码组织的方式。</p><p>②==面向过程是一种“执行者思维”==，解决简单问题可以使用面向过程</p><p>③==面向对象是一种“设计者思维”==，解决复杂、需要协作的问题可以使用面向对象</p><blockquote><p>面向对象离不开面向过程：<br>    ·宏观上：通过面向对象进行整体设计<br>    ·微观上：执行和处理数据，仍然是面向过程</p></blockquote><h3 id="对象进化的小故事"><a href="#对象进化的小故事" class="headerlink" title="对象进化的小故事"></a>对象进化的小故事</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219984.png" alt="image-20231117195725002"></p><h3 id="类的定义-类和对象的关系-对象的内存模型"><a href="#类的定义-类和对象的关系-对象的内存模型" class="headerlink" title="类的定义-类和对象的关系-对象的内存模型"></a>类的定义-类和对象的关系-对象的内存模型</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219985.png" alt="image-20231117195854311"></p><blockquote><p>类：我们叫做<code>class</code>。对象：我们叫做<code>object</code>,<code>instance</code>(实例)。以后我们说某个类的对象，某个类的实例。是一样的意思。</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219986.png" alt="image-20231117200128085"></p><blockquote><p>从一个类创建对象时，每个对象会共享这个类的行为（类中定义的方法），但会有自己的属性值（不共享状态）。更具体一点：“方法代码是共享的，属性数据不共享”。</p><p>Python中，”一切皆对象”。类也称为“==类对像==”，类的实例也称为“实例对象”。</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219987.png" alt="image-20231117200451070"></p><p>要点如下：</p><p>①类名必须符合“标识符”的规则；一般规定，==首字母大写，多个单词使用“驼峰原则”==。</p><p>②类体中我们可以定义属性和方法</p><p>③属性用来描述数据，方法（即函数）用来描述这些数据相关的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):  <span class="comment"># self参数是必须有的</span></span><br><span class="line">        self.name = name              <span class="comment"># 实例属性</span></span><br><span class="line">        self.score = score            <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的分数是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.score))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;john&quot;</span>, <span class="number">61</span>)  <span class="comment"># 自动调用__init__()方法</span></span><br><span class="line"><span class="built_in">print</span>(s1.name, s1.score)</span><br><span class="line">s1.say_score()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">john 61</span></span><br><span class="line"><span class="string">john的分数是61</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219988.png" alt="image-20231117201324006"></p><h3 id="构造函数-init和new方法"><a href="#构造函数-init和new方法" class="headerlink" title="构造函数-init和new方法"></a>构造函数-init和new方法</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219989.png" alt="image-20231117201604950"></p><p><code>__init__()</code> <strong>构造函数</strong>的要点如下：</p><ol><li><p>名称固定，必须为：<code>__init__()</code></p></li><li><p>第一个参数固定，必须为：<code>self</code>。<code>self</code>指的就是刚刚创建好的实例对象</p></li><li><p>构造函数通常用来初始化实例对象的实例属性，如下代码就是初始化实例属性：<code>name</code>和<code>score</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):  <span class="comment"># self参数是必须有的</span></span><br><span class="line">       self.name = name           <span class="comment"># 实例属性</span></span><br><span class="line">       self.score = score         <span class="comment"># 实例属性</span></span><br></pre></td></tr></table></figure></li><li><p>通过“类名(参数列表)”来调用构造函数。调用后，将创建好的对象返回给相应的变量。比如：<code>s1=Student(&quot;张三&quot;,80)</code></p></li><li><p><code>__init__()</code>方法：==初始化创建好的对象==，<strong>初始化指的是：“给实例属性赋值”</strong></p></li><li><p><code>__new__()</code>方法：==用于创建对象==，但我们一般无需重定义该方法</p></li><li><p>如果我们不定义<code>__init__</code>方法，系统会提供一个默认的<code>__init__</code>方法。如果我们定义了带参的<code>__init__</code>方法，系统不创建默认的<code>__init__</code>方法</p></li></ol><blockquote><p>Python中的<code>self</code>相当于C++中的<code>self指针</code>，JAVA和C#中的<code>this</code>关键字。Python中<code>self</code>必须为构造函数的第一个参数，名字可以任意修改。但一般惯例，都叫做<code>self</code></p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219990.png" alt="image-20231117204441814"></p><h3 id="实例属性-内存分析"><a href="#实例属性-内存分析" class="headerlink" title="实例属性-内存分析"></a>实例属性-内存分析</h3><p><strong>实例属性</strong></p><p>实例属性是从属于实例对象的属性，也称为“实例变量”。他的使用有如下几个要点：</p><ol><li><p>实例属性一般在<code>__init__()</code>方法中通过如下代码定义：</p><p><code>self.实例属性名 = 初始值</code></p></li><li><p>在本类的其他实例方法中，也是通过<code>self</code>进行访问：</p><p><code>self.实例属性名</code></p></li><li><p>创建实例对象后，通过实例对象访问：</p><p><code>obj01=类名()</code>                               #创建和初始化对象，调用<code>__init__()</code>初始化属性</p><p><code>obj01.实例属性名 = 值</code>          #可以给已有属性赋值，也可以新加属性</p></li></ol><h3 id="实例方法-内存分析方法调用过程-dir-isinstance"><a href="#实例方法-内存分析方法调用过程-dir-isinstance" class="headerlink" title="实例方法-内存分析方法调用过程-dir()-isinstance"></a>实例方法-内存分析方法调用过程-dir()-isinstance</h3><p><strong>实例方法</strong></p><p>实例方法是从属于实例对象的方法。实例方法的定义格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">方法名</span>(<span class="params">self [, 形参列表]</span>):</span><br><span class="line">函数体</span><br></pre></td></tr></table></figure><p>方法的调用格式如下：</p><p>​                        <code>对象.方法名([实参列表])</code></p><p>要点：</p><ol><li><p>定义实例方法时，第一个参数必须为<code>self</code>。和前面一样，<code>self</code>指当前的实例对象。</p></li><li><p>调用实例方法时，不需要也不能给<code>self</code>传参。<code>self</code>由解释器自动传参</p></li></ol><blockquote><p><strong>函数和方法的区别</strong></p><p>①都是用来完成一个功能的语句块，本质一样。</p><p>②方法调用时，通过对象来调用。方法从属于特定实例对象，普通函数没有这个特点<br>③直观上看，方法定义时需要传递<code>self</code>,函数不需要</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219991.png" alt="image-20231117210158863"></p><p><strong>其他操作</strong></p><ol><li><code>dir(obj)</code>可以获得对象的所有属性、方法</li><li><code>obj.__dict__</code>对象的属性字典</li><li><code>pass</code>空语句</li><li><code>isinstance(对象,类型)</code>判断对象”是不是”指定类型”</li></ol><h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><p><strong>类对象</strong></p><p>我们在前面讲的类定义格式中, <code>class 类名：</code>。实际上，当解释器执行<code>class</code>语句时，就会创建一个类对象</p><h3 id="类属性-内存分析（创建类和对象的底层）"><a href="#类属性-内存分析（创建类和对象的底层）" class="headerlink" title="类属性-内存分析（创建类和对象的底层）"></a>类属性-内存分析（创建类和对象的底层）</h3><p>类属性是从属于“类对象”的属性，也称为“类变量”。由于，类属性从属于类对象，可以被所有实例对象共享。</p><p>类属性的定义方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">类名变量 = 初始值</span><br></pre></td></tr></table></figure><p>在==类中或者类的外面==，我们可以通过：<code>类名.类变量名</code> 来读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school = <span class="string">&quot;HNU&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line">    count = <span class="number">0</span>       <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):</span><br><span class="line">        self.name = name    <span class="comment"># 实例属性</span></span><br><span class="line">        self.score = score  <span class="comment"># 实例属性</span></span><br><span class="line">        Student.count = Student.count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):    <span class="comment"># 实例方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的学校是：&quot;</span>, Student.school)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的分数是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.score))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;john&quot;</span>, <span class="number">61</span>)    <span class="comment"># s1是实例对象，自动调用__init__()方法</span></span><br><span class="line">s2 = Student(<span class="string">&quot;jack&quot;</span>, <span class="number">91</span>)</span><br><span class="line">s1.say_score()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一共创建了&#123;0&#125;个Student对象&quot;</span>.<span class="built_in">format</span>(Student.count))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我的学校是： HNU</span></span><br><span class="line"><span class="string">john的分数是61</span></span><br><span class="line"><span class="string">一共创建了2个Student对象</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219992.png" alt="image-20231117212505195"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219993.png" alt="image-20231117212336356"></p><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>==类方法是从属于“类对象”的方法。==类方法通过装饰器<code>@classmethod</code>来定义，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">类方法名</span>(<span class="params">cls [, 形参列表]</span>):</span><br><span class="line">方法体</span><br></pre></td></tr></table></figure><p>要点如下：</p><ol><li><code>@classmethod</code>必须位于方法上面一行</li><li>第一个<code>cls</code>必须有；==<code>cls</code>指的就是“类对象”本身==</li><li>调用类方法格式：<code>类名.类方法名(参数列表)</code>。参数列表中，不需要也不能给<code>cls</code>传值</li><li><strong>类方法中访问实例属性和实例方法会导致错误</strong></li><li>子类继承父类方法时，传入cls是子类对象，而非父类对象（讲完继承再说）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school = <span class="string">&quot;HNU&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printSchool</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls.school)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student.printSchool()</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>Python中允许定义与”类对象”无关的方法，称为“静态方法”。</p><p>“静态方法”和在模块中定义普通函数没有区别，只不过“静态方法”放到了“类的名字空间里面”，需要通过“类调用”。</p><p>静态方法通过装饰器<code>@staticmethod</code>来定义，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">静态方法名</span>(<span class="params">[形参列表]</span>):</span><br><span class="line">方法体</span><br></pre></td></tr></table></figure><p>要点如下：</p><ol><li><p><code>@staticmethod</code>必须位于方法上面一行</p></li><li><p>调用静态方法格式：<code>类名.静态方法名(参数列表)</code></p></li><li><p>静态方法中访问实例属性和实例方法会导致错误</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school = <span class="string">&quot;HNU&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):  <span class="comment"># 静态方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(a, b, a + b))</span><br><span class="line">        <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student.add(<span class="number">30</span>, <span class="number">40</span>)</span><br></pre></td></tr></table></figure><h3 id="del析构方法-垃圾回收机制简介"><a href="#del析构方法-垃圾回收机制简介" class="headerlink" title="del析构方法-垃圾回收机制简介"></a>del析构方法-垃圾回收机制简介</h3><p>==Python实现自动的垃圾回收==</p><p><code>__del__()</code>称为“析构方法”，用于实现对象被销毁时所需的操作。比如：释放对象占用的资源，例如：打开的文件资源、网络连接等。</p><p>Python实现自动的垃圾回收，当对象没有被引用时（引用计数为0），由垃圾回收器调用<code>__del__()</code>。</p><p>我们也可以通过<code>del语句</code>删除对象，从而保证调用<code>__del__()</code>。</p><p>系统会自动提供<code>__del__</code>方法，一般不需要自定义析构方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 析构函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;销毁对象：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Person()</span><br><span class="line">p2 = Person()</span><br><span class="line"><span class="keyword">del</span> p2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;程序结束&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">销毁对象：&lt;__main__.Person object at 0x0000021E3FE14FA0&gt;</span></span><br><span class="line"><span class="string">程序结束</span></span><br><span class="line"><span class="string">销毁对象：&lt;__main__.Person object at 0x0000021E3FE14FD0&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="call方法和可调用对象"><a href="#call方法和可调用对象" class="headerlink" title="call方法和可调用对象"></a>call方法和可调用对象</h3><p>Python中，凡是可以将<code>()</code>直接应用到自身并执行，都称为可调用对象。</p><p>可调用对象包括自定义的函数、Python内置函数、以及本节所讲的实例对象。</p><p>定义了<code>__call__()</code>的对象，称为==“可调用对象”，即该对象可以像函数一样被调用==。</p><p>该方法使得实例对象可以像调用普通函数那样，以<code>&quot;对象名()&quot;</code>的形式使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;f1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1()  <span class="comment"># 本质也是调用了__call__()方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;f1&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, age, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;call方法&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;车龄&#123;0&#125;,金额&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(age, money))</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">c = Car()</span><br><span class="line">c(<span class="number">3</span>, <span class="number">20000</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">call方法</span></span><br><span class="line"><span class="string">车龄3,金额20000</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="方法没有重载-方法的动态性"><a href="#方法没有重载-方法的动态性" class="headerlink" title="方法没有重载-方法的动态性"></a>方法没有重载-方法的动态性</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753886.png" alt="image-20231117221944194"></p><p>如果我们在类体中定义了多个重名的方法，只有最后一个方法有效。</p><p>建议：==不要使用重名的方法！Python中方法没有重载。==</p><blockquote><p>在其他一些语言（比如：Java)中，可以定义多个重名的方法，只要保证方法签名唯一即可。方法签名包含3个部分：方法名、参数数量、参数类型。<br>    Python中，方法的的参数没有声明类型（调用时确定参数的类型），参数的数量也可以由可变参数控制。因此，Python中是没有方法的重载的。</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753888.png" alt="image-20231118140905523"></p><h3 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753889.png" alt="image-20231118141259542"></p><p>Pytho对于类的成员没有严格的访问控制限制，这与其他面向对象语言有区别。关于私有属性和私有方法，有如下要点：</p><p>①通常我们约定，<strong>两个下划线开头的属性是私有的(private)</strong>。其他为公 共的(public)。</p><p>②类内部可以访问私有属性（方法）</p><p>③类外部不能直接访问私有属性（方法）</p><p>④类外部可以通过 <code>_类名__私有属性(方法)名</code> 访问私有属性（方法）</p><blockquote><p>【注】==方法本质上也是属性！==只不过是可以通过()执行而已。</p><p>所以，此处讲的私有属性和公有属性，也同时讲解了私有方法和公有方法的用法。</p><p>如下测试中，同时也包含了私有方法和公有方法的例子。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">    __company = <span class="string">&quot;Ailibab&quot;</span>  <span class="comment"># 私有属性，解释器运行时把__company转化成_Employee__company</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age   <span class="comment"># 私有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_company</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的公司名字是：&quot;</span>, Employee.__company)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的年龄是：&quot;</span>, self.__age)</span><br><span class="line">        </span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">__work</span>(<span class="params">self</span>):     <span class="comment"># 私有方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;好好工作&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Employee._Employee__company)</span><br><span class="line">a = Employee(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>)</span><br><span class="line">a.say_company()</span><br><span class="line"><span class="built_in">print</span>(a._Employee__age)  <span class="comment"># 调用私有属性</span></span><br><span class="line">a._Employee__work()      <span class="comment"># 调用私有方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Ailibab</span></span><br><span class="line"><span class="string">我的公司名字是： Ailibab</span></span><br><span class="line"><span class="string">我的年龄是： 20</span></span><br><span class="line"><span class="string">20</span></span><br><span class="line"><span class="string">好好工作</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h3><p><code>@property</code>可以将一个<strong>方法的调用方式变成“属性调用”</strong>。</p><p><code>@property</code>主要用于帮助我们<strong>处理属性的读操作、写操作</strong>。对于某一个属性，我们可以直接通过：</p><p>​                                                        <code>emp1.salary= 30000</code></p><p>如上的操作读操作、写操作。但是，这种做法不安全。比如，我需要限制薪水必须为<code>1-10000</code>的数字。这时候，我们就需要通过使用装饰器<code>@property</code>来处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__salary = salary</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property                      </span><span class="comment"># 只能读 print(emp1.salary) 相当于属性的调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;薪资是：&quot;</span>, self.__salary)</span><br><span class="line">        <span class="keyword">return</span> self.__salary</span><br><span class="line"></span><br><span class="line"><span class="meta">    @salary.setter                 </span><span class="comment"># 修改使用这个函数 emp1.salary = 50000</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">salary</span>(<span class="params">self, salary</span>): </span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; salary &lt; <span class="number">100000</span>:</span><br><span class="line">            self.__salary = salary</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;薪资录入错误！只能在0-100000之间&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">emp1 = Employee(<span class="string">&quot;john&quot;</span>, <span class="number">20000</span>)</span><br><span class="line">emp1.salary = <span class="number">50000</span></span><br><span class="line"><span class="built_in">print</span>(emp1.salary)</span><br><span class="line"></span><br><span class="line">emp1.salary = <span class="number">100000000</span></span><br><span class="line"><span class="built_in">print</span>(emp1.salary)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">薪资是： 50000</span></span><br><span class="line"><span class="string">50000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">薪资录入错误！只能在0-100000之间</span></span><br><span class="line"><span class="string">薪资是： 50000</span></span><br><span class="line"><span class="string">50000</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="属性和类的命名规则总结"><a href="#属性和类的命名规则总结" class="headerlink" title="属性和类的命名规则总结"></a>属性和类的命名规则总结</h3><p><strong>属性和方法命名总结</strong></p><p><code>_xxx</code>：保护成员，不能用<code>from module import *</code> 导入，只有类对象和子类对象能访问这些成员。</p><p><code>__xxx__</code>:系统定义的特殊成员</p><p><code>__xxx</code>:类中的私有成员，只有类对象自己能访问，子类对象也不能访问。(但，在类外部可以通过 <code>对像名._类名__xxx</code> 这种特殊方式访问。Python不存在严格意义的私有成员)</p><blockquote><p>:warning:再次强调，方法和属性都遵循上面的规则。 </p></blockquote><p><strong>类编码风格</strong></p><ol><li><strong>类名首字母大写，多个单词之间采用驼峰原则。</strong></li><li><strong>实例名、模块名采用小写，多个单词之间采用下划线隔开</strong></li><li>每个类，应紧跟“文档字符串”，说明这个类的作用</li><li>可以用空行组织代码，但不能滥用。在类中，使用一个空行隔开方法；模块中，使用两个空行隔开多个类</li></ol><h3 id="None对象的特殊性"><a href="#None对象的特殊性" class="headerlink" title="None对象的特殊性"></a>None对象的特殊性</h3><p><strong>None是什么？</strong></p><ol><li><p>与C和JAVA不同，Pythont中是没有<code>NULL</code>的，取而代之的是<code>None</code>。</p></li><li><p><code>None</code>是一个特殊的常量，表示变量没有指向任何对象。</p></li><li><p>在Python中，<code>None</code>本身实际上<strong>也是对象</strong>，有自己的类型<code>NoneType</code>。</p></li><li><p>你可以将<code>None</code>赋值给任何变量，但我们不能创建<code>NoneType</code>类型的对象</p></li></ol>   <blockquote alt= "warn"><p>None不是False，None不是0，None不是空字符串。None和任何其他的数据类型比较永远返回False。</p></blockquote><p><strong>空列表、空字符串、0之间的比较</strong></p><ol><li>if语句判断时，空列表[]、空字典{}、空元组()、空字符串、0、None等一系列代表空和无的对象会被转换成False</li><li><code>==</code>和<code>is</code>判断时，空列表、空字符串不会自动转成<code>False</code></li></ol><h3 id="面向对象的三大特征说明（封装、继承、多态）"><a href="#面向对象的三大特征说明（封装、继承、多态）" class="headerlink" title="面向对象的三大特征说明（封装、继承、多态）"></a>面向对象的三大特征说明（封装、继承、多态）</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753890.png" alt="image-20231118165047726"></p><p>==Python是面向对象的语言，支持面向对象编程的三大特性：继承、封装（隐藏）、多态。==</p><p><strong>封装（隐藏）</strong></p><blockquote><p>隐藏对象的属性和实现细节，只对外提供必要的方法。相当于将“细节封装起来”，只对外暴露”相关调用方法”。</p><p>通过前面学习的“==私有属性、私有方法”的方式，实现封装==”。Pythoni追求简洁的语法，没有严格的语法级别的“访问控制符”，更多的是依靠程序员自觉实现。</p></blockquote><p><strong>继承</strong></p><blockquote><p>继承可以让子类具有父类的特性，提高了代码的重用性。</p><p>从设计上是一种==增量进化==，原有父类设计不变的情况下，可以增加新的功能，或者改进已有的算法。</p></blockquote><p><strong>多态</strong></p><blockquote><p>多态是指==同一个方法调用由于对象不同会产生不同的行为==。</p><p>生活中这样的例子比比皆是：同样是休息方法，人不同休息方法不同。张三休息是睡觉，李四休息是玩游戏，程序员休息是“敲几行代码”。</p></blockquote><h3 id="继承详解"><a href="#继承详解" class="headerlink" title="继承详解"></a>继承详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753891.png" alt="image-20231118165634687"></p><p>继承是面向对象编程的三大特征之一。继承让我们更加容易实现类的扩展。实现代码的重用，不用再重新发明轮子(don’t reinvent wheels)。</p><p>如果<strong>一个新类继承自一个设计好的类，就直接具备了已有类的特征</strong>，就大大降低了工作难度。已有的类，我们称为“父类或者基类”。新的类，我们称为“子类或者派生类”。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753892.png" alt="image-20231118165736909"></p><p><strong>语法格式</strong></p><p>Python支持==多重继承，一个子类可以继承多个父类==。继承的语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">子类类名</span>(父类<span class="number">1</span>[, 父类<span class="number">2</span>, ...]):</span><br><span class="line">类体</span><br></pre></td></tr></table></figure><blockquote><p>如果在类定义中没有指定父类，则默认父类是<code>object类</code>。也就是说，<code>object</code>是所有类的父类，里面定义了一些所有类共有的默认实现，比如：<code>__new__()</code></p></blockquote><p><strong>关于构造函数：</strong></p><ol><li><p>子类不重写<code>__init__</code>,实例化子类时，会自动调用父类定义的<code>__init__</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>)</span><br><span class="line">s1.say_age()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">haha的年龄是20</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>子类重写了<code>__init__</code>时，实例化子类，就不会调用父类已经定义的<code>__init__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        <span class="comment"># 两种调用父类的构造方法</span></span><br><span class="line">        <span class="comment"># 1.</span></span><br><span class="line">        <span class="comment"># Person.__init__(self, name, age)</span></span><br><span class="line">        <span class="comment"># 2.</span></span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的分数：&quot;</span>, self.score)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line">s1.say_score()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">创建Student</span></span><br><span class="line"><span class="string">我的分数： 90</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;, &#x27;say_score&#x27;, &#x27;score&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>如果重写了<code>__init__</code>时，要使用父类的构造方法，可以使用<code>super</code>关键字，也可以使用如下格式调用：</p><p>​                                                            <code>父类名.__init__(self, 参数列表)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        <span class="comment"># 两种调用父类的构造方法</span></span><br><span class="line">        <span class="comment"># 1.</span></span><br><span class="line">        <span class="comment"># Person.__init__(self, name, age)</span></span><br><span class="line">        <span class="comment"># 2.</span></span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">创建Student</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;, &#x27;score&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="类成员继承和方法的重写"><a href="#类成员继承和方法的重写" class="headerlink" title="类成员继承和方法的重写"></a>类成员继承和方法的重写</h3><p><strong>成员继承</strong>：==子类继承了父类除构造方法（<code>__init__()</code>）之外的所有成员。==</p><blockquote><p>:warning:（私有属性、私有方法也被继承）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age       <span class="comment"># 私有属性也会被继承</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.__age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        <span class="comment"># 两种调用父类的构造方法</span></span><br><span class="line">        <span class="comment"># 1.</span></span><br><span class="line">        <span class="comment"># Person.__init__(self, name, age)</span></span><br><span class="line">        <span class="comment"># 2.</span></span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的分数：&quot;</span>, self.score)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line">s1.say_age()</span><br><span class="line">s1.say_score()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">创建Student</span></span><br><span class="line"><span class="string">haha的年龄是20</span></span><br><span class="line"><span class="string">我的分数： 90</span></span><br><span class="line"><span class="string">[&#x27;_Person__age&#x27;, &#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;, &#x27;say_score&#x27;, &#x27;score&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>方法重写</strong>：子类可以重新定义父类中的方法，这样就会覆盖父类的方法，也称为“重写”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的名字是：&quot;</span>, self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        Person.__init__(self, name, age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的分数：&quot;</span>, self.score)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_name</span>(<span class="params">self</span>):    <span class="comment"># 重写父类的方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hello ,my name is &quot;</span>, self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line">s1.say_age()</span><br><span class="line">s1.say_score()</span><br><span class="line">s1.say_name()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">创建Student</span></span><br><span class="line"><span class="string">haha的年龄是20</span></span><br><span class="line"><span class="string">我的分数： 90</span></span><br><span class="line"><span class="string">hello ,my name is  haha</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;, &#x27;say_name&#x27;, &#x27;say_score&#x27;, &#x27;score&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>查看类的继承层次结构</strong></p><p>通过类的方法<code>mro()</code>或者类的属性<code>__mro__</code>可以输出这个类的继承层次结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">B</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(C.mro())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753893.png" alt="image-20231118173835027"></p><h3 id="object根类-查看模块结构-dir"><a href="#object根类-查看模块结构-dir" class="headerlink" title="object根类-查看模块结构-dir()"></a>object根类-查看模块结构-dir()</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753894.png" alt="image-20231118174521095"></p><blockquote><p>==<code>object</code>类是所有类的父类==，因此所有的类都有<code>object</code>类的属性和方法。我们显然有必要深入研究一下<code>object</code>类的结构。对于我们继续深入学习Python很有好处。</p></blockquote><p><strong><code>dir()</code>查看对象属性</strong></p><p>为了深入学习对象，先学习内置函数dir(),他可以让我们方便的看到指定对象所有的属性</p><blockquote><p>:warning:快捷键 Alt+ 7 打开模块结构</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753895.png" alt="image-20231118175130469"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快捷键 Alt+ 7 打开模块结构</span></span><br><span class="line">obj = <span class="built_in">object</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(obj))</span><br><span class="line"></span><br><span class="line">s2 = Person(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法的本质也是是属性</span></span><br><span class="line"><span class="built_in">print</span>(s2.say_age)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s2.say_age))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;bound method Person.say_age of &lt;__main__.Person object at 0x00000222E819BFD0&gt;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;method&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>从上面我们可以发现这样几个要点：</strong></p><ol><li>Person对象增加了六个属性：<code>__dict__</code> <code>__module__</code> <code>__weakref__</code> <code>age</code> <code>name</code> <code>say_age</code></li><li><code>object</code>的所有属性，<code>Person</code>类作为<code>object</code>的子类，显然包含了所有的属性</li><li>我们打印<code>age</code>、<code>name</code>、<code>say_age</code>，发现<code>say_age</code>虽然是==方法，实际上也是属性==。只不过这个属性的类型是method而已。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age &lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line">name &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">say_age &lt;<span class="keyword">class</span> <span class="string">&#x27;method&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>关于objecti这些属性的详细学习，会后面学习中逐个涉及。在此，没必要展开。</p></blockquote><h3 id="重写-str-方法"><a href="#重写-str-方法" class="headerlink" title="重写__str__()方法"></a>重写<code>__str__()</code>方法</h3><ol><li><code>object</code>有一个<code>__str()__</code>方法，用于返回一个对于”对象的描述”。内置函数<code>str(对象)</code>，调用的就是<code>__str()__</code></li><li><code>__str()__</code>经常用于<code>print()</code>方法，帮助我们查看对象的信息。<code>__str()__</code>可以重写</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将对象转化成一个字符串描述，一般用于print方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;重写str方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;名字是：&#123;0&#125;，年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">s = <span class="built_in">str</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">重写str方法</span></span><br><span class="line"><span class="string">名字是：haha，年龄是20</span></span><br><span class="line"><span class="string">重写str方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753896.png" alt="image-20231118181906059"></p><blockquote><p>Pytho支持多重继承，一个子类可以有多个“直接父类”。这样，就具备了“多个父类”的特点。但是由于，这样会被“类的整体层次””搞的异常复杂，==尽量避免使用==。</p></blockquote><h3 id="MRO方法解析顺序"><a href="#MRO方法解析顺序" class="headerlink" title="MRO方法解析顺序"></a>MRO方法解析顺序</h3><p>Pythor支持多继承，如果父类中有相同名字的方法，在子类没有指定父类名时，解释器将<strong>“从左向右”</strong>按顺序搜索。</p><p>MRO(Method Resolution Order):方法解析顺序。我们可以通过<code>mro()</code>方法获得”类的层次结构”，方法解析顺序也是按照这个“类的层次结构”寻找的。</p><h3 id="super-获得父类的定义"><a href="#super-获得父类的定义" class="headerlink" title="super()获得父类的定义"></a>super()获得父类的定义</h3><p>在子类中，如果想要获得父类的方法时，我们可以通过<code>super()</code>来做。</p><p><code>super()</code>代表<strong>父类的定义，不是父类对象</strong>。</p><blockquote><p>想调用父类的构造方法：</p><p><code>super(子类名称, self).__init__(参数列表)</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age       <span class="comment"># 私有属性也会被继承</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.__age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        <span class="comment"># Person.__init__(self)</span></span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, age)  <span class="comment"># 调用父类的构造方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Person.say_age(self)</span></span><br><span class="line">        <span class="built_in">super</span>().say_age()<span class="comment"># 通过super()调用父类的方法</span></span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></table></figure><h3 id="多态详解"><a href="#多态详解" class="headerlink" title="多态详解"></a>多态详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753897.png" alt="image-20231119160951739"></p><p><strong>多态(polymorphism)是指同一个方法调用由于对象不同可能会产生不同的行为。</strong></p><p>关于多态要注意以下2点：</p><ol><li><strong>多态是方法的多态，属性没有多态</strong>。</li><li>多态的存在有==2个必要条件：继承、方法重写==</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;动物叫了一声&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小狗叫了一声&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫叫了一声&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">animalShout</span>(<span class="params">a</span>):</span><br><span class="line">    a.shout()  <span class="comment"># 会产生多态，传入对象不同，则调用方法不同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">animalShout(Dog())</span><br><span class="line">animalShout(Cat())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">小狗叫了一声</span></span><br><span class="line"><span class="string">小猫叫了一声</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="特殊方法和运算符重载"><a href="#特殊方法和运算符重载" class="headerlink" title="特殊方法和运算符重载"></a>特殊方法和运算符重载</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753898.png" alt="image-20231119162419296"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753899.png" alt="image-20231119162554609"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753900.png" alt="image-20231119162639978"></p><h3 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753901.png" alt="image-20231119162849422"></p><h3 id="浅拷贝和深拷贝对象-内存分析"><a href="#浅拷贝和深拷贝对象-内存分析" class="headerlink" title="浅拷贝和深拷贝对象-内存分析"></a>浅拷贝和深拷贝对象-内存分析</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753902.png" alt="image-20231119163101534"></p><h3 id="继承和组合"><a href="#继承和组合" class="headerlink" title="继承和组合"></a>继承和组合</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753903.png" alt="image-20231119164344071"></p><p>除了继承，“组合”也能实现代码的复用！“<strong>组合”核心是“将父类对象作为子类的属性”</strong>。</p><blockquote><p><code>is-a</code>关系，我们可以使用”<strong>==继承==</strong>”。从而实现子类拥有的父类的方法和属性。<code>is-a</code>关系指的是类似这样的关系：狗是动物，dog is animal。.狗类就应该继承动物类。</p><p><code>has-a</code>关系，我们可以使用”==组合==”，也能实现一个类拥有另一个类的方法和属性。<code>has-a</code>关系指的是这样的关系：手机拥有CPU。MobilePhone has a CPU</p></blockquote><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>设计模式是面向对象语言特有的内容，是我们在面临某一类问题时候固定的做法，设计模式有很多种，比较流行的是：GOF(Goup Of Four)23种设计模式。当然，我们没有必要全部学习，学习几个常用的即可。</p><p>对于初学者，我们学习两个最常用的模式：工厂模式和单例模式。</p><h4 id="工厂模式实现"><a href="#工厂模式实现" class="headerlink" title="工厂模式实现"></a>工厂模式实现</h4><p>工厂模式实现了<strong>创建者和调用者的分离</strong>，使用专门的工厂类将选择实现类、创建对象进行统一的管理和控制。 </p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753904.png" alt="image-20231119165631900"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工厂模式实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Benz</span>: <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>: <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BYD</span>: <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarFactory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createCar</span>(<span class="params">self, brand</span>):</span><br><span class="line">        <span class="keyword">if</span> brand == <span class="string">&quot;宝马&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> BMW()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">&quot;奔驰&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> Benz()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">&quot;比亚迪&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> BYD()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未知品牌，无法创建&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">factory = CarFactory()</span><br><span class="line">c1 = factory.createCar(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">c2 = factory.createCar(<span class="string">&quot;宝马&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;__main__.Benz object at 0x0000021C16D12FA0&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.BMW object at 0x0000021C16D12F70&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="单例模式实现"><a href="#单例模式实现" class="headerlink" title="单例模式实现"></a>单例模式实现</h4><p>单例模式(Singleton Pattern)的核心作用是确保<strong>一个类只有一个实例</strong>，并且提供<strong>一个访问该实例的全局访问点</strong>。</p><p>单例模式只生成一个实例对象，减少了对系统资源的开销。当一个对象的产生需要比较多的资源，如读取配置文件、产生其他依赖对象时，可以产生一个“单例对象”，然后永久驻留内存中，从而极大的降低开销。</p><blockquote alt="warn"><p>单例模式有多种实现的方式，我们这里推荐重写__new__()的方法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单例模式实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySingleton</span>:</span><br><span class="line">    __obj = <span class="literal">None</span></span><br><span class="line">    __init_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.__obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__obj = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> MySingleton.__init_flag:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;初始化第一个对象...&quot;</span>)</span><br><span class="line">            self.name = name</span><br><span class="line">            MySingleton.__init_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = MySingleton(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = MySingleton(<span class="string">&quot;bb&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">初始化第一个对象...</span></span><br><span class="line"><span class="string">&lt;__main__.MySingleton object at 0x000001E70B8E2FA0&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.MySingleton object at 0x000001E70B8E2FA0&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="工厂和单例模式结合起来"><a href="#工厂和单例模式结合起来" class="headerlink" title="工厂和单例模式结合起来"></a>工厂和单例模式结合起来</h4><p>设计模式称之为“模式”，就是一些固定的套路。我们很容易用到其他场景上，比如前面讲的工厂模式，我们需要将工厂类定义成“单例”，只需要简单的套用即可实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工厂和单例模式结合</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarFactory</span>:</span><br><span class="line">    __obj = <span class="literal">None</span></span><br><span class="line">    __init_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.__obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__obj = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> CarFactory.__init_flag:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;初始化第一个对象...&quot;</span>)</span><br><span class="line">            CarFactory.__init_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createCar</span>(<span class="params">self, brand</span>):</span><br><span class="line">        <span class="keyword">if</span> brand == <span class="string">&quot;宝马&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> BMW()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">&quot;奔驰&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> Benz()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">&quot;比亚迪&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> BYD()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未知品牌，无法创建&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Benz</span>: </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>: </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BYD</span>: </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">factory = CarFactory()</span><br><span class="line">c1 = factory.createCar(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">c2 = factory.createCar(<span class="string">&quot;宝马&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line">factory2 = CarFactory()</span><br><span class="line"><span class="built_in">print</span>(factory)</span><br><span class="line"><span class="built_in">print</span>(factory2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">初始化第一个对象...</span></span><br><span class="line"><span class="string">&lt;__main__.Benz object at 0x0000018C683F3F70&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.BMW object at 0x0000018C683F3F10&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.CarFactory object at 0x0000018C683F3FA0&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.CarFactory object at 0x0000018C683F3FA0&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Python开发环境搭建"><a href="#Python开发环境搭建" class="headerlink" title="Python开发环境搭建"></a>Python开发环境搭建</h2><h3 id="PyCharm搭建Python环境-非虚拟环境"><a href="#PyCharm搭建Python环境-非虚拟环境" class="headerlink" title="PyCharm搭建Python环境-非虚拟环境"></a>PyCharm搭建Python环境-非虚拟环境</h3><h3 id="VSCode搭建Python环境-非虚拟环境"><a href="#VSCode搭建Python环境-非虚拟环境" class="headerlink" title="VSCode搭建Python环境-非虚拟环境"></a>VSCode搭建Python环境-非虚拟环境</h3><h3 id="虚拟环境使用"><a href="#虚拟环境使用" class="headerlink" title="虚拟环境使用"></a>虚拟环境使用</h3><h3 id="PyCharm使用虚拟环境"><a href="#PyCharm使用虚拟环境" class="headerlink" title="PyCharm使用虚拟环境"></a>PyCharm使用虚拟环境</h3><h3 id="VSCode使用虚拟环境"><a href="#VSCode使用虚拟环境" class="headerlink" title="VSCode使用虚拟环境"></a>VSCode使用虚拟环境</h3><h3 id="虚拟环境管理工具"><a href="#虚拟环境管理工具" class="headerlink" title="虚拟环境管理工具"></a>虚拟环境管理工具</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据集群软件启动脚本</title>
      <link href="/archives/59cb3162.html"/>
      <url>/archives/59cb3162.html</url>
      
        <content type="html"><![CDATA[<h1 id="大数据集群软件启动脚本"><a href="#大数据集群软件启动脚本" class="headerlink" title="大数据集群软件启动脚本"></a>大数据集群软件启动脚本</h1><p>大家也可以访问我的gitee仓库直接克隆源码<a href="https://gitee.com/huaiyuechusan/big-data-software-startup-script">大数据软件启动脚本</a></p><p>包括：hadoop，zookeeper，kafka，flume，hive，maxwell，dolphinscheduler，superset，集群一键启动，集群文件分发，集群执行命令，集群同步时间脚本</p><h2 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hadoop集群启动</span></span><br><span class="line"></span><br><span class="line">if [ $# -eq 0 ]; then</span><br><span class="line">echo &quot;Usage $0 start|stop&quot;</span><br><span class="line">fi</span><br><span class="line">case $1 in</span><br><span class="line"></span><br><span class="line">    &quot;start&quot;)&#123;</span><br><span class="line">        echo &quot; -------- 启动 集群 -------&quot;</span><br><span class="line">        echo &quot; -------- 启动 hadoop集群 -------&quot;</span><br><span class="line">        ssh niit01 &quot;source /etc/profile;start-dfs.sh&quot;</span><br><span class="line">        ssh niit03 &quot;source /etc/profile;start-yarn.sh&quot;</span><br><span class="line">        ssh niit01 &quot;source /etc/profile;mr-jobhistory-daemon.sh start historyserver&quot;</span><br><span class="line">    &#125;;;</span><br><span class="line">    &quot;stop&quot;)&#123;</span><br><span class="line">        echo &quot; -------- 停止 集群 -------&quot;</span><br><span class="line">        echo &quot; -------- 停止 hadoop集群 -------&quot;</span><br><span class="line">        ssh niit01 &quot;source /etc/profile;mr-jobhistory-daemon.sh stop historyserver&quot;</span><br><span class="line">        ssh niit03 &quot;source /etc/profile;stop-yarn.sh&quot;</span><br><span class="line">        ssh niit01 &quot;source /etc/profile;stop-dfs.sh&quot;</span><br><span class="line">    &#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zookeeper集群启动脚本</span></span><br><span class="line"></span><br><span class="line">echo &quot;Usage: $0 start|stop|status (zookeeper)&quot;</span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">        echo ---------- zookeeper $i 启动 ------------</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/zookeeper/bin/zkServer.sh start&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">        echo ---------- zookeeper $i 停止 ------------</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/zookeeper/bin/zkServer.sh stop&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;status&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">        echo ---------- zookeeper $i 状态 ------------</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/zookeeper/bin/zkServer.sh status&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kafka集群启动</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">    echo &quot; --------启动 $i Kafka-------&quot;</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/kafka/bin/kafka-server-start.sh -daemon /opt/onlineedu/kafka/config/server.properties&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line"></span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------停止 $i Kafka-------&quot;</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/kafka/bin/kafka-server-stop.sh stop&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="flume"><a href="#flume" class="headerlink" title="flume"></a>flume</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">flume采集通道1启动脚本</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------启动 $i 采集flume-------&quot;</span><br><span class="line">        ssh $i &quot;nohup /opt/onlineedu/flume/bin/flume-ng agent --conf-file /opt/onlineedu/flume/job/file-flume-kafka.conf --name a1 -Dflume.root.logger=INFO,LOGFILE &gt;/opt/onlineedu/flume/log1.txt 2&gt;&amp;1  &amp;&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------停止 $i 采集flume-------&quot;</span><br><span class="line">        ssh $i &quot;ps -ef | grep file-flume-kafka | grep -v grep |awk  &#x27;&#123;print \$2&#125;&#x27; | xargs -n1 kill -9 &quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">flume采集通道2启动脚本</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">    for i in niit03</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------启动 $i 消费flume-------&quot;</span><br><span class="line">        ssh $i &quot;nohup /opt/onlineedu/flume/bin/flume-ng agent --conf-file /opt/onlineedu/flume/job/kafka-flume-hdfs.conf --name a1 -Dflume.root.logger=INFO,LOGFILE &gt;/opt/onlineedu/flume/log2.txt 2&gt;&amp;1  &amp;&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">    for i in niit03</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------停止 $i 消费flume-------&quot;</span><br><span class="line">        ssh $i &quot;ps -ef | grep kafka-flume-hdfs | grep -v grep | awk &#x27;&#123;print \$2&#125;&#x27; | xargs -n1 kill -9 &quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">flume采集通道3启动脚本</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">        echo &quot; --------启动 niit03 业务数据flume-------&quot;</span><br><span class="line">        ssh niit03 &quot;nohup /opt/onlineedu/flume/bin/flume-ng agent -n a1 -c /opt/onlineedu/flume/conf -f /opt/onlineedu/flume/job/kafka_to_hdfs_db.conf &gt;/opt/onlineedu/flume/log3.txt &gt;/dev/null 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line"></span><br><span class="line">        echo &quot; --------停止 niit03 业务数据flume-------&quot;</span><br><span class="line">        ssh niit03 &quot;ps -ef | grep kafka_to_hdfs_db | grep -v grep |awk &#x27;&#123;print \$2&#125;&#x27; | xargs -n1 kill&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hive"><a href="#hive" class="headerlink" title="hive"></a>hive</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hive启动</span></span><br><span class="line"></span><br><span class="line">HIVE_LOG_DIR=$HIVE_HOME/logs</span><br><span class="line">mkdir -p $HIVE_LOG_DIR</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查进程是否运行正常，参数1为进程名，参数2为进程端口</span></span><br><span class="line"></span><br><span class="line">function check_process()</span><br><span class="line">&#123;</span><br><span class="line">  pid=$(ps -ef 2&gt;/dev/null | grep -v grep | grep -i $1 | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">  ppid=$(netstat -nltp 2&gt;/dev/null | grep $2 | awk &#x27;&#123;print $7&#125;&#x27; | cut -d &#x27;/&#x27; -f 1)</span><br><span class="line">  echo $pid</span><br><span class="line">  [[ &quot;$pid&quot; =~ &quot;$ppid&quot; ]] &amp;&amp; [ &quot;$ppid&quot; ] &amp;&amp; return 0 || return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_start()</span><br><span class="line">&#123;</span><br><span class="line">  metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">  cmd=&quot;nohup hive --service metastore &gt;$HIVE_LOG_DIR/metastore.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">  cmd=$cmd&quot; sleep 4; hdfs dfsadmin -safemode wait &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">  [ -z &quot;$metapid&quot; ] &amp;&amp; eval $cmd || echo &quot;Metastroe服务已启动&quot;</span><br><span class="line">  server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">  cmd=&quot;nohup hive --service hiveserver2 &gt;$HIVE_LOG_DIR/hiveServer2.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">  [ -z &quot;$server2pid&quot; ] &amp;&amp; eval $cmd || echo &quot;HiveServer2服务已启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_stop()</span><br><span class="line">&#123;</span><br><span class="line">  metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">  [ &quot;$metapid&quot; ] &amp;&amp; kill $metapid || echo &quot;Metastore服务未启动&quot;</span><br><span class="line">  server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">  [ &quot;$server2pid&quot; ] &amp;&amp; kill $server2pid || echo &quot;HiveServer2服务未启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  hive_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  hive_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  hive_stop</span><br><span class="line">  sleep 2</span><br><span class="line">  hive_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;status&quot;)</span><br><span class="line">  check_process HiveMetastore 9083 &gt;/dev/null &amp;&amp; echo &quot;Metastore服务运行正常&quot; || echo &quot;Metastore服务运行异常&quot;</span><br><span class="line">  check_process HiveServer2 10000 &gt;/dev/null &amp;&amp; echo &quot;HiveServer2服务运行正常&quot; || echo &quot;HiveServer2服务运行异常&quot;</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  echo Invalid Args!</span><br><span class="line">  echo &#x27;Usage: &#x27;$(basename $0)&#x27; start|stop|restart|status (hiveserver2 &amp; metastore)&#x27;</span><br><span class="line">  ;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="maxwell"><a href="#maxwell" class="headerlink" title="maxwell"></a>maxwell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hive启动</span></span><br><span class="line"></span><br><span class="line">HIVE_LOG_DIR=$HIVE_HOME/logs</span><br><span class="line">mkdir -p $HIVE_LOG_DIR</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查进程是否运行正常，参数1为进程名，参数2为进程端口</span></span><br><span class="line"></span><br><span class="line">function check_process()</span><br><span class="line">&#123;</span><br><span class="line">  pid=$(ps -ef 2&gt;/dev/null | grep -v grep | grep -i $1 | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">  ppid=$(netstat -nltp 2&gt;/dev/null | grep $2 | awk &#x27;&#123;print $7&#125;&#x27; | cut -d &#x27;/&#x27; -f 1)</span><br><span class="line">  echo $pid</span><br><span class="line">  [[ &quot;$pid&quot; =~ &quot;$ppid&quot; ]] &amp;&amp; [ &quot;$ppid&quot; ] &amp;&amp; return 0 || return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_start()</span><br><span class="line">&#123;</span><br><span class="line">  metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">  cmd=&quot;nohup hive --service metastore &gt;$HIVE_LOG_DIR/metastore.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">  cmd=$cmd&quot; sleep 4; hdfs dfsadmin -safemode wait &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">  [ -z &quot;$metapid&quot; ] &amp;&amp; eval $cmd || echo &quot;Metastroe服务已启动&quot;</span><br><span class="line">  server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">  cmd=&quot;nohup hive --service hiveserver2 &gt;$HIVE_LOG_DIR/hiveServer2.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">  [ -z &quot;$server2pid&quot; ] &amp;&amp; eval $cmd || echo &quot;HiveServer2服务已启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_stop()</span><br><span class="line">&#123;</span><br><span class="line">  metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">  [ &quot;$metapid&quot; ] &amp;&amp; kill $metapid || echo &quot;Metastore服务未启动&quot;</span><br><span class="line">  server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">  [ &quot;$server2pid&quot; ] &amp;&amp; kill $server2pid || echo &quot;HiveServer2服务未启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  hive_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  hive_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  hive_stop</span><br><span class="line">  sleep 2</span><br><span class="line">  hive_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;status&quot;)</span><br><span class="line">  check_process HiveMetastore 9083 &gt;/dev/null &amp;&amp; echo &quot;Metastore服务运行正常&quot; || echo &quot;Metastore服务运行异常&quot;</span><br><span class="line">  check_process HiveServer2 10000 &gt;/dev/null &amp;&amp; echo &quot;HiveServer2服务运行正常&quot; || echo &quot;HiveServer2服务运行异常&quot;</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  echo Invalid Args!</span><br><span class="line">  echo &#x27;Usage: &#x27;$(basename $0)&#x27; start|stop|restart|status (hiveserver2 &amp; metastore)&#x27;</span><br><span class="line">  ;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="dolphinscheduler"><a href="#dolphinscheduler" class="headerlink" title="dolphinscheduler"></a>dolphinscheduler</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dolphinscheduler集群启动</span></span><br><span class="line"></span><br><span class="line">function node_start()</span><br><span class="line">&#123;</span><br><span class="line">  /opt/onlineedu/dolphinscheduler/bin/start-all.sh  </span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function node_stop()</span><br><span class="line">&#123;</span><br><span class="line">  /opt/onlineedu/dolphinscheduler/bin/stop-all.sh</span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  sleep 10</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  </span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dolphinscheduler单机版启动</span></span><br><span class="line"></span><br><span class="line">function node_start()</span><br><span class="line">&#123;</span><br><span class="line">  /opt/onlineedu/dolphinscheduler/bin/dolphinscheduler-daemon.sh start standalone-server   </span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function node_stop()</span><br><span class="line">&#123;</span><br><span class="line">  /opt/onlineedu/dolphinscheduler/bin/dolphinscheduler-daemon.sh stop standalone-server</span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  sleep 10</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  </span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="superset"><a href="#superset" class="headerlink" title="superset"></a>superset</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">superset可视化启动</span></span><br><span class="line"></span><br><span class="line">superset_status()&#123;</span><br><span class="line">    result=`ps -ef | awk &#x27;/gunicorn/ &amp;&amp; !/awk/&#123;print $2&#125;&#x27; | wc -l`</span><br><span class="line">    if [[ $result -eq 0 ]]; then</span><br><span class="line">        return 0</span><br><span class="line">    else</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">superset_start()&#123;</span><br><span class="line">        source ~/.bashrc</span><br><span class="line">        superset_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        if [[ $? -eq 0 ]]; then</span><br><span class="line">            conda activate superset ; gunicorn --workers 5 --timeout 120 --bind niit01:8787 --daemon &#x27;superset.app:create_app()&#x27;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;superset正在运行&quot;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">superset_stop()&#123;</span><br><span class="line">    superset_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    if [[ $? -eq 0 ]]; then</span><br><span class="line">        echo &quot;superset未在运行&quot;</span><br><span class="line">    else</span><br><span class="line">        ps -ef | awk &#x27;/gunicorn/ &amp;&amp; !/awk/&#123;print $2&#125;&#x27; | xargs kill -9</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">    start )</span><br><span class="line">        echo &quot;启动Superset&quot;</span><br><span class="line">        superset_start</span><br><span class="line">    ;;</span><br><span class="line">    stop )</span><br><span class="line">        echo &quot;停止Superset&quot;</span><br><span class="line">        superset_stop</span><br><span class="line">    ;;</span><br><span class="line">    restart )</span><br><span class="line">        echo &quot;重启Superset&quot;</span><br><span class="line">        superset_stop</span><br><span class="line">        superset_start</span><br><span class="line">    ;;</span><br><span class="line">    status )</span><br><span class="line">        superset_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        if [[ $? -eq 0 ]]; then</span><br><span class="line">            echo &quot;superset未在运行&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;superset正在运行&quot;</span><br><span class="line">        fi</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="集群一键启动"><a href="#集群一键启动" class="headerlink" title="集群一键启动"></a>集群一键启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有集群所有软件启动脚本</span></span><br><span class="line"></span><br><span class="line">function node_start()</span><br><span class="line">&#123;</span><br><span class="line">  /home/niit/bin/xCluster.sh start</span><br><span class="line">  sleep 15</span><br><span class="line">  /home/niit/bin/zk.sh start</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/kf.sh start</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/hv.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/mxw.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f1.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f2.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f3.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/dolphinscheduler-standalone.sh stop </span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/superset.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function node_stop()</span><br><span class="line">&#123;</span><br><span class="line">  /home/niit/bin/mxw.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f1.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f2.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f3.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/kf.sh stop</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/kf.sh stop</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/hv.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/xCluster.sh stop</span><br><span class="line">  sleep 15</span><br><span class="line">  /home/niit/bin/zk.sh stop</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/superset.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/dolphinscheduler-standalone.sh stop </span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  sleep 10</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  </span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="集群文件分发"><a href="#集群文件分发" class="headerlink" title="集群文件分发"></a>集群文件分发</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群分发文件脚本，普通用户权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 判断参数个数</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">    echo Not Enough Arguement!</span><br><span class="line">    echo Usage: xSync.sh path1 path2..</span><br><span class="line">    exit;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 遍历集群所有机器</span></span><br><span class="line">for host in niit01 niit02 niit03</span><br><span class="line">do</span><br><span class="line">echo ==================== $host ====================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3. 遍历所有目录，挨个发送</span></span><br><span class="line"></span><br><span class="line">    for file in $@</span><br><span class="line">    do</span><br><span class="line">        #4 判断文件是否存在</span><br><span class="line">        if [ -e $file ]</span><br><span class="line">        then</span><br><span class="line">            #5. 获取父目录</span><br><span class="line">            pdir=$(cd -P $(dirname $file); pwd)</span><br><span class="line"></span><br><span class="line">            #6. 获取当前文件的名称</span><br><span class="line">            fname=$(basename $file)</span><br><span class="line">            ssh $host &quot;mkdir -p $pdir&quot;</span><br><span class="line">            rsync -av $pdir/$fname $host:$pdir</span><br><span class="line">        else</span><br><span class="line">            echo $file does not exists!</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群分发文件脚本，root权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 判断参数个数</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">    echo Not Enough Arguement!</span><br><span class="line">    echo Usage: xSync.sh path1 path2 ...</span><br><span class="line">    exit;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 遍历集群所有机器</span></span><br><span class="line">for host in niit01 niit02 niit03</span><br><span class="line">do</span><br><span class="line">echo ==================== $host ====================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3. 遍历所有目录，挨个发送</span></span><br><span class="line"></span><br><span class="line">    for file in $@</span><br><span class="line">    do</span><br><span class="line">        #4 判断文件是否存在</span><br><span class="line">        if [ -e $file ]</span><br><span class="line">        then</span><br><span class="line">            #5. 获取父目录</span><br><span class="line">            pdir=$(cd -P $(dirname $file); pwd)</span><br><span class="line"></span><br><span class="line">            #6. 获取当前文件的名称</span><br><span class="line">            fname=$(basename $file)</span><br><span class="line">            sudo ssh $host &quot;mkdir -p $pdir&quot;</span><br><span class="line">            sudo rsync -av $pdir/$fname $host:$pdir</span><br><span class="line">        else</span><br><span class="line">            echo $file does not exists!</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="集群执行命令"><a href="#集群执行命令" class="headerlink" title="集群执行命令"></a>集群执行命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群执行命令脚本</span></span><br><span class="line"></span><br><span class="line">if (( $# == 0 ));then</span><br><span class="line">    echo &quot;Usage xRun.sh \&quot;&lt;COMMAND&gt;\&quot;&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line">for node in niit01 niit02 niit03</span><br><span class="line">do</span><br><span class="line">    echo &quot;======== $node ========&quot;</span><br><span class="line">    echo &quot;ssh $node $1&quot;</span><br><span class="line">    ssh $node &quot;source /etc/profile;$1&quot;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="集群同步时间"><a href="#集群同步时间" class="headerlink" title="集群同步时间"></a>集群同步时间</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群时间同步脚本，需要安装chrony到集群中</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查参数是否为空</span></span><br><span class="line">if [ -z &quot;$1&quot; ]; then</span><br><span class="line">        echo &quot;Usage:  `basename $0` yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用<span class="built_in">date</span>命令将时间字符串转换为日期和时间</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果转换失败，则说明时间字符串不合法</span></span><br><span class="line">if ! date -d &quot;$*&quot; &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">        echo &quot;Wrong argument for $*&quot;</span><br><span class="line">        echo &quot;Usage:  `basename $0` yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SYNC TIME START &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span><br><span class="line">sum=-1</span><br><span class="line"></span><br><span class="line">while [ $sum -ne 0 ]; do</span><br><span class="line">  echo set time for niit01 to $1 &#x27;&gt;&gt;&gt;&#x27;</span><br><span class="line">  ssh niit01 &quot;(sudo timedatectl set-ntp false &amp;&amp; sudo date -s \&quot;$*\&quot; &amp;&amp; sudo timedatectl set-ntp true)&quot;</span><br><span class="line">  ok1=$?</span><br><span class="line">  echo sync time from niie02 to niit01 &#x27;&gt;&gt;&gt;&#x27;</span><br><span class="line">  ssh niit02 &quot;(sudo timedatectl set-ntp false &amp;&amp; sudo timedatectl set-ntp true)&quot;</span><br><span class="line">  ok2=$?</span><br><span class="line">  echo sync time from niit03 to niit01 &#x27;&gt;&gt;&gt;&#x27;</span><br><span class="line">  ssh niit03 &quot;(sudo timedatectl set-ntp false &amp;&amp; sudo timedatectl set-ntp true)&quot;</span><br><span class="line">  ok3=$?</span><br><span class="line">  sum=`expr $ok1 + $ok2 + $ok3`</span><br><span class="line"></span><br><span class="line">  if [ $sum -eq 0 ]; then</span><br><span class="line">    echo &quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; SYNC TIME END &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span><br><span class="line">    sleep 5</span><br><span class="line">    xRun.sh date</span><br><span class="line">  else</span><br><span class="line">    echo &quot;sync time failed, will try 10 senconds later&quot;</span><br><span class="line">    sleep 10</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云函数调用request请求</title>
      <link href="/archives/6d169344.html"/>
      <url>/archives/6d169344.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="云函数调用request请求"><a href="#云函数调用request请求" class="headerlink" title="云函数调用request请求"></a>云函数调用request请求</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>上一篇<a href="https://huaiyuechusan.github.io/archives/b5700173.html">微信小程序定时订阅消息问题</a>文章里，选择了在本地使用setInterval()方法定时更新天气信息，但是要求用户打开小程序才能定时更新天气。做不到在发送消息之前查询当前的天气情况。所以出于这个问题，我选择了以下解决办法。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在云函数里定义一个定时查询天气的函数，用户的位置信息提前存储在数据库里，查询天气时直接从数据库里查询位置信息（因为每次获取用户位置会要求用户授权，比较影响体验，所有就把上传用户授权位置信息提前存储在数据库）。</p><p>这里使用到了如何在云函数里调用request请求，微信开发官网文档没有找到关于这个的讲解。所以在这里简单记录一下，希望能对大家开发用帮助。下面的代码为在<strong>云函数里调用request请求例子</strong></p><h3 id="GET请求例子"><a href="#GET请求例子" class="headerlink" title="GET请求例子"></a>GET请求例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用云函数的request</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用当前云环境</span></span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;)</span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//调用request</span></span><br><span class="line">    <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,        <span class="comment">//请求地址</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;      <span class="comment">//请求头</span></span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,   <span class="comment">//GET或POST请求</span></span><br><span class="line">      <span class="attr">json</span>: <span class="literal">true</span>,      <span class="comment">//返回的body结果为json格式,默认是false,如果你要解析返回的数据，选择ture</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error, response, body</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;HTTP - GET&quot;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(body)</span><br><span class="line">      <span class="keyword">if</span> (response.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; !error) &#123;</span><br><span class="line">        <span class="comment">//发送请求成功,写你自己的逻辑</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POST请求例子"><a href="#POST请求例子" class="headerlink" title="POST请求例子"></a>POST请求例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用云函数的request</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用当前云环境</span></span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;)</span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//调用request</span></span><br><span class="line">    <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,        <span class="comment">//请求地址</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;      <span class="comment">//请求头</span></span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,   <span class="comment">//GET或POST请求</span></span><br><span class="line">      <span class="attr">json</span>: <span class="literal">true</span>,      <span class="comment">//返回的body结果为json格式</span></span><br><span class="line">      <span class="attr">body</span>: <span class="string">&quot;&quot;</span>,        <span class="comment">//POST请求，要加上请求体</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error, response, body</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;HTTP - POST&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(body)</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; !error) &#123;</span><br><span class="line">            <span class="comment">//发送请求成功,写你自己的逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时查询天气代码"><a href="#定时查询天气代码" class="headerlink" title="定时查询天气代码"></a>定时查询天气代码</h3><p>index.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用云函数的request</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;) <span class="comment">// 使用当前云环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = cloud.<span class="title function_">database</span>()</span><br><span class="line"><span class="keyword">const</span> tableName = <span class="string">&#x27;userInfo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从云开发数据库中查询等待更新天气的用户列表</span></span><br><span class="line">        <span class="keyword">const</span> weather = <span class="keyword">await</span> db</span><br><span class="line">            .<span class="title function_">collection</span>(tableName)</span><br><span class="line">            .<span class="title function_">get</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;location:&quot;</span>, weather.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> msgData <span class="keyword">of</span> weather.<span class="property">data</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> location = msgData.<span class="property">location</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;location:&quot;</span>, location)</span><br><span class="line">                <span class="comment">//调用天气API查询天气</span></span><br><span class="line">                <span class="title function_">request</span>(&#123;</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">&#x27;https://jisutqybmf.market.alicloudapi.com/weather/query&#x27;</span>+ <span class="string">&quot;?location=&quot;</span>+ location,</span><br><span class="line">                    <span class="attr">headers</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;APPCODE 你自己的APPCODE&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">                    <span class="attr">json</span>: <span class="literal">true</span>,  </span><br><span class="line">                &#125;,<span class="keyword">function</span> (<span class="params">error,response,body</span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;HTTP - GET&quot;</span>)</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">info</span>(body)</span><br><span class="line">                        <span class="keyword">if</span> (response.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; !error &amp;&amp; body.<span class="property">status</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">var</span> result = body.<span class="property">result</span>;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">info</span>(result)</span><br><span class="line">                            <span class="keyword">var</span> weatherMessage = <span class="string">&quot;当前天气&quot;</span> + result.<span class="property">weather</span> + <span class="string">&quot;气温&quot;</span> + result.<span class="property">temp</span> + <span class="string">&quot;℃&quot;</span> + <span class="string">&quot;详情点击查看&quot;</span></span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;天气为：&quot;</span>, weatherMessage)</span><br><span class="line">                            <span class="comment">//将天气信息添加数据库</span></span><br><span class="line">                            db.<span class="title function_">collection</span>(tableName)</span><br><span class="line">                                .<span class="title function_">where</span>(&#123;</span><br><span class="line">                                    <span class="attr">openid</span>: msgData.<span class="property">openid</span></span><br><span class="line">                                &#125;)</span><br><span class="line">                                .<span class="title function_">update</span>(&#123;</span><br><span class="line">                                    <span class="attr">data</span>: &#123;</span><br><span class="line">                                        <span class="attr">weatherMessage</span>: weatherMessage,</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;)</span><br><span class="line">                                .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时添加天气信息到数据库成功&quot;</span>, res);</span><br><span class="line">                                    <span class="title function_">resolve</span>(body)</span><br><span class="line">                                &#125;)</span><br><span class="line">                                .<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时添加天气信息到数据库失败&quot;</span>, res);</span><br><span class="line">                                    <span class="title function_">reject</span>()</span><br><span class="line">                                &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>config.json文件里边定义触发器（具体用法参考我的上一篇文章<a href="https://huaiyuechusan.github.io/archives/b5700173.html">微信小程序定时订阅消息问题</a>或<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/triggers.html">官方文档</a>）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;openapi&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;triggers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myTimer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;timer&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0 55 7 * * * *&quot;</span>  <span class="comment">//每天早起7点55执行</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>参考文章</p><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/000cc8398b012864f398db33556413">云开发http请求的两种写法 | 微信开放社区 (qq.com)</a></p><p><a href="https://www.cnblogs.com/Ocean123123/p/12737655.html">request-promise post请求微信小程序云函数调用http - Ocean123123 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序定时订阅消息问题</title>
      <link href="/archives/b5700173.html"/>
      <url>/archives/b5700173.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="微信小程序定时订阅消息问题"><a href="#微信小程序定时订阅消息问题" class="headerlink" title="微信小程序定时订阅消息问题"></a>微信小程序定时订阅消息问题</h1><h2 id="订阅消息一次授权多次接收"><a href="#订阅消息一次授权多次接收" class="headerlink" title="订阅消息一次授权多次接收"></a>订阅消息一次授权多次接收</h2><p><strong>个人开发只能订阅一次性消息，一次订阅授权只能发送一次信息，如何解决？</strong></p><h3 id="明确几个概念"><a href="#明确几个概念" class="headerlink" title="明确几个概念"></a>明确几个概念</h3><ol><li>订阅授权次数跟发送消息次数的关系<ul><li>用户授权订阅一次，才能发送一次消息。发送一次消息，消耗掉一次授权允许次数。</li><li>授权次数可以累加。用户勾选总是保持以上选择，下次订阅消息不会再弹窗。</li></ul></li><li>授权操作必须用户点击才能授权。即使点击总保持以上选择，还是需要用户去点击才能授权。所以函数调用授权操作或页面初始化加载授权操作都是不行的，必须由用户点击才能授权。</li></ol><h3 id="思考想法"><a href="#思考想法" class="headerlink" title="思考想法"></a>思考想法</h3><ol><li>每个订阅api一次最多授权3条模板，选取三个相近模板，在授权操作时同时授权三个模板。</li><li>点击率频繁的按钮或者可能点击的地方绑定授权操作，空白地方大面积透明按钮绑定授权操作。（此方案建立在用户第一次授权时点击了总保持以上选择，否则频繁弹窗影响用户体验）</li><li>设置每日签到或者消息订阅提示按钮，在按钮的处绑定授权。</li></ol><h3 id="实际解决"><a href="#实际解决" class="headerlink" title="实际解决"></a>实际解决</h3><p>由于我的项目单纯采用云函数和云数据库开发，没有后端。所以以下解决方案针对云开发。</p><ol><li><p>一号方案确定是相近的模板不容易找到，最多只能订阅三次，所以没有采用。</p></li><li><p>二号方案：点击跳转事件绑定授权（用户第一次授权完选择总保持以上选择后，以后授权用户是无感的）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;view_3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/run/run&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;shouquan&quot;</span>&gt;</span>  <span class="comment">&lt;!--绑定授权事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;item-image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/跑步.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;image-jiantou&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/duo.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>三号方案：进入小程序首页加载订阅消息弹窗，引导用户授权</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onShowModal</span>(<span class="params"></span>) &#123;</span><br><span class="line">       wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">           <span class="attr">title</span>: <span class="string">&#x27;订阅消息确认&#x27;</span>,</span><br><span class="line">           <span class="attr">content</span>: <span class="string">&#x27;避免错过重要信息，点击确认按钮进行订阅消息(务必勾选总保持以上选择)&#x27;</span>,</span><br><span class="line">           <span class="attr">cancelText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">           <span class="attr">cancelColor</span>: <span class="string">&quot;#00f&quot;</span>,</span><br><span class="line">           <span class="attr">confirmText</span>: <span class="string">&quot;确认&quot;</span>,</span><br><span class="line">           <span class="attr">confirmColor</span>: <span class="string">&quot;#f00&quot;</span>,</span><br><span class="line">           <span class="attr">complete</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (res.<span class="property">cancel</span>) &#123;</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="title function_">onShowToast</span>();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test1:&quot;</span>)</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="title function_">shouquan</span>(); <span class="comment">//调用订阅授权</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310292352365.png" alt="image-20231029225841283"></p><p>参考文章：</p><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/000686f1808000a566fcccefb56813">关于一次性订阅消息requestSubscribeMessage的讨论 | 微信开放社区 (qq.com)</a></p><p><a href="https://blog.csdn.net/weixin_45695727/article/details/128132747">小程序 订阅消息 一次授权多次接收_小程序 一次性订阅消息 多次推送-CSDN博客</a></p></li></ol><h2 id="定时发送动态的订阅消息"><a href="#定时发送动态的订阅消息" class="headerlink" title="定时发送动态的订阅消息"></a>定时发送动态的订阅消息</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>想动态的获取天气信息，然后定时发送给用户。但是采用云函数开发，云函数不能调取本地的缓存数据，无法使用本地的setTimeout(延迟多少时间执行一次)和setInterval(每隔一定时间执行一次)方法。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p>首先使用云函数的定时触发器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// triggers 字段是触发器数组，目前仅支持一个触发器，即数组只能填写一个，不可添加多个</span></span><br><span class="line">  <span class="string">&quot;triggers&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// name: 触发器的名字，规则见下方说明</span></span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;myTrigger&quot;</span>,</span><br><span class="line">      <span class="comment">// type: 触发器类型，目前仅支持 timer (即 定时触发器)</span></span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;timer&quot;</span>,</span><br><span class="line">      <span class="comment">// config: 触发器配置，在定时触发器下，config 格式为 cron 表达式，规则见下方说明</span></span><br><span class="line">      <span class="string">&quot;config&quot;</span>: <span class="string">&quot;0 0 2 1 * * *&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310292352367.png" alt="image-20231029232521079"><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310292352368.png" alt="image-20231029232552257"></p><p>更多用法详见官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/triggers.html">开发指引 / 基础能力 / 云函数 / 定时触发器 (qq.com)</a></p></li><li><p>但是云函数需要的天气信息参数是存在本地的（由于查询天气需要经纬度信息，云开发似乎没有类似wx.getLocation的方法，所以只好查询天气方法写在了本地）。解决办法是在本地定时执行查询天气信息的函数然后更新到数据库里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取用户经纬度</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserLocation</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// var that = this;</span></span><br><span class="line">  wx.<span class="title function_">getLocation</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;wgs84&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">      <span class="title function_">queryWeather</span>(res);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询天气信息</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryWeather</span>(<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="comment">// var that = this;</span></span><br><span class="line">  wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://jisuqgtq.market.alicloudapi.com/weather/query&#x27;</span>, <span class="comment">//使用的是阿里提供的天气API接口</span></span><br><span class="line">    <span class="attr">header</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;APPCODE 自己的APPCODE&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;location&#x27;</span>: res.<span class="property">latitude</span> + <span class="string">&quot;,&quot;</span> + res.<span class="property">longitude</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">resRequest</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;HTTP - GET&quot;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(resRequest)</span><br><span class="line">      <span class="keyword">if</span> (resRequest.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; resRequest.<span class="property">data</span>.<span class="property">status</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = resRequest.<span class="property">data</span>.<span class="property">result</span>;</span><br><span class="line">        wx.<span class="title function_">setStorageSync</span>(<span class="string">&quot;weather&quot;</span>, result);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(result)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将天气信息添加入数据库</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addWeather</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//以用户openid为关键词，将查询的数据插入对应的天气信息</span></span><br><span class="line">  wx.<span class="property">cloud</span></span><br><span class="line">    .<span class="title function_">callFunction</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;getopenid&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> openid = res.<span class="property">result</span>.<span class="property">openid</span>;</span><br><span class="line">      <span class="title function_">getUserLocation</span>();</span><br><span class="line">      <span class="keyword">var</span> weather = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;weather&#x27;</span>)</span><br><span class="line">      <span class="comment">//阿里的天气信息API包含的信息很多，这里由于订阅消息的模板有字数限制，thing参数只能在20字符以内</span></span><br><span class="line">      <span class="keyword">let</span> weatherMessage = <span class="string">&quot;天气&quot;</span> + weather.<span class="property">weather</span> + <span class="string">&quot;当前气温&quot;</span> + weather.<span class="property">temp</span> + <span class="string">&quot;℃&quot;</span> + <span class="string">&quot;详情点击查看&quot;</span></span><br><span class="line">      <span class="comment">//将天气信息添加数据库</span></span><br><span class="line">      wx.<span class="property">cloud</span></span><br><span class="line">        .<span class="title function_">database</span>()</span><br><span class="line">        .<span class="title function_">collection</span>(<span class="string">&quot;userInfo&quot;</span>)</span><br><span class="line">        .<span class="title function_">where</span>(&#123;</span><br><span class="line">          <span class="attr">openid</span>: openid</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">update</span>(&#123;</span><br><span class="line">          <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">weatherMessage</span>: weatherMessage,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;添加天气信息成功&quot;</span>, res);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;添加天气信息失败&quot;</span>, res);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取openid失败&quot;</span>, res);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地定时任务用的是setInterval()每隔一段时间执行任务，将查询的天气结果存储在数据库里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">startInter</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">  that.<span class="property">data</span>.<span class="property">inter</span> = <span class="built_in">setInterval</span>(</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// TODO 你需要无限循环执行的任务</span></span><br><span class="line">      <span class="title function_">addWeather</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setInterval 每过一个小时执行一次天气信息添加入数据库任务&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">3600000</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>最后是发送消息的云函数部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换成消息模版所需要的格式，date 年/月/日 时:分:秒</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeStampToTime</span>(<span class="params">date</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">formatNumber</span> = n =&gt; &#123;</span><br><span class="line">      n = n.<span class="title function_">toString</span>()</span><br><span class="line">      <span class="keyword">return</span> n[<span class="number">1</span>] ? n : <span class="string">`0<span class="subst">$&#123;n&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> year = date.<span class="title function_">getFullYear</span>()</span><br><span class="line">    <span class="keyword">const</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span></span><br><span class="line">    <span class="keyword">const</span> day = date.<span class="title function_">getDate</span>()</span><br><span class="line">    <span class="keyword">const</span> hour = date.<span class="title function_">getHours</span>()</span><br><span class="line">    <span class="keyword">const</span> minute = date.<span class="title function_">getMinutes</span>()</span><br><span class="line">    <span class="keyword">const</span> second = date.<span class="title function_">getSeconds</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;[year, month, day].map(formatNumber).join(<span class="string">&#x27;/&#x27;</span>)&#125;</span> <span class="subst">$&#123;[hour, minute, second].map(formatNumber).join(<span class="string">&#x27;:&#x27;</span>)&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;) <span class="comment">// 使用当前云环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = cloud.<span class="title function_">database</span>()</span><br><span class="line"><span class="keyword">const</span> tableName = <span class="string">&#x27;userInfo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从云开发数据库中查询等待发送的消息用户列表</span></span><br><span class="line">        <span class="keyword">const</span> msgArr = <span class="keyword">await</span> db</span><br><span class="line">            .<span class="title function_">collection</span>(tableName)</span><br><span class="line">            .<span class="title function_">get</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;msgArr:&quot;</span>, msgArr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> msgData <span class="keyword">of</span> msgArr.<span class="property">data</span>) &#123;</span><br><span class="line">            <span class="comment">// 发送订阅消息</span></span><br><span class="line">            <span class="keyword">await</span> cloud.<span class="property">openapi</span>.<span class="property">subscribeMessage</span>.<span class="title function_">send</span>(&#123;</span><br><span class="line">                <span class="attr">touser</span>: msgData.<span class="property">openid</span>, <span class="comment">// 要发送用户的openid</span></span><br><span class="line">                <span class="attr">page</span>: <span class="string">&#x27;pages/index/index&#x27;</span>, <span class="comment">// 用户通过消息通知点击进入小程序的页面</span></span><br><span class="line">                <span class="attr">lang</span>: <span class="string">&#x27;zh_CN&#x27;</span>,</span><br><span class="line">                <span class="comment">// 订阅消息模板ID</span></span><br><span class="line">                <span class="attr">templateId</span>: <span class="string">&#x27;你的模板id&#x27;</span>,</span><br><span class="line">                <span class="comment">// 跳转小程序类型：developer为开发版；trial为体验版；formal为正式版；默认为正式版</span></span><br><span class="line">                <span class="comment">// 正式版删除此行</span></span><br><span class="line">                <span class="attr">miniprogramState</span>: <span class="string">&#x27;developer&#x27;</span>,</span><br><span class="line">                <span class="comment">// 要发送的数据，要和模板一致</span></span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">thing1</span>: &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">thing8</span>: &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">date3</span>: &#123; <span class="comment">//注意date参数的格式问题 必须是2023年10月1日，或：2023年10月1日 15:01</span></span><br><span class="line">                        <span class="attr">value</span>: <span class="title function_">timeStampToTime</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">thing2</span>: &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">thing7</span>: &#123;</span><br><span class="line">                        <span class="attr">value</span>: msgData.<span class="property">weatherMessage</span>  <span class="comment">//发送的天气信息</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订阅消息模板参数限制<a href="https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/mp-message-management/subscribe-message/sendMessage.html">官方文档：消息相关 / 订阅消息 / 发送订阅消息 (qq.com)</a></p><p><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310292352369.png" alt="image-20231029234642543"></p><p>参考文章</p><p><a href="https://blog.csdn.net/qq_45092075/article/details/128362426">微信小程序云开发定时推送订阅消息_微信小程序定时提醒功能-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/541427647">微信小程序开发：云函数定时推送消息 - 知乎 (zhihu.com)</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> bug解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研经验贴准备篇</title>
      <link href="/archives/2dbbb10f.html"/>
      <url>/archives/2dbbb10f.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="保研经验贴准备篇"><a href="#保研经验贴准备篇" class="headerlink" title="保研经验贴准备篇"></a>保研经验贴准备篇</h1><h2 id="经验分享"><a href="#经验分享" class="headerlink" title="经验分享"></a>经验分享</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>保研是一场持久战，也是一场信息战。它需要你大一到大三持续的付出才能收获。下面我介绍一下保研需要在大学三年需要准备的工作。</p><h4 id="明确学校的保研政策"><a href="#明确学校的保研政策" class="headerlink" title="明确学校的保研政策"></a>明确学校的保研政策</h4><p>要了解本专业的保研名额比例（大概在6%-7%左右），加分政策（见下图）。这些信息可以跟学长学姐了解，也可以去咨询辅导员，教务老师。关注学院教务，每年8月份左右会发今年最新的研究生推免报名和相关政策。</p><p>​                                <img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310261625220.png" alt="image-20231025173942212">    </p><h4 id="注重绩点，科研，竞赛"><a href="#注重绩点，科研，竞赛" class="headerlink" title="注重绩点，科研，竞赛"></a>注重绩点，科研，竞赛</h4><ol><li><p>注重期末考试，尤其是学分很多的学科，比如高数，专业课等。因为平均绩点是按照学分加权的，学分越多的学科，占的比重越大。所以在期末复习的时候学分多的课要多花一些经历。复习资料主要是老师发的复习总结资料或者往年题库，往年的期末卷子等。也可以去B站上找对应的课程视频。</p></li><li><p>最好大一大二就加入老师实验室，从事一些科研工作，为将来发表论文做准备。加入实验室也可以拓展自己的人际关系，结识一些志同道合的同学，一起参加比赛。保研面试的时候老师还是比较看重你的科研经历，如果能够发表论文更好。</p></li><li><p>多参加竞赛，可以参加的国家级学科竞赛项目以教育部高等教育教学评估中心最新发布的《全国高等学校本科教学基本状态数据库学数据填报指南》所界定的范围为准。一般竞赛获得省三以上才可以加分。国际级比赛赛前经学校批准参加的，其获奖加分在国家级相应等级分值加 0.05。具体政策还是要关注当年的加分政策文件，下图是往届的加分政策。</p><p><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310261625124.png" alt="image-20231025180247267"></p></li><li><p>注重期末项目。如果你的科研竞赛经历不多的话，面试的时候也可以讲讲自己做过哪些项目，在项目负责哪些职责，遇到过什么困难，你是怎样解决的。这些也是你的加分项，让老师对你更感兴趣。</p></li></ol><h4 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a>名词介绍</h4><p>当你在阅读一些保研经验贴的时候往往会出现一些英文缩写，让你摸不着头脑。所以下面介绍一些保研的常用名词。</p><ol><li><p><strong>名词：</strong>rk</p><p><strong>解释：</strong>rank,一般指自己的加权或绩点排名</p></li><li><p><strong>名词：</strong>title</p><p><strong>解释：</strong>指学校的知名度</p></li><li><p><strong>名词：</strong>oq</p><p><strong>解释：</strong>over qualified,指学生报名比自身本科院校或者能力水平低很多的院校</p></li><li><p><strong>名词：</strong>bar</p><p><strong>解释：</strong>门槛</p></li><li><p><strong>名词：</strong>wl</p><p><strong>解释：</strong>waiting list,指夏令营优营或者最后录取的候补名单</p></li><li><p><strong>名词：</strong>强弱com</p><p><strong>解释：</strong>强committee指教务老师/委员会管的管多，导师没有很大话语权；弱committee指导师在夏令营入营录取中有很大话语权</p></li><li><p><strong>名词：</strong>套磁</p><p><strong>解释：</strong>通过邮件（或者电话或者当面）提前与申请院系的导师进行联系，将自己的背景及学习研究计划等向对方做详细介绍和说明，以便提升自己被录取机率。</p></li><li><p><strong>名词：</strong>夏令营</p><p><strong>解释：</strong>保研夏令营是近几年各高校（特别是著名高校）抢夺优质生源的一种方式。利用暑假中一周左右的时间，与学生较长时间的接触，参观实验室，介绍各导师研究方向，学术交流会等形式，通过多种方式（例如笔试、面试、实验测试等）来考核学生，以确定是否发放拟录取通知书。</p></li><li><p><strong>名词：</strong>优营</p><p><strong>解释：</strong>优秀夏令营营员</p></li><li><p><strong>名词：</strong>九推</p><p><strong>解释：</strong>“九推”全称“九月正式推免”，即在每年的九月份，符合条件（即必须拿到本校推免名额）的各位同学可在“国家推免服务系统”（今年开放时间是9月29日-10月20日）进行推免的网络申请。</p></li><li><p><strong>名词：</strong>捡漏</p><p><strong>解释：</strong>意想不到的情况下获得意外的offer，一般指院校开系统后招不够人进行补录，保研人在这个时候获得高价值的off</p></li></ol><h3 id="预推免经历"><a href="#预推免经历" class="headerlink" title="预推免经历"></a>预推免经历</h3><p>因为之前不知道自己是否能获得推免资格，所以没有去参加夏令营。所以下面只有预推免的面试经验分享。在这里重点强调一下，有的学校夏令营和预推免报名即使你不确定能获取推免资格，你也可以参加。很多学校甚至暑假都开始预推免报名工作了，等到学校正式发布推免资格时候，他们的预推免报名都已经结束了。所以一定一定不要等到那时候才去报名，无论你确不确定能获得推免资格，都要提前找你想去的学校官网通知，去尝试参加他们的夏令营和预推免面试。反正试一试也不会吃亏（有的学校夏令营是报销往返路费的），甚至还可以为你将来面试其他学校积累经验。</p><h4 id="如何找院校"><a href="#如何找院校" class="headerlink" title="如何找院校"></a>如何找院校</h4><p>在学校的研究生网站或者对应学院网站找接受预推免信息，找导师信息（一定要越早越好，好的学校开放预推免报名很早，如果你不确定可以被推免也可以参加的。不要等本校的保研结果出来了再去找，要不然有的学校可以已经结束预推免报名）。还可以跟上届学长学姐咨询，一般他们之前保研去的学校都是对你们学校的人比较友好的学校。</p><p>填写学校预推免报名信息时的一些小建议</p><ul><li>填预报名的时候可以先把各种信息准备好，放到一个文件夹或者文档内。一开始不知道都需要准备什么的话就先填一个学校的预推免报名，然后大概就知道需要什么资料了。然后报名的学校账号密码要记住，一些常用的个人信息（比如科研经验，奖惩情况，个人经历，家庭信息）可以保存到一个word文档里，奖项证书成绩单电子版可以放一个文件夹里。每个学校一个文件夹整理别弄混，简历的话根据每个学校想跟的老师对于方向可以稍微修改一下（不要一份简历投所有学校，要根据每个学校的不同老师方向稍作修改），让自己简历更贴合导师的方向。</li></ul><h4 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h4><p>保研边缘、没参加过夏令营，不要怕，要调整好心态，疯狂海投简历（这里建议即使处于保研边缘，暑假的夏令营也要去，要不然预推免一个offer没有会很慌）。</p><p>要调整好心态，保研名额刚出来找学校报名的时候心态很爆炸，前几天填了好几个学校一个都没有回复，后来就想放弃了。但是有一天晚上填的一个南京理工大学，第二天就通知面试了，意外之喜。然后西北工业也打电话让去面试。所以一定要保持好心态，不要放弃，所有能投学校的都投。</p><h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><ul><li>如果推免排名不是很靠前，好学校的学硕比专硕更难进，专硕名额相对来说多一些。如果看重学校的名气也尝试一下选985的专硕或者交叉学科（比如天津大学医学部的计算机，东北大学的医学与生物信息工程学院的电子信息）。</li><li>导师title很多的，很火的实验室也比较难进。这些老师和实验室更看重你的个人排名和科研竞赛经历。</li><li>选导师，选择副教授，讲师，没有title或者title少的的更容易一些。（主要看你的个人情况，如果自身实力很强还是建议找比较好的实验室和老师）</li><li>一定要联系老师，一些弱com的学校老师话语权很大的。</li><li>一些学校需要政审，申请表之类的需要自己学院签字要提前准备好，不要等周六周日下班错过了时间。</li><li>如果线下面试的的话合理安排时间，赶飞机或者高铁提前打出富裕时间，不要错点。有时候学校可能鸽你，也有可能有更好的学校打电话让你面试，然后你不得不改签。酒店的话最好找离学校近的，方便去学校。</li><li>如果想鸽老师，一定要提前打招呼，不要等填报志愿了再说，会让老师对你们学校印象变差。学术圈也不大，万一要鸽的老师还认识你要去的学校的老师，多尴尬。</li></ul><h4 id="推免正式报名"><a href="#推免正式报名" class="headerlink" title="推免正式报名"></a>推免正式报名</h4><ol><li>一定要在系统填志愿信息的时候（通常是凌晨十二点系统开始填写志愿）第一时间填写志愿，不要等到第二天起来再填，有些学校会有填写志愿截止时间。一定要按照已经给offer的学校要求填写志愿。</li><li>一共可以填写三个志愿。网上有的经验贴上说可以先填两个志愿，留一个捡漏。你也可以三个都填上，看个人意愿。</li><li>如果你是预推免的时候发offer的学校，收到复试通知后，一会儿就可以收到预录取的通知。到时候一定要时刻关注研招网，有的院校有确认时间限制，必须在规定的时间内选择接受还是拒绝。</li><li>可以接受多个复试通知，但是预录取通知只能接受一个。</li><li>填志愿之前一定要跟发offer的学校确定是不是铁offer，是不是报了这个学校一定会录取，还是学校会超发offer，先到先得。注意一定要确认好，万一被学校鸽，好提前做准备。</li><li>有的学校可能会因为系统的原因，在研招网上发通知比较慢，可以联系导师或者学校招生办，去确认一下，避免着急。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>行文至此，感慨颇多。从最开始得到成功保研的喜悦，到预报名的学校复试杳无音讯心情萎靡，最后峰回路转成功接受到面试通知，再到面试通过导师确定offer的激动无比。参见线下面试辗转西安天津北京，看见了大城市的灯火斑斓，也见识了不同学校的不同风景。几天之内经历过心态起起落落，很庆幸自己坚持了下来，见到了最后的黎明时刻。所以无论什么时候一定要相信自己，抓住机会，下一个成功的人为什么不能是自己呢。与君同勉，祝大家上岸梦校！</p><p>下面是两个我比较推荐的咱们学校的本科课程学习和保研经验分享的网站，希望对同学们有用。</p><p><a href="https://hainanu-application.github.io/#/">海南大学飞跃手册 (hainanu-application.github.io)</a></p><p><a href="https://www.bj-yan.top/hainanu-course-comments/">海南大学课程攻略 (bj-yan.top)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研经验贴</title>
      <link href="/archives/95c4b274.html"/>
      <url>/archives/95c4b274.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="保研经验贴"><a href="#保研经验贴" class="headerlink" title="保研经验贴"></a>保研经验贴</h1><h2 id="个人背景"><a href="#个人背景" class="headerlink" title="个人背景"></a>个人背景</h2><p><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310241537478.png" alt="image-20231019174140290"></p><p>本科学校：211</p><p>专业排名：15/192</p><p>竞赛：天梯赛省三</p><p>科研：无论文，只有一段跟导师学习高光谱图像遥感的经历</p><p>项目：一个学校期末项目和一个APP的开发经历</p><p>英语：六级428，四级514</p><p>最终去向：南京理工大学</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文适合人群：保研排名不是很靠前,没有参加过暑期夏令营，竞赛&amp;论文很少或者无的同学进行的经验介绍（个人经验，大佬勿喷）。首先会讲一些保研基础的常识（很了解的同学可以跳过）。最后在文末我会附上当时参考过的一些保研资料。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a>名词介绍</h3><ol><li><p><strong>名词：</strong>rk</p><p><strong>解释：</strong>rank,一般指自己的加权或绩点排名</p></li><li><p><strong>名词：</strong>title</p><p><strong>解释：</strong>指学校的知名度</p></li><li><p><strong>名词：</strong>oq</p><p><strong>解释：</strong>over qualified,指学生报名比自身本科院校或者能力水平低很多的院校</p></li><li><p><strong>名词：</strong>bar</p><p><strong>解释：</strong>门槛</p></li><li><p><strong>名词：</strong>wl</p><p><strong>解释：</strong>waiting list,指夏令营优营或者最后录取的候补名单</p></li><li><p><strong>名词：</strong>强弱com</p><p><strong>解释：</strong>强committee指教务老师/委员会管的管多，导师没有很大话语权；弱committee指导师在夏令营入营录取中有很大话语权</p></li><li><p><strong>名词：</strong>套磁</p><p><strong>解释：</strong>通过邮件（或者电话或者当面）提前与申请院系的导师进行联系，将自己的背景及学习研究计划等向对方做详细介绍和说明，以便提升自己被录取机率。</p></li><li><p><strong>名词：</strong>夏令营</p><p><strong>解释：</strong>保研夏令营是近几年各高校（特别是著名高校）抢夺优质生源的一种方式。利用暑假中一周左右的时间，与学生较长时间的接触，参观实验室，介绍各导师研究方向，学术交流会等形式，通过多种方式（例如笔试、面试、实验测试等）来考核学生，以确定是否发放拟录取通知书。</p></li><li><p><strong>名词：</strong>优营</p><p><strong>解释：</strong>优秀夏令营营员</p></li><li><p><strong>名词：</strong>九推</p><p><strong>解释：</strong>“九推”全称“九月正式推免”，即在每年的九月份，符合条件（即必须拿到本校推免名额）的各位同学可在“国家推免服务系统”（今年开放时间是9月29日-10月20日）进行推免的网络申请。</p></li><li><p><strong>名词：</strong>捡漏</p><p><strong>解释：</strong>意想不到的情况下获得意外的offer，一般指院校开系统后招不够人进行补录，保研人在这个时候获得高价值的offer</p></li></ol><h3 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h3><p>保研边缘、没参加过夏令营，不要怕，调整好心态，疯狂海投简历（这里建议即使处于保研边缘，暑假的夏令营也要去，要不然预推免一个offer没有会很慌，我就保研边缘，当保研出来后，有的学校预推免都已经结束了）。</p><p>要调整好心态，保研名额刚出来找学校报名的时候心态很爆炸，前几天填了好几个学校一个都没有回复，后来就想放弃了。但是有一天晚上填的一个南京理工大学，第二天就通知面试了，意外之喜。然后西北工业也打电话让去面试。所以一定要保持好心态，不要放弃，所有能投学校的都投。</p><h3 id="找院校"><a href="#找院校" class="headerlink" title="找院校"></a>找院校</h3><p>在学校的研究生网站或者对应学院网站找接受预推免信息，找导师信息（一定要越早越好，好的学校开放预推免报名很早，如果你不确定是否可以推免也可以参加的。不要等本校的保研结果出来了再去找，要不然有的学校可以已经结束预推免报名，我就吃了这个亏）。还可以跟上届学长学姐咨询，一般他们之前保研去的学校都是对你们学校的人比较友好的学校。</p><p>填写报名的学校信息是的一些小建议</p><ul><li>填预报名的时候可以先把各种信息准备好，放到一个文件夹或者文档内。一开始不知道都需要准备啥的话就先填一个学校的预推免，然后大概就知道需要什么资料了。然后报名的学校账号密码要记住，一些常用的个人信息（比如科研经验，奖惩情况，个人经历，家庭信息）可以保存一个文件里，奖项证书成绩单电子版可以放一个文件夹里。每个学校一个文件夹整理别弄混，简历的话根据每个学校想跟的老师对于方向可以稍微修改一下（不要一份简历投所有学校，要根据每个学校的不同老师方向稍作修改），让自己简历更贴合导师的方向。</li></ul><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ul><li>如果推免排名不是很靠前，好学校的学硕比专属更难进，专硕名额多。如果看重学校的名气也尝试一下选985的专硕或者交叉学科（比如天津大学医学部的计算机，东北大学的医学与生物信息工程学院的电子信息）。</li><li>导师title很多的，很火的实验室也比较难进，如果你排名很低的话。</li><li>选导师，选择副教授，讲师，没有title或者title少的的更容易一些。（主要看你的个人情况，如果自身实力很强还是建议找比较好的实验室和老师）</li><li>一定要联系老师，一些弱com的学校老师话语权很大的。</li><li>一些学校需要政审，申请表之类的需要自己学院签字要提前准备好，不要等周六周日下班错过了。</li><li>如果线下面试的的话合理安排时间，赶飞机或者高铁提前打出富裕时间，不要错点。有时候学校可能鸽你（比如我报名了河北工业大学，他让报了名的都加复试通知群，然后过几天复试去，结果复试名单出来的没我，买好了票，赶紧改签了）。也有可能有更好的学校打电话让你面试，然后你不得不改签。酒店的话最好找离学校近的，方便去学校。</li><li>如果想鸽老师，一定要提前打招呼，不要等填报志愿了再说，会让老师对你们学校印象变差。学术圈也不大，万一要鸽的老师还认识你要去的学校的老师，多尴尬。</li></ul><h2 id="面试经历"><a href="#面试经历" class="headerlink" title="面试经历"></a>面试经历</h2><ol><li><p>南京理工大学（线上）</p><p>如果本科学校还不错，一般联系导师，老师同意了很好上岸。老师就问了一些基本问题，个人信息，排名，科研竞赛经历之类的。老师面完当时就说虽然你竞赛科研经历很少，但是大体上符合要求，差不多就是稳了的意思。</p></li><li><p>本校（线上）</p><p>本校相对更容易一些。就一个英文自我介绍，然后按PPT讲自己的信息。老师问了我一个然后看待模型融合创新这个方法，问我这种创新算是创新嘛（挺犀利的，现发论文的现状就是各种模型组合到其他模型上就变成了创新点，这种问题仁者见仁智者见智吧）</p></li><li><p>西北工业大学（线下）</p><p>学硕名额少，外校一般都是专硕，如果报的计算机学院，老师计科的名额不够可能推荐你去软件学院。（软件学院招的相对多一些，要求没有计科高）老师主要是针对简历提问，问的专业课比较多，问了我操作系统分页，数据结构最小生成树（幸好复习过408，要不然真寄了），数据挖掘的一些算法，分类和聚类有哪些算法，他们俩的最大区别是什么。会有思政问题，比如关于华为如何看，如何看待日本倾倒核废水。老师还提出我简历上的问题，简历内容过于简单，项目经历和竞赛证书写的过于简略，要详细些在这个项目比赛中做了哪些工作，有什么贡献等。英语面试的话先是让自我介绍然后回答一个问题，为什么选西北工业。</p></li><li><p>华北电力大学北京（线下）</p><p>老师问的项目和科研经历细节比较多，专业课内容也是简历上提到的，比如我的简历上有个卷积神经网络的内容，他就问你一些基本的深度学习内容（都比较基础）。还问了c和c＋＋区别（英文问了一遍，可能当时答的不好，又一个老师中文问了一遍），还有个老师问我还有没有其他的项目经历，我说有个电商分析的，然后老师就问了我项目中使用的kafka是什么（所以简历或者PPT上把能写的自己很了解的项目的要写全，里面的项目细节要都懂）。然后老师还问我一个为什么你的论文里选择用的3D-CNN，而不是其他模型，3D-CNN与其他卷积模型的区别。英语问题是先让我用英语讲一下刚才PPT上研究生计划部分，然后第二个问我c和c＋＋区别（只答上来一点）。</p></li></ol><h2 id="推免正式报名"><a href="#推免正式报名" class="headerlink" title="推免正式报名"></a>推免正式报名</h2><ol><li>一定要在系统填志愿信息的时候第一时间填写志愿，不要等到第二天起来再填，有些学校会有填写志愿截至时间。一定要按照已经给offer的学校要求填写志愿。</li><li>一共可以填写三个志愿。看有的经验贴上说可以先填两个志愿，留一个捡漏。你也可以三个都填上，看个人意愿吧。</li><li>如果你是预推免的时候发offer的学校，收到复试通知后，一会儿就可以收到预录取的通知。到时候一定要时刻关注研招网，有的院校有确认时间限制，必须在规定的时间内选择接受还是拒绝。</li><li>可以接受多个复试通知，但是预录取通知只能接受一个。</li><li>填志愿之前一定要跟发offer的学校确定是不是铁offer，是不是报了这个学校一定会录取，还是学校会超发offer，先到先得。注意一定要确认好，万一被学校鸽，好提前做准备。</li><li>有的学校可能会因为系统的原因，在研招网上发通知比较慢，可以联系导师或者学校招生办，去确认一下，避免着急。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>行文至此，感慨颇多。从最开始得到成功保研的喜悦，到预报名的学校复试杳无音讯心情萎靡，最后峰回路转成功接受到面试通知，再到面试通过导师确定offer的激动无比。参见线下面试辗转西安天津北京，看见了大城市的灯火斑斓，也见识了不同学校的不同风景。几天之内经历过心态起起落落，很庆幸自己坚持了下来，见到了最后的黎明时刻。所以无论什么时候一定要相信自己，抓住机会，下一个成功的人为什么不能是自己呢。与君同勉，祝大家上岸梦校！</p><p>下面我参考过的保研面试资料（联系导师邮件模板可以在小红书上搜索，有很多。这里没有罗列），大家也可以参考一下。如有关于保研问题咨询可以联系我 vx：13102618184</p><p><a href="https://mp.weixin.qq.com/s/KH6gdpeT4ES3SN0K01Yh9A">保研说 </a></p><p><a href="https://github.com/CS-BAOYAN">CS-BAOYAN (github.com)</a></p><p><a href="https://github.com/CS-BAOYAN/CS-BAOYAN-2023/tree/main/导师推荐">CS-BAOYAN-2023/导师推荐 (github.com)</a></p><p><a href="https://github.com/CS-BAOYAN/CSYuTuiMian2023">CS-BAOYAN/CSYuTuiMian2023 (github.com)</a></p><p><a href="https://mubu.com/doc/1OXFbFtfWtX#o-hAUJA9NMDR">准备预推免的问题 - 幕布 (mubu.com)</a></p><p><a href="https://mubu.com/doc/6DWNVmVSqdX">预推免面试问题 - 幕布 (mubu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/583527078">oq、rk、强com……不会这些黑话都不配保研了</a></p><p><a href="https://zhuanlan.zhihu.com/p/137624043">考研复试研究计划写作指南 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/weixin_40562999/article/details/80169128">一位数据挖掘成功人士给数据挖掘在读研究生的建议（转）-CSDN博客</a></p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/105183554">刷完 900 多道算法题的首次总结：LeetCode 应该怎么刷？-CSDN博客</a></p><p><a href="https://blog.csdn.net/lxh248866/article/details/121624655">数据挖掘近年来的研究方向、方法总结_为什么你对数据挖掘这个研究方向感兴趣?你对这个研究方向了解多少?-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《动手学深度学习》学习笔记</title>
      <link href="/archives/17a30d1a.html"/>
      <url>/archives/17a30d1a.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="深度学习理论与应用"><a href="#深度学习理论与应用" class="headerlink" title="深度学习理论与应用"></a><strong>深度学习理论与应用</strong></h1><p> 摘要： 深度学习（Deep Learning）是一个近几年备受关注的研究领域，在机器学习中起着重要的作用。深度学习通过建立、模拟人脑的分层结构来实现对外部输入的数据进行从低级到高级的特征提取，从而能够解释外部数据。深度学习是学习样本数据的内在规律和表示层次，这些学习过程中获得的信息对诸如文字，图像和声音等数据的解释有很大的帮助。它的最终目标是让机器能够像人一样具有分析学习能力，能够识别文字、图像和声音等数据。本文首先介绍了深度学习的基础知识，包括线性回归、多层感知机、卷积神经网络、循环神经网络的基本原理，在其基础上讲解网络优化算法进一步优化网络和自定义网络实现自己的网络。然后介绍深度学习的应用，具体包括单发多框目标检测、语义分割、风格迁移、中英文翻译系统。最后总结我对本课程学习的心得体会和建议。</p><p> 关键词：深度学习模型；深度学习应用；自定义网络实现；优化算法</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><h3 id="1-1起源"><a href="#1-1起源" class="headerlink" title="1.1起源"></a>1.1起源</h3><p>早在17世纪，雅各比·伯努利（1655–1705）提出了描述只有两种结果的随机过程（如抛掷一枚硬币）的伯努利分布。大约一个世纪之后，卡尔·弗里德里希·高斯（1777–1855）发明了今日仍广泛用在从保险计算到医学诊断等领域的最小二乘法。概率论、统计学和模式识别等工具帮助自然科学的实验学家们从数据回归到自然定律，从而发现了如欧姆定律（描述电阻两端电压和流经电阻电流关系的定律）这类可以用线性模型完美表达的一系列自然法则。</p><p>现代统计学在20世纪的真正起飞要归功于数据的收集和发布。统计学巨匠之一罗纳德·费雪（1890–1962）对统计学理论和统计学在基因学中的应用功不可没。他发明的许多算法和公式，例如线性判别分析和费雪信息，仍经常被使用。即使是他在1936年发布的Iris数据集，仍然偶尔被用于演示机器学习算法。</p><p>克劳德·香农（1916–2001）的信息论以及阿兰·图灵 （1912–1954）的计算理论也对机器学习有深远影响。图灵在他著名的论文《计算机器与智能》中提出了“机器可以思考吗？”这样一个问题。在他描述的“图灵测试”中，如果一个人在使用文本交互时不能区分他的对话对象到底是人类还是机器的话，那么即可认为这台机器是有智能的。时至今日，智能机器的发展可谓日新月异。</p><p>另一个对深度学习有重大影响的领域是神经科学与心理学。既然人类显然能够展现出智能，那么对于解释并逆向工程人类智能机理的探究也在情理之中。最早的算法之一是由唐纳德·赫布（1904–1985）正式提出的。在他开创性的著作《行为的组织》中，他提出神经是通过正向强化来学习的，即赫布理论。赫布理论是感知机学习算法的原型，并成为支撑今日深度学习的随机梯度下降算法的基石：强化合意的行为、惩罚不合意的行为，最终获得优良的神经网络参数。</p><p>在最初的快速发展之后，自约1995年起至2005年，大部分机器学习研究者的视线从神经网络上移开了。这是由于多种原因。首先，训练神经网络需要极强的计算力。尽管20世纪末内存已经足够，计算力却不够充足。其次，当时使用的数据集也相对小得多。费雪在1936年发布的的Iris数据集仅有150个样本，并被广泛用于测试算法的性能。具有6万个样本的MNIST数据集在当时已经被认为是非常庞大了，尽管它如今已被认为是典型的简单数据集。由于数据和计算力的稀缺，从经验上来说，如核方法、决策树和概率图模型等统计工具更优。它们不像神经网络一样需要长时间的训练，并且在强大的理论保证下提供可以预测的结果。</p><p>互联网的崛起、价廉物美的传感器和低价的存储器令我们越来越容易获取大量数据。加之便宜的计算力，尤其是原本为电脑游戏设计的GPU的出现，上文描述的情况改变了许多。一瞬间，原本被认为不可能的算法和模型变得触手可及。    </p><h3 id="1-2优点"><a href="#1-2优点" class="headerlink" title="1.2优点"></a>1.2优点</h3><p>深度学习可以逐级表示越来越抽象的概念或模式。以图像为例，它的输入是一堆原始像素值。深度学习模型中，图像可以逐级表示为特定位置和角度的边缘、由边缘组合得出的花纹、由多种花纹进一步汇合得到的特定部位的模式等。最终，模型能够较容易根据更高级的表示完成给定的任务，如识别图像中的物体。值得一提的是，作为表征学习的一种，深度学习将自动找出每一级表示数据的合适方式。因此，深度学习的一个外在特点是端到端的训练。也就是说，并不是将单独调试的部分拼凑起来组成一个系统，而是将整个系统组建好之后一起训练。</p><p>相对其它经典的机器学习方法而言，深度学习的不同在于：对非最优解的包容、对非凸非线性优化的使用，以及勇于尝试没有被证明过的方法。这种在处理统计问题上的新经验主义吸引了大量人才的涌入，使得大量实际问题有了更好的解决方案。尽管大部分情况下需要为深度学习修改甚至重新发明已经存在数十年的工具，但是这绝对是一件非常有意义并令人兴奋的事。</p><h3 id="1-3应用领域"><a href="#1-3应用领域" class="headerlink" title="1.3应用领域"></a>1.3应用领域</h3><p>深度学习是一个复杂的机器学习算法，在语音和图像识别方面取得的效果，远远超过先前相关技术。深度学习在搜索技术，数据挖掘，机器学习，机器翻译，自然语言处理，多媒体学习，语音，推荐和个性化技术，以及其他相关领域都取得了很多成果。深度学习使机器模仿视听和思考等人类的活动，解决了很多复杂的模式识别难题，使得人工智能相关技术取得了很大进步。</p><p>物体识别也经历了漫长的发展过程。在2010年从图像中识别出物体的类别仍是一个相当有挑战性的任务。当年日本电气、伊利诺伊大学香槟分校和罗格斯大学团队在ImageNet基准测试上取得了28%的前五错误率。到2017年，这个数字降低到了2.25%。研究人员在鸟类识别和皮肤癌诊断上，也取得了同样惊世骇俗的成绩。</p><p>博弈曾被认为是人类智能最后的堡垒。自使用时间差分强化学习玩双陆棋的TD-Gammon开始，算法和算力的发展催生了一系列在博弈上使用的新算法。与双陆棋不同，国际象棋有更复杂的状态空间和更多的可选动作。“深蓝”用大量的并行、专用硬件和博弈树的高效搜索打败了加里·卡斯帕罗夫。围棋因其庞大的状态空间被认为是更难的游戏，AlphaGo在2016年用结合深度学习与蒙特卡罗树采样的方法达到了人类水准。对德州扑克游戏而言，除了巨大的状态空间之外，更大的挑战是博弈的信息并不完全可见，例如看不到对手的牌。而“冷扑大师”用高效的策略体系超越了人类玩家的表现。以上的例子都体现出了先进的算法是人工智能在博弈上的表现提升的重要原因。</p><p>机器学习进步的另一个标志是自动驾驶汽车的发展。尽管距离完全的自主驾驶还有很长的路要走，但诸如Tesla、NVIDIA、 MobilEye和Waymo这样的公司发布的具有部分自主驾驶功能的产品展示出了这个领域巨大的进步。完全自主驾驶的难点在于它需要将感知、思考和规则整合在同一个系统中。目前，深度学习主要被应用在计算机视觉的部分，剩余的部分还是需要工程师们的大量调试。</p><p>以上列出的仅仅是近年来深度学习所取得的成果的冰山一角。机器人学、物流管理、计算生物学、粒子物理学和天文学近年来的发展也有一部分要归功于深度学习。可以看到，深度学习已经逐渐演变成一个工程师和科学家皆可使用的普适工具。</p><h2 id="2-深度学习基础"><a href="#2-深度学习基础" class="headerlink" title="2    深度学习基础"></a>2    深度学习基础</h2><h3 id="2-1-线性回归"><a href="#2-1-线性回归" class="headerlink" title="2.1 线性回归"></a>2.1 线性回归</h3><p>回归（regression）是能为一个或多个自变量与因变量之间关系建模的一类方法。在自然科学和社会科学领域，回归经常用来表示输入和输出之间的关系。</p><p>线性回归（linear regression）可以追溯到19世纪初，它在回归的各种标准工具中最简单而且最流行。线性回归基于几个简单的假设：首先，假设自变量x和因变量y之间的关系是线性的，即y可以表示为x中元素的加权和，这里通常允许包含观测值的一些噪声；其次，我们假设任何噪声都比较正常，如噪声遵循正态分布。</p><h4 id="2-1-1-数学模型"><a href="#2-1-1-数学模型" class="headerlink" title="2.1.1 数学模型"></a>2.1.1 数学模型</h4><p>（1）考虑单个样本，当我们的输入包含d个特征时，我们将预测结果yˆ（通常使用“尖角”符号表示y的估计值）表示为：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620080.png" alt="img"></p><p>将所有特征放到向量x∈Rd中，并将所有权重放到向量w∈Rd中，向量x对应于单个数据样本的特征，我们可以用点积形式来简洁地表达模型：</p><p>​                                                                                            <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620983.png" alt="img"></p><p>（2）考虑整个数据集，对于特征集合X，预测值yˆ∈Rn可以通过矩阵-向量乘法表示为：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620985.png" alt="img"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620986.jpg" alt="img"></p><p>​                                                                                    线性回归模型的一个单层网络神经</p><p>​                <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620987.jpg" alt="img"> </p><p>​                                                                                            线性回归数据拟合效果</p><h4 id="2-1-3-损失函数"><a href="#2-1-3-损失函数" class="headerlink" title="2.1.3 损失函数"></a>2.1.3 损失函数</h4><p>在我们开始考虑如何用模型拟合（fit）数据之前，我们需要确定一个拟合程度的度量。损失函数（loss function）能够量化目标的实际值与预测值之间的差距。通常我们会选择非负数作为损失，且数值越小表示损失越小，完美预测时的损失为0。回归问题中最常用的损失函数是平方误差函数。由于平方误差函数中的二次方项，估计值yˆ(i)和观测值y(i)之间较大的差异将导致更大的损失。为了度量模型在整个数据集上的质量，我们需计算在训练集n个样本上的损失均值（也等价于求和）。MSE均方差损失函数（L2损失函数）表示如下：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620988.png" alt="img"></p><p>在训练模型时，我们希望寻找一组参数（w∗，b∗），这组参数能最小化在所有训练样本上的总损失。线性回归问题的形式化表示：</p><p>​                                                                            <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620989.png" alt="img"> </p><p>2.1.4 训练和预测</p><p>线性回归整个算法训练流程：</p><p>• 初始化参数</p><p>• 重复以下训练，直到完成</p><p>– 计算梯度g ← ∂(w,b)                                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620990.png" alt="img"></p><p>– 更新参数(w, b) ← (w, b) − ηg</p><h4 id="2-1-5-优缺点"><a href="#2-1-5-优缺点" class="headerlink" title="2.1.5 优缺点"></a>2.1.5 优缺点</h4><p>优点：</p><p>①善于获取数据集中的线性关系；</p><p>②适用于在已有了一些预先定义好的变量并且需要一个简单的预测模型的情况下使用；</p><p>③训练速度和预测速度较快；</p><p>④在小数据集上表现很好；</p><p>⑤结果可解释，并且易于说明；</p><p>⑥当新增数据时，易于更新模型；</p><p>⑦不需要进行参数调整（正则化线性模型需要调整正则化参数）；</p><p>⑧不需要特征缩放（正则化线性模型需要特征缩放）；</p><p>缺点：</p><p>①不适用于非线性数据；</p><p>②预测精确度较低；</p><p>③可能会出现过度拟合（正则化模型可以抵消这个影响）；</p><p>④分离信号和噪声的效果不理想，在使用前需要去掉不相关的特征；</p><p>⑤不了解数据集中的特征交互；</p><h3 id="2-2-多层感知机"><a href="#2-2-多层感知机" class="headerlink" title="2.2 多层感知机"></a>2.2 多层感知机</h3><p>最简单的深度网络称为多层感知机（MLP）。多层感知机由多层神经元组成，每一层与它的上一层相连，从中接收输入。同时每一层也与它的下一层相连，影响当前层的神经元。</p><p>多层感知机在输出层和输入层之间增加一个或多个全连接隐藏层，并通过激活函数转换隐藏层的输出。</p><h4 id="2-2-1-数学模型"><a href="#2-2-1-数学模型" class="headerlink" title="2.2.1 数学模型"></a>2.2.1 数学模型</h4><p>MLP（FNN）工作原理：多层感知机首先是输入层，中间是隐藏层，最后是输出层。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620991.png" alt="img"></p><h4 id="2-2-2-原理图"><a href="#2-2-2-原理图" class="headerlink" title="2.2.2 原理图"></a>2.2.2 原理图</h4><p>​                <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620992.jpg" alt="img"> </p><p>​                                                             一个单隐藏层的多层感知机，具有5个隐藏层</p><h4 id="2-2-3-隐藏层"><a href="#2-2-3-隐藏层" class="headerlink" title="2.2.3 隐藏层"></a>2.2.3 隐藏层</h4><p>激活函数（activation function）通过计算加权和并加上偏置来确定神经元是否应该被激活，它们将输入信号转换为输出的可微运算。大多数激活函数都是非线性的。</p><p>常用的激活函数包括ReLU函数、sigmoid函数和tanh函数。</p><p>（1） ReLU函数</p><p>ReLU提供了一种非常简单的非线性变换。给定元素x，ReLU函数被定义为该元素与0的最大值。ReLU函数通过将相应的活性值设为0，仅保留正元素并丢弃所有负元素。当输入为负时，ReLU函数的导数为0，而当输入为正时，ReLU函数的导数为1。ReLU函数之所以是最受欢迎的激活函数，原因是它求导表现得特别好：要么让参数消失，要么让参数通过。这使得优化表现得更好，并且ReLU减轻了困扰以往神经网络的梯度消失问题。</p><p>​                                                                                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620993.png" alt="img"></p><p>（2） sigmoid函数</p><p>对于一个定义域在R中的输入，sigmoid函数将输入变换为区间（0，1）上的输出。因此，sigmoid通常称为挤压函数（squashing function）：它将范围（-inf, inf）中的任意输入压缩到区间（0，1）中的某个值：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620994.png" alt="img"></p><p>注意，当输入为0时，sigmoid函数的导数达到最大值0.25；而输入在任一方向上越远离0点时，导数越接近0。</p><p>（3） tanh函数</p><p>与sigmoid函数类似，tanh（双曲正切）函数也能将其输入压缩转换到区间（-1，1）上。tanh函数的公式如下：</p><p>​                                                                                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620995.png" alt="img"></p><p>当输入接近0时，tanh函数的导数接近最大值1。与我们在sigmoid函数图像中看到的类似，输入在任一方向上越远离0点，导数越接近0。</p><h4 id="2-2-4-训练和预测"><a href="#2-2-4-训练和预测" class="headerlink" title="2.2.4 训练和预测"></a>2.2.4 训练和预测</h4><p>①初始化模型参数</p><p>②定义激活函数</p><p>③定义模型</p><p>④定义损失函数    </p><p>⑤进行模型训练</p><h4 id="2-2-5模型选择："><a href="#2-2-5模型选择：" class="headerlink" title="2.2.5模型选择："></a>2.2.5模型选择：</h4><p>K折交叉验证选择最佳模型</p><h4 id="2-2-6欠拟合和过拟合"><a href="#2-2-6欠拟合和过拟合" class="headerlink" title="2.2.6欠拟合和过拟合"></a>2.2.6欠拟合和过拟合</h4><p>将模型在训练数据上拟合的比在潜在分布中更接近的现象称为过拟合（overfitting），用于对抗过拟合的技术称为正则化（regularization）。</p><p>由于我们的训练和验证误差之间的泛化误差很小，我们有理由相信可以用一个更复杂的模型降低训练误差。这种现象被称为欠拟合（underfitting）。</p><p>训练误差（training error）是指，模型在训练数据集上计算得到的误差。泛化误差（generalization error）是指，模型应用在同样从原始样本的分布中抽取的无限多数据样本时，模型误差的期望。</p><p>两种防止过拟合的方法：权重衰减和暂退法（dropout）。</p><h4 id="2-2-7数值稳定性："><a href="#2-2-7数值稳定性：" class="headerlink" title="2.2.7数值稳定性："></a>2.2.7数值稳定性：</h4><p>梯度消失和梯度爆炸是深度网络中常见的问题。在参数初始化时需要非常小心，以确保梯度和参数可以得到很好的控制。</p><h4 id="2-2-8优缺点"><a href="#2-2-8优缺点" class="headerlink" title="2.2.8优缺点"></a>2.2.8优缺点</h4><p>优点：可以学习非线性模型，并且可以实时学习。</p><p>缺点：多层感知机随着层数越多，会出现过拟合（权重衰减和暂退法可以预防），参数难以调试，梯度弥散问题。再图像识别时，将图像数据展平成一维向量为忽略了每个图像的空间结构信息，且各层均为连接层，计算量巨大。</p><h3 id="2-3-卷积神经网络"><a href="#2-3-卷积神经网络" class="headerlink" title="2.3 卷积神经网络"></a>2.3 卷积神经网络</h3><p>卷积神经网络（convolutional neural network，CNN）是一类强大的、为处理图像数据而设计的神经网络。基于卷积神经网络架构的模型在计算机视觉领域中已经占主导地位，当今几乎所有的图像识别、目标检测或语义分割相关的学术竞赛和商业应用都以这种方法为基础。卷积神经网络需要的参数少于全连接架构的网络，而且卷积也很容易用GPU并行计算。因此卷积神经网络除了能够高效地采样从而获得精确的模型，还能够高效地计算。</p><p>构成卷积网络主干的基本元素包括：卷积层本身、填充（padding）和步幅（stride）、用于在相邻区域汇聚信息的汇聚层（pooling）、在每一层中多通道（channel）。</p><h4 id="2-3-1-数学模型"><a href="#2-3-1-数学模型" class="headerlink" title="2.3.1 数学模型"></a>2.3.1 数学模型</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620996.png" alt="img"></p><p>是一个卷积层（convolutional layer），而卷积神经网络是包含卷积层的一类特殊的神经网络。在深度学习中，V被称为卷积核（convolution kernel）或者滤波器（filter），亦或简单地称之为该卷积层的权重，通常该权重是可学习的参数。</p><h4 id="2-3-2-原理图（LeNet-5）"><a href="#2-3-2-原理图（LeNet-5）" class="headerlink" title="2.3.2 原理图（LeNet-5）"></a>2.3.2 原理图（LeNet-5）</h4><p>​                                                                            <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620997.jpg" alt="img"></p><p>​                                                                                                    LeNet-5模型                                                                     </p><p>​                                                                 <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620998.jpg" alt="img"></p><p>​                                                                                                    互相关运算 </p><h4 id="2-3-3-填充和步幅"><a href="#2-3-3-填充和步幅" class="headerlink" title="2.3.3 填充和步幅"></a>2.3.3 填充和步幅</h4><p>填充（padding）：在输入图像的边界填充元素（通常填充元素是0）。</p><p>卷积神经网络中卷积核的高度和宽度通常为奇数，例如1、3、5或7。选择奇数的好处是，保持空间维度的同时，我们可以在顶部和底部填充相同数量的行，在左侧和右侧填充相同数量的列。</p><p>​                  <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620999.jpg" alt="img"></p><p>​                                                                                            带填充的二维互相关。</p><p>在计算互相关时，卷积窗口从输入张量的左上角开始，向下、向右滑动。我们将每次滑动元素的数量称为步幅（stride）。</p><p>​                                           <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620000.jpg" alt="img"></p><p>​                                                                    垂直步幅为 3，水平步幅为 2 的二维互相关运算</p><h4 id="2-3-4多输入多输出通道"><a href="#2-3-4多输入多输出通道" class="headerlink" title="2.3.4多输入多输出通道"></a>2.3.4多输入多输出通道</h4><p>当输入包含多个通道时，需要构造一个与输入数据具有相同输入通道数的卷积核，以便与输入数据进行互相关运算。</p><p>用c<sub>i</sub>和c<sub>o</sub>分别表示输入和输出通道的数目，并让k<sub>h</sub>和k<sub>w</sub>为卷积核的高度和宽度。为了获得多个通道的输出，我们可以为每个输出通道创建一个形状为c<sub>i</sub>×k<sub>h</sub>×k<sub>w</sub>的卷积核张量，这样卷积核的形状是c<sub>o</sub>×c<sub>i</sub>×k<sub>h</sub>×k<sub>w</sub>。在互相关运算中，每个输出通道先获取所有输入通道，再以对应该输出通道的卷积核计算出结果。</p><h4 id="2-3-5-汇聚层"><a href="#2-3-5-汇聚层" class="headerlink" title="2.3.5 汇聚层"></a>2.3.5 汇聚层</h4><p>与卷积层类似，汇聚层运算符由一个固定形状的窗口组成，该窗口根据其步幅大小在输入的所有区域上滑动，为固定形状窗口（有时称为汇聚窗口）遍历的每个位置计算一个输出。然而，不同于卷积层中的输入与卷积核之间的互相关计算，汇聚层不包含参数。相反，池运算是确定性的，我们通常计算汇聚窗口中所有元素的最大值或平均值。这些操作分别称为最大汇聚层（maximum pooling）和平均汇聚层（average pooling）。在这两种情况下，与互相关运算符一样，汇聚窗口从输入张量的左上角开始，从左往右、从上往下的在输入张量内滑动。在汇聚窗口到达的每个位置，它计算该窗口中输入⼦张量的最大值或平均值。计算最大值或平均值是取决于使有用了最大汇聚层还是平均汇聚层。</p><h4 id="2-3-6-现代CNN类型"><a href="#2-3-6-现代CNN类型" class="headerlink" title="2.3.6 现代CNN类型"></a>2.3.6 现代CNN类型</h4><p>（1）深度卷积神经网络（AlexNet）：AlexNet由八层组成：五个卷积层、两个全连接隐藏层和一个全连接输出层。AlexNet使用ReLU而不是sigmoid作为其激活函数。</p><p>​                                                                        <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620001.jpg" alt="img"></p><p>​                                                                                                AlexNet模型     </p><p>​                                                              <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620002.jpg" alt="img"></p><p>​                                                                                                    VGG模型</p><p>（2）使用块的网络（VGG）：VGG网络可以分为两部分：第一部分主要由卷积层和汇聚层组成，第二部分由全连接层组成。VGG网络有5个卷积块，其中前两个块各有一个卷积层，后三个块各包含两个卷积层。</p><p>（3）网络中的网络（NiN）：NiN块以一个普通卷积层开始，后面是两个1×1的卷积层。这两个1×1卷积层充当带有ReLU激活函数的逐像素全连接层。第一层的卷积窗口形状通常由用户设置。随后的卷积窗口形状固定为1×1。</p><p>NiN使用窗口形状为11×11、5×5和3×3的卷积层，输出通道数量与AlexNet中的相同。每个NiN块后有一个最大汇聚层，汇聚窗口形状为3×3，步幅为2。</p><p>NiN和AlexNet之间的一个显著区别是NiN完全取消了全连接层。相反，NiN使用一个NiN块，其输出通道数等于标签类别的数量。最后放一个全局平均汇聚层（global average pooling layer），生成一个对数几率（logits）。NiN设计的一个优点是，它显著减少了模型所需参数的数量。然而，在实践中，这种设计有时会增加训练模型的时间。</p><p>​                                                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620003.jpg" alt="img"></p><p>​                                                                                                    NiN模型</p><p>​                                                                                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620004.jpg" alt="img"></p><p>​                                                                                                GoogLeNet模型</p><p>（4）含并行连结的网络（GoogLeNet）：在GoogLeNet中，基本的卷积块被称为Inception块（Inception block）。Inception块由四条并行路径组成。前三条路径使用窗口大小为1×1、3×3和5×5的卷积层，从不同空间大小中提取信息。中间的两条路径在输入上执行1×1卷积，以减少通道数，从而降低模型的复杂性。第四条路径使用3×3最大汇聚层，然后使用1×1卷积层来改变通道数。这四条路径都使用合适的填充来使输入与输出的高和宽一致，最后我们将每条线路的输出在通道维度上连结，并构成Inception块的输出。在Inception块中，通常调整的超参数是每层输出通道数。</p><p>GoogLeNet一共使用9个Inception块和全局平均汇聚层的堆叠来生成其估计值。Inception块之间的最大汇聚层可降低维度。第一个模块类似于AlexNet和LeNet，Inception块的组合从VGG继承，全局平均汇聚层避免了在最后使用全连接层。</p><p>​                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620005.jpg" alt="img"> </p><p>​                                                                                                      Inception块的架构</p><p>（5）残差网络（ResNet）：ResNet沿用了VGG完整的3×3卷积层设计。残差块里首先有2个有相同输出通道数的3×3卷积层。每个卷积层后接一个批量规范化层和ReLU激活函数。然后我们通过跨层数据通路，跳过这2个卷积运算，将输入直接加在最后的ReLU激活函数前。这样的设计要求2个卷积层的输出与输入形状一样，从而使它们可以相加。如果想改变通道数，就需要引入一个额外的1×1卷积层来将输入变换成需要的形状后再做相加运算。</p><p>ResNet的前两层跟之前介绍的GoogLeNet中的一样：在输出通道数为64、步幅为2的7×7卷积层后，接步幅为2的3×3的最大汇聚层。不同之处在于ResNet每个卷积层后增加了批量规范化层。GoogLeNet在后面接了4个由Inception块组成的模块。ResNet则使用4个由残差块组成的模块，每个模块使用若干个同样输出通道数的残差块。第一个模块的通道数同输入通道数一致。由于之前已经使用了步幅为2的最大汇聚层，所以无须减小高和宽。之后的每个模块在第一个残差块里将上一个模块的通道数翻倍，并将高和宽减半。</p><p>​                                                                        <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620006.jpg" alt="img">                                                                      <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620007.jpg" alt="img"></p><p>​                                                                                                    残差块</p><p>​                                                                            <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620008.jpg" alt="img"></p><p>​                                                                                            ResNet-18 模型 </p><p>​                                                      <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620009.jpg" alt="img"></p><p>​                                                                                                    稠密连接  </p><p>（6）稠密连接网络（DenseNet）：稠密网络主要由2部分构成：稠密块（dense block）和过渡层（transition layer）。前者定义如何连接输入和输出，而后者则控制通道数量，使其不会太复杂。ResNet与 DenseNet在跨层连接上的主要区别：使用相加和使用连结。</p><p>一个稠密块由多个卷积块组成，每个卷积块使用相同数量的输出通道。然而，在前向传播中，我们将每个卷积块的输入和输出在通道维上连结。</p><p>由于每个稠密块都会带来通道数的增加，使用过多则会过于复杂化模型。而过渡层可以用来控制模型复杂度。它通过1 × 1卷积层来减小通道数，并使用步幅为2的平均汇聚层减半高和宽，从而进一步降低模型复杂度。</p><p>DenseNet首先使用同ResNet一样的单卷积层和最大汇聚层。接下来，类似于ResNet使用的4个残差块，DenseNet使用的是4个稠密块。与ResNet类似，我们可以设置每个稠密块使用多少个卷积层。接下来，类似于ResNet使用的4个残差块，DenseNet使用的是4个稠密块。与ResNet类似，我们可以设置每个稠密块使用多少个卷积层。与ResNet类似，最后接上全局汇聚层和全连接层来输出结果。</p><h3 id="2-4-循环神经网络"><a href="#2-4-循环神经网络" class="headerlink" title="2.4 循环神经网络"></a>2.4 循环神经网络</h3><p>循环神经网络（recurrent neural network，RNN）通过引入状态变量存储过去的信息和当前的输入，从而可以确定当前的输出。所以循环神经网络可以更好地处理序列信息。</p><h4 id="2-4-1-数学模型"><a href="#2-4-1-数学模型" class="headerlink" title="2.4.1 数学模型"></a>2.4.1 数学模型</h4><p>（1）无隐状态的神经网络</p><p>设隐藏层的激活函数为ϕ，给定一个小批量样本X ∈ R<sup>n×d</sup>，其中批量大小为n，输入维度为d，则隐藏层的输出H ∈ R<sup>n×h</sup>通过下式计算：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620010.png" alt="img"></p><p>我们拥有的隐藏层权重参数为W <sub>xh</sub> ∈ R<sup>d×h</sup>，偏置参数为b<sub>h</sub> ∈ R<sup>1×h</sup>，以及隐藏单元的数目为h。因此求和时可以应用广播机制。接下来，将隐藏变量H用作输出层的输入。输出层由下式给出：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620011.png" alt="img"></p><p>其中，O ∈ R<sup>n×q</sup>是输出变量，W<sub>hq</sub> ∈ R<sup>h×q</sup>是权重参数，b<sub>q</sub> ∈ R<sup>1×q</sup>是输出层的偏置参数。</p><p>（2）有隐状态的循环神经网络</p><p>假设我们在时间步t有小批量输入X<sup>t</sup> ∈ R<sup>n×d</sup> 。换⾔之，对于n个序列样本的小批量，X<sup>t</sup>的每一行对应于来自该序列的时间步t处的一个样本。接下来，用H<sup>t</sup> ∈ R<sup>n×h </sup>表示时间步t的隐藏变量。与多层感知机不同的是，我们在这里保存了前一个时间步的隐藏变量H<sup>t-1</sup>，并引入了一个新的权重参数W<sub>hh</sub> ∈ R<sup>h×h</sup>，来描述如何在当前时间步中使用前一个时间步的隐藏变量。具体地说，当前时间步隐藏变量由当前时间步的输入与前一个时间步的隐藏变量一起计算得出： </p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620012.png" alt="img"></p><p>对于时间步t，输出层的输出类似于多层感知机中的计算：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620013.png" alt="img"></p><p>其中循环神经网络的参数包括隐藏层的权重 W<sup>xh</sup> ∈ R<sup>d×h</sup>, W<sub>hh</sub> ∈ R<sup>h×h </sup>和偏置b<sup>h</sup> ∈ R<sup>1×h</sup>，以及输出层的权重W<sub>hq</sub> ∈ R<sup>h×q</sup> 和偏置b<sub>q</sub> ∈ R<sup>1×q</sup>。</p><h4 id="2-4-2-原理图"><a href="#2-4-2-原理图" class="headerlink" title="2.4.2 原理图"></a>2.4.2 原理图</h4><p>​                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620015.jpg" alt="img"> </p><p>​                                                                                        具有隐状态的循环神经网络</p><h4 id="2-4-3-训练和预测"><a href="#2-4-3-训练和预测" class="headerlink" title="2.4.3 训练和预测"></a>2.4.3 训练和预测</h4><p>训练：</p><p>①序列数据的不同采样方法（随机采样和顺序分区）将导致隐状态初始化的差异。</p><p>②我们在更新模型参数之前裁剪梯度。这样的操作的目的是：即使训练过程中某个点上发生了梯度爆炸，也能保证模型不会发散。</p><p>③我们用困惑度来评价模型。</p><p>预测：</p><p>①预热（warm-up）期：⾸先定义预测函数来生成prefix之后的新字符，其中的prefix是一个用户提供的包含多个字符的字符串。在循环遍历prefix中的开始字符时，我们不断地将隐状态传递到下一个时间步，但是不生成任何输出。</p><p>②在此期间模型会自我更新（例如，更新隐状态），但不会进行预测。预热期结束后，隐状态的值通常比刚开始的初始值更适合预测，从而预测字符并输出它们。</p><h4 id="2-4-4-现代RNN"><a href="#2-4-4-现代RNN" class="headerlink" title="2.4.4 现代RNN"></a>2.4.4 现代RNN</h4><p>（1）门控循环单元（GRU）：</p><p>门控循环单元与普通的循环神经网络之间的关键区别在于：前者支持隐状态的门控。这意味着模型有专门的机制来确定应该何时更新隐状态，以及应该何时重置隐状态。例如，如果第一个词元非常重要，模型将学会在第一次观测之后不更新隐状态。同样，模型也可以学会跳过不相关的临时观测。最后，模型还将学会在需要的时候重置隐状态。</p><p>​                <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620016.jpg" alt="img"> </p><p>​                                                                        计算门控循环单元模型中的隐状态</p><p>（2） 长短期记忆网络（LSTM）：</p><p>长短期记忆网络的设计灵感来自于计算机的逻辑门。长短期记忆网络引入了记忆元（memory cell），或简称为单元（cell）为了控制记忆元，我们需要许多门。其中一个门用来从单元中输出条目，我们将其称为输出门（output gate）。另外一个门用来决定何时将数据读入单元，我们将其称为输入门（input gate）。我们还需要一种机制来重置单元的内容，由遗忘门（forget gate）来管理，这种设计的动机与门控循环单元相同，能够通过专用机制决定什么时候记忆或忽略隐状态中的输入。</p><p>​                <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620017.jpg" alt="img"> </p><p>​                                                                                 在长短期记忆网络模型中计算记忆元</p><p>（3） 深度循环神经网络：</p><p>深度循环神经网络可以将多层循环神经网络堆叠在一起，通过对几个简单层的组合，产生了一个灵活的机制。特别是，数据可能与不同层的堆叠有关。在深度循环神经网络中，隐状态的信息被传递到当前层的下一时间步和下一层的当前时间步。深度循环神经网络需要大量的调参（如学习率和修剪）来确保合适的收敛，模型的初始化也需要谨慎。</p><p>​                                                                      <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620018.jpg" alt="img"></p><p>​                                                                                                深度循环神经网络结构  </p><p>​                                                                      <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620019.jpg" alt="img"></p><p>​                                                                                        双向循环神经网络架构</p><p>（5） 双向循环神经网络：</p><p>双向循环神经网络（bidirectional RNNs）添加了反向传递信息的隐藏层，以便更灵活地处理此类信息。（图21）描述了具有单个隐藏层的双向循环神经网络的架构。双向循环神经网络的一个关键特性是：使用来自序列两端的信息来估计输出。也就是说，我们使用来自过去和未来的观测信息来预测当前的观测。</p><p>存在的缺点：</p><p>①在训练期间，我们能够利用过去和未来的数据来估计现在空缺的词；而在测试期间，我们只有过去的数据，因此精度将会很差。</p><p>②双向循环神经网络的计算速度非常慢。其主要原因是网络的前向传播需要在双向层中进行前向和后向递归，并且网络的反向传播还依赖于前向传播的结果。因此，梯度求解将有一个非常长的链。</p><p>（6） 编码器-解码器架构：</p><p>机器翻译是序列转换模型的一个核⼼问题，其输入和输出都是长度可变的序列。为了处理这种类型的输入和输出，我们可以设计一个包含两个主要组件的架构：第一个组件是一个编码器（encoder）：它接受一个长度可变的序列作为输入，并将其转换为具有固定形状的编码状态。第二个组件是解码器（decoder）：它将固定形状的编码状态映射到长度可变的序列。这被称为编码器-解码器（encoder-decoder）架构。</p><p>​                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620020.jpg" alt="img"> </p><p>​                                                                                            编码器-解码器架构</p><p>（7） 序列到序列学习（seq2seq）：</p><p>序列到序列学习将使用两个循环神经网络的编码器和解码器，输入序列的信息被编码到循环神经网络编码器的隐状态中。为了连续生成输出序列的词元，独立的循环神经网络解码器是基于输入序列的编码信息和输出序列已经看见的或者生成的词元来预测下一个词元。</p><p>​                <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620021.jpg" alt="img"> </p><p>​                                                    使用循环神经网络编码器和循环神经网络解码器的序列到序列学习</p><h3 id="2-5-优化算法"><a href="#2-5-优化算法" class="headerlink" title="2.5 优化算法"></a>2.5 优化算法</h3><p>对于深度学习问题， 我们通常会先定义损失函数。一旦我们有了损失函数，我们就可以使用优化算法来尝试最小化损失。在优化中，损失函数通常被称为优化问题的目标函数。</p><p>（1）梯度下降（批量梯度下降）：对样本集中所有样本计算梯度后求平均，更新参数。</p><p>（2）随机梯度下降：从样本集中随机选取一个样本计算梯度,更新参数。</p><p>（3）小批量随机梯度下降：从样本集中随机选取多个样本计算梯度求平均,更新参数。</p><p>（4）动量法：是传统梯度下降法（SGD）的一种扩展，它比SGD更高效。动量法又被称作基于动量的梯度下降法（SGD with momentum），是一种使梯度向量向相关方向加速变化、最终实现加速收敛的方法。</p><p>（5）AdaGrad算法：利用梯度的大小作为调整进度速率的手段：用较小的学习率来补偿带有较大梯度的坐标。</p><p>AdaGrad算法的优点：首先，我们不再需要决定梯度何时算足够大。其次，它会随梯度的大小自动变化。通常对应于较大梯度的坐标会显著缩小，而其他梯度较小的坐标则会得到更平滑的处理。</p><p>AdaGrad算法的缺点：AdaGrad算法有时在降低学习率方面可能过于剧烈。</p><p>（6）RMSProp算法：RMSProp算法与AdaGrad算法非常相似，因为两者都使用梯度的平方来缩放系数。RMSProp算法与动量法都使用泄漏平均值。但是，RMSProp算法使用该技术来调整按系数顺序的预处理器。</p><p>（7）Adadelta算法：Adadelta是AdaGrad、RMSProp的另一种变体，使用参数的变化量来代替学习率，因此广义上认为Adadelta没有学习率。</p><p>（8）Adam算法：使用指数加权移动平均值来估算梯度的动量（momentum）和二阶矩（moment），在此基础上更新网络参数。</p><p>（9）学习率调度器：单因子调度器、多因子调度器、余弦调度器、预热。</p><h3 id="2-6-自定义网络实现"><a href="#2-6-自定义网络实现" class="headerlink" title="2.6 自定义网络实现"></a>2.6 自定义网络实现</h3><p>实现自定义块需要提供以下基本功能：</p><ol><li>将输入数据作为其前向传播函数的参数。</li><li>通过前向传播函数来生成输出。请注意，输出的形状可能与输入的形状不同。</li><li>计算其输出关于输入的梯度，可通过其反向传播函数进行访问。通常这是自动发生的。</li><li>存储和访问前向传播计算所需的参数。</li><li>根据需要初始化模型参数。</li></ol><h2 id="3-深度学习应用"><a href="#3-深度学习应用" class="headerlink" title="3 深度学习应用"></a>3 深度学习应用</h2><h4 id="3-1-单发多框目标检测"><a href="#3-1-单发多框目标检测" class="headerlink" title="3.1 单发多框目标检测"></a>3.1 单发多框目标检测</h4><p>模型由一个基础网络块和多个多尺度特征块组成。每个特征块将上一层特征图的高和宽缩小（如减半），因而相同大小的锚框层数越深在原始输入图像上的感受野越大（可检测的对象越大）。每个块生成一定数量的锚框，并通过类别预测层和边界框预测层预测其类别和偏移量来检测大小不同的目标。</p><p>​                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620022.jpg" alt="img"> </p><p>​                            单发多框检测模型主要由一个基础网络块和若干多尺度特征块串联而成</p><h4 id="3-1-1类别预测层"><a href="#3-1-1类别预测层" class="headerlink" title="3.1.1类别预测层"></a>3.1.1类别预测层</h4><p>设目标类别的数量为q。这样一来，锚框有q+1个类别，其中0类是背景。在某个尺度下，设特征图的高和宽分别为h和w。如果以其中每个像素为中心生成a个锚框，那么我们需要对hwa个锚框进行分类。</p><p>类别预测层是一个填充为1，卷积核为3×3，输出通道数为a（q+1）的卷积层，可使输入和输出的宽度和高度保持不变，第i（q+1）+j（0≤j≤q）个输出通道中的第x行y列元素值代表了输入中第x行y列像素值生成的第i个锚框的类别索引为j时的预测值。</p><h4 id="3-1-2边界框预测层"><a href="#3-1-2边界框预测层" class="headerlink" title="3.1.2边界框预测层"></a>3.1.2边界框预测层</h4><p>边界框预测层的设计与类别预测层类似。不同的是，需要为每个锚框预测4个偏移量，而不是q+1个类别。</p><p>​                      <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620023.jpg" alt="img"></p><p>​                                                                    边界框预测层输入输出大小示意图</p><h4 id="3-1-3连结多尺度的预测"><a href="#3-1-3连结多尺度的预测" class="headerlink" title="3.1.3连结多尺度的预测"></a>3.1.3连结多尺度的预测</h4><p>在不同的尺度下，特征图的形状或以同一单元为中心的锚框的数量可能会有所不同。因此，不同块的预测输出的形状可能会有所不同。</p><p>为了提高计算效率，我们将模型每个块的预测结果转成二维的（批量大小，高×宽×通道数）的格式，再在维度1上连结。</p><h4 id="3-1-4高和宽减半块"><a href="#3-1-4高和宽减半块" class="headerlink" title="3.1.4高和宽减半块"></a>3.1.4高和宽减半块</h4><p>为了在多个尺度下检测目标，模型中多数特征块采用高和宽减半块，即多数特征块将来自上一模块的输入特征图的高度和宽度减半。更具体地说，每个高和宽减半块由两个填充为1的3×3的卷积层、以及步幅为2的2×2最大汇聚层组成。</p><h4 id="3-1-5基本网络块"><a href="#3-1-5基本网络块" class="headerlink" title="3.1.5基本网络块"></a>3.1.5基本网络块</h4><p>基本网络块用于从输入图像中抽取特征。为了计算简洁，模型采用了一个小的基础网络，该网络串联3个高和宽减半块，并逐步将通道数翻倍。</p><h4 id="3-1-6完整的模型"><a href="#3-1-6完整的模型" class="headerlink" title="3.1.6完整的模型"></a>3.1.6完整的模型</h4><p>完整的单发多框检测模型由五个模块组成。每个块生成的特征图既用于生成锚框，又用于预测这些锚框的类别和偏移量。在这五个模块中，第一个是基本网络块，第二个到第四个是高和宽减半块，最后一个模块使用全局最大池化将高度和宽度都降到1。</p><h3 id="3-2-语义分割"><a href="#3-2-语义分割" class="headerlink" title="3.2 语义分割"></a>3.2 语义分割</h3><h4 id="3-2-1语义分割基本原理"><a href="#3-2-1语义分割基本原理" class="headerlink" title="3.2.1语义分割基本原理"></a>3.2.1语义分割基本原理</h4><p>（1）语义分割：识别并理解图像中每一个像素的内容（对图像每一像素分类），其语义区域的标注和预测是像素级的。与目标检测相比，语义分割标注的像素级的边框显然更加精细。</p><p>​                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620024.jpg" alt="img"> </p><p>​                                                                语义分割中图像有关狗、猫和背景的标签</p><p>（2）模型：采用全卷积网络构建模型，引入1×1卷积层将输出通道数调整为待分割图像一个像素的可能类别总数，引入转置卷积层将输出图像尺寸调整得和输入图像尺寸一样。</p><h4 id="3-2-2图像分割和实例分割（语义分割介于二者之间）"><a href="#3-2-2图像分割和实例分割（语义分割介于二者之间）" class="headerlink" title="3.2.2图像分割和实例分割（语义分割介于二者之间）"></a>3.2.2图像分割和实例分割（语义分割介于二者之间）</h4><p>图像分割将图像划分为若干组成区域,这类问题的方法通常利用图像中像素之间的相关性。它在训练时不需要有关困像像素的标签信息，在预测时也无法保证分割出的区域具有我们希望得到的语义。例如猫狗图像，图像分割可能会将猫狗分为两个区域：一个覆盖以黑色为主的嘴和眼睛，另一个覆盖以黄色为主的其余部分身体。</p><p>实例分割也叫同时检测并分割，它研究如何识别图像中各个目标实例的像素级区域。与语义分割不同,实例分割不仅需要区分语义，还要区分不同的目标实例。例如，如果图像中有两条狗，则实例分割需要区分像素属于的两条狗中的哪一条。</p><h4 id="3-2-3转置卷积"><a href="#3-2-3转置卷积" class="headerlink" title="3.2.3转置卷积"></a>3.2.3转置卷积</h4><p>（1）下采样和上采用</p><p>下采样：即缩小图像，常用的方法主要有：卷积、池化。第六章我们学习的卷积层和汇聚（池化）层,通常会减少输入图像的空间维度（高和宽)。</p><p>上采样：即放大图像，常用的方法主要有：转置卷积、上池化（Unpooling） 。</p><p>在语义分割中，我们需要对输入图像的每一像素分类。但下采样会使得输出图像和输入图像的空间维度不一致，所以我们在使用完下采样后还得再使用上采样使得输出图像和输入图像的空间维度相同，进而通过输出像素的类别直接判定输入像素的类别。</p><p>（2）基本操作</p><p>   暂时忽略通道，从基本的转置卷积开始：假设我们有一个nh×nw的输入张量和一个kh×kw的卷积核。没有填充、以步幅为1滑动卷积核窗口，每行nw次，每列nh次，共产生nhnw个中间结果。每个中间结果都是一个（nh+kh-1）×（nw+kw-1）的张量。每个输入元素和卷积核相乘，所得结果根据输入元素的位置*指定步幅滑动。</p><p>​        <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620025.jpg" alt="img"> </p><p>​    2×2的输入张量计算卷积核为2×2的转置卷积。阴影部分是中间张量的一部分，也是用于计算的输入和卷积核张量元素。</p><p>（3）填充、步幅和多通道</p><p>在转置卷积中，填充被应用于输出，将减少输出的高和宽（常规卷积的填充应用于输入，将增加输入的高和宽）。例如，当转置卷积将高和宽两侧的填充数指定为1时，将删除输出的第一和最后的行与列。在转置卷积中，步幅被应用于输出，而不是输入。每个输入元素和卷积核相乘，所得结果根据输入元素的位置×指定步幅滑动。</p><p>​                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620026.jpg" alt="img"> </p><p>​                                                                            卷积核为2 × 2，步幅为2的转置卷积</p><p>（4）为什么叫转置卷积?</p><p>抽象来看，给定输入向量x和权重矩阵W，常规卷积的前向传播函数可以通过将其输入与权重矩阵相乘并输出向量y=Wx来实现，其反向传播函数可以通过将其输入与权重矩阵的转置WT相乘来实现。</p><p>转置卷积则和常规卷积相反，它的正向传播和反向传播函数将输入向量分别与W和W相乘。</p><h4 id="3-2-4全卷积网络"><a href="#3-2-4全卷积网络" class="headerlink" title="3.2.4全卷积网络"></a>3.2.4全卷积网络</h4><p>语义分割是对图像中的每个像素分类。全卷积网络采用卷积神经网络实现了从图像像素到像素类别的变换。与我们之前在图像分类或目标检测部分介绍的卷积神经网络不同，全卷积网络引入的转置卷积将中间层特征图的高和宽变换回输入图像的尺寸。因此，输出的类别预测与输入图像在像素级别上具有一一对应关系：通道维的输出即该位置对应像素的类别预测。</p><p>模型结构：首先，使用在ImageNet数据集上训练好的ResNet-18模型前16层作为卷积神经网络提取图像特征。接下来，使用1×1卷积层将输出通道数转换为Pascal VOC2012数据集的类数（21类，即每个像素有21种索引类别）。最后，通过转置卷积将特征图的高度和宽度增加32倍,将其变回输入图像的高和宽。</p><p>​                                                                                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620027.jpg" alt="img"> </p><p>​                                                                                                全卷积网络结构</p><h3 id="3-3-风格迁移"><a href="#3-3-风格迁移" class="headerlink" title="3.3 风格迁移"></a>3.3 风格迁移</h3><p>（1）风格迁移：是指使用卷积神经网络，自动将一个图像（风格图像）的风格应用到另一图像（内容图像）之上得到合成图像。</p><p>​            <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620028.jpg" alt="img"> </p><p>​                                                    输入内容图像和风格图像，输出风格迁移后的合成图像</p><p>（2）方法</p><p>①首先，初始化合成图像为内容图像。</p><p>②然后，选择一个预训练好的卷积神经网络net（其网络参数在训练中无需更新），抽取内容图像和风格图像在net的某些层输出作为内容特征或风格特征标签。</p><p>③在此基础上，通过前向传播（实线箭头方向）抽取合成图像的风格层、内容层和输出层输出，计算三者损失，并通过反向传播（虚线箭头方向）更新合成图像（这个才是我们训练更新的目标）。</p><p>（3）风格迁移常用的损失函数由3部分组成：</p><p>①内容损失使合成图像与内容图像在内容特征上接近。</p><p>②风格损失使合成图像与风格图像在风格特征上接近。</p><p>③全变分损失则有助于减少合成图像中的噪点。</p><p>​                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620029.jpg" alt="img"> </p><p>​                                            基于卷积神经网络的风格迁移。实线箭头和虚线箭头分别表示前向传播和反向传播</p><h3 id="3-4-中英文翻译系统"><a href="#3-4-中英文翻译系统" class="headerlink" title="3.4 中英文翻译系统"></a>3.4 中英文翻译系统</h3><p>机器翻译（machine translation）指的是将序列从一种语言自动翻译成另一种语言，属于序列到序列学习问题。目前有两类机器翻译方法：①统计机器翻译：统计学方法②神经机器翻译：神经网络的方法。</p><p>本中英文翻译系统基于序列到序列学习（seq2seq）的循环神经网络，下面是具体设计：</p><p>（1）预处理数据集</p><p>数据集中的每一行都是制表符分隔的文本序列对，序列对由英文文本序列和翻译后的法语文本序列组成（中文是源语言，英语是目标语言）。每个文本序列可以是一个句子，也可以是包含多个句子的一个段落。用空格代替不间断空格，使用小写字母替换大写字母，并在单词和标点符号之间插入空格。</p><p>（2）词元化</p><p>单词级词元化：利用空格切分。其中每个词元要么是一个词，要么是一个标点符号。</p><p>（3）词表化</p><p>分别为源语言和目标语言构建两个词表。为了防止词表过大，将出现次数少于2次的低频率词元视为相同的未知“<unk>”词元。此外，还指定了额外的特定词元，例如在小批量时用于将序列填充到相同长度的填充词元“<pad>”,以及序列开始词元“<bos>”和结束词元“<eos>”。</p><p>（4）转化成适于循环神经网络处理的数据集</p><p>①采用截断和填充定义序列长度统一化函数。注意：此处的长度统一化是指将源语言序列和目标语言序列长度分别统一化，并不是说要求两类序列长度也要相同。</p><p>②定义将序列转换成张量函数。将特定的“<eos>”词元添加到所有序列的末尾，用于表示序列的结束。还记录了每个文本序列的长度，统计长度时排除了填充词元。</p><p>（5）训练</p><p>强制教学：用特定的序列开始词元（“<bos>”）和原始的输出序列（不包括序列结束词元“<eos>”）拼接在一起作为解码器的输入。</p><p>（6）预测</p><p>每个解码器当前时间步的输入来自于前一时间步的预测词元。与训练类似，序列开始词元（“<bos>”）在初始时间步被输入到解码器中。</p><p>（7）预测序列的评估</p><p>BLEU（bilingual evaluation understudy）：通过测量预测序列和标签序列之间的n元语法的匹配度来评估预测性能。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620030.png" alt="img"></p><p>·lenlabel：标签序列长度（单词数）</p><p>·lenpred：预测序列长度（单词数）</p><p>·Pn  = <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620031.png" alt="img"></p><p>·k是用于匹配的最长的n元语法</p><p>当预测序列与标签序列完全相同时，BLEU为1，即BLEU值越大预测性能越好。</p><p>​                                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620032.jpg" alt="img"></p><p>​                                                                循环神经网络编码器-解码器模型中的层</p><p>​                    <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312131620033.jpg" alt="img"> </p><p>​                                                    使用循环神经网络编码器-解码器逐词元地预测输出序列</p><h2 id="4-结束语"><a href="#4-结束语" class="headerlink" title="4 结束语"></a>4 结束语</h2><p>经过一个学期的学习，我获益匪浅。老师从零基础带着我们手把手搭建深度学习环境，讲解每个网络的Python代码实现，由浅入深，讲解详细。老师还及时更正书本的错误或者书本写的不易理解的地方用更通俗的讲解。从Python基础知识，深度学习基础知识到多层感知机，卷积神经网络，循环神经网络，优化算法再到计算机视觉，让我对深度学习有了一个入门的理解。尤其是优化算法和计算机视觉这两章，因为之前也了解过一点深度学习，也打过一些比赛，在改进网络的时候通常是手动调参，网上百度找一些调参方法，没有系统的学习过理论知识，经过老师的讲解让我对优化算法和计算机视觉有了更系统的理解。希望课程能增加一些与所学知识相关的比赛练习，我觉得这样更能调动同学们的兴趣和增强动手能力。最后感谢老师的课程使我获益匪浅，感谢老师辛苦的备课。</p><h2 id="5-参考文献"><a href="#5-参考文献" class="headerlink" title="5 参考文献"></a>5 参考文献</h2><p>[1]  Aston Zhang, Zachary C. Lipton, Mu Li, and Alexander J. Smola编著.《动⼿学深度学习》人们邮电出版社Jul 31, 2022年</p><p>[2] 孙志军, 薛磊, 许阳明, 王正. 深度学习研究综述[J]. 计算机应用研究, 2012, 29(08)：2806-2810.</p><p>[3] 周飞燕, 金林鹏, 董军. 卷积神经网络研究综述[J]. 计算机学报, 2017, 40(06)：1229-1251.</p><p>[4] 尹宝才, 王文通, 王立春. 深度学习研究综述[J]. 北京工业大学学报, 2015, 41(01)：48-59.</p><p>[5] 刘建伟, 刘媛, 罗雄麟. 深度学习研究进展[J]. 计算机应用研究,2014, 31(07)：1921-1930+1942.</p><p>[6] 郭丽丽, 丁世飞. 深度学习研究进展[J]. 计算机科学, 2015, 42(05)：28-33.</p><p>[7] 田萱, 王亮, 丁琪. 基于深度学习的图像语义分割方法综述[J]. 软件学报, 2019, 30(02)：440-468.</p><p>[8] 胡越, 罗东阳, 花奎, 路海明, 张学工. 关于深度学习的综述与讨论[J]. 智能系统学报, 2019, 14(01)：1-19.</p><p>[9] 张润, 王永滨. 机器学习及其算法和发展研究[J]. 中国传媒大学学报(自然科学版), 2016, 23(02)：10-18+24.</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
