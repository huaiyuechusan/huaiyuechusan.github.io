<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python深入和提高</title>
      <link href="/archives/8df5f8b9.html"/>
      <url>/archives/8df5f8b9.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Python深入和提高"><a href="#Python深入和提高" class="headerlink" title="Python深入和提高"></a>Python深入和提高</h1><h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><h3 id="异常的本质-调试错误的核心理念"><a href="#异常的本质-调试错误的核心理念" class="headerlink" title="异常的本质-调试错误的核心理念"></a>异常的本质-调试错误的核心理念</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555906.png" alt="image-20231119182040284"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555908.png" alt="image-20231121150902973"></p><h3 id="try-except基本结构"><a href="#try-except基本结构" class="headerlink" title="try_except基本结构"></a>try_except基本结构</h3><p><strong>try…一个except结构</strong></p><p>try…except是最常见的异常处理结构。结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被监控可能发生引起异常的语句块</span><br><span class="line"><span class="keyword">except</span> BaseException [<span class="keyword">as</span> e]:</span><br><span class="line">    异常处理语句</span><br></pre></td></tr></table></figure><ol><li><code>try</code>块包含着可能引发异常的代码，<code>except</code>块则用来捕捉和处理发生的异常。</li><li>执行的时候，如果<code>try</code>块中没有引发异常，则跳过<code>except</code>块继续执行后续代码；</li><li>执行的时候，如果<code>try</code>块中发生了异常，则跳过<code>try</code>块中的后续代码，跳到相应的<code>except</code></li><li>块中处理异常；异常处理完后，继续执行后续代码。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">    a = <span class="number">2</span> / <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step2&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step3&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;step4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">step1</span></span><br><span class="line"><span class="string">step3</span></span><br><span class="line"><span class="string">division by zero</span></span><br><span class="line"><span class="string">step4</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="try-多个except结构"><a href="#try-多个except结构" class="headerlink" title="try_多个except结构"></a>try_多个except结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;请输入被除数：&quot;</span>)</span><br><span class="line">    b = <span class="built_in">input</span>(<span class="string">&quot;请输入除数：&quot;</span>)</span><br><span class="line">    c = <span class="built_in">float</span>(a)/<span class="built_in">float</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;异常，除数不能为0&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;异常：除数和被除数都应该为数值类型&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请输入被除数：1</span></span><br><span class="line"><span class="string">请输入除数：dd</span></span><br><span class="line"><span class="string">could not convert string to float: &#x27;dd&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;ValueError&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="try…except…else结构"><a href="#try…except…else结构" class="headerlink" title="try…except…else结构"></a>try…except…else结构</h3><p><code>try..except...else</code>结构增加了<code>else</code>块。如果<code>try</code>块中没有抛出异常，则执行<code>else</code>块。如果<code>try</code>块中抛出异常，则执行<code>except</code>块，不执行<code>else</code>块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;请输入被除数：&quot;</span>)</span><br><span class="line">    b = <span class="built_in">input</span>(<span class="string">&quot;请输入除数：&quot;</span>)</span><br><span class="line">    c = <span class="built_in">float</span>(a)/<span class="built_in">float</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;除的结果为：&quot;</span>, c)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请输入被除数：3</span></span><br><span class="line"><span class="string">请输入除数：4</span></span><br><span class="line"><span class="string">0.75</span></span><br><span class="line"><span class="string">除的结果为： 0.75</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="try…except…finally结构和return语句位置"><a href="#try…except…finally结构和return语句位置" class="headerlink" title="try…except…finally结构和return语句位置"></a>try…except…finally结构和return语句位置</h3><p><code>try...except..finally</code>结构中，<code>finally</code>块无论是否发生异常都会被执行；通常用来释放<code>try</code>块中申请的资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;请输入被除数：&quot;</span>)</span><br><span class="line">    b = <span class="built_in">input</span>(<span class="string">&quot;请输入除数：&quot;</span>)</span><br><span class="line">    c = <span class="built_in">float</span>(a)/<span class="built_in">float</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;除的结果为：&quot;</span>, c)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是finally语句，无论是否发生异常我都会被执行&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请输入被除数：3</span></span><br><span class="line"><span class="string">请输入除数：0</span></span><br><span class="line"><span class="string">float division by zero</span></span><br><span class="line"><span class="string">&lt;class &#x27;ZeroDivisionError&#x27;&gt;</span></span><br><span class="line"><span class="string">我是finally语句，无论是否发生异常我都会被执行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>return语句和异常处理问题</strong></p><p>由于<code>return</code>有两种作用：结束方法运行、返回值。我们一般不把<code>return</code>放到异常处理结构中，而是放到方法最后。</p><h3 id="常见异常汇总说明"><a href="#常见异常汇总说明" class="headerlink" title="常见异常汇总说明"></a>常见异常汇总说明</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555909.png" alt="image-20231120213240849"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555910.png" alt="image-20231120213330316"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555911.png" alt="image-20231120213358038"></p><div class="table-container"><table><thead><tr><th><strong>异常名称</strong></th><th style="text-align:center"><strong>说明</strong></th></tr></thead><tbody><tr><td>ArithmeticError</td><td style="text-align:center">所有数值计算错误的基类</td></tr><tr><td>AssertionError</td><td style="text-align:center">断言语句失败</td></tr><tr><td>AttributeError</td><td style="text-align:center">对象没有这个属性</td></tr><tr><td>BaseException</td><td style="text-align:center">所有异常的基类</td></tr><tr><td>DeprecationWarning</td><td style="text-align:center">关于被弃用的特征的警告</td></tr><tr><td>EnvironmentError</td><td style="text-align:center">操作系统错误的基类</td></tr><tr><td>EOFError</td><td style="text-align:center">没有内建输入,到达EOF 标记</td></tr><tr><td>Exception</td><td style="text-align:center">常规错误的基类</td></tr><tr><td>FloatingPointError</td><td style="text-align:center">浮点计算错误</td></tr><tr><td>FutureWarning</td><td style="text-align:center">关于构造将来语义会有改变的警告</td></tr><tr><td>GeneratorExit</td><td style="text-align:center">生成器(generator)发生异常来通知退出</td></tr><tr><td>ImportError</td><td style="text-align:center">导入模块/对象失败</td></tr><tr><td>IndentationError</td><td style="text-align:center">缩进错误</td></tr><tr><td>IndexError</td><td style="text-align:center">序列中没有此索引(index)</td></tr><tr><td>IOError</td><td style="text-align:center">输入/输出操作失败</td></tr><tr><td>KeyboardInterrupt</td><td style="text-align:center">用户中断执行(通常是输入^C)</td></tr><tr><td>KeyError</td><td style="text-align:center">映射中没有这个键</td></tr><tr><td>LookupError</td><td style="text-align:center">无效数据查询的基类</td></tr><tr><td>MemoryError</td><td style="text-align:center">内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td>NameError</td><td style="text-align:center">未声明/初始化对象 (没有属性)</td></tr><tr><td>NotImplementedError</td><td style="text-align:center">尚未实现的方法</td></tr><tr><td>OSError</td><td style="text-align:center">操作系统错误</td></tr><tr><td>OverflowError</td><td style="text-align:center">数值运算超出最大限制</td></tr><tr><td>OverflowWarning</td><td style="text-align:center">旧的关于自动提升为长整型(long)的警告</td></tr><tr><td>PendingDeprecationWarning</td><td style="text-align:center">关于特性将会被废弃的警告</td></tr><tr><td>ReferenceError</td><td style="text-align:center">弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td>RuntimeError</td><td style="text-align:center">一般的运行时错误</td></tr><tr><td>RuntimeWarning</td><td style="text-align:center">可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td>StandardError</td><td style="text-align:center">所有的内建标准异常的基类</td></tr><tr><td>StopIteration</td><td style="text-align:center">迭代器没有更多的值</td></tr><tr><td>SyntaxError</td><td style="text-align:center">Python 语法错误</td></tr><tr><td>SyntaxWarning</td><td style="text-align:center">可疑的语法的警告</td></tr><tr><td>SystemError</td><td style="text-align:center">一般的解释器系统错误</td></tr><tr><td>SystemExit</td><td style="text-align:center">解释器请求退出</td></tr><tr><td>TabError</td><td style="text-align:center">Tab 和空格混用</td></tr><tr><td>TypeError</td><td style="text-align:center">对类型无效的操作</td></tr><tr><td>UnboundLocalError</td><td style="text-align:center">访问未初始化的本地变量</td></tr><tr><td>UnicodeDecodeError</td><td style="text-align:center">Unicode 解码时的错误</td></tr><tr><td>UnicodeEncodeError</td><td style="text-align:center">Unicode 编码时错误</td></tr><tr><td>UnicodeError</td><td style="text-align:center">Unicode 相关的错误</td></tr><tr><td>UnicodeTranslateError</td><td style="text-align:center">Unicode 转换时错误</td></tr><tr><td>UserWarning</td><td style="text-align:center">用户代码生成的警告</td></tr><tr><td>ValueError</td><td style="text-align:center">传入无效的参数</td></tr><tr><td>Warning</td><td style="text-align:center">警告的基类</td></tr><tr><td>WindowsError</td><td style="text-align:center">系统调用失败</td></tr><tr><td>ZeroDivisionError</td><td style="text-align:center">除(或取模)零 (所有数据类型)</td></tr></tbody></table></div><h3 id="with上下文管理资源"><a href="#with上下文管理资源" class="headerlink" title="with上下文管理资源"></a>with上下文管理资源</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555912.png" alt="image-20231121151122084"></p><p>​    </p><p><code>finally</code>块由于是否发生异常都会执行，通常我们放释放资源的代码。其实，我们可以通过<code>with</code>上下文管理，更方便的实现释放资源的操作。</p><p><code>with</code>上下文管理的语法结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> context_expr [ <span class="keyword">as</span> var]:</span><br><span class="line">    语句块</span><br></pre></td></tr></table></figure><blockquote><p><code>with</code>上下文管理可以自动管理资源，在<code>with</code>代码块执行完毕后自动还原进入该代码之前的现场或上下文。不论何种原因跳出<code>with</code>块，不论是否有异常，==总能保证资源正常释放==。极大的简化了工作，在文件操作、网络通信相关的场合非常常用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;d:/test.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    context = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(context)</span><br></pre></td></tr></table></figure><h3 id="traceback模块的使用-异常写入日志文件"><a href="#traceback模块的使用-异常写入日志文件" class="headerlink" title="traceback模块的使用-异常写入日志文件"></a>traceback模块的使用-异常写入日志文件</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555913.png" alt="image-20231121152312711"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">    num = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    traceback.print_exc()  <span class="comment"># 打印异常信息</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">    num = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="comment"># 将异常信息输出到文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;d:/test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        traceback.print_exc(file=f)</span><br></pre></td></tr></table></figure><h3 id="自定义异常-raise抛出异常"><a href="#自定义异常-raise抛出异常" class="headerlink" title="自定义异常-raise抛出异常"></a>自定义异常-raise抛出异常</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555914.png" alt="image-20231121153406627"></p><p>程序开发中，有时候我们也需要自己定义异常类。自定义异常类一般都是运行时异常，通常继承<code>Exception</code>或其子类即可。命名一般以<code>Error</code>、<code>Exception</code>为后缀。</p><p><strong>自定义异常由<code>raise</code>语句主动抛出。</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义异常类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, errorinfo</span>):</span><br><span class="line">        Exception.__init__(self)</span><br><span class="line">        self.errorinfo = errorinfo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.errorinfo) + <span class="string">&quot;,年龄错误，应该在1-150之间&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  <span class="comment"># 如果是true，则模块是作独立文件执行，下面可以写测试代码</span></span><br><span class="line">    age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个年龄：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="number">1</span> <span class="keyword">or</span> age &gt; <span class="number">150</span>:</span><br><span class="line">        <span class="keyword">raise</span> AgeError(age)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正常的年龄：&quot;</span>, age)</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入一个年龄：170</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;D:\2022百战Python\Python深入和提高\异常机制\practice.py&quot;, line 86, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    raise AgeError(age)</span></span><br><span class="line"><span class="string">__main__.AgeError: 170,年龄错误，应该在1-150之间</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Pycharm调试模式debug视图"><a href="#Pycharm调试模式debug视图" class="headerlink" title="Pycharm调试模式debug视图"></a>Pycharm调试模式debug视图</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555915.png" alt="image-20231121155153724"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555917.png" alt="image-20231121155224700"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555918.png" alt="image-20231121155244514"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311211555919.png" alt="image-20231121155300946"></p><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><h3 id="fle文件操作-操作系统底层关系-写入文件"><a href="#fle文件操作-操作系统底层关系-写入文件" class="headerlink" title="fle文件操作-操作系统底层关系-写入文件"></a>fle文件操作-操作系统底层关系-写入文件</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220078.png" alt="image-20231121161102367"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220080.png" alt="image-20231121161205752"></p><p>Python标准库中，如下是文件操作相关的模块:</p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>io模块</td><td>文件流的输入和输出操作 input output</td></tr><tr><td>os模块</td><td>基本操作系统功能，包括文件操作</td></tr><tr><td>glob模块</td><td>查找符合特定规则的文件路径名</td></tr><tr><td>fnmatch模块</td><td>使用模式来匹配文件路径名</td></tr><tr><td>fileinput模块</td><td>处理多个输入文件</td></tr><tr><td>filecmp模块</td><td>用于文件的比较</td></tr><tr><td>csv模块</td><td>用于csv文件处理</td></tr><tr><td>pickle和cPickle</td><td>用于序列化和反序列化</td></tr><tr><td>xml包</td><td>用于XML数据处理</td></tr><tr><td>bz2、gzip、zipfile、zlib、tarfile</td><td>用于处理压缩和解压缩文件（分别对应不同的算法）</td></tr></tbody></table></div><p><strong>创建文件对象open()</strong></p><p>open0函数用于创建文件对象，基本语法格式如下：</p><p><code>open(文件名[打开方式])</code></p><p>如果只是文件名，代表在当前目录下的文件。文件名可以录入全路径，比如：<code>D:\a\b.txt</code></p><p>为了减少<code>\</code>的输入，可以使用原始字符串：<code>r &quot;d:\b.txt”</code>示例如下：</p><p><code>f = open(r&quot;d:\b.txt&quot;, &quot;w&quot;)</code></p><p>打开方式有如下几种：</p><div class="table-container"><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>读read模式</td></tr><tr><td>w</td><td>写wite模式。如果文件不存在则创建；如果文件存在，则重写新内容</td></tr><tr><td>a</td><td>追加append模式。如果文件不存在则创建；如果文件存在，则在文件<strong>末尾追加内容</strong></td></tr><tr><td>b</td><td>二进制binary模式（可与其他模式组合使用）</td></tr><tr><td>+</td><td>读、写模式（可与其他模式组合使用）</td></tr></tbody></table></div><blockquote><p>文本文件对象和二进制文件对象的创建：</p><ol><li>如果没有增加模式<code>b</code>,则<strong>默认创建的是文本文件对象</strong>，处理的基本单元是“字符”。</li><li>如果是二进制模式<code>b</code>,则创建的是二进制文件对象，处理的基本单元是“字节”。</li></ol></blockquote><p><strong>基本的文件写入操作</strong></p><p>文本文件的写入一般就是三个步骤：</p><ol><li>创建文件对象</li><li>写入数据</li><li>关闭文件对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="编码知识-中文乱码问题解决"><a href="#编码知识-中文乱码问题解决" class="headerlink" title="编码知识-中文乱码问题解决"></a>编码知识-中文乱码问题解决</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220081.png" alt="image-20231121194831439"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220082.png" alt="image-20231121195124583"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定文件编码解决中文乱码问题</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;你好&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>write()/writelines()写入数据</strong></p><p><code>write(a)</code>:把字符串a写入到文件中</p><p><code>writelines(b)</code>：把字符串列表事入文件中，不添加换行符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># f.write(&quot;你好&quot;)</span></span><br><span class="line">    s = [<span class="string">&quot;年龄\n&quot;</span>, <span class="string">&quot;姓名\n&quot;</span>, <span class="string">&quot;学校\n&quot;</span>]</span><br><span class="line">    f.writelines(s)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220083.png" alt="image-20231121195750398"></p><h3 id="关闭流要点"><a href="#关闭流要点" class="headerlink" title="关闭流要点"></a>关闭流要点</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220084.png" alt="image-20231121195847695"></p><p>由于文件底层是由操作系统控制，所以我们打开的文件对象必须<strong>显式调用</strong><code>close()</code>方法关闭文件对象。当调用<code>close()</code>方法时，首先会把缓冲区数据写入文件（也可以直接调用<code>flush()</code>方法），再关闭文件，释放文件对象。</p><p>为了确保打开的文件对象正常关闭，一般结合异常机制的<code>finally</code>或者<code>with</code>关键字实现无论何种情况都能关闭打开的文件对象。</p><h4 id="finally异常管理"><a href="#finally异常管理" class="headerlink" title="finally异常管理"></a>finally异常管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结合异常机制的finally,确保关闭文件对象</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    f.write(s)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h4 id="with上下文管理"><a href="#with上下文管理" class="headerlink" title="with上下文管理"></a>with上下文管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用with管理文件写入操作</span></span><br><span class="line">s = [<span class="string">&quot;年龄\n&quot;</span>, <span class="string">&quot;姓名\n&quot;</span>, <span class="string">&quot;学校\n&quot;</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(s)</span><br></pre></td></tr></table></figure><h3 id="文本文件的读取"><a href="#文本文件的读取" class="headerlink" title="文本文件的读取"></a>文本文件的读取</h3><p>文件的读取一般使用如下三个方法：</p><ol><li><p><code>read([size])</code></p><p>从文件中读取<code>size</code>个字符，并作为结果返回。<strong>如果没有<code>size</code>参数，则读取整个文件。</strong></p><p>读取到文件末尾，会返回空字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.read(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    s2 = f.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第二次读的：&quot;</span>, s2)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">年龄</span></span><br><span class="line"><span class="string">姓名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第二次读的： 学校</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p><code>readline()</code></p><p>读取一行内容作为结果返回。读取到文件末尾，会返回空字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">年龄</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p><code>readlines()</code></p><p>文本文件中，每一行作为一个字符串存入列表中，返回该列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.readlines()</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;年龄\n&#x27;, &#x27;姓名\n&#x27;, &#x27;学校\n&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">年龄</span></span><br><span class="line"><span class="string">姓名</span></span><br><span class="line"><span class="string">学校</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = f.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(line, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">                     </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">年龄</span></span><br><span class="line"><span class="string">姓名</span></span><br><span class="line"><span class="string">学校</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="文本文件操作-为每行的末尾添加行号"><a href="#文本文件操作-为每行的末尾添加行号" class="headerlink" title="文本文件操作-为每行的末尾添加行号"></a>文本文件操作-为每行的末尾添加行号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为文本文件每行的末尾添加行号</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    <span class="built_in">print</span>(lines)</span><br><span class="line">    lines2 = [lines.rstrip() + <span class="string">&quot;#&quot;</span> + <span class="built_in">str</span>(index) + <span class="string">&quot;\n&quot;</span> <span class="keyword">for</span> index, lines <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(lines) + <span class="number">1</span>), lines)]</span><br><span class="line">    <span class="built_in">print</span>(lines2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;d:\test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(lines2)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;年龄\n&#x27;, &#x27;姓名\n&#x27;, &#x27;学校\n&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;年龄#1\n&#x27;, &#x27;姓名#2\n&#x27;, &#x27;学校#3\n&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="二进制文件的读写-图片文件的拷贝"><a href="#二进制文件的读写-图片文件的拷贝" class="headerlink" title="二进制文件的读写-图片文件的拷贝"></a>二进制文件的读写-图片文件的拷贝</h3><p>二进制文件的处理流程和文本文件流程一致。首先还是要创建文件对象，不过，我们需要指定二进制模式，从而创建出二进制文件对象。例如：</p><p><code>f=open(r&quot;d:\a.txt&quot;,wb)</code>        #可写的、重写模式的二进制文件对象</p><p><code>f=open(r&quot;d\a.txt&quot;,&#39;ab&#39;)</code>      #可写的、追加模式的二进制文件对象</p><p><code>f=open(r&quot;d:\a.txt&quot;,&#39;rb&#39;)</code>     #可读的二进制文件对象</p><p>创建好二进制文件对象后，仍然可以使用<code>wite()</code>、<code>read()</code>实现文件的读写操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;src.png&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> srcFile, <span class="built_in">open</span>(<span class="string">r&quot;dist.png&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> distFile:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> srcFile:</span><br><span class="line">        distFile.write(line)</span><br></pre></td></tr></table></figure><h3 id="文件对象常用方法和属性总结-seek-任意位置操作"><a href="#文件对象常用方法和属性总结-seek-任意位置操作" class="headerlink" title="文件对象常用方法和属性总结-seek()任意位置操作"></a>文件对象常用方法和属性总结-seek()任意位置操作</h3><p><strong>文件对象的属性</strong></p><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>返回文件名字</td></tr><tr><td>mode</td><td>返回文件的打开模式</td></tr><tr><td>closed</td><td>若文件被关闭，则返回True</td></tr></tbody></table></div><p><strong>文件对象的打开方式</strong></p><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>读模式</td></tr><tr><td>w</td><td>写模式</td></tr><tr><td>a</td><td>追加模式</td></tr><tr><td>b</td><td>二进制模式（可与其他模式组合）</td></tr><tr><td>+</td><td>读写模式（可与其他模式组合）</td></tr></tbody></table></div><p><strong>文件对象的常用方法</strong></p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>read([size])</td><td>从文件中读取size个字节或字符的内容返回。若省略[size],则读取到文件末尾，即一次读取文件所有内容</td></tr><tr><td>readline()</td><td>从文本文件中读取一行内容</td></tr><tr><td>readlines()</td><td>把文本文件中每一行都作为独立的字符串对象，并将这些对象放入列表返回</td></tr><tr><td>write(str)</td><td>将字符串str内容写入文件</td></tr><tr><td>writelines(s)</td><td>将字符串列表s写入文件文件，不添加换行符</td></tr><tr><td>seek(offset [,whence])</td><td>把文件指针移动到新的位置，offset表示相对于whencet的多少个字节的偏移量。offset: off为正往结束方向移动，为负往开始方向移动                                            whence不同的值代表不同含义：0:从文件头开始计算（默认值）1：从当前位置开始计算2：从文件尾开始计算</td></tr><tr><td>tell()</td><td>返回文件指针的当前位置</td></tr><tr><td>truncate([size])</td><td>不论指针在什么位置，只留下指针前sz个字节的内容，其余全部删除；如果没有传入size,则当指针当前位置到文件末尾内容全部删除</td></tr><tr><td>flush()</td><td>把缓冲区的内容写入文件，但不关闭文件</td></tr><tr><td>close()</td><td>把缓冲区内容写入文件，同时关闭文件，释放文件对象相关资源</td></tr></tbody></table></div><h3 id="使用pickle实现序列化和反序列化"><a href="#使用pickle实现序列化和反序列化" class="headerlink" title="使用pickle实现序列化和反序列化"></a>使用pickle实现序列化和反序列化</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220085.png" alt="image-20231121220236689"></p><p>序列化指的是：将对象转化成“串行化”数据形式，存储到硬盘或通过网络传输到其他地方。</p><p>反序列化是指相反的过程，将读取到的“串行化数据”转化成对象。</p><p>我们可以使用pickle模块中的函数，实现序列化和反序列操作。</p><blockquote><p>Python中，一切皆对象，对象本质上就是一个“存储数据的内存块”。有时候，我们需要将“内存块的数据”保存到硬盘上，或者通过网络传输到其他的计算机上。这时候，就需要“对象的序列化和反序列化”。对象的序列化机制广泛的应用在分布式、并行系统上。</p></blockquote><p>序列化我们使用：</p><p><code>pickle.dump(obj, file)</code>   <code>obj</code>就是要被序列化的对象，<code>file</code>指的是存储的文件</p><p><code>pickle.load(file)</code>  从<code>file</code>读取数据，反序列化成对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    name = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">    age = <span class="number">20</span></span><br><span class="line">    sorce = [<span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>]</span><br><span class="line">    resume = &#123;<span class="string">&#x27;name&#x27;</span>: name, <span class="string">&#x27;age&#x27;</span>: age, <span class="string">&#x27;sorce&#x27;</span>: sorce&#125;</span><br><span class="line">    pickle.dump(resume, f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.dat&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    resume2 = pickle.load(f)</span><br><span class="line">    <span class="built_in">print</span>(resume2)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;&#x27;name&#x27;: &#x27;jack&#x27;, &#x27;age&#x27;: 20, &#x27;sorce&#x27;: [70, 80, 90]&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="csv文件的读取和写入"><a href="#csv文件的读取和写入" class="headerlink" title="csv文件的读取和写入"></a>csv文件的读取和写入</h3><p>csv是逗号分隔符文本格式，常用于数据交换、Ec文件和数据库数据的导入和导出。</p><blockquote><p>与excel文件不同，csv文件中：</p><ul><li>值没有类型，所有值都是字符串</li><li>不能指定字体颜色等样式</li><li>不能指定单元格的宽高，不能合并单元格</li><li>没有多个工作表</li><li>不能嵌入图像图表</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 写csv文件</span></span><br><span class="line">headers = [<span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;姓名&quot;</span>]</span><br><span class="line">rows = [(<span class="number">20</span>, <span class="string">&#x27;jack&#x27;</span>), (<span class="number">40</span>, <span class="string">&#x27;john&#x27;</span>)]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 创建csv对象</span></span><br><span class="line">    b_csv = csv.writer(f)</span><br><span class="line">    <span class="comment"># 写入一行（标题）</span></span><br><span class="line">    b_csv.writerow(headers)</span><br><span class="line">    <span class="comment"># 写入多行（数据）</span></span><br><span class="line">    b_csv.writerows(rows)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 读取csv文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 创建csv对象，他是一个包含所有数据的列表，每一行为一个元素</span></span><br><span class="line">    a_csv = csv.reader(f)</span><br><span class="line">    <span class="comment"># 获得列表对象，它包含标题列的信息</span></span><br><span class="line">    headers = <span class="built_in">next</span>(a_csv)</span><br><span class="line">    <span class="comment"># 循环打印各行内容</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> a_csv:</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220086.png" alt="image-20231122135649592"></p><p>os模块可以帮助我们直接对操作系统进行操作。我们可以直接调用操作系统的可执行文件、命令，直接操作文件、目录等等。</p><blockquote><p>:warning:os模块是做系统运维非常重要的基础。</p></blockquote><h4 id="调用操作系统可执行文件-控制台乱码问题"><a href="#调用操作系统可执行文件-控制台乱码问题" class="headerlink" title="调用操作系统可执行文件-控制台乱码问题"></a>调用操作系统可执行文件-控制台乱码问题</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220087.png" alt="image-20231122140107241"></p><p><strong>控制台乱码问题</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220088.png" alt="image-20231122140130581"></p><h4 id="获取文件信息-创建和删除文件夹"><a href="#获取文件信息-创建和删除文件夹" class="headerlink" title="获取文件信息-创建和删除文件夹"></a>获取文件信息-创建和删除文件夹</h4><p>我们可以通过前面讲的文件对象实现对于文件内容的读写操作。如果，还需要对文件和目录做其他操作，可以使用<code>os</code>和<code>os.path</code>模块。</p><p><strong><code>os</code>模块下常用操作文件的方法</strong></p><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>remove(path)</td><td>删除指定的文件</td></tr><tr><td>rename(src,dest)</td><td>重命名文件或目录</td></tr><tr><td>stat(path)</td><td>返回文件的所有属性</td></tr><tr><td>listdir(path)</td><td>返回path目录下的文件和目录列表</td></tr></tbody></table></div><p><code>os</code>模块下关于目录操作的相关方法，汇总如下：</p><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>mkdir(path)</td><td>创建目录</td></tr><tr><td>makedirs(path1/path2/path3/…)</td><td>创建多级目录</td></tr><tr><td>rmdir(path)</td><td>删除目录</td></tr><tr><td>removedirs(path1/path2…)</td><td>删除多级目录</td></tr><tr><td>getcwd()</td><td>返回当前工作目录：current work dir</td></tr><tr><td>chdir(path)</td><td>把path设为当前工作目录</td></tr><tr><td>walk()</td><td>遍历目录树</td></tr><tr><td>sep</td><td>当前操作系统所使用的路径分隔符</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印基本信息</span></span><br><span class="line"><span class="built_in">print</span>(os.name)  <span class="comment"># windows--nt  linux--&gt;posix</span></span><br><span class="line"><span class="built_in">print</span>(os.sep)  <span class="comment"># windows--&gt;\  linux--&gt;/</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(os.linesep))  <span class="comment"># windows--&gt;\r\n  linux--&gt;\n</span></span><br><span class="line">a = <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(a))  <span class="comment"># repr可显示数据信息</span></span><br><span class="line"><span class="comment"># 获取文件和文件夹的相关信息</span></span><br><span class="line"><span class="built_in">print</span>(os.stat(<span class="string">&quot;practice.py&quot;</span>))</span><br><span class="line"><span class="comment"># 关于工作目录的操作</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd())  <span class="comment"># 获取当前工作目录</span></span><br><span class="line">os.chdir(<span class="string">&quot;d:&quot;</span>)  <span class="comment"># 当前工作目录就变成了d: 的根目录</span></span><br><span class="line"><span class="comment"># 创建目录，删除目录</span></span><br><span class="line">os.mkdir(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">os.rmdir(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="comment"># 创建多级目录</span></span><br><span class="line">os.makedirs(<span class="string">&quot;test1/test2/test3&quot;</span>)</span><br><span class="line"><span class="comment"># 更改目录名字</span></span><br><span class="line">os.rename(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;测试&quot;</span>)</span><br><span class="line"><span class="comment"># 列出子目录</span></span><br><span class="line">dirs = os.listdir(<span class="string">&quot;test1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dirs)</span><br></pre></td></tr></table></figure><h4 id="os-path模块-常用方法"><a href="#os-path模块-常用方法" class="headerlink" title="os.path模块-常用方法"></a>os.path模块-常用方法</h4><p>os.path模块提供了目录相关（路径判断、路径切分、路径连接、文件夹遍历）的操作</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>isabs(path)</td><td>判断path是否绝对路径</td></tr><tr><td>isdir(path)</td><td>判断path是否为目录</td></tr><tr><td>isfile(path)</td><td>判断path是否为文件</td></tr><tr><td>exists(path)</td><td>判断指定路径的文件是否存在</td></tr><tr><td>getsize(filename)</td><td>返回文件的大小</td></tr><tr><td>abspath(path)</td><td>返回绝对路径</td></tr><tr><td>dirname(p)</td><td>返回目录的路径</td></tr><tr><td>getatime(filename)</td><td>返回文件的最后访问时间</td></tr><tr><td>getmtime(filename)</td><td>返回文件的最后修改时间</td></tr><tr><td>walk(top,func,arg)</td><td>递归方式遍历目录</td></tr><tr><td>join(path,*paths)</td><td>连接多个path</td></tr><tr><td>split(path)</td><td>对路径进行分割，以列表形式返回</td></tr><tr><td>splitext(path)</td><td>从路径中分割文件的扩展名</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line">path = os.getcwd()</span><br><span class="line"><span class="comment"># 列出子目录和子文件</span></span><br><span class="line">file_list = os.listdir(path)</span><br><span class="line"><span class="comment"># 只打印以.py结尾的文件名</span></span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</span><br><span class="line">    pos = file_name.rfind(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> file_name[pos + <span class="number">1</span>:] == <span class="string">&quot;py&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(file_name)</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">practice.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*********************************&quot;</span>)</span><br><span class="line"><span class="comment"># 用推导式列出目录下所有的.py文件</span></span><br><span class="line">file_list2 = [file_name <span class="keyword">for</span> file_name <span class="keyword">in</span> os.listdir(path) <span class="keyword">if</span> file_name.endswith(<span class="string">&quot;.py&quot;</span>)]</span><br><span class="line"><span class="built_in">print</span>(file_list2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;practice.py&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="使用walk递归遍历所有子目录和子文件"><a href="#使用walk递归遍历所有子目录和子文件" class="headerlink" title="使用walk递归遍历所有子目录和子文件"></a>使用walk递归遍历所有子目录和子文件</h4><p>os.walk()方法是一个简单易用的文件、目录遍历器，可以帮助我们高效的处理文件、目录方面的事情。格式如下：</p><p><code>os.walk(top[,topdown=True[,onerror=None[,followlinks=False]]])</code></p><p>其中，<code>top</code>:是要遍历的目录。<code>topdown</code>:可选，<code>True</code>, 先遍历<code>top</code>目录再遍历子目录。</p><p>返回三元组<code>(root、dirs、files)</code>:</p><p><code>root</code>: 当前正在遍历的文件夹本身</p><p><code>dirs</code>: 一个列表，该文件夹中所有的目录的名字</p><p><code>files</code>: 一个列表，该文件夹中所有的文件的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = os.getcwd()</span><br><span class="line"><span class="comment"># topdown=False:先遍历子目录再遍历top目录</span></span><br><span class="line">list_files = os.walk(path, topdown=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> list_files:</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(root, name))</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(root, name))</span><br></pre></td></tr></table></figure><h3 id="shutil模块"><a href="#shutil模块" class="headerlink" title="shutil模块"></a>shutil模块</h3><h4 id="shutil模块（拷贝和压缩）"><a href="#shutil模块（拷贝和压缩）" class="headerlink" title="shutil模块（拷贝和压缩）"></a>shutil模块（拷贝和压缩）</h4><p><code>shutil</code>模块是python<strong>标准库</strong>中提供的，主要用来做文件和文件夹的<strong>拷贝、移动、删除</strong>等；还可以做文件和文件夹的<strong>压缩、解压缩</strong>操作。</p><p><code>os</code>模块提供了对目录或文件的一般操作。<code>shutil</code>模块作为补充，提供了移动、复制、压缩、解压等操作，这些os模块都没有提供。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">shutil.copyfile(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test_copy.tet&quot;</span>)</span><br><span class="line"><span class="comment"># 递归拷贝  忽略所有的html,htm文件</span></span><br><span class="line">shutil.copytree(<span class="string">&quot;source&quot;</span>, <span class="string">&quot;destination&quot;</span>, ignore=shutil.ignore_patterns(<span class="string">&quot;*.html&quot;</span>, <span class="string">&quot;*.htm&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="shutil和zipfile模块-压缩和解压缩"><a href="#shutil和zipfile模块-压缩和解压缩" class="headerlink" title="shutil和zipfile模块-压缩和解压缩"></a>shutil和zipfile模块-压缩和解压缩</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩某个文件</span></span><br><span class="line">shutil.make_archive(<span class="string">&quot;d:/destination&quot;</span>, <span class="string">&quot;zip&quot;</span>, <span class="string">&quot;d:/source&quot;</span>)</span><br><span class="line"><span class="comment"># 压缩：将指定多个文件压缩到一个zip文件</span></span><br><span class="line">z = zipfile.ZipFile(<span class="string">&quot;test.zip&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">z.write(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line">z.write(<span class="string">&quot;b.txt&quot;</span>)</span><br><span class="line">z.write(<span class="string">&quot;c.txt&quot;</span>)</span><br><span class="line">z.close()</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">z2 = zipfile.ZipFile(<span class="string">&quot;test.zip&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment"># 解压到的位置</span></span><br><span class="line">z2.extractall(<span class="string">&quot;d:/&quot;</span>)</span><br><span class="line">z2.close()</span><br></pre></td></tr></table></figure><h3 id="递归算法原理-自己复习前面讲过的算法原理"><a href="#递归算法原理-自己复习前面讲过的算法原理" class="headerlink" title="递归算法原理-自己复习前面讲过的算法原理"></a>递归算法原理-自己复习前面讲过的算法原理</h3><h3 id="递归算法-目录树结构的展示"><a href="#递归算法-目录树结构的展示" class="headerlink" title="递归算法-目录树结构的展示"></a>递归算法-目录树结构的展示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归遍历目录树</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_print_file</span>(<span class="params">path, level</span>):</span><br><span class="line">    child_files = os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> child_files:</span><br><span class="line">        file_path = os.path.join(path, file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> * level + file_path[file_path.rfind(os.sep) + <span class="number">1</span>:])</span><br><span class="line">        <span class="comment"># 如果是文件夹，递归打印</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">            my_print_file(file_path, level + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_print_file(<span class="string">&quot;test1&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">test2 </span></span><br><span class="line"><span class="string">test3</span></span><br><span class="line"><span class="string">test.txt</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="模块化编程理念-什么是模块-哲学思想"><a href="#模块化编程理念-什么是模块-哲学思想" class="headerlink" title="模块化编程理念-什么是模块-哲学思想"></a>模块化编程理念-什么是模块-哲学思想</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220089.png" alt="image-20231123153943364"></p><ol><li><p>Python程序由模块组成。一个模块对应python源文件，一般后缀名是：<code>.py</code></p></li><li><p>模块由语句组成。运行Python程序时，按照模块中语句的顺序依次执行</p></li><li><p>语句是Python程序的构造单元，用于创建对象、变量赋值、调用函数、控制语句等</p></li></ol><p><strong>标准库模块(standard library)</strong></p><p>与函数类似，模块也分为标准库模块和用户自定义模块。</p><p>Python标准库提供了操作系统功能、网络通信、文本处理、文件处理、数学运算等基本的功能。比如：random(随机数)、math(数学运算)、time(时间处理)、file(文件处理)、os(和操作系统交互)、sys(和解释器交互)等。</p><p>另外，Pythor还提供了海量的第三方模块，使用方式和标准库类似。功能覆盖了我们能想象到的所有领域，比如：科学计算、WEB开发、大数据、人工智能、图形系统等。</p><p><strong>为什么需要模块化编程</strong></p><p>模块(module)对应于Python源代码文件(.py文件)。模块中可以定义变量、函数、类、普通语句。这样，我们可以将一个Pythona程序分解成多个模块，便于后期的重复应用。</p><p>模块化编程(Modular Programming)将一个任务分解成多个模块。每个模块就像一个积木一样，便于后期的反复使用、反复搭建。</p><p><strong>模块化编程有如下几个重要优势：</strong></p><ol><li>便于将一个任务分解成多个模块，实现团队协同开发，完成大规模程序</li><li>实现代码复用。一个模块实现后，可以被反复调用</li><li>可维护性增强</li></ol><h3 id="模块化编程的流程-设计和实现分离的思想"><a href="#模块化编程的流程-设计和实现分离的思想" class="headerlink" title="模块化编程的流程-设计和实现分离的思想"></a>模块化编程的流程-设计和实现分离的思想</h3><p><strong>模块化编程的流程</strong></p><p>模块化编程的一般流程：</p><p>①设计API，进行功能描述。</p><p>②编码实现API中描述的功能。</p><p>③在模块中编写测试代码，并消除全局代码。</p><p>④使用私有函数实现不被外部客户端调用的模块函数。</p><p><strong>模块的API和功能描述要点</strong></p><p>API(Application Programming Interface应用程序编程接口)是用于描述模块中提供的函数和类的功能描述和使用方式描述。</p><p>模块化编程中，首先设计的就是模块的AP!(即要实现的功能描述)，然后开始编码实现API中描述的功能。最后，在其他模块中导入本模块进行调用。</p><p>可以通过help(模块名)查看模块的API。一般使用时先导入模块然后通过help函数查看。</p><p> 【示例】设计计算薪水模块的API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">本模块是用来计算公司员工的薪资</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">company = <span class="string">&quot;ailbaba&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yearSalary</span>(<span class="params">monthSalary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据传入的月薪，计算年薪</span></span><br><span class="line"><span class="string">    :param monthSalary: 月薪</span></span><br><span class="line"><span class="string">    :return: 年薪</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">daySalary</span>(<span class="params">monthSalary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据传入的月薪，计算日薪(按照一个月22.5天计算)</span></span><br><span class="line"><span class="string">    :param monthSalary: 月薪</span></span><br><span class="line"><span class="string">    :return: 日薪</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在别的模块中使用</span></span><br><span class="line"><span class="keyword">import</span> salary</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary.__doc__)</span><br><span class="line"><span class="built_in">print</span>(salary.yearSalary.__doc__)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>模块的创建和测试代码</strong></p><p>每个模块都有一个名称，通过特殊变量<code>__name__</code>可以获取模块的名称。在正常情况下，模块名字对应源文件名。仅有一个例外，就是当<strong>一个模块被作为程序入口时（主程序、交互式提示符下)</strong>，它的<code>__name__</code>的值为<code>__main__</code>。我们可以根据这个特点，将模块源代码文件中的测试代码进行独立的处理。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">本模块是用来计算公司员工的薪资</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">company = <span class="string">&quot;ailbaba&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yearSalary</span>(<span class="params">monthSalary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据传入的月薪，计算年薪</span></span><br><span class="line"><span class="string">    :param monthSalary: 月薪</span></span><br><span class="line"><span class="string">    :return: 年薪</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> monthSalary * <span class="number">12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">daySalary</span>(<span class="params">monthSalary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据传入的月薪，计算日薪(按照一个月22.5天计算)</span></span><br><span class="line"><span class="string">    :param monthSalary: 月薪</span></span><br><span class="line"><span class="string">    :return: 日薪</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> monthSalary / <span class="number">22.5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 这是一个测试</span></span><br><span class="line">    <span class="built_in">print</span>(yearSalary(<span class="number">6000</span>))</span><br></pre></td></tr></table></figure><p><strong>模块文档字符串和API设计</strong></p><p>我们可以在模块的第一行增加一个文档字符串，用于描述模块的相关功能。然后，通过<code>__doc__</code>可以获得文档字符串的内容。</p><h3 id="模块导入-import和from-import详解和区别"><a href="#模块导入-import和from-import详解和区别" class="headerlink" title="模块导入-import和from_import详解和区别"></a>模块导入-import和from_import详解和区别</h3><p>模块化设计的好处之一就是“代码复用性高”。写好的模块可以被反复调用，重复使用。模块的导入就是“在本模块中使用其他模块”。</p><p><strong>import语句导入</strong></p><p><code>import</code>语句的基本语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名             <span class="comment"># 导入一个模块</span></span><br><span class="line"><span class="keyword">import</span> 模块<span class="number">1</span>, 模块<span class="number">2</span>       <span class="comment"># 导入多个模块</span></span><br><span class="line"><span class="keyword">import</span> 模块名 <span class="keyword">as</span> 模块名<span class="comment"># 导入模块并使用新名字</span></span><br></pre></td></tr></table></figure><p> <code>import</code>加载的模块分为四种类型：</p><ol><li>使用python编写的代码<code>.py</code>文件</li><li>已被编译为共享库或<code>DLL</code>的C或C++扩展</li><li>一组模块的包</li><li>使用C编写并链接到python解释器的内置模块</li></ol><p>我们一般通过<code>import</code>语句实现模块的导入和使用，import本质上是使用了内置函数<code>__import__()</code>。</p><p>当我们通过<code>import</code>导入一个模块时，python解释器进行执行，最终会生成一个对象，这个对象就代表了被加载的模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(m))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m))</span><br><span class="line"><span class="built_in">print</span>(m.sqrt(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1630061747552</span></span><br><span class="line"><span class="string">&lt;class &#x27;module&#x27;&gt;</span></span><br><span class="line"><span class="string">2.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>由上，我们可以看到<code>math</code>模块被加载后，实际会生成一个<code>module</code>类的对象，该对象被<code>math</code>变量引用。我们可以通过<code>math</code>变量引用模块中所有的内容。</p><p>我们通过<code>import</code>导入多个模块，本质上也是生成多个<code>module</code>类的对象而已。</p><p>有时候，我们也需要给模块起个别名，本质上，这个别名仅仅是新创建一个变量引用加载的模块对象而已。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(m))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m))</span><br><span class="line"><span class="built_in">print</span>(m.sqrt(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">m2 = math</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m2))</span><br><span class="line"><span class="built_in">print</span>(m2.sqrt(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1769170820448</span></span><br><span class="line"><span class="string">&lt;class &#x27;module&#x27;&gt;</span></span><br><span class="line"><span class="string">2.0</span></span><br><span class="line"><span class="string">&lt;class &#x27;module&#x27;&gt;</span></span><br><span class="line"><span class="string">2.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>from…import导入</strong></p><p>Python中可以使用<code>from...import</code>导入<strong>模块中的成员</strong>。基本语法格式如下：</p><p><code>from 模块名 import 成员1，成员2，…</code></p><p>如果希望导入一个模块中的所有成员，则可以采用如下方式：</p><p><code>from 模块名 import *</code></p><blockquote><p>:warning:尽量避免 <code>from 模块名 import *</code>这种写法。<code>*</code>它表示导入模块中所有的不是以下划线<code>_</code>开头的名字都导入到当前位置。但你不知道你导入什么名字，很有可能会覆盖掉你之前已经定义的名字。而且可读性极其的差。一般生产环境中尽量避免使用，学习时没有关系。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt, sin</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">9</span>))</span><br><span class="line"><span class="built_in">print</span>(sin(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">3.0</span></span><br><span class="line"><span class="string">0.479425538604203</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>import语句和from…importi语句的区别</strong></p><p><code>import</code>导入的是模块。<code>from...import</code>导入的是<strong>模块中的一个函数/一个类</strong>。</p><blockquote><p>如果进行类比的话，<code>import</code>导入的是“文件””，我们要使用该“文件”下的内容，必须前面加“文件名称”。<code>from...import</code>导入的是文件下的“内容”，我们直接使用这些内容”即可，前面再也不需要加“文件名称”了。</p></blockquote><h3 id="import加载底层原理-importlib实现动态导入"><a href="#import加载底层原理-importlib实现动态导入" class="headerlink" title="import加载底层原理-importlib实现动态导入"></a>import加载底层原理-importlib实现动态导入</h3><p><strong><code>__import__()</code>动态导入</strong></p><p><code>import</code>语句本质上就是调用内置函数<code>__import__()</code>,我们可以通过它实现动态导入。给<code>__import__()</code>动态传递不同的的参数值，就能导入不同的模块</p><p>注意：一般不建议我们自行使用<em>`<em>import</em></em>()<code>导入，其行为在python.2和python.3中有差异，会导致意外错误。如果需要动态导入可以使用</code>importlib`模块</p><p><strong>模块的加载问题</strong></p><p>当导入一个模块时，模块中的代码都会被执行。不过，如果再次导入这个模块，则不会再次执行。</p><p>Python的设计者为什么这么设计？因为，导入模块更多的时候需要的是定义模块中的变量、函数、对象等。这些并不需要反复定义和执行。“只导入一次<code>import-only-once</code>“就成了一种优化。</p><blockquote><p>一个模块无论导入多少次，这个模块在整个解释器进程内有且仅有一个实例对象。</p></blockquote><p><strong>重新加载</strong></p><p>有时候我们确实需要重新加载一个模块，这时候可以使用：<code>importlib.reload()</code>方法</p><h3 id="包的概念-创建包-导入包"><a href="#包的概念-创建包-导入包" class="headerlink" title="包的概念-创建包-导入包"></a>包的概念-创建包-导入包</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220090.png" alt="image-20231123204236853"></p><p> 包(package)的概念和结构</p><p>当一个项目中有很多个模块时，需要再进行组织。我们将功能类似的模块放到一起，形成了“包”。==本质上，“包”就是一个必须有<code>__init__.py</code>的文件夹==。典型结构如下：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220092.png" alt="image-20231123204807813"></p><p>包下面可以包含“模块(module)”,也可以再包含“子包(subpackage)”。就像文件夹下面可以有文件，也可以有子文件夹一样。</p><p><strong>Pycharm里建包：</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220093.png" alt="image-20231123204627446"></p><p><strong>导入包操作和本质</strong></p><p>上一节中的包结构，我们需要导入<code>module_AA.py</code>。方式如下：</p><ol><li><p><code>import a.aa.module_AA</code></p><p>在使用时，必须加完整名称来引用，比如：<code>a.aa.module_AA.fun_AA()</code></p></li><li><p><code>from a.aa import module_AA</code></p><p>在使用时，直接可以使用模块名。比如：<code>module_AA.fun_AA()</code></p></li><li><p><code>from a.aa.module_AA import fun_AA</code> 直接导入函数</p></li></ol><p>在使用时，直接可以使用函数名。比如：<code>fun_AA()</code></p><blockquote><ol><li><code>from package import item</code>这种语法中，item可以是包、模块，也可以是函数、类、变量。</li><li><code>import item1.item2</code>这种语法中，item必须是包或模块，不能是其他。</li></ol></blockquote><p><strong>导入包的本质</strong>其实是“==导入了包的<code>__init__.py</code>“文件==。也就是说，<code>import pack1</code>意味着执行了包<code>pack1</code>下面的<code>__init__.py</code>文件。这样，可以在<code>__init__.py</code>中批量导入我们需要的模块，而不再需要一个个导入。</p><p><code>__init__.py</code>的三个核心作用：</p><p>①作为包的标识，不能删除。</p><p>②导入包实质是执行<code>__init__.py</code>文件，可以在<code>__init__.py</code>文件中做这个<strong>包的初始化、以及需要统一执行代码、批量导入</strong></p><blockquote><p>如上测试我们可以看出python的设计者非常巧妙的通过<code>__init__.py</code>文件将包转成了模块的操作。</p></blockquote><h3 id="包的模糊导入"><a href="#包的模糊导入" class="headerlink" title="包的模糊导入"></a>包的模糊导入</h3><p>用<code>*</code>导入包</p><p><code>import *</code> 这样的语句理论上是希望文件系统找出包中所有的子模块，然后导入它们。这可能会花长时间等。Python解决方案是提供一个明确的包索引。</p><p>这个索引由<code>__init__.py</code>定义<code>__all__</code>变量，该变量为一个列表，如上例<code>a</code>包下的<code>__init__.py</code>中，可定义<code>__all__= [&quot;module_A&quot;,&quot;module_A2&quot;]</code></p><p>这意味着，<code>from sound.effects import *</code>会从对应的包中导入以上两个子模块</p><blockquote><p>:warning:尽管提供<code>import *</code>的方法，仍不建议在生产代码中使用这种写法。</p></blockquote><h3 id="PIP安装第三方库"><a href="#PIP安装第三方库" class="headerlink" title="PIP安装第三方库"></a>PIP安装第三方库</h3><p><strong>库(Library)</strong></p><p>Python中库是借用其他编程语言的概念，没有特别具体的定义。</p><p>模块和包侧重于代码组织，有明确的定义。库强调的是功能性，而不是代码组织。</p><p>我们通常将某个功能的“模块的集合”，称为库。</p><p><strong>标准库(Standard Library)</strong></p><p>Python拥有一个强大的标准库。Python语言的核心只包含数字、字符串、列表、字典、文件等常见类型和函数，而由Python标准库提供了系统管理、网络通信、文本处理、数据库接口、图形系统、ML处理等额外的功能。</p><p>Python标准库的主要功能有：</p><p>①文本处理，包含文本格式化、正则表达式匹配、文本差异计算与合并、Unicode支持，二进制数据处理等功能</p><p>②文件处理，包含文件操作、创建临时文件、文件压缩与归档、操作配置文件等功能</p><p>③操作系统功能，包含线程与进程支持、IO复用、日期与时间处理、调用系统函数、日志(logging)等功能</p><p>④网络通信，包含网络套接字，SSL加密通信、异步网络通信等功能</p><p>⑤网络协议，支持HTTP，FTP，SMTP，POP，IMAP，NNTP，XMLRPC等多种网络协议，并提供了编写网络服务器的框架</p><p>⑥W3C格式支持，包含HTML，SGML，XML的处理。</p><p>⑦其它功能，包括国际化支持、数学运算、HASH、Tkinter等</p><blockquote><p>目前学过的有：random、math、time、file、os、sys等模块。</p><p>①random模块实现随机数处理</p><p>②math模块实现数学相关的运算</p><p>③time模块实现时间的处理</p><p>④file模块实现对文件的操作</p><p>⑤os模块实现和操作系统的交互</p><p>⑥sys模块实现和解释器的交互</p></blockquote><p><strong>PIP模块管理工具</strong></p><p>pip是一个现代的，通用的Python包管理工具。提供了对Python包的查找、下载、安装、卸载的功能。</p><p><strong>安装第三方扩展库的2种方式</strong></p><p>第三方库有数十万种之多，以pymysql库为例讲解第三方扩展库的安装。</p><p><strong>第一种方式：命令行下远程安装</strong></p><p>以安装第三方pymysql库为例，在命令行提示符下输入：<code>pip install pymysql</code>即可。</p><p><strong>第二种方式：Pycharm中直接安装到项目中</strong></p><p>在Pycharm中，依次点击：<code>file-&gt;setting-&gt;Project 本项目名-&gt;Project Interpreter</code></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220094.png" alt="image-20231123211713736"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311232220095.png" alt="image-20231123211743087"></p><h2 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程</h2><h3 id="GUI编程和tkinter介绍-第一个GUI程序"><a href="#GUI编程和tkinter介绍-第一个GUI程序" class="headerlink" title="GUI编程和tkinter介绍-第一个GUI程序"></a>GUI编程和tkinter介绍-第一个GUI程序</h3><p>我们前面实现的都是基于控制台的程序，程序和用户的交互通过控制台来完成。</p><p>本章，我们将学习 GUI（Graphics User Interface），即<strong>图形用户界面编程</strong>，我们可以通过 python 提供的丰富的组件，快速的实现使用图形界面和用户交互。</p><p>GUI 编程类似于“搭积木”，将一个个组件(Widget)放到窗口中。如下是 windows 中的画图软件，就是一个典型的 GUI 程序</p><p><strong>常用的 GUI 库</strong></p><ol><li><p>Tkinter</p><p>tkinter（Tk interface）是 Python 的标准 GUI 库，支持跨平台的 GUI 程序开发。tkinter适合小型的 GUI 程序编写，也特别适合初学者学习 GUI 编程。本书以 tkinter 为核心进行讲解。</p></li><li><p>wxPython</p><p>wxPython 是比较流行的 GUI 库，适合大型应用程序开发，功能强于 tkinter，整体设计框架类似于 MFC(Microsoft Foundation Classes 微软基础类库)。</p></li><li><p>PyQT</p></li></ol><p>Qt 是一种开源的 GUI 库，适合大型 GUI 程序开发，PyQT 是 Qt 工具包标准的 Python 实现。我们也可以使用 Qt Desginer 界面设计器快速开发 GUI 应用程序。</p><p><strong>基于 tkinter 模块创建 GUI 程序包含如下 4 个核心步骤：</strong></p><ol><li>创建应用程序主窗口对象（也称：根窗口）</li><li>在主窗口中，添加各种可视化组件，比如：按钮（Button）、文本框（Label）等。</li><li>通过几何布局管理器，管理组件的大小和位置</li><li>事件处理</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.创建应用程序主窗口对象（也称：根窗口）</span></span><br><span class="line">root = Tk()</span><br><span class="line"><span class="comment"># 2.在主窗口中，添加各种可视化组件，比如：按钮（Button）、文本框（Label）等。</span></span><br><span class="line">btn01 = Button(root)</span><br><span class="line">btn01[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;点击送花&quot;</span></span><br><span class="line"><span class="comment"># 3.通过几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">btn01.pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.事件处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">songhua</span>(<span class="params">e</span>):  <span class="comment"># e就是事件对象</span></span><br><span class="line">    messagebox.showinfo(<span class="string">&quot;Message&quot;</span>, <span class="string">&quot;送你花&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;送花&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">btn01.bind(<span class="string">&quot;&lt;Button-1&gt;&quot;</span>, songhua)</span><br><span class="line"></span><br><span class="line">root.mainloop()  <span class="comment"># 调用组件的mainloop()方法，进入事件循环</span></span><br></pre></td></tr></table></figure><h3 id="PEP8编码规范-窗口大小和位置"><a href="#PEP8编码规范-窗口大小和位置" class="headerlink" title="PEP8编码规范-窗口大小和位置"></a>PEP8编码规范-窗口大小和位置</h3><p><strong>主窗口位置和大小</strong></p><p>通过 <code>geometry(&#39;wxh±x±y&#39;)</code>进行设置。<code>w</code> 为宽度，<code>h</code> 为高度。<code>+x</code> 表示距屏幕左边的距离；<code>-x</code> 表示距屏幕右边的距离；<code>+y</code> 表示距屏幕上边的距离；<code>-y</code> 表示距屏幕下边的距离。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.title(<span class="string">&quot;测试主窗口的位置和大小&quot;</span>)</span><br><span class="line">root.geometry(<span class="string">&quot;500x400+100+200&quot;</span>)  <span class="comment"># 宽度 500，高度 400；距屏幕左边 100，距屏幕上边200</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h3 id="GU编程整体描述-常用组件汇总"><a href="#GU编程整体描述-常用组件汇总" class="headerlink" title="GU编程整体描述-常用组件汇总"></a>GU编程整体描述-常用组件汇总</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113910.png" alt="image-20231124174304488"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113911.png" alt="image-20231124174456418">                                                                                            </p><p>​                                                                                        <strong>常用组件汇总列表</strong></p><div class="table-container"><table><thead><tr><th><strong>Tkinter 类</strong></th><th style="text-align:center"><strong>名称</strong></th><th><strong>简介</strong></th></tr></thead><tbody><tr><td>Toplevel</td><td style="text-align:center">顶层</td><td>容器类，可用于为其他组件提供单独的容器；Toplevel 有点类似于窗口</td></tr><tr><td>Button</td><td style="text-align:center">按钮</td><td>代表按钮组件</td></tr><tr><td>Canvas</td><td style="text-align:center">画布</td><td>提供绘图功能，包括直线、矩形、椭圆、多边形、位图等</td></tr><tr><td>Checkbutton</td><td style="text-align:center">复选框</td><td>可供用户勾选的复选框</td></tr><tr><td>Entry</td><td style="text-align:center">单行输入框</td><td>用户可输入内容</td></tr><tr><td>Frame</td><td style="text-align:center">容器</td><td>用于装载其它 GUI 组件</td></tr><tr><td>Label</td><td style="text-align:center">标签</td><td>用于显示不可编辑的文本或图标</td></tr><tr><td>LabelFrame</td><td style="text-align:center">容器</td><td>也是容器组件，类似于 Frame，但它支持添加标题</td></tr><tr><td>Listbox</td><td style="text-align:center">列表框</td><td>列出多个选项，供用户选择</td></tr><tr><td>Menu</td><td style="text-align:center">菜单</td><td>菜单组件</td></tr><tr><td>Menubutton</td><td style="text-align:center">菜单按钮</td><td>用来包含菜单的按钮（包括下拉式、层叠式等）</td></tr><tr><td>OptionMenu</td><td style="text-align:center">菜单按钮</td><td>Menubutton 的子类，也代表菜单按钮，可通过按钮打开一个菜单</td></tr><tr><td>Message</td><td style="text-align:center">消息框</td><td>类似于标签，但可以显示多行文本；后来当 Label 也能显示多行文本之后，该组件基本处于废弃状态</td></tr><tr><td>PanedWindow</td><td style="text-align:center">分区窗口</td><td>该容器会被划分成多个区域，每添加一个组件占一个区域，用户可通过拖动分隔线来改变各区域的大小</td></tr><tr><td>Radiobutton</td><td style="text-align:center">单选钮</td><td>可供用户点边的单选钮</td></tr><tr><td>Scale</td><td style="text-align:center">滑动条</td><td>拖动滑块可设定起始值和结束值，可显示当前位置的精确值</td></tr><tr><td>Spinbox</td><td style="text-align:center">微调选择器</td><td>用户可通过该组件的向上、向下箭头选择不同的值</td></tr><tr><td>Scrollbar</td><td style="text-align:center">滚动条</td><td>用于为组件（文本域、画布、列表框、文本框）提供滚动功能</td></tr><tr><td>Text</td><td style="text-align:center">多行文本框</td><td>显示多行文本</td></tr></tbody></table></div><h3 id="GU程序的经典面向对象写法"><a href="#GU程序的经典面向对象写法" class="headerlink" title="GU程序的经典面向对象写法"></a>GU程序的经典面向对象写法</h3><p>本节程序也是 GUI 应用程序编写的一个主要结构，采用了==面向对象==的方式，更加合理的组织代码。</p><p>通过类 <code>Application</code> 组织整个 GUI 程序，类 <code>Application</code> 继承了 <code>Frame</code> 及通过继承拥有了父类的特性。通过构造函数<code>__init__()</code>初始化窗口中的对象，通过 <code>createWidgets()</code>方法创建窗口中的对象。</p><p><code>Frame</code> 框架是一个 <code>tkinter</code> 组件，表示一个矩形的区域。<code>Frame</code> 一般作为容器使用，可以放置其他组件，从而实现复杂的布局。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试一个经典的GUI程序的写法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个经典的GUI程序类的写法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        <span class="comment"># 几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建组件&quot;&quot;&quot;</span></span><br><span class="line">        self.btn01 = Button(self)</span><br><span class="line">        self.btn01[<span class="string">&quot;text&quot;</span>] = <span class="string">&quot;点击送花&quot;</span></span><br><span class="line">        self.btn01.pack()</span><br><span class="line">        self.btn01[<span class="string">&quot;command&quot;</span>] = self.songhua</span><br><span class="line">        <span class="comment"># 创建一个退出按钮</span></span><br><span class="line">        self.btnQuit = Button(self, text=<span class="string">&quot;退出&quot;</span>, command=root.destroy)</span><br><span class="line">        <span class="comment"># 将组件放入application里</span></span><br><span class="line">        self.btnQuit.pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">songhua</span>(<span class="params">self</span>):</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;送花&quot;</span>, <span class="string">&quot;送你花&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x100+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;一个经典的GUI程序类的测试&quot;</span>)</span><br><span class="line">    app = Application(master=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113912.png" alt="image-20231124220642885" style="zoom:50%;" /></p><h3 id="简单组件"><a href="#简单组件" class="headerlink" title="简单组件"></a>简单组件</h3><h4 id="Label标签-tkinter中图像正确显示全局变量写法"><a href="#Label标签-tkinter中图像正确显示全局变量写法" class="headerlink" title="Label标签-tkinter中图像正确显示全局变量写法"></a>Label标签-tkinter中图像正确显示全局变量写法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个经典的GUI程序类的写法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        <span class="comment"># 几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建组件&quot;&quot;&quot;</span></span><br><span class="line">        self.label01 = Label(self, text=<span class="string">&quot;label test&quot;</span>, width=<span class="number">10</span>, height=<span class="number">2</span>,</span><br><span class="line">                             bg=<span class="string">&quot;black&quot;</span>, fg=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">        self.label01.pack()</span><br><span class="line">        <span class="comment"># 设置字体</span></span><br><span class="line">        self.label02 = Label(self, text=<span class="string">&quot;字体测试&quot;</span>, width=<span class="number">10</span>, height=<span class="number">2</span>,</span><br><span class="line">                             bg=<span class="string">&quot;blue&quot;</span>, fg=<span class="string">&quot;white&quot;</span>, font=(<span class="string">&quot;黑体&quot;</span>, <span class="number">10</span>))</span><br><span class="line">        self.label02.pack()</span><br><span class="line">        <span class="comment"># 显示图片</span></span><br><span class="line">        <span class="keyword">global</span> photo   <span class="comment"># photo声明为全局变量，如果是局部变量，本方法执行完毕后，图像对象会被销毁，窗口显示不出图像</span></span><br><span class="line">        photo = PhotoImage(file=<span class="string">&quot;../images/logo.gif&quot;</span>)</span><br><span class="line">        self.label03 = Label(self, image=photo)</span><br><span class="line">        self.label03.pack()</span><br><span class="line">        <span class="comment"># 显示多行文本</span></span><br><span class="line">        self.label04 = Label(self, text=<span class="string">&quot;这是第一行\n这是第二行\n这是第三行\n&quot;</span>,</span><br><span class="line">                             borderwidth=<span class="number">1</span>, relief=<span class="string">&quot;solid&quot;</span>, justify=<span class="string">&quot;center&quot;</span>)</span><br><span class="line">        self.label04.pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x250+500+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;Label的测试&quot;</span>)</span><br><span class="line">    app = Application(master=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113914.png" alt="image-20231130152234046"></p><h4 id="Options选项详解-底层源码分析和阅读-可变参数和运算符重载复习"><a href="#Options选项详解-底层源码分析和阅读-可变参数和运算符重载复习" class="headerlink" title="Options选项详解-底层源码分析和阅读-可变参数和运算符重载复习"></a>Options选项详解-底层源码分析和阅读-可变参数和运算符重载复习</h4><p>通过学习 Label 组件，我们发现可以通过 Options 设置组件的属性，从而控制组件的各种状态。比如：宽度、高度、颜色、位置等等。</p><p>我们可以通过三种方式设置 Options 选项，这在各种 GUI 组件中用法都一致。</p><ol><li><p>创建对象时，使用可变参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fred = Button(self, fg=<span class="string">&quot;red&quot;</span>, bg=<span class="string">&quot;blue&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建对象后，使用字典索引方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fred[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;red&quot;</span></span><br><span class="line">fred[<span class="string">&quot;bg&quot;</span>] = <span class="string">&quot;blue&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>创建对象后，使用 config()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fred.config(fg=<span class="string">&quot;red&quot;</span>, bg=<span class="string">&quot;blue&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Button-anchor位置控制"><a href="#Button-anchor位置控制" class="headerlink" title="Button-anchor位置控制"></a>Button-anchor位置控制</h4><p>Button（按钮）用来执行用户的单击操作。Button 可以包含文本，也可以包含图像。按钮被单击后会自动调用对应事件绑定的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个经典的GUI程序类的写法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        <span class="comment"># 几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建组件&quot;&quot;&quot;</span></span><br><span class="line">        self.btn01 = Button(root, text=<span class="string">&quot;登录&quot;</span>, anchor=E, command=self.login)  <span class="comment"># anchor控制字体位置</span></span><br><span class="line">        self.btn01.pack()</span><br><span class="line">        <span class="comment"># 显示图片</span></span><br><span class="line">        <span class="keyword">global</span> photo   <span class="comment"># photo声明为全局变量，如果是局部变量，本方法执行完毕后，图像对象会被销毁，窗口显示不出图像</span></span><br><span class="line">        photo = PhotoImage(file=<span class="string">&quot;../images/start.gif&quot;</span>)</span><br><span class="line">        self.btn02 = Button(root, image=photo, command=self.login)</span><br><span class="line">        self.btn02.pack()</span><br><span class="line">        self.btn02.config(state=<span class="string">&quot;disabled&quot;</span>)  <span class="comment"># 设置按钮为禁用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x250+500+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;Button的测试&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Entry单行文本框-StringVar-登录界面设计和功实现"><a href="#Entry单行文本框-StringVar-登录界面设计和功实现" class="headerlink" title="Entry单行文本框-StringVar-登录界面设计和功实现"></a>Entry单行文本框-StringVar-登录界面设计和功实现</h4><p>Entry 用来接收一行字符串的控件。如果用户输入的文字长度长于 Entry 控件的宽度时, 文字会自动向后滚动。如果想输入多行文本, 需要使用 Text 控件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个经典的GUI程序类的写法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        <span class="comment"># 几何布局管理器，管理组件的大小和位置</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建组件&quot;&quot;&quot;</span></span><br><span class="line">        self.label01 = Label(self, text=<span class="string">&quot;用户名&quot;</span>)</span><br><span class="line">        self.label01.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># StringVar变量绑定到指定的组件</span></span><br><span class="line">        <span class="comment"># StringVar变量的值发生变化，组件内容也发生变化</span></span><br><span class="line">        <span class="comment"># 组件内容发生变化，StringVar变量的值也发生变化</span></span><br><span class="line">        username = StringVar()</span><br><span class="line">        self.entry01 = Entry(self, textvariable=username)</span><br><span class="line">        self.entry01.pack()</span><br><span class="line">        username.<span class="built_in">set</span>(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(username.get())       <span class="comment"># admin</span></span><br><span class="line">        <span class="built_in">print</span>(self.entry01.get())   <span class="comment"># admin</span></span><br><span class="line"></span><br><span class="line">        password = StringVar()</span><br><span class="line">        self.entry02 = Entry(self, textvariable=password, show=<span class="string">&quot;*&quot;</span>)  <span class="comment"># 密码以*显示</span></span><br><span class="line">        self.entry02.pack()</span><br><span class="line"></span><br><span class="line">        Button(root, text=<span class="string">&quot;登录&quot;</span>, anchor=E, command=self.login).pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        username = self.entry01.get()</span><br><span class="line">        password = self.entry02.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;去数据库对比用户名密码&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户名：&quot;</span> + username)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;密码：&quot;</span> + password)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> password == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;登录系统&quot;</span>, <span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;登录系统&quot;</span>, <span class="string">&quot;登陆失败，用户名或密码错误&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x250+500+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;Entry 的测试&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113915.png" alt="image-20231130161750672"></p><h4 id="Text多行文本框详解-复杂tag标记"><a href="#Text多行文本框详解-复杂tag标记" class="headerlink" title="Text多行文本框详解-复杂tag标记"></a>Text多行文本框详解-复杂tag标记</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Text 多行文本框组件的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 宽度 20 个字母(10 个汉字)，高度一个行高</span></span><br><span class="line">        self.w1 = Text(root, width=<span class="number">40</span>, height=<span class="number">12</span>, bg=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line">        self.w1.pack()</span><br><span class="line">        self.w1.insert(<span class="number">1.0</span>, <span class="string">&quot;0123456789\nabcdefg&quot;</span>)  <span class="comment"># 1.0 第一行第一列  行号以 1 开始 列号以 0 开始</span></span><br><span class="line">        self.w1.insert(<span class="number">2.3</span>, <span class="string">&quot;锄禾日当午，汗滴禾下土。谁知盘中餐，粒粒皆辛苦\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">        Button(self, text=<span class="string">&quot;重复插入文本&quot;</span>, command=self.insertText).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;返回文本&quot;</span>, command=self.returnText).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;添加图片&quot;</span>, command=self.addImage).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;添加组件&quot;</span>, command=self.addWidget).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;通过 tag 精确控制文本&quot;</span>, command=self.testTag).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertText</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># INSERT 索引表示在光标处插入</span></span><br><span class="line">        self.w1.insert(INSERT, <span class="string">&#x27; Gaoqi &#x27;</span>)</span><br><span class="line">        <span class="comment"># END 索引号表示在最后插入</span></span><br><span class="line">        self.w1.insert(END, <span class="string">&#x27;[sxt]&#x27;</span>)</span><br><span class="line">        self.w1.insert(<span class="number">1.8</span>, <span class="string">&quot;gaoqi&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">returnText</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Indexes(索引)是用来指向 Text 组件中文本的位置，Text 的组件索引也是对应实际字符之间的位置。</span></span><br><span class="line">        <span class="comment"># 核心：行号以 1 开始 列号以 0 开始</span></span><br><span class="line">        <span class="built_in">print</span>(self.w1.get(<span class="number">1.2</span>, <span class="number">1.6</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;所有文本内容：\n&quot;</span> + self.w1.get(<span class="number">1.0</span>, END))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addImage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># global photo</span></span><br><span class="line">        self.photo = PhotoImage(file=<span class="string">&quot;../images/logo.gif&quot;</span>)</span><br><span class="line">        self.w1.image_create(END, image=self.photo)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addWidget</span>(<span class="params">self</span>):</span><br><span class="line">        b1 = Button(self.w1, text=<span class="string">&#x27;爱尚学堂&#x27;</span>)</span><br><span class="line">        <span class="comment"># 在 text 创建组件的命令</span></span><br><span class="line">        self.w1.window_create(INSERT, window=b1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testTag</span>(<span class="params">self</span>):</span><br><span class="line">        self.w1.delete(<span class="number">1.0</span>, END)</span><br><span class="line">        self.w1.insert(INSERT, <span class="string">&quot;good good study,day day up!\n 北京尚学堂\n 百战程序员\n百度，搜一下就知道&quot;</span>)</span><br><span class="line">        self.w1.tag_add(<span class="string">&quot;good&quot;</span>, <span class="number">1.0</span>, <span class="number">1.9</span>)</span><br><span class="line">        self.w1.tag_config(<span class="string">&quot;good&quot;</span>, background=<span class="string">&quot;yellow&quot;</span>, foreground=<span class="string">&quot;red&quot;</span>)  <span class="comment"># 改变tag的背景，字体颜色</span></span><br><span class="line">        self.w1.tag_add(<span class="string">&quot;baidu&quot;</span>, <span class="number">4.0</span>, <span class="number">4.2</span>)</span><br><span class="line">        self.w1.tag_config(<span class="string">&quot;baidu&quot;</span>, underline=<span class="literal">True</span>)  <span class="comment"># tag加下划线</span></span><br><span class="line">        self.w1.tag_bind(<span class="string">&quot;baidu&quot;</span>, <span class="string">&quot;&lt;Button-1&gt;&quot;</span>, self.webshow)  <span class="comment"># tag绑定事件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">webshow</span>(<span class="params">self, event</span>):</span><br><span class="line">        webbrowser.<span class="built_in">open</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;450x300+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><blockquote><p><strong>利用 Tags 实现更加强大的文本显示和控制</strong></p><p>Tags 通常用于改变 Text 组件中内容的样式和功能。你可以修改文本的字体、尺寸和颜色。另外，Tags 还允许你将文本、嵌入的组件和图片与鼠标和键盘等事件相关联。</p></blockquote><h4 id="Radiobutton单选按钮"><a href="#Radiobutton单选按钮" class="headerlink" title="Radiobutton单选按钮"></a>Radiobutton单选按钮</h4><p><strong>Radiobutton 控件用于选择同一组单选按钮中的一个。Radiobutton 可以显示文本，也可以显示图像。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Radiobutton 组件的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)   <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        self.v = StringVar()</span><br><span class="line">        self.v.<span class="built_in">set</span>(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">        self.r1 = Radiobutton(self, text=<span class="string">&quot;男性&quot;</span>, value=<span class="string">&quot;M&quot;</span>, variable=self.v)</span><br><span class="line">        self.r2 = Radiobutton(self, text=<span class="string">&quot;女性&quot;</span>, value=<span class="string">&quot;F&quot;</span>, variable=self.v)</span><br><span class="line">        self.r1.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        self.r2.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;确定&quot;</span>, command=self.confirm).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">confirm</span>(<span class="params">self</span>):</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;选择的性别:&quot;</span> + self.v.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x50+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Checkbutton复选按钮"><a href="#Checkbutton复选按钮" class="headerlink" title="Checkbutton复选按钮"></a>Checkbutton复选按钮</h4><p><strong>Checkbutton 控件用于选择多个按钮的情况。Checkbutton 可以显示文本，也可以显示图像。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Checkbutton 组件的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        self.codeHobby = IntVar()</span><br><span class="line">        self.videoHobby = IntVar()</span><br><span class="line">        <span class="built_in">print</span>(self.codeHobby.get())  <span class="comment"># 默认值是 0</span></span><br><span class="line">        self.c1 = Checkbutton(self, text=<span class="string">&quot;敲代码&quot;</span>, variable=self.codeHobby, onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>)</span><br><span class="line">        self.c2 = Checkbutton(self, text=<span class="string">&quot;看视频&quot;</span>, variable=self.videoHobby, onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>)</span><br><span class="line">        self.c1.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        self.c2.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;确定&quot;</span>, command=self.confirm).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">confirm</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.videoHobby.get() == <span class="number">1</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;看视频，都是正常人有的爱好！你喜欢看什么类型？&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.codeHobby.get() == <span class="number">1</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;抓获野生程序猿一只，赶紧送给他尚学堂的视频充饥&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x50+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="Canvasl画布组件"><a href="#Canvasl画布组件" class="headerlink" title="Canvasl画布组件"></a>Canvasl画布组件</h4><p>canvas（画布）是一个矩形区域，可以放置图形、图像、组件等。本节我们简单介绍canvas 的使用，更加详细和深入的内容将在后面的“图形绘制”章节讲解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Canvas 组件的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        self.canvas = Canvas(self, width=<span class="number">300</span>, height=<span class="number">200</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">        self.canvas.pack()</span><br><span class="line">        <span class="comment"># 画一条直线</span></span><br><span class="line">        line = self.canvas.create_line(<span class="number">10</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">50</span>)  <span class="comment"># 三个点 (x, y)</span></span><br><span class="line">        <span class="comment"># 画一个矩形.</span></span><br><span class="line">        rect = self.canvas.create_rectangle(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>)  <span class="comment"># 对角坐标，左上角和右下角坐标</span></span><br><span class="line">        <span class="comment"># 画一个椭圆.坐标两双。为椭圆的外切矩形左上角和底部右下角</span></span><br><span class="line">        oval = self.canvas.create_oval(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="keyword">global</span> photo</span><br><span class="line">        photo = PhotoImage(file=<span class="string">&quot;../images/logo.gif&quot;</span>)</span><br><span class="line">        self.canvas.create_image(<span class="number">150</span>, <span class="number">170</span>, image=photo)</span><br><span class="line">        Button(self, text=<span class="string">&quot;画 10 个矩形&quot;</span>, command=self.draw50Recg).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw50Recg</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="comment"># 左上角坐标</span></span><br><span class="line">            x1 = random.randrange(<span class="built_in">int</span>(self.canvas[<span class="string">&quot;width&quot;</span>]) / <span class="number">2</span>)</span><br><span class="line">            y1 = random.randrange(<span class="built_in">int</span>(self.canvas[<span class="string">&quot;height&quot;</span>]) / <span class="number">2</span>)</span><br><span class="line">            <span class="comment"># 右下角坐标</span></span><br><span class="line">            x2 = x1 + random.randrange(<span class="built_in">int</span>(self.canvas[<span class="string">&quot;width&quot;</span>]) / <span class="number">2</span>)</span><br><span class="line">            y2 = y1 + random.randrange(<span class="built_in">int</span>(self.canvas[<span class="string">&quot;height&quot;</span>]) / <span class="number">2</span>)</span><br><span class="line">            self.canvas.create_rectangle(x1, y1, x2, y2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x300+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h3><p>一个 GUI 应用程序必然有大量的组件，这些组件如何排布？这时候，就需要使用 tkinter提供的布局管理器帮助我们组织、管理在父组件中子组件的布局方式。tkinter 提供了三种管理器：<code>pack</code>、<code>grid</code>、<code>place</code>。</p><h4 id="Grid布局管理器详解"><a href="#Grid布局管理器详解" class="headerlink" title="Grid布局管理器详解"></a>Grid布局管理器详解</h4><p>grid 表格布局，采用==表格结构==组织组件。子组件的位置由行和列的单元格来确定，并且可以跨行和跨列，从而实现复杂的布局。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113916.png" alt="image-20231208162956284"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;测试 Grid 布局管理器的基本用法，使用面向对象的方式&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过 grid 布局实现登录界面&quot;&quot;&quot;</span></span><br><span class="line">        self.label01 = Label(self, text=<span class="string">&quot;用户名&quot;</span>)</span><br><span class="line">        self.label01.grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">        self.entry01 = Entry(self)</span><br><span class="line">        self.entry01.grid(row=<span class="number">0</span>, column=<span class="number">1</span>)</span><br><span class="line">        Label(self, text=<span class="string">&quot;用户名为手机号&quot;</span>).grid(row=<span class="number">0</span>, column=<span class="number">2</span>)</span><br><span class="line">        Label(self, text=<span class="string">&quot;密码&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">0</span>)</span><br><span class="line">        Entry(self, show=<span class="string">&quot;*&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">1</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;登录&quot;</span>).grid(row=<span class="number">2</span>, column=<span class="number">1</span>, sticky=EW)  <span class="comment"># 东西两边对齐，拉长</span></span><br><span class="line">        Button(self, text=<span class="string">&quot;取消&quot;</span>).grid(row=<span class="number">2</span>, column=<span class="number">2</span>, sticky=E)   <span class="comment"># 东边对齐</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x90+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="计算器软件界面的设计"><a href="#计算器软件界面的设计" class="headerlink" title="计算器软件界面的设计"></a>计算器软件界面的设计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;计算器软件界面的设计&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)    <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过 grid 布局实现计算器软件的界面&quot;&quot;&quot;</span></span><br><span class="line">        btnText = ((<span class="string">&quot;MC&quot;</span>, <span class="string">&quot;M+&quot;</span>, <span class="string">&quot;M-&quot;</span>, <span class="string">&quot;MR&quot;</span>),</span><br><span class="line">                   (<span class="string">&quot;C&quot;</span>, <span class="string">&quot;±&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;✖&quot;</span>),</span><br><span class="line">                   (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="string">&quot;-&quot;</span>),</span><br><span class="line">                   (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&quot;+&quot;</span>),</span><br><span class="line">                   (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;=&quot;</span>),</span><br><span class="line">                   (<span class="number">0</span>, <span class="string">&quot;.&quot;</span>))</span><br><span class="line">        Entry(self).grid(row=<span class="number">0</span>, column=<span class="number">0</span>, columnspan=<span class="number">4</span>, pady=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">for</span> rindex, r <span class="keyword">in</span> <span class="built_in">enumerate</span>(btnText):</span><br><span class="line">            <span class="keyword">for</span> cindex, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(r):</span><br><span class="line">                <span class="keyword">if</span> c == <span class="string">&quot;=&quot;</span>:                      <span class="comment"># rowspan跨行，columnspan跨列</span></span><br><span class="line">                    Button(self, text=c, width=<span class="number">2</span>)\</span><br><span class="line">                        .grid(row=rindex + <span class="number">1</span>, column=cindex, rowspan=<span class="number">2</span>, sticky=EW)</span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">0</span>:</span><br><span class="line">                    Button(self, text=c, width=<span class="number">2</span>)\</span><br><span class="line">                        .grid(row=rindex + <span class="number">1</span>, column=cindex, columnspan=<span class="number">2</span>, sticky=EW)</span><br><span class="line">                <span class="keyword">elif</span> c == <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                    Button(self, text=c, width=<span class="number">2</span>)\</span><br><span class="line">                        .grid(row=rindex + <span class="number">1</span>, column=cindex+<span class="number">1</span>, sticky=EW)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    Button(self, text=c, width=<span class="number">2</span>)\</span><br><span class="line">                        .grid(row=rindex+<span class="number">1</span>, column=cindex, sticky=EW)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;200x300+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113917.png" alt="image-20231208171458029"></p><h4 id="Pack布局管理器"><a href="#Pack布局管理器" class="headerlink" title="Pack布局管理器"></a>Pack布局管理器</h4><p>pack 按照组件的创建顺序将子组件添加到父组件中，按照垂直或者水平的方向自然排布。如果不指定任何选项，默认在父组件中自顶向下垂直添加组件。</p><p>pack 是代码量最少，最简单的一种，可以用于快速生成界面。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113918.png" alt="image-20231208171547373"></p><h4 id="钢琴软件界面设计"><a href="#钢琴软件界面设计" class="headerlink" title="钢琴软件界面设计"></a>钢琴软件界面设计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 pack 布局管理</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;700x220&quot;</span>)</span><br><span class="line"><span class="comment"># Frame 是一个矩形区域，就是用来防止其他子组件</span></span><br><span class="line">f1 = Frame(root)</span><br><span class="line">f1.pack()</span><br><span class="line">f2 = Frame(root)</span><br><span class="line">f2.pack()</span><br><span class="line">btnText = (<span class="string">&quot;流行风&quot;</span>, <span class="string">&quot;中国风&quot;</span>, <span class="string">&quot;日本风&quot;</span>, <span class="string">&quot;重金属&quot;</span>, <span class="string">&quot;轻音乐&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> txt <span class="keyword">in</span> btnText:</span><br><span class="line">    Button(f1, text=txt).pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">        Button(f2, width=<span class="number">5</span>, height=<span class="number">10</span>, bg=<span class="string">&quot;black&quot;</span> <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;white&quot;</span>).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113919.png" alt="image-20231208171932560"></p><h4 id="Place管理器"><a href="#Place管理器" class="headerlink" title="Place管理器"></a>Place管理器</h4><p>place 布局管理器可以通过坐标精确控制组件的位置，适用于一些布局更加灵活的场景。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113920.png" alt="image-20231208172220911"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;500x300&quot;</span>)</span><br><span class="line">root.title(<span class="string">&quot;布局管理 place&quot;</span>)</span><br><span class="line">root[<span class="string">&quot;bg&quot;</span>] = <span class="string">&quot;white&quot;</span></span><br><span class="line">f1 = Frame(root, width=<span class="number">200</span>, height=<span class="number">200</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">f1.place(x=<span class="number">30</span>, y=<span class="number">30</span>) </span><br><span class="line">Button(root, text=<span class="string">&quot;尚学堂&quot;</span>).place(relx=<span class="number">0.5</span>, rely=<span class="number">0</span>,        <span class="comment"># 相对宽度和相对高度</span></span><br><span class="line">                               x=<span class="number">100</span>, y=<span class="number">200</span>, relwidth=<span class="number">0.2</span>, relheight=<span class="number">0.2</span>)  </span><br><span class="line">Button(f1, text=<span class="string">&quot;百战程序员&quot;</span>).place(relx=<span class="number">0.6</span>, rely=<span class="number">0.7</span>)</span><br><span class="line">Button(f1, text=<span class="string">&quot;高淇老师&quot;</span>).place(relx=<span class="number">0.2</span>, rely=<span class="number">0.2</span>)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113922.png" alt="image-20231208172552488"></p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="扑克游戏界面设计-增加事件操作"><a href="#扑克游戏界面设计-增加事件操作" class="headerlink" title="扑克游戏界面设计-增加事件操作"></a>扑克游戏界面设计-增加事件操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;扑克牌游戏的界面设计&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.place()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过place布局管理器实现扑克牌位置控制&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 显示一张扑克</span></span><br><span class="line">        <span class="comment"># self.photo = PhotoImage(file=&quot;../images/puke/puke1.gif&quot;)</span></span><br><span class="line">        <span class="comment"># self.puke1 = Label(self.master, image=self.photo)</span></span><br><span class="line">        <span class="comment"># self.puke1.place(x=10, y=50)</span></span><br><span class="line">        <span class="comment"># 用列表推导式显示所有图片</span></span><br><span class="line">        self.photos = [PhotoImage(file=<span class="string">&quot;../images/puke/puke&quot;</span> + <span class="built_in">str</span>(i+<span class="number">1</span>) + <span class="string">&quot;.gif&quot;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">        self.pukes = [Label(self.master, image=self.photos[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            self.pukes[i].place(x=<span class="number">10</span>+i*<span class="number">40</span>, y=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为所有Label增加事件处理</span></span><br><span class="line">        self.pukes[<span class="number">0</span>].bind_class(<span class="string">&quot;Label&quot;</span>, <span class="string">&quot;&lt;Button-1&gt;&quot;</span>, self.chupai)  <span class="comment"># 绑定左键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chupai</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="built_in">print</span>(event.widget.winfo_geometry())</span><br><span class="line">        <span class="built_in">print</span>(event.widget.winfo_y())   <span class="comment"># 获得y坐标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> event.widget.winfo_y() == <span class="number">50</span>:</span><br><span class="line">            event.widget.place(y=<span class="number">30</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.widget.place(y=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;600x300+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113923.png" alt="image-20231208191429645"></p><h4 id="lambda表达式-事件传参应用"><a href="#lambda表达式-事件传参应用" class="headerlink" title="lambda表达式-事件传参应用"></a>lambda表达式-事件传参应用</h4><p>lambda 表达式定义的是一个匿名函数，只适合简单输入参数，简单计算返回结果，不适合功能复杂情况。</p><p>lambda 定义的匿名函数也有输入、也有输出，只是没有名字。语法格式如下：</p><p>​                                                                    <code>lambda 参数值列表：表达式</code></p><p>参数值列表即为输入。</p><p>表达式计算的结构即为输出。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113924.png" alt="image-20231208192609616"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 测试 command 属性绑定事件，测试 lambda 表达式帮助传参</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;270x50&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;command 方式，简单情况：不涉及获取 event 对象，可以使用&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a=&#123;0&#125;,b=&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;测试 command1&quot;</span>,</span><br><span class="line">       command=mouseTest1).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">Button(root, text=<span class="string">&quot;测试 command2&quot;</span>, </span><br><span class="line">       command=<span class="keyword">lambda</span>: mouseTest2(<span class="string">&quot;gaoqi&quot;</span>, <span class="string">&quot;xixi&quot;</span>)).pack(side=<span class="string">&quot;left&quot;</span>) <span class="comment"># lambda 表达式帮助传参</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="三种事件绑定方式总结"><a href="#三种事件绑定方式总结" class="headerlink" title="三种事件绑定方式总结"></a>三种事件绑定方式总结</h4><p><strong>多种事件绑定方式汇总</strong></p><p><strong>组件对象的绑定</strong></p><ol><li>通过 <code>command</code> 属性绑定（适合简单不需获取 event 对象）</li></ol><p><code>Button(root,text=&quot;登录&quot;,command=login)</code></p><ol><li>通过 <code>bind()</code>方法绑定（适合需要获取 event 对象）</li></ol><p><code>c1 = Canvas(); c1.bind(&quot;&lt;Button-1&gt;&quot;,drawLine)</code> </p><p><strong>组件类的绑定</strong></p><p>调用对象的 <code>bind_class</code> 函数，将该组件类所有的组件绑定事件：</p><p><code>w.bind_class(&quot;Widget&quot;,&quot;event&quot;,eventhanler)</code></p><p>比如：<code>btn01.bind_class(“Button”,&quot;&lt;Button-1&gt;&quot;,func)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 多种事件绑定方式汇总</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;270x30&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest1</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bind()方式绑定，可以获取 event 对象&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(event.widget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a=&#123;0&#125;,b=&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;command 方式绑定，不能直接获取 event 对象&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mouseTest3</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;右键单击事件，绑定给所有按钮啦！！&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(event.widget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b1 = Button(root, text=<span class="string">&quot;测试 bind()绑定&quot;</span>)</span><br><span class="line">b1.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"><span class="comment"># bind 方式绑定事件</span></span><br><span class="line">b1.bind(<span class="string">&quot;&lt;Button-1&gt;&quot;</span>, mouseTest1)</span><br><span class="line"><span class="comment"># command 属性直接绑定事件</span></span><br><span class="line">b2 = Button(root, text=<span class="string">&quot;测试 command2&quot;</span>,</span><br><span class="line">            command=<span class="keyword">lambda</span>: mouseTest2(<span class="string">&quot;gaoqi&quot;</span>, <span class="string">&quot;xixi&quot;</span>))</span><br><span class="line">b2.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"><span class="comment"># 给所有 Button 按钮都绑定右键单击事件&lt;Button-2&gt;</span></span><br><span class="line">b1.bind_class(<span class="string">&quot;Button&quot;</span>, <span class="string">&quot;&lt;Button-2&gt;&quot;</span>, mouseTest3)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h3 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h3><h4 id="optionmenu选项菜单"><a href="#optionmenu选项菜单" class="headerlink" title="optionmenu选项菜单"></a>optionmenu选项菜单</h4><p>OptionMenu（选择项）用来做多选一，选中的项在顶部显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;optionmenu 的使用测试&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;200x100&quot;</span>)</span><br><span class="line">v = StringVar(root)</span><br><span class="line">v.<span class="built_in">set</span>(<span class="string">&quot;百战程序员&quot;</span>)</span><br><span class="line">om = OptionMenu(root, v, <span class="string">&quot;尚学堂&quot;</span>, <span class="string">&quot;百战程序员&quot;</span>, <span class="string">&quot;卓越班[保底 18 万]&quot;</span>)</span><br><span class="line">om[<span class="string">&quot;width&quot;</span>] = <span class="number">10</span></span><br><span class="line">om.pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最喜爱的机构:&quot;</span>, v.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># v.set(&quot;尚学堂&quot;)    # 直接修改了 optionmenu 中选中的值</span></span><br><span class="line">Button(root, text=<span class="string">&quot;确定&quot;</span>, command=test1).pack()</span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113925.png" alt="image-20231208195755098"></p><h4 id="scale滑块"><a href="#scale滑块" class="headerlink" title="scale滑块"></a>scale滑块</h4><p>Scale（移动滑块）用于在指定的数值区间，通过滑块的移动来选择值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; Scale(移动滑块)的使用测试：使用Scale控制字体大小变化&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x150&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;滑块的值:&quot;</span>, value)</span><br><span class="line">    newFont = (<span class="string">&quot;宋体&quot;</span>, value)</span><br><span class="line">    a.config(font=newFont)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Scale(root, from_=<span class="number">10</span>, to=<span class="number">50</span>, length=<span class="number">200</span>, tickinterval=<span class="number">5</span>, orient=HORIZONTAL, command=test1)</span><br><span class="line">s1.pack()</span><br><span class="line">a = Label(root, text=<span class="string">&quot;百战程序员&quot;</span>, width=<span class="number">10</span>, height=<span class="number">1</span>, bg=<span class="string">&quot;black&quot;</span>, fg=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">a.pack()</span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113926.png" alt="image-20231208200121685"></p><h4 id="颜色框"><a href="#颜色框" class="headerlink" title="颜色框"></a>颜色框</h4><p>颜色选择框可以帮助我们设置背景色、前景色、画笔颜色、字体颜色等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;askcolor 颜色选择框的测试，改变背景色&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x150&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    s1 = askcolor(color=<span class="string">&quot;red&quot;</span>, title=<span class="string">&quot;选择背景色&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(s1)</span><br><span class="line">    <span class="comment"># s1 的值是：((0.0, 0.0, 255.99609375), &#x27;#0000ff&#x27;)</span></span><br><span class="line">    root.config(bg=s1[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;选择背景色&quot;</span>, command=test1).pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113927.png" alt="image-20231208201753386"></p><h4 id="文件选择框"><a href="#文件选择框" class="headerlink" title="文件选择框"></a>文件选择框</h4><p>文件对话框帮助我们实现可视化的==操作目录、操作文件==。最后，将文件、目录的信息传入到程序中。文件对话框包含如下一些常用函数：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113928.png" alt="image-20231208203352425"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113929.png" alt="image-20231208203403744"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;文件对话框获取文件&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk();</span><br><span class="line">root.geometry(<span class="string">&quot;400x100&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    f = askopenfilename(title=<span class="string">&quot;上传文件&quot;</span>,</span><br><span class="line">                        initialdir=<span class="string">&quot;d:/&quot;</span>, filetypes=[(<span class="string">&quot;视频文件&quot;</span>, <span class="string">&quot;.mp4&quot;</span>)])</span><br><span class="line">    <span class="comment"># print(f)</span></span><br><span class="line">    show[<span class="string">&quot;text&quot;</span>] = f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;选择编辑的视频文件&quot;</span>, command=test1).pack()</span><br><span class="line">show = Label(root, width=<span class="number">40</span>, height=<span class="number">3</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">show.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># askcolor 颜色选择框的测试，改变背景色</span></span><br><span class="line"><span class="comment"># 打开指定 txt 文件，并读出文件内容到窗口</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x100&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">with</span> askopenfile(title=<span class="string">&quot;上传文件&quot;</span>,</span><br><span class="line">                     initialdir=<span class="string">&quot;d:&quot;</span>, filetypes=[(<span class="string">&quot;文本文件&quot;</span>, <span class="string">&quot;.txt&quot;</span>)]) <span class="keyword">as</span> f:</span><br><span class="line">        show[<span class="string">&quot;text&quot;</span>] = f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;选择读取的文本文件&quot;</span>, command=test1).pack()</span><br><span class="line">show = Label(root, width=<span class="number">40</span>, height=<span class="number">3</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">show.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="简单对话框"><a href="#简单对话框" class="headerlink" title="简单对话框"></a>简单对话框</h4><p>simpledialog（简单对话框）包含如下常用函数：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113930.png" alt="image-20231208204359332"></p><p>参数中，title 表示窗口标题；</p><p>prompt 是提示信息；</p><p>命名参数 kw 为各种选项：initialvalue（初始值）、minvalue（最小值）、maxvalue（最大值）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;简单对话框&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter.simpledialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x100&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    a = askinteger(title=<span class="string">&quot;输入年龄&quot;</span>, prompt=<span class="string">&quot;请输入年龄&quot;</span>, initialvalue=<span class="number">18</span>, minvalue=<span class="number">1</span>, maxvalue=<span class="number">150</span>)</span><br><span class="line">    <span class="comment"># askstring、askfloat 框使用方式一样</span></span><br><span class="line">    show[<span class="string">&quot;text&quot;</span>] = a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Button(root, text=<span class="string">&quot;你多大了? 请输入&quot;</span>, command=test1).pack()</span><br><span class="line">show = Label(root, width=<span class="number">40</span>, height=<span class="number">3</span>, bg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">show.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113931.png" alt="image-20231208205056943"></p><h4 id="通用消息框"><a href="#通用消息框" class="headerlink" title="通用消息框"></a>通用消息框</h4><p>messagebox（通用消息框）用于和用户简单的交互，用户点击确定、取消。如下列出了</p><p>messagebox 的常见函数：</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113932.png" alt="image-20231208204952327"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312082113933.png" alt="image-20231208205010396"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;简单对话框&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.messagebox <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;400x100&quot;</span>)</span><br><span class="line">a1 = showinfo(title=<span class="string">&quot;尚学堂&quot;</span>, message=<span class="string">&quot;Python400 集从零开始，深入底层，\</span></span><br><span class="line"><span class="string">                                      深入算法，打好基础。还手写神经网络&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a1)</span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="ttk子模块问题"><a href="#ttk子模块问题" class="headerlink" title="ttk子模块问题"></a>ttk子模块问题</h4><p>我们再前面学的组件是 tkinter 模块下的组件，整体风格较老较丑。为了弥补这点不足，推出了 ttk 组件。ttk 组件更加美观、功能更加强大。 新增了 LabeledScale（带标签的Scale）、Notebook（多文档窗口）、Progressbar（进度条）、Treeview（树）等组件。</p><p>使用 ttk 组件与使用普通的 Tkinter 组件并没有多大的区别，只要导入 ttk 模块即可。</p><blockquote><p>:warning:此处我们不展开细讲 ttk。如果你的项目确实需要用到复杂的界面，推荐大家使用<code>wxpython</code> 或者 <code>pyQt</code>.</p></blockquote><h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><h4 id="主菜单"><a href="#主菜单" class="headerlink" title="主菜单"></a>主菜单</h4><p>主菜单一般包含：文件、编辑、帮助等，位于 GUI 窗口的上面。创建主菜单一般有如下 4步：</p><ol><li>创建主菜单栏对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menubar = tk.Menu(root)</span><br></pre></td></tr></table></figure><ol><li>创建菜单，并添加到主菜单栏对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_menu = tk.Menu(menubar)</span><br><span class="line">menubar.add_cascade(label=<span class="string">&quot;文件&quot;</span>,menu=file_menu)</span><br></pre></td></tr></table></figure><ol><li>添加菜单项到 2 步中的菜单</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file_menu.add_command(label=<span class="string">&quot;打开&quot;</span>)</span><br><span class="line">file_menu.add_command(label=<span class="string">&quot;保存&quot;</span>,accelerator=<span class="string">&quot;ctrl + s&quot;</span> command=mySaveFile)</span><br><span class="line">file_menu.add_separator()</span><br><span class="line">file_menu.add_command(label=<span class="string">&quot;退出&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>将主菜单栏添加到根窗口</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root[<span class="string">&quot;menu&quot;</span>]=menubar</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;开发记事本软件的菜单&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)    <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.textpad = <span class="literal">None</span>         <span class="comment"># textpad 表示 Text 文本框对象</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建主菜单栏</span></span><br><span class="line">        menubar = Menu(root)</span><br><span class="line">        <span class="comment"># 创建子菜单</span></span><br><span class="line">        menuFile = Menu(menubar)</span><br><span class="line">        menuEdit = Menu(menubar)</span><br><span class="line">        menuHelp = Menu(menubar)</span><br><span class="line">        <span class="comment"># 将子菜单加入到主菜单栏</span></span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;文件(F)&quot;</span>, menu=menuFile)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;编辑(E)&quot;</span>, menu=menuEdit)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;帮助(H)&quot;</span>, menu=menuHelp)</span><br><span class="line">        <span class="comment"># 添加菜单项</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;新建&quot;</span>, accelerator=<span class="string">&quot;ctrl+n&quot;</span>,</span><br><span class="line">                             command=self.test)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;打开&quot;</span>, accelerator=<span class="string">&quot;ctrl+o&quot;</span>,</span><br><span class="line">                             command=self.test)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;保存&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+s&quot;</span>, command=self.test)</span><br><span class="line">        menuFile.add_separator()  <span class="comment"># 添加分割线</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;退出&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+q&quot;</span>, command=self.test)</span><br><span class="line">        <span class="comment"># 将主菜单栏加到根窗口</span></span><br><span class="line">        root[<span class="string">&quot;menu&quot;</span>] = menubar</span><br><span class="line">        <span class="comment"># 文本编辑区</span></span><br><span class="line">        self.textpad = Text(root, width=<span class="number">50</span>, height=<span class="number">30</span>)</span><br><span class="line">        self.textpad.pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;450x300+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;简易记事本&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="上下文菜单"><a href="#上下文菜单" class="headerlink" title="上下文菜单"></a>上下文菜单</h4><p>快捷菜单（上下文菜单）是通过鼠标右键单击组件而弹出的菜单，一般是和这个组件相关的操作，比如：剪切、复制、粘贴、属性等。创建快捷菜单步骤如下：</p><ol><li>创建菜单</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menubar = tk.Menu(root)</span><br><span class="line">menubar.add_command(label=<span class="string">&quot;字体&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>绑定鼠标右键单击事件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">event</span>):</span><br><span class="line">    menubar.post(event.x_root,event.y_root)  <span class="comment">#在鼠标右键单击坐标处显示菜单</span></span><br><span class="line">    root.bind(<span class="string">&quot;&lt;Button-3&gt;&quot;</span>,test)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;开发记事本软件的菜单&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)    <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.textpad = <span class="literal">None</span>         <span class="comment"># textpad 表示 Text 文本框对象</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建主菜单栏</span></span><br><span class="line">        menubar = Menu(root)</span><br><span class="line">        <span class="comment"># 创建子菜单</span></span><br><span class="line">        menuFile = Menu(menubar)</span><br><span class="line">        menuEdit = Menu(menubar)</span><br><span class="line">        menuHelp = Menu(menubar)</span><br><span class="line">        <span class="comment"># 将子菜单加入到主菜单栏</span></span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;文件(F)&quot;</span>, menu=menuFile)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;编辑(E)&quot;</span>, menu=menuEdit)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;帮助(H)&quot;</span>, menu=menuHelp)</span><br><span class="line">        <span class="comment"># 添加菜单项</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;新建&quot;</span>, accelerator=<span class="string">&quot;ctrl+n&quot;</span>,</span><br><span class="line">                             command=self.test)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;打开&quot;</span>, accelerator=<span class="string">&quot;ctrl+o&quot;</span>,</span><br><span class="line">                             command=self.test)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;保存&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+s&quot;</span>, command=self.test)</span><br><span class="line">        menuFile.add_separator()  <span class="comment"># 添加分割线</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;退出&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+q&quot;</span>, command=self.test)</span><br><span class="line">        <span class="comment"># 将主菜单栏加到根窗口</span></span><br><span class="line">        root[<span class="string">&quot;menu&quot;</span>] = menubar</span><br><span class="line">        <span class="comment"># 文本编辑区</span></span><br><span class="line">        self.textpad = Text(root, width=<span class="number">50</span>, height=<span class="number">30</span>)</span><br><span class="line">        self.textpad.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建上下文菜单</span></span><br><span class="line">        self.contextMenu = Menu(root)</span><br><span class="line">        self.contextMenu.add_command(label=<span class="string">&quot;背景颜色&quot;</span>,  command=self.test)</span><br><span class="line">        <span class="comment"># 为右键绑定事件</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Button-3&gt;&quot;</span>, self.createContextMenu)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createContextMenu</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># 菜单在鼠标右键单击的坐标显示</span></span><br><span class="line">        self.contextMenu.post(event.x_root, event.y_root)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;450x300+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;简易记事本&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312122142441.png" alt="image-20231209170627199"></p><h3 id="记事本项目"><a href="#记事本项目" class="headerlink" title="记事本项目"></a>记事本项目</h3><p>结合所学 GUI 知识，开发一款模仿 windows 记事本的软件。包含了基本的功能：</p><ol><li><p>新建文本文件</p></li><li><p>保存文件</p></li><li><p>修改文件内容</p></li><li><p>退出</p></li><li><p>各种快捷键处理</p></li><li><p>修改文本区域背景色</p></li></ol><h4 id="【01】打开和保存修改文件的实现"><a href="#【01】打开和保存修改文件的实现" class="headerlink" title="【01】打开和保存修改文件的实现"></a>【01】打开和保存修改文件的实现</h4><h4 id="【02】新建文件-背景色改变-快捷键功能"><a href="#【02】新建文件-背景色改变-快捷键功能" class="headerlink" title="【02】新建文件-背景色改变-快捷键功能"></a>【02】新建文件-背景色改变-快捷键功能</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">开发一个简单的记事本。</span></span><br><span class="line"><span class="string">包含：新建、保存、修改文本内容、退出</span></span><br><span class="line"><span class="string">包含：各种快捷键的处理</span></span><br><span class="line"><span class="string">version 1.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.textpad = <span class="literal">None</span>  <span class="comment"># textpad 表示 Text 文本框对象</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建主菜单栏</span></span><br><span class="line">        menubar = Menu(root)</span><br><span class="line">        <span class="comment"># 创建子菜单</span></span><br><span class="line">        menuFile = Menu(menubar)</span><br><span class="line">        menuEdit = Menu(menubar)</span><br><span class="line">        menuHelp = Menu(menubar)</span><br><span class="line">        <span class="comment"># 将子菜单加入到主菜单栏</span></span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;文件(F)&quot;</span>, menu=menuFile)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;编辑(E)&quot;</span>, menu=menuEdit)</span><br><span class="line">        menubar.add_cascade(label=<span class="string">&quot;帮助(H)&quot;</span>, menu=menuHelp)</span><br><span class="line">        <span class="comment"># 添加菜单项</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;新建&quot;</span>, accelerator=<span class="string">&quot;ctrl+n&quot;</span>,</span><br><span class="line">                             command=self.newfile)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;打开&quot;</span>, accelerator=<span class="string">&quot;ctrl+o&quot;</span>,</span><br><span class="line">                             command=self.openfile)</span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;保存&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+s&quot;</span>, command=self.savefile)</span><br><span class="line">        menuFile.add_separator()  <span class="comment"># 添加分割线</span></span><br><span class="line">        menuFile.add_command(label=<span class="string">&quot;退出&quot;</span>,</span><br><span class="line">                             accelerator=<span class="string">&quot;ctrl+q&quot;</span>, command=self.exit)</span><br><span class="line">        <span class="comment"># 将主菜单栏加到根窗口</span></span><br><span class="line">        root[<span class="string">&quot;menu&quot;</span>] = menubar</span><br><span class="line">        <span class="comment"># 增加快捷键的处理</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Control-n&gt;&quot;</span>, <span class="keyword">lambda</span> event: self.newfile())   <span class="comment"># 新建文件快捷键</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Control-o&gt;&quot;</span>, <span class="keyword">lambda</span> event: self.openfile())  <span class="comment"># 打开新文件快捷键</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Control-s&gt;&quot;</span>, <span class="keyword">lambda</span> event: self.savefile())  <span class="comment"># 保存文件快捷键</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Control-q&gt;&quot;</span>, <span class="keyword">lambda</span> event: self.exit())      <span class="comment"># 退出快捷键</span></span><br><span class="line">        <span class="comment"># 文本编辑区</span></span><br><span class="line">        self.textpad = Text(root, width=<span class="number">50</span>, height=<span class="number">30</span>)</span><br><span class="line">        self.textpad.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建上下文菜单</span></span><br><span class="line">        self.contextMenu = Menu(root)</span><br><span class="line">        self.contextMenu.add_command(label=<span class="string">&quot;背景颜色&quot;</span>, command=self.openAskColor)</span><br><span class="line">        <span class="comment"># 为右键绑定事件</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;Button-3&gt;&quot;</span>, self.createContextMenu)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">newfile</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 每次打开文件之前清空text控件之前的内容</span></span><br><span class="line">        self.textpad.delete(<span class="number">1.0</span>, END)</span><br><span class="line">        self.filename = asksaveasfilename(title=<span class="string">&quot;另存为&quot;</span>, initialfile=<span class="string">&quot;未命名.txt&quot;</span>,</span><br><span class="line">                                          filetypes=[(<span class="string">&quot;文本文档&quot;</span>, <span class="string">&quot;*.txt&quot;</span>)],</span><br><span class="line">                                          defaultextension=<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">        self.savefile()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">openfile</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 每次打开文件之前清空text控件之前的内容</span></span><br><span class="line">        self.textpad.delete(<span class="number">1.0</span>, END)</span><br><span class="line">        <span class="keyword">with</span> askopenfile(title=<span class="string">&quot;打开文本文件&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.textpad.insert(INSERT, f.read())</span><br><span class="line">            self.filename = f.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">savefile</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.filename, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            c = self.textpad.get(<span class="number">1.0</span>, END)</span><br><span class="line">            f.write(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exit</span>(<span class="params">self</span>):</span><br><span class="line">        root.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">openAskColor</span>(<span class="params">self</span>):</span><br><span class="line">        color = askcolor(color=<span class="string">&quot;red&quot;</span>, title=<span class="string">&quot;选择背景颜色&quot;</span>)</span><br><span class="line">        <span class="comment"># 返回格式 ((0,0,0,255),&quot;0000ff&quot;)</span></span><br><span class="line">        self.textpad.config(bg=color[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createContextMenu</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># 菜单在鼠标右键单击的坐标显示</span></span><br><span class="line">        self.contextMenu.post(event.x_root, event.y_root)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;450x300+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;简易记事本&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="【03】python项目打包成exe可执行文件"><a href="#【03】python项目打包成exe可执行文件" class="headerlink" title="【03】python项目打包成exe可执行文件"></a>【03】python项目打包成exe可执行文件</h4><p>我们可以使用 pyinstaller 模块实现将 python 项目打包成 exe 文件。操作步骤如下：</p><ol><li><p>安装 pyinstaller 模块</p><p>在 pycharm 中操作：file—&gt;setting—&gt;Project：xxx —&gt;Project interpretor，再点击+即可。</p></li><li><p>在 pycharm 的 Terminal 终端输入如下命令：</p><p><code>pyinstaller  -F  xxxx.py</code></p><blockquote><p>:warning:相关参数如下：</p><p>—icon= 图标路径（<code>pyinstaller -F --icon=my.ico XXXX.py</code>）</p><p>-F 打包成一个 exe 文件</p><p>-w 使用窗口，无控制台</p><p>-c 使用控制台，无窗口</p><p>-D 创建一个目录，里面包含 exe 以及其他一些依赖性文件</p></blockquote></li><li><p>在项目的 dist 目录下可以看到生成了 exe 文件，直接在 windows 系统中使用即可</p></li></ol><blockquote><p>:warning:==exe 文件本质是将 python 解释器和程序打包到了一起，这样我们执行程序时就不用管 windows 系统是不是有 python 解释器。==</p></blockquote><h3 id="画图项目"><a href="#画图项目" class="headerlink" title="画图项目"></a>画图项目</h3><p>开发一款简单的画图软件, 包含如下功能：</p><ol><li><p>画笔</p></li><li><p>矩形/椭圆绘制</p></li><li><p>清屏</p></li><li><p>橡皮擦</p></li><li><p>直线/带箭头的直线</p></li><li><p>修改画笔颜色、背景颜色</p></li></ol><h4 id="【01】界面实现"><a href="#【01】界面实现" class="headerlink" title="【01】界面实现"></a>【01】界面实现</h4><h4 id="【02】绘制直线-拖动删除上一个图形"><a href="#【02】绘制直线-拖动删除上一个图形" class="headerlink" title="【02】绘制直线-拖动删除上一个图形"></a>【02】绘制直线-拖动删除上一个图形</h4><h4 id="【03】箭头直线-矩形绘制"><a href="#【03】箭头直线-矩形绘制" class="headerlink" title="【03】箭头直线-矩形绘制"></a>【03】箭头直线-矩形绘制</h4><h4 id="【04】画笔和橡皮擦实现"><a href="#【04】画笔和橡皮擦实现" class="headerlink" title="【04】画笔和橡皮擦实现"></a>【04】画笔和橡皮擦实现</h4><h4 id="【05】清屏-颜色框-快捷键处理"><a href="#【05】清屏-颜色框-快捷键处理" class="headerlink" title="【05】清屏-颜色框-快捷键处理"></a>【05】清屏-颜色框-快捷键处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">开发画图软件的菜单</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.colorchooser <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 　窗口的高度和宽度</span></span><br><span class="line">win_heigth = <span class="number">450</span></span><br><span class="line">win_width = <span class="number">900</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span>, bgcolor=<span class="string">&quot;#000000&quot;</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        self.master = master</span><br><span class="line">        self.bgcolor = bgcolor</span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line">        self.y = <span class="number">0</span></span><br><span class="line">        self.fgcolor = <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line">        <span class="comment"># 表示最后绘制图像的id</span></span><br><span class="line">        self.lastDraw = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 最初的绘画标记</span></span><br><span class="line">        self.startDrawFlag = <span class="literal">False</span></span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建绘图区</span></span><br><span class="line">        self.drawpad = Canvas(root, width=win_width, height=win_heigth * <span class="number">0.9</span>, bg=self.bgcolor)</span><br><span class="line">        self.drawpad.pack()</span><br><span class="line">        <span class="comment"># 创建按钮</span></span><br><span class="line">        btn_start = Button(root, text=<span class="string">&quot;开始&quot;</span>, name=<span class="string">&quot;start&quot;</span>)</span><br><span class="line">        btn_start.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_pen = Button(root, text=<span class="string">&quot;画笔&quot;</span>, name=<span class="string">&quot;pen&quot;</span>)</span><br><span class="line">        btn_pen.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_rect = Button(root, text=<span class="string">&quot;矩形&quot;</span>, name=<span class="string">&quot;rect&quot;</span>)</span><br><span class="line">        btn_rect.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_clear = Button(root, text=<span class="string">&quot;清屏&quot;</span>, name=<span class="string">&quot;clear&quot;</span>)</span><br><span class="line">        btn_clear.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_eraser = Button(root, text=<span class="string">&quot;橡皮擦&quot;</span>, name=<span class="string">&quot;eraser&quot;</span>)</span><br><span class="line">        btn_eraser.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_lineArrow = Button(root, text=<span class="string">&quot;箭头直线&quot;</span>, name=<span class="string">&quot;lineArrow&quot;</span>)</span><br><span class="line">        btn_lineArrow.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        btn_color = Button(root, text=<span class="string">&quot;颜色&quot;</span>, name=<span class="string">&quot;color&quot;</span>)</span><br><span class="line">        btn_color.pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 事件处理</span></span><br><span class="line">        btn_pen.bind_class(<span class="string">&quot;Button&quot;</span>, <span class="string">&quot;&lt;1&gt;&quot;</span>, self.event_Manager)</span><br><span class="line">        self.drawpad.bind(<span class="string">&quot;ButtonRelease-1&quot;</span>, self.stopDraw)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 增加颜色切换的快捷键</span></span><br><span class="line">        root.bind(<span class="string">&quot;&lt;KeyPress-r&gt;&quot;</span>,self.kuaijiejian)</span><br><span class="line">        root.bind(<span class="string">&quot;&lt;KeyPress-g&gt;&quot;</span>,self.kuaijiejian)</span><br><span class="line">        root.bind(<span class="string">&quot;&lt;KeyPress-y&gt;&quot;</span>,self.kuaijiejian)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">event_Manager</span>(<span class="params">self, event</span>):</span><br><span class="line">        name = event.widget.winfo_name()</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&quot;line&quot;</span>:</span><br><span class="line">            <span class="comment"># 绑定拖动鼠标</span></span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myLine)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;lineArrow&quot;</span>:</span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myLineArrow)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;rect&quot;</span>:</span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myRect)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;pen&quot;</span>:</span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myPen)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;eraser&quot;</span>:</span><br><span class="line">            self.drawpad.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.myEraser)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;clear&quot;</span>:</span><br><span class="line">            self.drawpad.delete(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&quot;color&quot;</span>:</span><br><span class="line">            c = askcolor(color=self.fgcolor, title=<span class="string">&quot;选择画笔颜色&quot;</span>)</span><br><span class="line">            <span class="comment"># [(255,0,0),&quot;#ff0000&quot;]</span></span><br><span class="line">            self.fgcolor = c[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stopDraw</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDrawFlag = <span class="literal">False</span></span><br><span class="line">        self.lastDraw = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startDraw</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.drawpad.delete(self.lastDraw)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.startDrawFlag:</span><br><span class="line">            self.startDrawFlag = <span class="literal">True</span></span><br><span class="line">            self.x = event.x</span><br><span class="line">            self.y = event.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myLine</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.lastDraw = self.drawpad.create_line(self.x, self.y, event.x, event.y, fill=self.fgcolor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myLineArrow</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.lastDraw = self.drawpad.create_line(self.x, self.y, event.x, event.y, arrow=LAST, fill=self.fgcolor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myRect</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.lastDraw = self.drawpad.create_rectangle(self.x, self.y, event.x, event.y, outline=self.fgcolor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myPen</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.drawpad.create_line(self.x, self.y, event.x, event.y, fill=self.fgcolor)</span><br><span class="line">        self.x = event.x</span><br><span class="line">        self.y = event.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myEraser</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.startDraw(event)</span><br><span class="line">        self.drawpad.create_rectangle(event.x - <span class="number">4</span>, event.y - <span class="number">4</span>, event.x + <span class="number">4</span>, event.y + <span class="number">4</span>, fill=self.bgcolor)</span><br><span class="line">        self.x = event.x</span><br><span class="line">        self.y = event.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kuaijiejian</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="keyword">if</span> event.char == <span class="string">&quot;r&quot;</span>:</span><br><span class="line">            self.fgcolor = <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line">        <span class="keyword">if</span> event.char == <span class="string">&quot;g&quot;</span>:</span><br><span class="line">            self.fgcolor = <span class="string">&quot;#00ff00&quot;</span></span><br><span class="line">        <span class="keyword">if</span> event.char == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">            self.fgcolor = <span class="string">&quot;#ffff00&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="built_in">str</span>(win_width) + <span class="string">&quot;x&quot;</span> + <span class="built_in">str</span>(win_heigth) + <span class="string">&quot;+200+300&quot;</span>)</span><br><span class="line">    root.title(<span class="string">&quot;画图软件&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202312122142443.png" alt="image-20231212214159088"></p><h2 id="游戏开发-坦克大战"><a href="#游戏开发-坦克大战" class="headerlink" title="游戏开发-坦克大战"></a>游戏开发-坦克大战</h2><h3 id="pygame模块的安装"><a href="#pygame模块的安装" class="headerlink" title="pygame模块的安装"></a>pygame模块的安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pygame</span><br></pre></td></tr></table></figure><h3 id="面向对象分析项目需求"><a href="#面向对象分析项目需求" class="headerlink" title="面向对象分析项目需求"></a>面向对象分析项目需求</h3><p>坦克大战游戏的需求</p><p>1.顶目中有哪些类</p><p>2.每个类中有哪些方法</p><p>（1）坦克类（我方坦克、敌方坦克）</p><p>​            射击<br>​                    移动类<br>​                    显示坦克的方法</p><p>（2）子弹类</p><p>​            移动<br>​                    显示子弹的方法</p><p>（3）墙壁类</p><p>​            属性：是否可以通过</p><p>（4）爆炸效果类</p><p>​            展示爆炸效果</p><p>（5）音效类</p><p>​            播放音乐</p><p>（6）主类</p><p>​            开始游戏</p><p>​            结束游戏</p><h3 id="坦克大战项目框架搭建"><a href="#坦克大战项目框架搭建" class="headerlink" title="坦克大战项目框架搭建"></a>坦克大战项目框架搭建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainGame</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startGame</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">endGame</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tank</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 射击</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示坦克的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我方坦克</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTank</span>(<span class="title class_ inherited__">Tank</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 敌方坦克</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EnemyTank</span>(<span class="title class_ inherited__">Tank</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子弹类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示子弹的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayBullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 墙壁类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wall</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示墙壁的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆炸类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Expode</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示爆炸效果的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayExpode</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 音效类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Music</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 播放音乐的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="加载主窗口"><a href="#加载主窗口" class="headerlink" title="加载主窗口"></a>加载主窗口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    加载主窗口</span><br><span class="line">    pygame官方网址：www.pygame.org</span><br></pre></td></tr></table></figure><h3 id="坦克大战之事件处理"><a href="#坦克大战之事件处理" class="headerlink" title="坦克大战之事件处理"></a>坦克大战之事件处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    添加事件</span><br><span class="line">    1.点击关闭 关闭窗口</span><br><span class="line">    2.按下键盘时候，判断键盘按下的是什么键，分别对不同的键做处理</span><br></pre></td></tr></table></figure><h3 id="左上角文字的绘制"><a href="#左上角文字的绘制" class="headerlink" title="左上角文字的绘制"></a>左上角文字的绘制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    左上角文字绘制：</span><br><span class="line">    左上角输出敌方坦克的数量6</span><br></pre></td></tr></table></figure><h3 id="加载我方坦克"><a href="#加载我方坦克" class="headerlink" title="加载我方坦克"></a>加载我方坦克</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    加载我方坦克</span><br></pre></td></tr></table></figure><h3 id="我方坦克切换方向移动"><a href="#我方坦克切换方向移动" class="headerlink" title="我方坦克切换方向移动"></a>我方坦克切换方向移动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    1.我方坦克切换方向</span><br><span class="line">    2.我方坦克移动</span><br></pre></td></tr></table></figure><h3 id="我方坦克移动优化"><a href="#我方坦克移动优化" class="headerlink" title="我方坦克移动优化"></a>我方坦克移动优化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    优化我方坦克移动的方法</span><br></pre></td></tr></table></figure><h3 id="我方坦克优化2"><a href="#我方坦克优化2" class="headerlink" title="我方坦克优化2"></a>我方坦克优化2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    优化:按下方向键，坦克一直移动</span><br><span class="line">         松开方向键，坦克停止</span><br></pre></td></tr></table></figure><h3 id="加载敌方坦克"><a href="#加载敌方坦克" class="headerlink" title="加载敌方坦克"></a>加载敌方坦克</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    1.完善敌方坦克初始化方法</span><br><span class="line">    2.创建敌方坦克并展示</span><br></pre></td></tr></table></figure><h3 id="敌方坦克随机移动"><a href="#敌方坦克随机移动" class="headerlink" title="敌方坦克随机移动"></a>敌方坦克随机移动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    1.优化左上角 文字的显示，将敌方坦克的数量进行修改</span><br><span class="line">    2.敌方坦克随机移动</span><br><span class="line">      思路：新增加一个变量步数，当移动时候步数进行递减</span><br><span class="line">            当步数&lt;=0时候修改敌方坦克的方向,并将步数复位</span><br></pre></td></tr></table></figure><h3 id="完善子弹类"><a href="#完善子弹类" class="headerlink" title="完善子弹类"></a>完善子弹类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     完善子弹类</span><br></pre></td></tr></table></figure><h3 id="我方坦克发射子弹"><a href="#我方坦克发射子弹" class="headerlink" title="我方坦克发射子弹"></a>我方坦克发射子弹</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     完成我方坦克发射子弹</span><br></pre></td></tr></table></figure><h3 id="子弹移动"><a href="#子弹移动" class="headerlink" title="子弹移动"></a>子弹移动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     完成我方坦克发射子弹,并完成子弹的移动</span><br></pre></td></tr></table></figure><h3 id="子弹消亡及数量控制"><a href="#子弹消亡及数量控制" class="headerlink" title="子弹消亡及数量控制"></a>子弹消亡及数量控制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     优化：1.如果子弹碰到墙壁，让子弹消失</span><br><span class="line">           2.最多可以发射3颗子弹，不能一直发射</span><br></pre></td></tr></table></figure><h3 id="敌方坦克发射子弹"><a href="#敌方坦克发射子弹" class="headerlink" title="敌方坦克发射子弹"></a>敌方坦克发射子弹</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     优化：1.如果子弹碰到墙壁，让子弹消失</span><br><span class="line">           2.最多可以发射3颗子弹，不能一直发射</span><br></pre></td></tr></table></figure><h3 id="我方子弹与敌方坦克的碰撞"><a href="#我方子弹与敌方坦克的碰撞" class="headerlink" title="我方子弹与敌方坦克的碰撞"></a>我方子弹与敌方坦克的碰撞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     我方子弹与敌方坦克的碰撞</span><br><span class="line">       精灵类 Sprite类</span><br></pre></td></tr></table></figure><h3 id="实现爆炸效果"><a href="#实现爆炸效果" class="headerlink" title="实现爆炸效果"></a>实现爆炸效果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.完善爆炸效果类</span><br><span class="line">     2.在窗口中展示爆炸效果</span><br></pre></td></tr></table></figure><h3 id="我方坦克的消亡"><a href="#我方坦克的消亡" class="headerlink" title="我方坦克的消亡"></a>我方坦克的消亡</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.敌方子弹与我方坦克的碰撞</span><br><span class="line">     2.添加爆炸效果</span><br></pre></td></tr></table></figure><h3 id="我方坦克无限重生"><a href="#我方坦克无限重生" class="headerlink" title="我方坦克无限重生"></a>我方坦克无限重生</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">    让我方坦克无限重生</span><br><span class="line">      1.按下键盘的Esc让重生</span><br><span class="line">      2.重生及重新创建我方坦克</span><br></pre></td></tr></table></figure><h3 id="加载墙壁"><a href="#加载墙壁" class="headerlink" title="加载墙壁"></a>加载墙壁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     添加墙壁</span><br><span class="line">     1.完善墙壁类，初始化方法</span><br><span class="line">     2.初始化墙壁，并将墙壁存储到列表中，在窗口中加载墙壁</span><br></pre></td></tr></table></figure><h3 id="子弹不穿墙"><a href="#子弹不穿墙" class="headerlink" title="子弹不穿墙"></a>子弹不穿墙</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.子弹不能穿墙</span><br><span class="line">        子弹碰撞到墙壁时候，让子弹消失</span><br><span class="line">     2.墙壁被击中，墙壁的生命值处理</span><br></pre></td></tr></table></figure><h3 id="坦克不能穿墙"><a href="#坦克不能穿墙" class="headerlink" title="坦克不能穿墙"></a>坦克不能穿墙</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.坦克不能穿墙</span><br><span class="line">        坦克碰撞到墙壁，不能再移动</span><br><span class="line">        不能再移动及坐标不能发生变化</span><br></pre></td></tr></table></figure><h3 id="敌我双方坦克发生碰撞"><a href="#敌我双方坦克发生碰撞" class="headerlink" title="敌我双方坦克发生碰撞"></a>敌我双方坦克发生碰撞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.我方坦克与敌方坦克发生碰撞</span><br><span class="line">       让我方坦克不能再继续移动   stay()</span><br><span class="line">     2.敌方坦克与我方坦克发生碰撞</span><br><span class="line">       让地方坦克不能再移动   stay()</span><br></pre></td></tr></table></figure><h3 id="音效处理"><a href="#音效处理" class="headerlink" title="音效处理"></a>音效处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增功能：</span><br><span class="line">     1.完善音效类</span><br><span class="line">     2.添加开场音效</span><br><span class="line">     3.我方坦克发射子弹添加音效</span><br></pre></td></tr></table></figure><h3 id="坦克大战完整代码"><a href="#坦克大战完整代码" class="headerlink" title="坦克大战完整代码"></a>坦克大战完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">pygame模块的安装</span></span><br><span class="line"><span class="string">面向对象分析项目需求</span></span><br><span class="line"><span class="string">坦克大战项目框架搭建</span></span><br><span class="line"><span class="string">加载主窗口</span></span><br><span class="line"><span class="string">坦克大战之事件处理</span></span><br><span class="line"><span class="string">左上角文字的绘制</span></span><br><span class="line"><span class="string">加载我方坦克</span></span><br><span class="line"><span class="string">我方坦克切换方向移动</span></span><br><span class="line"><span class="string">我方坦克移动优化</span></span><br><span class="line"><span class="string">我方坦克优化2</span></span><br><span class="line"><span class="string">加载敌方坦克</span></span><br><span class="line"><span class="string">敌方坦克随机移动</span></span><br><span class="line"><span class="string">完善子单类</span></span><br><span class="line"><span class="string">我方坦克发射子弹</span></span><br><span class="line"><span class="string">子弹移动</span></span><br><span class="line"><span class="string">子弹消亡及数量控制</span></span><br><span class="line"><span class="string">敌方坦克发射子弹</span></span><br><span class="line"><span class="string">我方子弹与敌方坦克的碰撞</span></span><br><span class="line"><span class="string">实现爆炸效果</span></span><br><span class="line"><span class="string">我方坦克的消亡</span></span><br><span class="line"><span class="string">我方坦克无限重生</span></span><br><span class="line"><span class="string">加载墙壁</span></span><br><span class="line"><span class="string">子弹不穿墙</span></span><br><span class="line"><span class="string">坦克不能穿墙</span></span><br><span class="line"><span class="string">敌我双方坦克发生碰撞</span></span><br><span class="line"><span class="string">音效处理</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> pygame, time, random</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line">SCREEN_WIDTH = <span class="number">800</span></span><br><span class="line">SCREEN_HEIGHT = <span class="number">500</span></span><br><span class="line">BG_COLOR = pygame.Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">TEXT_COLOR = pygame.Color(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseItem</span>(<span class="title class_ inherited__">Sprite</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, color, width, height</span>):</span><br><span class="line">        pygame.sprite.Sprite.__init__(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainGame</span>():</span><br><span class="line">    window = <span class="literal">None</span></span><br><span class="line">    my_tank = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 存储敌方坦克的列表</span></span><br><span class="line">    enemyTankList = []</span><br><span class="line">    <span class="comment"># 定义生成敌方坦克的数量</span></span><br><span class="line">    enemyTankCount = <span class="number">5</span></span><br><span class="line">    <span class="comment"># 存储我方子弹的列表</span></span><br><span class="line">    myBulletList = []</span><br><span class="line">    <span class="comment"># 存储敌方子弹的列表</span></span><br><span class="line">    enemyBulletList = []</span><br><span class="line">    <span class="comment"># 存储爆炸效果的列表</span></span><br><span class="line">    explodeList = []</span><br><span class="line">    <span class="comment"># 存储墙壁的列表</span></span><br><span class="line">    wallList = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startGame</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 加载主窗口</span></span><br><span class="line">        <span class="comment"># 初始化窗口</span></span><br><span class="line">        pygame.display.init()</span><br><span class="line">        <span class="comment"># 设置窗口的大小和显示</span></span><br><span class="line">        MainGame.window = pygame.display.set_mode([SCREEN_WIDTH, SCREEN_HEIGHT])</span><br><span class="line">        <span class="comment"># 初始化我方坦克</span></span><br><span class="line">        self.createMyTank()</span><br><span class="line">        <span class="comment"># 初始化敌方坦克，并将敌方坦克添加到列表中</span></span><br><span class="line">        self.createEnemyTank()</span><br><span class="line">        <span class="comment"># 初始化墙壁</span></span><br><span class="line">        self.createWall()</span><br><span class="line">        <span class="comment"># 设置窗口的标题</span></span><br><span class="line">        pygame.display.set_caption(<span class="string">&quot;坦克大战&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 使坦克移动的速度慢一点</span></span><br><span class="line">            time.sleep(<span class="number">0.02</span>)</span><br><span class="line">            <span class="comment"># 给窗口设置填充色</span></span><br><span class="line">            MainGame.window.fill(BG_COLOR)</span><br><span class="line">            <span class="comment"># 获取事件</span></span><br><span class="line">            self.getEvent()</span><br><span class="line">            <span class="comment"># 绘制文字</span></span><br><span class="line">            MainGame.window.blit(self.getTextSuface(<span class="string">&quot;敌方坦克剩余数量%d&quot;</span> % <span class="built_in">len</span>(MainGame.enemyTankList)), (<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">            <span class="comment"># 调用显示坦克的方法</span></span><br><span class="line">            <span class="comment"># 判断我方坦克是否是存活</span></span><br><span class="line">            <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                MainGame.my_tank.displayTank()</span><br><span class="line">            <span class="comment"># 删否则除我方坦克</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">del</span> MainGame.my_tank</span><br><span class="line">                MainGame.my_tank = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 循环遍历敌方坦克列表，展示敌方坦克</span></span><br><span class="line">            self.blitEnemyTank()</span><br><span class="line">            <span class="comment"># 循环遍历显示我方坦克的子弹</span></span><br><span class="line">            self.blitMyBullet()</span><br><span class="line">            <span class="comment"># 循环遍历显示敌方坦克的子弹</span></span><br><span class="line">            self.blitEnemyBullet()</span><br><span class="line">            <span class="comment"># 循环遍历爆炸列表,展示爆炸效果</span></span><br><span class="line">            self.blitExplode()</span><br><span class="line">            <span class="comment"># 循环遍历墙壁列表,展示墙壁</span></span><br><span class="line">            self.blitWall()</span><br><span class="line">            <span class="comment"># 调用坦克移动的方法</span></span><br><span class="line">            <span class="comment"># 如果坦克的开关是开启,才可以移动</span></span><br><span class="line">            <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> MainGame.my_tank.stop:</span><br><span class="line">                    MainGame.my_tank.move()</span><br><span class="line">                    <span class="comment"># 检查我方坦克是否与墙壁发生碰撞</span></span><br><span class="line">                    MainGame.my_tank.hitWall()</span><br><span class="line">                    <span class="comment"># 检测我方坦克是否与敌方坦克发生碰撞</span></span><br><span class="line">                    MainGame.my_tank.myTank_hit_enemyTank()</span><br><span class="line"></span><br><span class="line">            pygame.display.update()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化我方坦克</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createMyTank</span>(<span class="params">self</span>):</span><br><span class="line">        MainGame.my_tank = MyTank(<span class="number">350</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="comment"># 创建music对象</span></span><br><span class="line">        music = Music(<span class="string">&quot;./img/start.wav&quot;</span>)</span><br><span class="line">        <span class="comment"># 播放音乐</span></span><br><span class="line">        music.play()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化敌方坦克，并将敌方坦克添加到列表中</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createEnemyTank</span>(<span class="params">self</span>):</span><br><span class="line">        top = <span class="number">100</span></span><br><span class="line">        <span class="comment"># 循环生成敌方坦克</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MainGame.enemyTankCount):</span><br><span class="line">            left = random.randint(<span class="number">0</span>, <span class="number">600</span>)</span><br><span class="line">            speed = random.randint(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">            enemy = EnemyTank(left, top, speed)</span><br><span class="line">            MainGame.enemyTankList.append(enemy)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化墙壁</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">            <span class="comment"># 初始化墙壁</span></span><br><span class="line">            wall = Wall(i * <span class="number">130</span>, <span class="number">220</span>)</span><br><span class="line">            <span class="comment"># 将墙壁添加到列表中</span></span><br><span class="line">            MainGame.wallList.append(wall)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历敌方坦克列表，展示敌方坦克</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitEnemyTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> enemyTank <span class="keyword">in</span> MainGame.enemyTankList:</span><br><span class="line">            <span class="comment"># 判断敌方坦克是否活着</span></span><br><span class="line">            <span class="keyword">if</span> enemyTank.live:</span><br><span class="line">                enemyTank.displayTank()</span><br><span class="line">                enemyTank.randMove()</span><br><span class="line">                <span class="comment"># 调用检测敌方坦克是否和墙壁碰撞</span></span><br><span class="line">                enemyTank.hitWall()</span><br><span class="line">                <span class="comment"># 检测敌方坦克是否和我方坦克发生碰撞</span></span><br><span class="line">                <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                    enemyTank.enemyTank_hit_myTank()</span><br><span class="line">                <span class="comment"># 发射子弹</span></span><br><span class="line">                enemyBullet = enemyTank.shot()</span><br><span class="line">                <span class="comment"># 敌方子弹是否为None,如果不为None则添加到敌方子弹列表</span></span><br><span class="line">                <span class="keyword">if</span> enemyBullet:</span><br><span class="line">                    <span class="comment"># 将敌方坦克子弹存储到敌方子弹列表中</span></span><br><span class="line">                    MainGame.enemyBulletList.append(enemyBullet)</span><br><span class="line">            <span class="comment"># 从敌方坦克列表移除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.enemyTankList.remove(enemyTank)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历我方坦克的子弹存储列表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitMyBullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> myBullet <span class="keyword">in</span> MainGame.myBulletList:</span><br><span class="line">            <span class="comment"># 判断当前子弹是否是活着的状态，如果是则进行显示及移动</span></span><br><span class="line">            <span class="keyword">if</span> myBullet.live:</span><br><span class="line">                myBullet.displayBullet()</span><br><span class="line">                <span class="comment"># 调用子弹的移动方法</span></span><br><span class="line">                myBullet.move()</span><br><span class="line">                <span class="comment"># 调用检测我方子弹是否和敌方坦克发生碰撞</span></span><br><span class="line">                myBullet.myBullet_hit_enemyTank()</span><br><span class="line">                <span class="comment"># 检测我方子弹是否和墙壁碰撞</span></span><br><span class="line">                myBullet.hitWall()</span><br><span class="line">            <span class="comment"># 否则在列表中删除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.myBulletList.remove(myBullet)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历显示敌方坦克的子弹</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitEnemyBullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> enemyBullet <span class="keyword">in</span> MainGame.enemyBulletList:</span><br><span class="line">            <span class="comment"># 判断当前子弹是否是活着的状态，如果是则进行显示及移动</span></span><br><span class="line">            <span class="keyword">if</span> enemyBullet.live:</span><br><span class="line">                enemyBullet.displayBullet()</span><br><span class="line">                <span class="comment"># 调用子弹的移动方法</span></span><br><span class="line">                enemyBullet.move()</span><br><span class="line">                <span class="comment"># 调用检测敌方子弹是否和我方坦克发生碰撞</span></span><br><span class="line">                enemyBullet.enemyBullet_hit_myTank()</span><br><span class="line">                <span class="comment"># 检测敌方子弹是否和墙壁碰撞</span></span><br><span class="line">                enemyBullet.hitWall()</span><br><span class="line">            <span class="comment"># 否则在列表中删除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.enemyBulletList.remove(enemyBullet)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历爆炸列表,展示爆炸效果</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitExplode</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> explode <span class="keyword">in</span> MainGame.explodeList:</span><br><span class="line">            <span class="comment"># 判断是否是活着的状态，如果是则进行显示</span></span><br><span class="line">            <span class="keyword">if</span> explode.live:</span><br><span class="line">                explode.displayExplode()</span><br><span class="line">                <span class="comment"># 添加爆炸音效</span></span><br><span class="line">                music = Music(<span class="string">&quot;./img/fire.wav&quot;</span>)</span><br><span class="line">                music.play()</span><br><span class="line">            <span class="comment"># 否则在爆炸列表中删除</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MainGame.explodeList.remove(explode)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环遍历墙壁列表,展示墙壁</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> wall <span class="keyword">in</span> MainGame.wallList:</span><br><span class="line">            <span class="comment"># 判断墙壁是否存活</span></span><br><span class="line">            <span class="keyword">if</span> wall.live:</span><br><span class="line">                <span class="comment"># 调用墙壁展示方法</span></span><br><span class="line">                wall.displayWall()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 从墙壁列表移除</span></span><br><span class="line">                MainGame.wallList.remove(wall)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">endGame</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;感谢使用，欢迎再次使用&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 左上角文字绘制</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getTextSuface</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="comment"># 初始化字体模块</span></span><br><span class="line">        pygame.font.init()</span><br><span class="line">        <span class="comment"># 查看所有字体名称</span></span><br><span class="line">        <span class="comment"># print(pygame.font.get_fonts())</span></span><br><span class="line">        <span class="comment"># 获取字体font对象</span></span><br><span class="line">        font = pygame.font.SysFont(<span class="string">&quot;adobe宋体stdl&quot;</span>, <span class="number">18</span>)</span><br><span class="line">        <span class="comment"># 绘制字体信息</span></span><br><span class="line">        textSurface = font.render(text, <span class="literal">True</span>, TEXT_COLOR)</span><br><span class="line">        <span class="keyword">return</span> textSurface</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getEvent</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取事件</span></span><br><span class="line">        eventList = pygame.event.get()</span><br><span class="line">        <span class="comment"># 遍历事件</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> eventList:</span><br><span class="line">            <span class="comment"># 判断按下的键是关闭还是键盘按下</span></span><br><span class="line">            <span class="comment"># 如果按的是退出，关闭窗口</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                self.endGame()</span><br><span class="line">            <span class="comment"># 如果是键盘的按下</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">                <span class="comment"># 当坦克死亡或不存在</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> MainGame.my_tank:</span><br><span class="line">                    <span class="comment"># 如果按下的是ESC键,让我方坦克重生</span></span><br><span class="line">                    <span class="keyword">if</span> event.key == pygame.K_ESCAPE:</span><br><span class="line">                        <span class="comment"># 让我方坦克重生及调用创建坦克的方法</span></span><br><span class="line">                        self.createMyTank()</span><br><span class="line">                <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                    <span class="comment"># 判断的是按下的上、下、左、右</span></span><br><span class="line">                    <span class="keyword">if</span> event.key == pygame.K_LEFT:</span><br><span class="line">                        <span class="comment"># 切换方向</span></span><br><span class="line">                        MainGame.my_tank.direction = <span class="string">&quot;L&quot;</span></span><br><span class="line">                        <span class="comment"># MainGame.my_tank.move()</span></span><br><span class="line">                        <span class="comment"># 修改坦克的的开关</span></span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">False</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;按下左键，坦克左移&quot;</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                        <span class="comment"># 切换方向</span></span><br><span class="line">                        MainGame.my_tank.direction = <span class="string">&quot;R&quot;</span></span><br><span class="line">                        <span class="comment"># MainGame.my_tank.move()</span></span><br><span class="line">                        <span class="comment"># 修改坦克的的开关</span></span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">False</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;按下右键，坦克右移&quot;</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key == pygame.K_UP:</span><br><span class="line">                        <span class="comment"># 切换方向</span></span><br><span class="line">                        MainGame.my_tank.direction = <span class="string">&quot;U&quot;</span></span><br><span class="line">                        <span class="comment"># MainGame.my_tank.move()</span></span><br><span class="line">                        <span class="comment"># 修改坦克的的开关</span></span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">False</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;按下上键，坦克上移&quot;</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">                        <span class="comment"># 切换方向</span></span><br><span class="line">                        MainGame.my_tank.direction = <span class="string">&quot;D&quot;</span></span><br><span class="line">                        <span class="comment"># 修改坦克的的开关</span></span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">False</span></span><br><span class="line">                        <span class="comment"># MainGame.my_tank.move()</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;按下下键，坦克下移&quot;</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;发射子弹&quot;</span>)</span><br><span class="line">                        <span class="comment"># 如果当前我方子弹列表的大小&lt;3时候才可以创建</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">len</span>(MainGame.myBulletList) &lt; <span class="number">3</span>:</span><br><span class="line">                            <span class="comment"># 创建我方坦克发射的子弹</span></span><br><span class="line">                            myBullet = Bullet(MainGame.my_tank)</span><br><span class="line">                            MainGame.myBulletList.append(myBullet)</span><br><span class="line">                            <span class="comment"># 我方坦克发射子弹添加音效</span></span><br><span class="line">                            music = Music(<span class="string">&quot;./img/hit.wav&quot;</span>)</span><br><span class="line">                            music.play()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 松开方向键,坦克移动停止,修改坦克开关状态</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.KEYUP:</span><br><span class="line">                <span class="comment"># 判断松开的键是上、下、左、右的时候才停止坦克移动</span></span><br><span class="line">                <span class="keyword">if</span> event.key == pygame.K_LEFT <span class="keyword">or</span> event.key == pygame.K_RIGHT <span class="keyword">or</span> event.key == pygame.K_UP <span class="keyword">or</span> event.key == pygame.K_DOWN:</span><br><span class="line">                    <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">                        MainGame.my_tank.stop = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 坦克类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tank</span>(<span class="title class_ inherited__">BaseItem</span>):</span><br><span class="line">    <span class="comment"># 添加距离左边left 距离上边top</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, left, top</span>):</span><br><span class="line">        <span class="comment"># 加载保存的图片</span></span><br><span class="line">        self.images = &#123;</span><br><span class="line">            <span class="string">&quot;U&quot;</span>: pygame.image.load(<span class="string">&quot;./img/p1tankU.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;D&quot;</span>: pygame.image.load(<span class="string">&quot;./img/p1tankD.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;L&quot;</span>: pygame.image.load(<span class="string">&quot;./img/p1tankL.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;R&quot;</span>: pygame.image.load(<span class="string">&quot;./img/p1tankR.gif&quot;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 方向</span></span><br><span class="line">        self.direction = <span class="string">&quot;U&quot;</span></span><br><span class="line">        <span class="comment"># 根据当前图片的方向获取图片</span></span><br><span class="line">        self.image = self.images[self.direction]</span><br><span class="line">        <span class="comment"># 根据图片获取区域</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment"># 设置区域的left和top</span></span><br><span class="line">        self.rect.left = left</span><br><span class="line">        self.rect.top = top</span><br><span class="line">        <span class="comment"># 速度决定移动的快慢</span></span><br><span class="line">        self.speed = <span class="number">5</span></span><br><span class="line">        <span class="comment"># 坦克移动的开关</span></span><br><span class="line">        self.stop = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 是否存活</span></span><br><span class="line">        self.live = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 新增属性原来坐标</span></span><br><span class="line">        self.oldLeft = self.rect.left</span><br><span class="line">        self.oldTop = self.rect.top</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 移动后记录原始的坐标</span></span><br><span class="line">        self.oldLeft = self.rect.left</span><br><span class="line">        self.oldTop = self.rect.top</span><br><span class="line">        <span class="comment"># 判断坦克的方向进行移动</span></span><br><span class="line">        <span class="keyword">if</span> self.direction == <span class="string">&quot;L&quot;</span>:</span><br><span class="line">            <span class="comment"># 判断是否超过边界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">                self.rect.left -= self.speed</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">            <span class="comment"># 判断是否超过边界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.left + self.rect.height &lt; SCREEN_WIDTH:</span><br><span class="line">                self.rect.left += self.speed</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;U&quot;</span>:</span><br><span class="line">            <span class="comment"># 判断是否超过边界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.top &gt; <span class="number">0</span>:</span><br><span class="line">                self.rect.top -= self.speed</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">            <span class="comment"># 判断是否超过边界</span></span><br><span class="line">            <span class="keyword">if</span> self.rect.top + self.rect.height &lt; SCREEN_HEIGHT:</span><br><span class="line">                self.rect.top += self.speed</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 射击</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Bullet(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stay</span>(<span class="params">self</span>):</span><br><span class="line">        self.rect.left = self.oldLeft</span><br><span class="line">        self.rect.top = self.oldTop</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查坦克是否和墙壁发生碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hitWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> wall <span class="keyword">in</span> MainGame.wallList:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(self, wall):</span><br><span class="line">                <span class="comment"># 将坐标设置移动之前的坐标</span></span><br><span class="line">                self.stay()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示坦克的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取展示对象</span></span><br><span class="line">        self.image = self.images[self.direction]</span><br><span class="line">        <span class="comment"># 调用blit方法展示</span></span><br><span class="line">        MainGame.window.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我方坦克</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTank</span>(<span class="title class_ inherited__">Tank</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, left, top</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyTank, self).__init__(left, top)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测我方坦克是否与敌方坦克发生碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myTank_hit_enemyTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 循环遍历敌方坦克列表</span></span><br><span class="line">        <span class="keyword">for</span> enemyTank <span class="keyword">in</span> MainGame.enemyTankList:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(self, enemyTank):</span><br><span class="line">                self.stay()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 敌方坦克</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EnemyTank</span>(<span class="title class_ inherited__">Tank</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, left, top, speed</span>):</span><br><span class="line">        <span class="comment"># 调用父类的初始化方法</span></span><br><span class="line">        <span class="built_in">super</span>(EnemyTank, self).__init__(left, top)</span><br><span class="line">        <span class="comment"># 加载啊图片集</span></span><br><span class="line">        self.images = &#123;</span><br><span class="line">            <span class="string">&quot;U&quot;</span>: pygame.image.load(<span class="string">&quot;./img/enemy1U.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;D&quot;</span>: pygame.image.load(<span class="string">&quot;./img/enemy1D.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;R&quot;</span>: pygame.image.load(<span class="string">&quot;./img/enemy1R.gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;L&quot;</span>: pygame.image.load(<span class="string">&quot;./img/enemy1L.gif&quot;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 方向，随机生成敌方坦克的方向</span></span><br><span class="line">        self.direction = self.randDirection()</span><br><span class="line">        <span class="comment"># 根据方向获取图片</span></span><br><span class="line">        self.image = self.images[self.direction]</span><br><span class="line">        <span class="comment"># 根据图片获取区域</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment"># 设置区域的left和top</span></span><br><span class="line">        self.rect.left = left</span><br><span class="line">        self.rect.top = top</span><br><span class="line">        <span class="comment"># 速度决定移动的快慢</span></span><br><span class="line">        self.speed = <span class="number">5</span></span><br><span class="line">        <span class="comment"># 坦克移动的开关</span></span><br><span class="line">        self.stop = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 新增加一个步数变量 step</span></span><br><span class="line">        self.step = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机生成敌方坦克的方向</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randDirection</span>(<span class="params">self</span>):</span><br><span class="line">        num = random.randint(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;U&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;D&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> num == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;L&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> num == <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;R&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randMove</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.step &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 修改方向</span></span><br><span class="line">            self.direction = self.randDirection()</span><br><span class="line">            <span class="comment"># 让步数复位</span></span><br><span class="line">            self.step = <span class="number">50</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.move()</span><br><span class="line">            <span class="comment"># 让步数递减</span></span><br><span class="line">            self.step -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写shot()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 随机生成100以内的数</span></span><br><span class="line">        num = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> Bullet(self)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测敌方坦克是否和我方坦克发生碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enemyTank_hit_myTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> pygame.sprite.collide_rect(self, MainGame.my_tank):</span><br><span class="line">            self.stay()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子弹类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>(<span class="title class_ inherited__">BaseItem</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, tank</span>):</span><br><span class="line">        <span class="comment"># 加载图片</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&quot;./img/enemymissile.gif&quot;</span>)</span><br><span class="line">        <span class="comment"># 坦克的方向决定子弹的方向</span></span><br><span class="line">        self.direction = tank.direction</span><br><span class="line">        <span class="comment"># 获取区域</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment"># 子弹的left和top和方向有关</span></span><br><span class="line">        <span class="keyword">if</span> self.direction == <span class="string">&quot;U&quot;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left + tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">            self.rect.top = tank.rect.top - self.rect.height</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left + tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">            self.rect.top = tank.rect.top + self.rect.height</span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left + self.rect.width</span><br><span class="line">            self.rect.top = tank.rect.top + tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;L&quot;</span>:</span><br><span class="line">            self.rect.left = tank.rect.left - tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">            self.rect.top = tank.rect.top + tank.rect.width / <span class="number">2</span> - self.rect.width / <span class="number">2</span></span><br><span class="line">        <span class="comment"># 子弹的速度</span></span><br><span class="line">        self.speed = <span class="number">6</span></span><br><span class="line">        <span class="comment"># 子弹的状态，是否碰到墙壁，如果碰到墙壁，修改此状态</span></span><br><span class="line">        self.live = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 子弹的移动和方向有关</span></span><br><span class="line">        <span class="keyword">if</span> self.direction == <span class="string">&quot;U&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.top &gt; <span class="number">0</span>:</span><br><span class="line">                self.rect.top -= self.speed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 修改子弹状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.top + self.rect.height &lt; SCREEN_HEIGHT:</span><br><span class="line">                self.rect.top += self.speed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 修改子弹状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.left + self.rect.width &lt; SCREEN_WIDTH:</span><br><span class="line">                self.rect.left += self.speed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 修改子弹状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> self.direction == <span class="string">&quot;L&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">                self.rect.left -= self.speed</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 修改子弹状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 展示子弹的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子弹是否碰撞墙壁</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hitWall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> wall <span class="keyword">in</span> MainGame.wallList:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(self, wall):</span><br><span class="line">                <span class="comment"># 修改子弹的生存状态,让子弹消失</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 墙壁的生命值减小</span></span><br><span class="line">                wall.hp -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> wall.hp &lt; <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 修改墙壁的生存状态</span></span><br><span class="line">                    wall.live = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayBullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 将图片surface加载到窗口</span></span><br><span class="line">        MainGame.window.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 我方子弹和敌方坦克碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myBullet_hit_enemyTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 循环遍历敌方坦克列表,判断是否发生碰撞</span></span><br><span class="line">        <span class="keyword">for</span> enemyTank <span class="keyword">in</span> MainGame.enemyTankList:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(enemyTank, self):</span><br><span class="line">                <span class="comment"># 修改敌方坦克和我方子弹的状态</span></span><br><span class="line">                enemyTank.live = <span class="literal">False</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 创建爆炸对象</span></span><br><span class="line">                explode = Expode(enemyTank)</span><br><span class="line">                <span class="comment"># 将爆炸对象添加到爆炸列表中</span></span><br><span class="line">                MainGame.explodeList.append(explode)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 敌方子弹和我方坦克碰撞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enemyBullet_hit_myTank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> MainGame.my_tank <span class="keyword">and</span> MainGame.my_tank.live:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.collide_rect(MainGame.my_tank, self):</span><br><span class="line">                <span class="comment"># 创建爆炸对象</span></span><br><span class="line">                explode = Expode(MainGame.my_tank)</span><br><span class="line">                <span class="comment"># 将爆炸对象添加到爆炸列表中</span></span><br><span class="line">                MainGame.explodeList.append(explode)</span><br><span class="line">                <span class="comment"># 修改敌方子弹和我方坦克的状态</span></span><br><span class="line">                self.live = <span class="literal">False</span></span><br><span class="line">                MainGame.my_tank.live = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 墙壁类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wall</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, left, top</span>):</span><br><span class="line">        <span class="comment"># 加载墙壁图片</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&quot;./img/steels.gif&quot;</span>)</span><br><span class="line">        <span class="comment"># 获取墙壁区域</span></span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        <span class="comment"># 设置位置left和top</span></span><br><span class="line">        self.rect.left = left</span><br><span class="line">        self.rect.top = top</span><br><span class="line">        <span class="comment"># 是否存活</span></span><br><span class="line">        self.live = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 设置生命值</span></span><br><span class="line">        self.hp = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示墙壁的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayWall</span>(<span class="params">self</span>):</span><br><span class="line">        MainGame.window.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆炸类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Expode</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, tank</span>):</span><br><span class="line">        <span class="comment"># 爆炸位置由当前子弹打中的坦克位置决定</span></span><br><span class="line">        self.rect = tank.rect</span><br><span class="line">        self.images = [</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast0.gif&quot;</span>),</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast1.gif&quot;</span>),</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast2.gif&quot;</span>),</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast3.gif&quot;</span>),</span><br><span class="line">            pygame.image.load(<span class="string">&quot;./img/blast4.gif&quot;</span>),</span><br><span class="line">        ]</span><br><span class="line">        self.step = <span class="number">0</span></span><br><span class="line">        self.image = self.images[self.step]</span><br><span class="line">        <span class="comment"># 是否活着</span></span><br><span class="line">        self.live = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示爆炸效果的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayExplode</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.step &lt; <span class="built_in">len</span>(self.images):</span><br><span class="line">            <span class="comment"># 根据索引获取爆炸对象</span></span><br><span class="line">            self.image = self.images[self.step]</span><br><span class="line">            self.step += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 添加到主窗口</span></span><br><span class="line">            MainGame.window.blit(self.image, self.rect)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 修改活着的状态</span></span><br><span class="line">            self.live = <span class="literal">False</span></span><br><span class="line">            self.step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 音效类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Music</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        self.filename = filename</span><br><span class="line">        <span class="comment"># 初始化音乐混合器</span></span><br><span class="line">        pygame.mixer.init()</span><br><span class="line">        <span class="comment"># 加载音乐</span></span><br><span class="line">        pygame.mixer.music.load(self.filename)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 播放音乐的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        pygame.mixer.music.play()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    MainGame().startGame()</span><br><span class="line">    <span class="comment"># MainGame().getTextSuface()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过nginx访问tomcat中SpringMVC应用</title>
      <link href="/archives/7cb9f0a8.html"/>
      <url>/archives/7cb9f0a8.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="通过nginx访问tomcat中SpringMVC应用"><a href="#通过nginx访问tomcat中SpringMVC应用" class="headerlink" title="通过nginx访问tomcat中SpringMVC应用"></a>通过nginx访问tomcat中SpringMVC应用</h1><h1 id="amp-同一tomcat中部署多个SpringMVC应用"><a href="#amp-同一tomcat中部署多个SpringMVC应用" class="headerlink" title="&amp;同一tomcat中部署多个SpringMVC应用"></a>&amp;同一tomcat中部署多个SpringMVC应用</h1><h2 id="nginx简介"><a href="#nginx简介" class="headerlink" title="nginx简介"></a>nginx简介</h2><p>Nginx，也被称为”engine x”，是一个开源并且支持高性能和高并发的Web服务和代理服务软件。这款软件由俄罗斯人Igor Sysoev开发并首次在俄罗斯的大型网站www.rambler.ru上应用。它不仅可以作为HTTP服务器运行，还可以作为反向代理服务器使用，同时还提供了IMAP/POP3/SMTP等服务。Nginx因其轻量级和高效性在全球范围内得到了广泛的应用。</p><h2 id="Linux-安装-nginx"><a href="#Linux-安装-nginx" class="headerlink" title="Linux 安装 nginx"></a>Linux 安装 nginx</h2><p>这里安装nginx就不多说了，参考文档：<a href="https://blog.csdn.net/u013737132/article/details/134271857">Linux 安装 Nginx 并配置为系统服务（超详细）-CSDN博客</a></p><h2 id="tomcat部署SpringMVC应用"><a href="#tomcat部署SpringMVC应用" class="headerlink" title="tomcat部署SpringMVC应用"></a>tomcat部署SpringMVC应用</h2><ol><li><p>将SpringMVC应用打war包，通过idea的maven打包项目</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115659.png" alt="image-20231122204557462"></p></li><li><p>将 打包好的war包放到tomcat根目录下的webapp</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115660.png" alt="image-20231122204926969"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115661.png" alt="image-20231122204910265"></p></li><li><p>若在==同一个tomcat部署多个项目==，首先把webapp文件夹拷贝一份取名为webapp2，然后修改conf/server.xml文件</p></li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.startup.VersionLoggerListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="attr">SSLEngine</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">&quot;UserDatabase&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;Container&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">&quot;User database that can be updated and saved&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">factory</span>=<span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">pathname</span>=<span class="string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这是第一个webapp项目--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span>  <span class="comment">&lt;!--两个webapp项目Service name要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;18080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">maxParameterCount</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">               /&gt;</span>  <span class="comment">&lt;!--两个webapp项目的port要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/opt/moiveproject/tomcat9/webapps/Movie&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!--docBase的内容是你war包的位置, MovieManager是war包的名字,不带.war--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这是第二个webapp项目--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina2&quot;</span>&gt;</span>   <span class="comment">&lt;!--两个webapp项目Service name要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span>  </span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span>  <span class="comment">&lt;!--两个webapp项目的port要不同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8010&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8445&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span>  <span class="comment">&lt;!--appBase的内容要与你的文件名一致--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/opt/moiveproject/tomcat9/webapps2/MovieManager&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--docBase的内容是你war包的位置, MovieManager是war包的名字,不带.war--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   <img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311222115662.png" alt="image-20231122205930617"></p><ol><li><code>/tomcat9/bin/startup.sh</code> 启动tomcat访问对应端口号即可访问应用</li></ol><h2 id="nginx访问SpringMVC应用"><a href="#nginx访问SpringMVC应用" class="headerlink" title="nginx访问SpringMVC应用"></a>nginx访问SpringMVC应用</h2><ol><li><p>在nginx的配置文件目录下修改<code>/nginx/conf/nginx.conf</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    root /opt/moiveproject/moive_webapp;</span><br><span class="line">    index Home.jsp Home.jspx Home.do;</span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    </span><br><span class="line">    log_format  main &#x27;$status $http_referer&#x27;;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  niit01;</span><br><span class="line"></span><br><span class="line">        location /assets/  #静态分离</span><br><span class="line">        &#123;</span><br><span class="line">            root /opt/moiveproject/moive_webapp;  # 静态资源所放位置</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">         location /</span><br><span class="line">        &#123;</span><br><span class="line">            #==========Nginx提供的代理============</span><br><span class="line">            proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">            proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            #=== 如果遇到.jsp .jspx .do .action 的请求就进入该服务器(tomcat)===</span><br><span class="line">            proxy_pass http://niit01:18080;</span><br><span class="line">            # 日志文件位置</span><br><span class="line">       access_log /opt/moiveproject/movieLog/access.log main;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启nginx,访问<code>niit01:80/</code>即可访问应用</p></li></ol><p>参考文档:</p><p><a href="https://www.cnblogs.com/acm-bingzi/p/nginx-springmvc.html">springmvc搭配nginx 实现动静分离 - 贾树丙 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/starcraft501/article/details/82830152">通过nginx访问tomcat中web应用的jsp网页_nginx配置jsp首页-CSDN博客</a></p><p><a href="https://blog.csdn.net/shidebin/article/details/83746839">nginx安装和简单部署java web项目_nginx部署web项目-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43651277/article/details/107060581">服务器使用Nginx部署Springboot项目（jar包）-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_38494341/article/details/102624462">Nginx部署JavaWeb项目-CSDN博客</a></p><p><a href="https://www.cnblogs.com/jalja/p/6117523.html">Nginx服务器之Nginx与tomcat结合访问jsp - 小禾点点 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python入门</title>
      <link href="/archives/d9ef328.html"/>
      <url>/archives/d9ef328.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="Python入门"><a href="#Python入门" class="headerlink" title="Python入门"></a>Python入门</h1><h2 id="编程基本概念"><a href="#编程基本概念" class="headerlink" title="编程基本概念"></a>编程基本概念</h2><h3 id="Python程序的构成"><a href="#Python程序的构成" class="headerlink" title="Python程序的构成"></a>Python程序的构成</h3><ol><li>连接符  \    一行代码过长，变成多行时使用  </li><li>强制使用缩进，四个空格表示一个缩进</li></ol><h3 id="对象的基本组成和内存示意图"><a href="#对象的基本组成和内存示意图" class="headerlink" title="对象的基本组成和内存示意图"></a>对象的基本组成和内存示意图</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102017825.png" alt="image-20231110201745676"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102019862.png" alt="image-20231110201950773"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102022690.png" alt="image-20231110202237621"></p><h3 id="引用的本质-栈内存和堆内存-内存示意图"><a href="#引用的本质-栈内存和堆内存-内存示意图" class="headerlink" title="引用的本质-栈内存和堆内存-内存示意图"></a>引用的本质-栈内存和堆内存-内存示意图</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102025811.png" alt="image-20231110202507724"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102026455.png" alt="image-20231110202618382"></p><p><strong>==Python是动态类型语言==：变量不需要显式声明类型。根据变量引用的对象，Python解释器自动确定数据类型</strong></p><h3 id="标识符-帮助系统简单使用-命名规则"><a href="#标识符-帮助系统简单使用-命名规则" class="headerlink" title="标识符-帮助系统简单使用-命名规则"></a>标识符-帮助系统简单使用-命名规则</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102030659.png" alt="image-20231110203017623"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102031531.png" alt="image-20231110203126470"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102034233.png" alt="image-20231110203446167"></p><h3 id="变量的声明-初始化-垃圾回收机制"><a href="#变量的声明-初始化-垃圾回收机制" class="headerlink" title="变量的声明-初始化-垃圾回收机制"></a>变量的声明-初始化-垃圾回收机制</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102041345.png" alt="image-20231110204145297"></p><h3 id="常量-链式赋值-系列解包赋值"><a href="#常量-链式赋值-系列解包赋值" class="headerlink" title="常量-链式赋值-系列解包赋值"></a>常量-链式赋值-系列解包赋值</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102042669.png" alt="image-20231110204256608"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102047432.png" alt="image-20231110204725378"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102050729.png" alt="image-20231110205028675"></p><p><strong>使用系列解包复制可以轻松实现变量值交换</strong></p><h3 id="内置数据类型-基本算术运算符"><a href="#内置数据类型-基本算术运算符" class="headerlink" title="内置数据类型-基本算术运算符"></a>内置数据类型-基本算术运算符</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102103657.png" alt="image-20231110210320597"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102105449.png" alt="image-20231110210508378"></p><h3 id="整数-不同进制-其他类型转成整数"><a href="#整数-不同进制-其他类型转成整数" class="headerlink" title="整数-不同进制-其他类型转成整数"></a>整数-不同进制-其他类型转成整数</h3><p>==<strong>Python的整数可以无限大，任意大</strong>==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102107064.png" alt="image-20231110210750024"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102109168.png" alt="image-20231110210944115"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102110784.png" alt="image-20231110211017712"></p><h3 id="浮点数-自动转换强制转换-增强赋值运算符"><a href="#浮点数-自动转换强制转换-增强赋值运算符" class="headerlink" title="浮点数-自动转换强制转换-增强赋值运算符"></a>浮点数-自动转换强制转换-增强赋值运算符</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102114124.png" alt="image-20231110211408060"></p><p>==<strong>round(value))</strong>可以返回<strong>四舍五入</strong>的值==。但<strong>不会改变原有值</strong>，而是产生新的值</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102116576.png" alt="image-20231110211636512"></p><h3 id="时间的表示-unix时间点-毫秒微妙-time模块"><a href="#时间的表示-unix时间点-毫秒微妙-time模块" class="headerlink" title="时间的表示-unix时间点-毫秒微妙-time模块"></a>时间的表示-unix时间点-毫秒微妙-time模块</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102121561.png" alt="image-20231110212157494"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102124175.png" alt="image-20231110212401113"></p><h3 id="多点坐标-绘制折线图-计算两点距离"><a href="#多点坐标-绘制折线图-计算两点距离" class="headerlink" title="多点坐标-绘制折线图-计算两点距离"></a>多点坐标-绘制折线图-计算两点距离</h3><h3 id="布尔值本质-逻辑运算符-位运算符-比较运算符-短路问题"><a href="#布尔值本质-逻辑运算符-位运算符-比较运算符-短路问题" class="headerlink" title="布尔值本质-逻辑运算符-位运算符-比较运算符-短路问题"></a>布尔值本质-逻辑运算符-位运算符-比较运算符-短路问题<img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102153527.png" alt="image-20231110213752664"><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102153409.png" alt="image-20231110213917617"></h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102154007.png" alt="image-20231110214203652"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102154153.png" alt="image-20231110214628683"></p><p><strong>关系运算符可以连用   如： <code>2&lt;a&lt;10</code></strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222183.png" alt="image-20231110214823887"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222184.png" alt="image-20231110220532227"></p><p><strong>字符串拼接 <code>&quot;3&quot;+&quot;4&quot;</code>   结果 <code>&quot;34&quot;</code></strong></p><p><strong>列表，元组等合并  <code>[1,2,3]+[4,5,6]</code>   结果  <code>[1,2,3,4,5,6]</code></strong></p><p><strong>字符串复制  <code>&quot;abc&quot;* 3</code>     结果  <code>&quot;abcabcabc&quot;</code></strong></p><p><strong>列表，元组等复制  <code>[1,2,3] * 3</code>     结果 <code>[1,2,3,1,2,3,1,2,3]</code></strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222185.png" alt="image-20231110220550583"></p><p><strong>与C和AVA不一样，Python不支持自增(++)和自减(—)</strong></p><h3 id="同一运算符-身份运算符-优先级问题"><a href="#同一运算符-身份运算符-优先级问题" class="headerlink" title="同一运算符-身份运算符-优先级问题"></a>同一运算符-身份运算符-优先级问题</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222186.png" alt="image-20231110220915376"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222187.png" alt="image-20231110221003673"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222188.png" alt="image-20231110221419620"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222189.png" alt="image-20231110221607995"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222190.png" alt="image-20231110221752500"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222191.png" alt="image-20231110221929772"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311102222192.png" alt="image-20231110222043769"></p><h3 id="类型转换总结"><a href="#类型转换总结" class="headerlink" title="类型转换总结"></a>类型转换总结</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327707.png" alt="image-20231111205424806"></p><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608618.png" alt="image-20231112203832984"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608619.png" alt="image-20231112204030526"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608620.png" alt="image-20231112204122105"></p><p>==序列中存储的是整数对象的地址，而不是整数对象的值==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608621.png" alt="image-20231112204257128"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="unicode字符集-三种创建字符串的方式-len"><a href="#unicode字符集-三种创建字符串的方式-len" class="headerlink" title="unicode字符集-三种创建字符串的方式-len()"></a>unicode字符集-三种创建字符串的方式-len()</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327671.png" alt="image-20231111165047001"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327672.png" alt="image-20231111165027593"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327673.png" alt="image-20231111165127201"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327675.png" alt="image-20231111165242915"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327676.png" alt="image-20231111165439485"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327677.png" alt="image-20231111165530787"></p><h4 id="转义字符-字符串拼接-字符串复制-input-获取键盘输入"><a href="#转义字符-字符串拼接-字符串复制-input-获取键盘输入" class="headerlink" title="转义字符-字符串拼接-字符串复制-input()获取键盘输入"></a>转义字符-字符串拼接-字符串复制-input()获取键盘输入</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327678.png" alt="image-20231111165827750"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327679.png" alt="image-20231111165929426"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327680.png" alt="image-20231111170036120"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327681.png" alt="image-20231111170117738"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327682.png" alt="image-20231111170146635"></p><h4 id="str-字符提取-replace-替换-内存分析"><a href="#str-字符提取-replace-替换-内存分析" class="headerlink" title="str()-字符提取-replace()替换-内存分析"></a>str()-字符提取-replace()替换-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327683.png" alt="image-20231111170618209"></p><p>==<strong>字符串是不可变的</strong>==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327684.png" alt="image-20231111170815318"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327685.png" alt="image-20231111170925169"></p><h4 id="切片slice操作-逆序"><a href="#切片slice操作-逆序" class="headerlink" title="切片slice操作-逆序"></a>切片slice操作-逆序</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327686.png" alt="image-20231111171200785"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327687.png" alt="image-20231111171239402"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327688.png" alt="image-20231111172118356"></p><p><strong>字符串逆序  <code>[::-1]</code></strong></p><h4 id="split-分割-join-合并-代码效率测试"><a href="#split-分割-join-合并-代码效率测试" class="headerlink" title="split()分割-join()合并-代码效率测试"></a>split()分割-join()合并-代码效率测试</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327689.png" alt="image-20231111172645302"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327690.png" alt="image-20231111172819686"></p><p>==<strong>join拼接字符串效率高</strong>==</p><h4 id="驻留机制-同一判断-值相等判断"><a href="#驻留机制-同一判断-值相等判断" class="headerlink" title="驻留机制-同一判断-值相等判断"></a>驻留机制-同一判断-值相等判断</h4><p><strong>常量字符串只保留一次</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327691.png" alt="image-20231111174312835"></p><p><strong>== 和!=比较是否含有相同字符</strong></p><p><strong>is和not is判断是否同一对象</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327692.png" alt="image-20231111175131889"></p><h4 id="常用查找方法-去除首尾信息-大小写转换-排版特征判断"><a href="#常用查找方法-去除首尾信息-大小写转换-排版特征判断" class="headerlink" title="常用查找方法-去除首尾信息-大小写转换-排版特征判断"></a>常用查找方法-去除首尾信息-大小写转换-排版特征判断</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327693.png" alt="image-20231111201844560"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327694.png" alt="image-20231111203006966"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327695.png" alt="image-20231111203117613"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327696.png" alt="image-20231111203321600"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327697.png" alt="image-20231111203437597"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327698.png" alt="image-20231111203604305"></p><h4 id="format格式化-数字格式化操作"><a href="#format格式化-数字格式化操作" class="headerlink" title="format格式化-数字格式化操作"></a>format格式化-数字格式化操作</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327699.png" alt="image-20231111203950779"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327700.png" alt="image-20231111204014400"></p><p><strong>我们可以通过{索引}/{参数名}，直接映射参数值，实现对字符串的格式化，非常方便。</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327701.png" alt="image-20231111204436867"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327703.png" alt="image-20231111204547054"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327704.png" alt="image-20231111204650861"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327705.png" alt="image-20231111204720997"></p><h4 id="可变字符串-io-StringlO"><a href="#可变字符串-io-StringlO" class="headerlink" title="可变字符串-io.StringlO"></a>可变字符串-io.StringlO</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311112327706.png" alt="image-20231111204913612"></p><p>使用io.StringlO可以将字符串变为可变字符串</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="列表特点-内存分析"><a href="#列表特点-内存分析" class="headerlink" title="列表特点-内存分析"></a>列表特点-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608622.png" alt="image-20231112204331155"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608623.png" alt="image-20231112204422542"></p><h4 id="创建列表的4种方式-推导式创建列表"><a href="#创建列表的4种方式-推导式创建列表" class="headerlink" title="创建列表的4种方式-推导式创建列表"></a>创建列表的4种方式-推导式创建列表</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608624.png" alt="image-20231112204700132"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608625.png" alt="image-20231112204759130"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608626.png" alt="image-20231112204952428"></p><h4 id="元素的5种添加方式-效率问题"><a href="#元素的5种添加方式-效率问题" class="headerlink" title="元素的5种添加方式-效率问题"></a>元素的5种添加方式-效率问题</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608627.png" alt="image-20231112205556826"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608628.png" alt="image-20231112205434899"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608629.png" alt="image-20231112205659199"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608630.png" alt="image-20231112205735953"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608631.png" alt="image-20231112205808761"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608632.png" alt="image-20231112205915556"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608636.png" alt="image-20231112210040473"></p><h4 id="删除的三种方式-删除的本质是元素拷贝"><a href="#删除的三种方式-删除的本质是元素拷贝" class="headerlink" title="删除的三种方式-删除的本质是元素拷贝"></a>删除的三种方式-删除的本质是元素拷贝</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608637.png" alt="image-20231112210206116"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608638.png" alt="image-20231112210255633"></p><p><strong>del()传的是索引</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608639.png" alt="image-20231112210559383"></p><p><strong>pop()传的是空或索引</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608640.png" alt="image-20231112210627240"></p><p><strong>remove() 传的是元素</strong></p><h4 id="元素的访问-出现次数统计-成员资格判断"><a href="#元素的访问-出现次数统计-成员资格判断" class="headerlink" title="元素的访问-出现次数统计-成员资格判断"></a>元素的访问-出现次数统计-成员资格判断</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608641.png" alt="image-20231112210953927"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608642.png" alt="image-20231112211020296"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608643.png" alt="image-20231112211129014"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608644.png" alt="image-20231112211250334"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608645.png" alt="image-20231112211302457"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608646.png" alt="image-20231112211335688"></p><h4 id="切片slice操作"><a href="#切片slice操作" class="headerlink" title="切片slice操作"></a>切片slice操作</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608647.png" alt="image-20231112211541644"></p><p>==包头不包尾==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608648.png" alt="image-20231112211649938"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608649.png" alt="image-20231112211716931"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608650.png" alt="image-20231112211850845"></p><h4 id="遍历-排序-max-min-sum"><a href="#遍历-排序-max-min-sum" class="headerlink" title="遍历-排序-max-min-sum"></a>遍历-排序-max-min-sum</h4><p><strong>遍历</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608651.png" alt="image-20231112212023863"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608652.png" alt="image-20231112212130083"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608653.png" alt="image-20231112212220696"></p><p><strong>排序</strong></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608654.png" alt="image-20231112212254532"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608655.png" alt="image-20231112212447273"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608656.png" alt="image-20231112212646733"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608657.png" alt="image-20231113221519107"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608658.png" alt="image-20231113221603259"></p><h4 id="二维列表-表格数据存储和读取"><a href="#二维列表-表格数据存储和读取" class="headerlink" title="二维列表-表格数据存储和读取"></a>二维列表-表格数据存储和读取</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608659.png" alt="image-20231113221812609"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608660.png" alt="image-20231113221834012"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608662.png" alt="image-20231113221906067"></p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><h4 id="特点-创建的两种方式-tuple-要点"><a href="#特点-创建的两种方式-tuple-要点" class="headerlink" title="特点-创建的两种方式-tuple()要点"></a>特点-创建的两种方式-tuple()要点</h4><p>==元组不可变序列，不能修改元组中的元素==</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608663.png" alt="image-20231113222120428"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608664.png" alt="image-20231113222212366"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608665.png" alt="image-20231114125912318"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608666.png" alt="image-20231114130013057"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608667.png" alt="image-20231114130106093"></p><h4 id="元素访问-计数方法-切片操作-成员资格判断-zip"><a href="#元素访问-计数方法-切片操作-成员资格判断-zip" class="headerlink" title="元素访问-计数方法-切片操作-成员资格判断-zip()"></a>元素访问-计数方法-切片操作-成员资格判断-zip()</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608668.png" alt="image-20231114130315997"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608670.png" alt="image-20231114130521850"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608671.png" alt="image-20231114130637287"></p><h4 id="生成器推导式创建元组"><a href="#生成器推导式创建元组" class="headerlink" title="生成器推导式创建元组"></a>生成器推导式创建元组</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608672.png" alt="image-20231114131109391"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608673.png" alt="image-20231114140211712"></p><h4 id="元组总结"><a href="#元组总结" class="headerlink" title="元组总结"></a>元组总结</h4><ol><li>元组的核心特点是：==不可变序列==。</li><li>元组的访问和处理速度比列表快。</li><li>与<strong>整数和字符串</strong>一样，<strong>元组可以作为字典的键</strong>，==列表则永远不能作为字典的键使用==。</li></ol><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h4 id="特点-4种创建方式-普通-dict-zip-fromkeys"><a href="#特点-4种创建方式-普通-dict-zip-fromkeys" class="headerlink" title="特点-4种创建方式-普通-dict-zip-fromkeys"></a>特点-4种创建方式-普通-dict-zip-fromkeys</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608674.png" alt="image-20231114141238792"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608675.png" alt="image-20231114145118028"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608676.png" alt="image-20231114145351787"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608677.png" alt="image-20231114145951487"></p><h4 id="元素的访问-键的访问-值的访问-键值对的访问"><a href="#元素的访问-键的访问-值的访问-键值对的访问" class="headerlink" title="元素的访问-键的访问-值的访问-键值对的访问"></a>元素的访问-键的访问-值的访问-键值对的访问</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608678.png" alt="image-20231114150056330"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608679.png" alt="image-20231114150304782"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608680.png" alt="image-20231114150352137"></p><h4 id="元素的添加-修改-删除"><a href="#元素的添加-修改-删除" class="headerlink" title="元素的添加-修改-删除"></a>元素的添加-修改-删除</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608681.png" alt="image-20231114150455560"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608682.png" alt="image-20231114151231414"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608683.png" alt="image-20231114151329321"></p><h4 id="序列解包用于列表元组字典"><a href="#序列解包用于列表元组字典" class="headerlink" title="序列解包用于列表元组字典"></a>序列解包用于列表元组字典</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608684.png" alt="image-20231114151937053"></p><p><strong>items()对键值进行操作返回的是元组，可以通过索引获得键和值</strong></p><h4 id="复杂表格数据存储-列表和字典综合嵌套"><a href="#复杂表格数据存储-列表和字典综合嵌套" class="headerlink" title="复杂表格数据存储-列表和字典综合嵌套"></a>复杂表格数据存储-列表和字典综合嵌套</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608685.png" alt="image-20231114154449214"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608686.png" alt="image-20231114155631350"></p><h4 id="核心底层原理-内存分析-存储键值对过程"><a href="#核心底层原理-内存分析-存储键值对过程" class="headerlink" title="核心底层原理-内存分析-存储键值对过程"></a>核心底层原理-内存分析-存储键值对过程</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608687.png" alt="image-20231114155547261"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608688.png" alt="image-20231114155919142"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608689.png" alt="image-20231114160012362"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608690.png" alt="image-20231114160119164"></p><h4 id="核心底层原理-内存分析-查找值对象过程"><a href="#核心底层原理-内存分析-查找值对象过程" class="headerlink" title="核心底层原理-内存分析-查找值对象过程"></a>核心底层原理-内存分析-查找值对象过程</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608691.png" alt="image-20231114160207088"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608692.png" alt="image-20231114160302223"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608693.png" alt="image-20231114160311802"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608694.png" alt="image-20231114160443418"></p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="特点-创建和删除-交集并集差集运算"><a href="#特点-创建和删除-交集并集差集运算" class="headerlink" title="特点-创建和删除-交集并集差集运算"></a>特点-创建和删除-交集并集差集运算</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608695.png" alt="image-20231114160624865"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608696.png" alt="image-20231114160658433"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311141608697.png" alt="image-20231114160745635"></p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="控制语句和现实逻辑表达"><a href="#控制语句和现实逻辑表达" class="headerlink" title="控制语句和现实逻辑表达"></a>控制语句和现实逻辑表达</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759573.png" alt="image-20231114162345686"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759574.png" alt="image-20231114162500957"></p><h3 id="单分支选择结构-条件表达式详解"><a href="#单分支选择结构-条件表达式详解" class="headerlink" title="单分支选择结构-条件表达式详解"></a>单分支选择结构-条件表达式详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759575.png" alt="image-20231114162917459"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759576.png" alt="image-20231114163006308"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759577.png" alt="image-20231114163510213"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759578.png" alt="image-20231114163945739"></p><h3 id="双分支选择结构-三元运算符的使用详解"><a href="#双分支选择结构-三元运算符的使用详解" class="headerlink" title="双分支选择结构-三元运算符的使用详解"></a>双分支选择结构-三元运算符的使用详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759579.png" alt="image-20231114164104286"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759580.png" alt="image-20231114164346690"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">input</span>(<span class="string">&quot;输入一个数字:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(num + <span class="string">&quot;&lt;10&quot;</span> <span class="keyword">if</span>(<span class="built_in">int</span>(num) &lt; <span class="number">10</span>) <span class="keyword">else</span> <span class="built_in">str</span>(num) + <span class="string">&quot;&gt;10&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="多分支选择结构"><a href="#多分支选择结构" class="headerlink" title="多分支选择结构"></a>多分支选择结构</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759581.png" alt="image-20231114164837210"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759582.png" alt="image-20231114165601161"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759583.png" alt="image-20231114170614275"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">### 多分支选择结构</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">score = <span class="built_in">input</span>(<span class="string">&quot;输入学生分数：&quot;</span>)</span><br><span class="line">grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt;= <span class="built_in">int</span>(score) &lt; <span class="number">60</span>:</span><br><span class="line">    grade = <span class="string">&quot;不及格&quot;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(score) &lt; <span class="number">80</span>:  <span class="comment"># 60&lt;=score&lt;=80  多分支之间具有逻辑关系</span></span><br><span class="line">    grade = <span class="string">&quot;及格&quot;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(score) &lt; <span class="number">90</span>:</span><br><span class="line">    grade = <span class="string">&quot;良好&quot;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(score) &lt;= <span class="number">100</span>:</span><br><span class="line">    grade = <span class="string">&quot;优秀&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    grade = <span class="string">&quot;成绩输入错误&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分数是&#123;0&#125;，等级是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(score, grade))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="选择结构的嵌套"><a href="#选择结构的嵌套" class="headerlink" title="选择结构的嵌套"></a>选择结构的嵌套</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759584.png" alt="image-20231114170713573"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个0-100之间的数字：&quot;</span>))</span><br><span class="line">grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> score &gt; <span class="number">100</span> <span class="keyword">or</span> score &lt; <span class="number">0</span>:</span><br><span class="line">    score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入错误，请重新输入0-100之间的数字：&quot;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">        grade = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">        grade = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">        grade = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">        grade = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        grade = <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分数是&#123;0&#125;，等级是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(score, grade))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更少的代码方法</span></span><br><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个0-100之间的数字：&quot;</span>))</span><br><span class="line">grade = <span class="string">&#x27;ABCDE&#x27;</span></span><br><span class="line"><span class="keyword">if</span> score &gt; <span class="number">100</span> <span class="keyword">or</span> score &lt; <span class="number">0</span>:</span><br><span class="line">    score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入错误，请重新输入0-100之间的数字：&quot;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    num = score // <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">6</span>:</span><br><span class="line">        num = <span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;分数是&#123;0&#125;，等级是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(score, grade[<span class="number">9</span>-num]))</span><br></pre></td></tr></table></figure><h3 id="while循环结构-死循环处理"><a href="#while循环结构-死循环处理" class="headerlink" title="while循环结构-死循环处理"></a>while循环结构-死循环处理</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759585.png" alt="image-20231114211935339"></p><h3 id="for循环结构-遍历各种可迭代对象-range对象"><a href="#for循环结构-遍历各种可迭代对象-range对象" class="headerlink" title="for循环结构-遍历各种可迭代对象-range对象"></a>for循环结构-遍历各种可迭代对象-range对象</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759586.png" alt="image-20231115235425967"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>):</span><br><span class="line">    <span class="built_in">print</span>(x*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> <span class="string">&quot;weqwewe&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;haha&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">12</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d:           <span class="comment"># 遍历字典所以key</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.keys():    <span class="comment"># 遍历字典所有的key</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.values():  <span class="comment"># 遍历字典所有的value</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.items():   <span class="comment"># 遍历字典所有键值对</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759587.png" alt="image-20231116154729368"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">10</span>, <span class="number">2</span>):  <span class="comment"># start=3 end=10 step=2 包头不包尾</span></span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 计算1-100累加和，奇数累加和，偶数累加和</span></span><br><span class="line">sum_all = <span class="number">0</span></span><br><span class="line">sum_even = <span class="number">0</span></span><br><span class="line">sum_odd = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    sum_all += x</span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        sum_even += x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sum_odd += x</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1-100累加和&#123;0&#125;，奇数累加和&#123;1&#125;，偶数累加和&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(sum_all, sum_odd, sum_even))</span><br></pre></td></tr></table></figure><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759588.png" alt="image-20231116160125551"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759589.png" alt="image-20231116160157632"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(x, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="嵌套循环练习-九九乘法表-打印表格数据"><a href="#嵌套循环练习-九九乘法表-打印表格数据" class="headerlink" title="嵌套循环练习-九九乘法表-打印表格数据"></a>嵌套循环练习-九九乘法表-打印表格数据</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759590.png" alt="image-20231116160523325"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 九九乘法表</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;*&#123;1&#125;=&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(m, n, m*n), end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1*1=1</span></span><br><span class="line"><span class="string">2*1=22*2=4</span></span><br><span class="line"><span class="string">3*1=33*2=63*3=9</span></span><br><span class="line"><span class="string">4*1=44*2=84*3=124*4=16</span></span><br><span class="line"><span class="string">5*1=55*2=105*3=155*4=205*5=25</span></span><br><span class="line"><span class="string">6*1=66*2=126*3=186*4=246*5=306*6=36</span></span><br><span class="line"><span class="string">7*1=77*2=147*3=217*4=287*5=357*6=427*7=49</span></span><br><span class="line"><span class="string">8*1=88*2=168*3=248*4=328*5=408*6=488*7=568*8=64</span></span><br><span class="line"><span class="string">9*1=99*2=189*3=279*4=369*5=459*6=549*7=639*8=729*9=81</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用列表和字典存储下表信息，并打印出表中工资高于15000的数据</span></span><br><span class="line">r1 = <span class="built_in">dict</span>(name=<span class="string">&quot;hycs&quot;</span>, age=<span class="number">18</span>, salary=<span class="number">10000</span>, city=<span class="string">&quot;shanghai&quot;</span>)</span><br><span class="line">r2 = <span class="built_in">dict</span>(name=<span class="string">&quot;sdaw&quot;</span>, age=<span class="number">28</span>, salary=<span class="number">20000</span>, city=<span class="string">&quot;beijing&quot;</span>)</span><br><span class="line">r3 = <span class="built_in">dict</span>(name=<span class="string">&quot;e1qe&quot;</span>, age=<span class="number">38</span>, salary=<span class="number">30000</span>, city=<span class="string">&quot;nanjing&quot;</span>)</span><br><span class="line">tb = [r1, r2, r3]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tb:</span><br><span class="line">    <span class="keyword">if</span> x.get(<span class="string">&quot;salary&quot;</span>)&gt;<span class="number">15000</span>:</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759591.png" alt="image-20231116161623031"></p><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759592.png" alt="image-20231116161924814"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要求输入员工的薪资，若薪资小于0则重新输入。最后打印出录入员王的数量和薪资明细，以及平均薪资</span></span><br><span class="line">empNum = <span class="number">0</span></span><br><span class="line">salarySum = <span class="number">0</span></span><br><span class="line">salarys = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&quot;请输入员工薪资（按Q或q退出）&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> s.upper() == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">float</span>(s) &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无效录入，请重新录入&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;录入成功&quot;</span>)</span><br><span class="line">    empNum += <span class="number">1</span></span><br><span class="line">    salarySum += <span class="built_in">float</span>(s)</span><br><span class="line">    salarys.append(<span class="built_in">float</span>(s))</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;员工数&quot;</span>, <span class="built_in">format</span>(empNum))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;录入薪资：&quot;</span>, salarys)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;总薪资：&quot;</span>, salarySum)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均薪资&quot;</span>, salarySum / empNum)</span><br></pre></td></tr></table></figure><h3 id="循环中的else子句"><a href="#循环中的else子句" class="headerlink" title="循环中的else子句"></a>循环中的else子句</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759593.png" alt="image-20231116163319060"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">salarySum = <span class="number">0</span></span><br><span class="line">salarys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&quot;请输入员工薪资（按Q或q退出）&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> s.upper() == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">float</span>(s) &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无效录入，请重新录入&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;录入成功&quot;</span>)</span><br><span class="line">    salarySum += <span class="built_in">float</span>(s)</span><br><span class="line">    salarys.append(<span class="built_in">float</span>(s))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;全部录入成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;录入薪资：&quot;</span>, salarys)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;总薪资：&quot;</span>, salarySum)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均薪资&quot;</span>, salarySum / <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请输入员工薪资（按Q或q退出）40</span></span><br><span class="line"><span class="string">录入成功</span></span><br><span class="line"><span class="string">请输入员工薪资（按Q或q退出）50</span></span><br><span class="line"><span class="string">录入成功</span></span><br><span class="line"><span class="string">请输入员工薪资（按Q或q退出）60</span></span><br><span class="line"><span class="string">录入成功</span></span><br><span class="line"><span class="string">请输入员工薪资（按Q或q退出）70</span></span><br><span class="line"><span class="string">录入成功</span></span><br><span class="line"><span class="string">全部录入成功</span></span><br><span class="line"><span class="string">录入薪资： [40.0, 50.0, 60.0, 70.0]</span></span><br><span class="line"><span class="string">总薪资： 220.0</span></span><br><span class="line"><span class="string">平均薪资 55.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759594.png" alt="image-20231116164105716"></p><h3 id="循环代码优化技巧"><a href="#循环代码优化技巧" class="headerlink" title="循环代码优化技巧"></a>循环代码优化技巧</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759595.png" alt="image-20231116164149547"></p><p><strong>其他优化手段</strong></p><ol><li>==连接多个字符串或列表，使用join()或append()而不使用+==     +会创建新的字符串，join不会</li><li>==列表进行元素插入和删除，尽量在列表尾部操作==</li></ol><h3 id="zip-并行送代多个序列"><a href="#zip-并行送代多个序列" class="headerlink" title="zip()并行送代多个序列"></a>zip()并行送代多个序列</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759596.png" alt="image-20231116164902092"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759597.png" alt="image-20231116165017217"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">names = (<span class="string">&quot;haohao&quot;</span>, <span class="string">&quot;hehe&quot;</span>, <span class="string">&quot;huaiyue&quot;</span>)</span><br><span class="line">ages = (<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>)</span><br><span class="line">jobs = (<span class="string">&quot;IT&quot;</span>, <span class="string">&quot;TEACHER&quot;</span>, <span class="string">&quot;POLICE&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用zip并行迭代多个序列</span></span><br><span class="line"><span class="keyword">for</span> name, age, job <span class="keyword">in</span> <span class="built_in">zip</span>(names, ages, jobs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;--&#123;1&#125;--&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(name, age, job))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 不使用zip也可以并使迭代多个序列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">min</span>(<span class="built_in">len</span>(names), <span class="built_in">len</span>(ages), <span class="built_in">len</span>(jobs))):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;--&#123;1&#125;--&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(names[i], ages[i], jobs[i]))</span><br></pre></td></tr></table></figure><h3 id="推导式创建序列-列表推导式-字典推导式-集合推导式-生成器推导式"><a href="#推导式创建序列-列表推导式-字典推导式-集合推导式-生成器推导式" class="headerlink" title="推导式创建序列-列表推导式-字典推导式-集合推导式-生成器推导式"></a>推导式创建序列-列表推导式-字典推导式-集合推导式-生成器推导式</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759598.png" alt="image-20231116165915358"></p><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759599.png" alt="image-20231116170101409"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cells = [(row, column) <span class="keyword">for</span> row, column <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>), <span class="built_in">range</span>(<span class="number">101</span>, <span class="number">110</span>))]</span><br><span class="line"><span class="built_in">print</span>(cells)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[2, 4, 6, 8]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[(1, 101), (2, 102), (3, 103), (4, 104), (5, 105), (6, 106), (7, 107), (8, 108), (9, 109)]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759600.png" alt="image-20231116171102217"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计字数</span></span><br><span class="line">my_text = <span class="string">&#x27;i love python, me too&#x27;</span></span><br><span class="line">char_count = &#123;c: my_text.count(c) <span class="keyword">for</span> c <span class="keyword">in</span> my_text&#125;</span><br><span class="line"><span class="built_in">print</span>(char_count)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;i&#x27;: 1, &#x27; &#x27;: 4, &#x27;l&#x27;: 1, &#x27;o&#x27;: 4, &#x27;v&#x27;: 1, &#x27;e&#x27;: 2, &#x27;p&#x27;: 1, &#x27;y&#x27;: 1, &#x27;t&#x27;: 2, &#x27;h&#x27;: 1, &#x27;n&#x27;: 1, &#x27;,&#x27;: 1, &#x27;m&#x27;: 1&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759601.png" alt="image-20231116171619541"></p><h4 id="生成器推导式（不直接生成元组）"><a href="#生成器推导式（不直接生成元组）" class="headerlink" title="生成器推导式（不直接生成元组）"></a>生成器推导式（不直接生成元组）</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759602.png" alt="image-20231116171724496"></p><h3 id="综合练习-绘制不同颜色的同心圆-绘制棋盘"><a href="#综合练习-绘制不同颜色的同心圆-绘制棋盘" class="headerlink" title="综合练习-绘制不同颜色的同心圆-绘制棋盘"></a>综合练习-绘制不同颜色的同心圆-绘制棋盘</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311161759604.png" alt="image-20231116173335354"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制不同颜色的同心圆</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">p = turtle.Pen()  <span class="comment"># 画笔对象</span></span><br><span class="line"></span><br><span class="line">radius = [x * <span class="number">10</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">my_color = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;black&quot;</span>, <span class="string">&quot;green&quot;</span>]</span><br><span class="line">p.width(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> r, i <span class="keyword">in</span> <span class="built_in">zip</span>(radius, <span class="built_in">range</span>(<span class="built_in">len</span>(radius))):  <span class="comment"># （10，0），(20,1)</span></span><br><span class="line">    p.penup()</span><br><span class="line">    p.goto(<span class="number">0</span>, -r)</span><br><span class="line">    p.pendown()</span><br><span class="line">    p.color(my_color[i % <span class="built_in">len</span>(my_color)])</span><br><span class="line">    p.circle(r)</span><br><span class="line"></span><br><span class="line">turtle.done()  <span class="comment"># 程序执行完毕，窗口还在</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制棋盘</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数和内存分析"><a href="#函数和内存分析" class="headerlink" title="函数和内存分析"></a>函数和内存分析</h2><h3 id="函数的基本概念-内存分析-函数分类-定义和调用"><a href="#函数的基本概念-内存分析-函数分类-定义和调用" class="headerlink" title="函数的基本概念-内存分析-函数分类-定义和调用"></a>函数的基本概念-内存分析-函数分类-定义和调用</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943309.png" alt="image-20231117163429235"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943310.png" alt="image-20231117163611378"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943311.png" alt="image-20231117163711793"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943312.png" alt="image-20231117163948916"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943313.png" alt="image-20231117164127321"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943314.png" alt="image-20231117164425172"></p><h3 id="形参和实参-文档字符串-函数的注释"><a href="#形参和实参-文档字符串-函数的注释" class="headerlink" title="形参和实参-文档字符串-函数的注释"></a>形参和实参-文档字符串-函数的注释</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943315.png" alt="image-20231117164624930"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943316.png" alt="image-20231117165253398"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943317.png" alt="image-20231117165341145"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printMax</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    求两个数较大的数</span></span><br><span class="line"><span class="string">    :param a: 一个参数</span></span><br><span class="line"><span class="string">    :param b: 一个参数</span></span><br><span class="line"><span class="string">    :return: 返回较大的数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>(printMax)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;print(printMax.__doc__)  &quot;</span>, printMax.__doc__)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Help on function printMax in module __main__:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">printMax(a, b)</span></span><br><span class="line"><span class="string">    求两个数较大的数</span></span><br><span class="line"><span class="string">    :param a: 一个参数</span></span><br><span class="line"><span class="string">    :param b: 一个参数</span></span><br><span class="line"><span class="string">    :return: 返回较大的数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">print(printMax.__doc__)   </span></span><br><span class="line"><span class="string">    求两个数较大的数</span></span><br><span class="line"><span class="string">    :param a: 一个参数</span></span><br><span class="line"><span class="string">    :param b: 一个参数</span></span><br><span class="line"><span class="string">    :return: 返回较大的数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="返回值详解"><a href="#返回值详解" class="headerlink" title="返回值详解"></a>返回值详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943318.png" alt="image-20231117165838027"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printShape</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回一个列表</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s1 = <span class="string">&quot;#&quot;</span> * n</span><br><span class="line">    s2 = <span class="string">&quot;$&quot;</span> * n</span><br><span class="line">    <span class="keyword">return</span> [s1, s2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = printShape(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;#####&#x27;, &#x27;$$$$$&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="函数也是对象-内存分析"><a href="#函数也是对象-内存分析" class="headerlink" title="函数也是对象-内存分析"></a>函数也是对象-内存分析</h3><p>==Python中，”一切都是对象”==。实际上，执行def定义函数后，系统就创建了相应的==函数对象==。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943319.png" alt="image-20231117170506090"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943320.png" alt="image-20231117170556762"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943321.png" alt="image-20231117170656317"></p><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><h4 id="全局变量-局部变量-栈帧内存分析讲解"><a href="#全局变量-局部变量-栈帧内存分析讲解" class="headerlink" title="全局变量-局部变量-栈帧内存分析讲解"></a>全局变量-局部变量-栈帧内存分析讲解</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943322.png" alt="image-20231117170903135"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943323.png" alt="image-20231117171022107"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">locals</span>())    <span class="comment"># 打印输出的局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;#&quot;</span> * <span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">globals</span>())   <span class="comment"># 打印输出的全局变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2 3 4</span></span><br><span class="line"><span class="string">&#123;&#x27;a&#x27;: 2, &#x27;b&#x27;: 3, &#x27;c&#x27;: 4&#125;</span></span><br><span class="line"><span class="string">####################</span></span><br><span class="line"><span class="string">&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x0000023373C06CD0&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;D:\\2022百战Python\\Python基础\\函数和内存分析\\practice.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;a&#x27;: 100, &#x27;f1&#x27;: &lt;function f1 at 0x0000023374387E50&gt;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="局部变量和全局变量-效率测试"><a href="#局部变量和全局变量-效率测试" class="headerlink" title="局部变量和全局变量-效率测试"></a>局部变量和全局变量-效率测试</h4><p>==局部变量的查询和访问速度比全局变量快，优先考虑使用，尤其是在循环的时候。==</p><p>==在特别强调效率的地方或者循环次数较多的地方，可以通过将全局变量转为局部变量提高运行速度。==</p><h3 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943324.png" alt="image-20231117172204514"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943325.png" alt="image-20231117172401914"></p><ul><li><strong>对“可变对象”进行“写操作”，直接作用于原对象本身。</strong></li></ul><ul><li><strong>对“不可变对象”进行“写操作”，会产生一个新的“对象空间”，并用新的值填充这块空间。</strong></li></ul><h4 id="传递可变对象-内存分析"><a href="#传递可变对象-内存分析" class="headerlink" title="传递可变对象-内存分析"></a>传递可变对象-内存分析</h4><h4 id="传递不可变对象-内存分析"><a href="#传递不可变对象-内存分析" class="headerlink" title="传递不可变对象-内存分析"></a>传递不可变对象-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943326.png" alt="image-20231117173137743"></p><h4 id="浅拷贝和深拷贝-内存分析"><a href="#浅拷贝和深拷贝-内存分析" class="headerlink" title="浅拷贝和深拷贝-内存分析"></a>浅拷贝和深拷贝-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943327.png" alt="image-20231117173444372"></p><p>①<strong>浅拷贝</strong>：==拷贝对象，但不拷贝子对象的内容，只是拷贝子对象的引用。==</p><p>②<strong>深拷贝</strong>：==拷贝对象，并且会连子对象的内存也全部（递归）拷贝一份，对子对象的修改不会影响源对象==</p><h4 id="不可变对象含可变子对象-内存分析"><a href="#不可变对象含可变子对象-内存分析" class="headerlink" title="不可变对象含可变子对象-内存分析"></a>不可变对象含可变子对象-内存分析</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943328.png" alt="image-20231117174312493"></p><h3 id="参数的类型"><a href="#参数的类型" class="headerlink" title="参数的类型"></a>参数的类型</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943329.png" alt="image-20231117174934453"></p><h4 id="位置参数-默认值参数-命名参数"><a href="#位置参数-默认值参数-命名参数" class="headerlink" title="位置参数-默认值参数-命名参数"></a>位置参数-默认值参数-命名参数</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943330.png" alt="image-20231117181032226"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943331.png" alt="image-20231117181134330"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943332.png" alt="image-20231117181207414"></p><h4 id="可变参数-强制命名参数"><a href="#可变参数-强制命名参数" class="headerlink" title="可变参数-强制命名参数"></a>可变参数-强制命名参数</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943333.png" alt="image-20231117181448367"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943334.png" alt="image-20231117181534034"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943335.png" alt="image-20231117181557596"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943336.png" alt="image-20231117181931376"></p><h3 id="lambda表达式和匿名函数"><a href="#lambda表达式和匿名函数" class="headerlink" title="lambda表达式和匿名函数"></a>lambda表达式和匿名函数</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943337.png" alt="image-20231117182235722"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943338.png" alt="image-20231117182308842"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> a, b, c: a + b + c</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(f))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;function &lt;lambda&gt; at 0x000001AF907F7E50&gt;</span></span><br><span class="line"><span class="string">1853555179088</span></span><br><span class="line"><span class="string">&lt;class &#x27;function&#x27;&gt;</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">g = [<span class="keyword">lambda</span> a: a * <span class="number">2</span>, <span class="keyword">lambda</span> b: b * <span class="number">4</span>, <span class="keyword">lambda</span> c: c * <span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(g[<span class="number">0</span>](<span class="number">1</span>), g[<span class="number">1</span>](<span class="number">2</span>), g[<span class="number">2</span>](<span class="number">3</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2 8 24</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="eval-函数的用法和注入安全隐患问题"><a href="#eval-函数的用法和注入安全隐患问题" class="headerlink" title="eval()函数的用法和注入安全隐患问题"></a>eval()函数的用法和注入安全隐患问题</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943339.png" alt="image-20231117183923056"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943340.png" alt="image-20231117183958772"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;print(&#x27;abcd&#x27;)&quot;</span></span><br><span class="line"><span class="built_in">eval</span>(s)   <span class="comment"># eval会将字符串当成语句来执行</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;abcd&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = <span class="built_in">eval</span>(<span class="string">&quot;a+b&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;30&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">dict1 = <span class="built_in">dict</span>(a=<span class="number">100</span>, b=<span class="number">200</span>)</span><br><span class="line">d = <span class="built_in">eval</span>(<span class="string">&quot;a+b&quot;</span>, dict1)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;300&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943341.png" alt="image-20231117184610770"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943342.png" alt="image-20231117184633540"></p><h4 id="函数调用内存分析-栈帧的创建"><a href="#函数调用内存分析-栈帧的创建" class="headerlink" title="函数调用内存分析-栈帧的创建"></a>函数调用内存分析-栈帧的创建</h4><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943343.png" alt="image-20231117185027038"></p><h4 id="阶乘计算案例"><a href="#阶乘计算案例" class="headerlink" title="阶乘计算案例"></a>阶乘计算案例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943344.png" alt="image-20231117185357907"></p><h3 id="嵌套函数-内部函数-数据隐藏"><a href="#嵌套函数-内部函数-数据隐藏" class="headerlink" title="嵌套函数(内部函数)-数据隐藏"></a>嵌套函数(内部函数)-数据隐藏</h3><p><strong>嵌套函数：在函数内部定义的函数</strong></p><p>一般在什么情况下使用嵌套函数？</p><ol><li>封装-数据隐藏 :外部无法访问“嵌套函数”。</li><li>贯彻DRY(Don’t Repeat Yourself)原则</li><li>嵌套函数，可以让我们在函数内部避免重复代码。</li><li>闭包（后面会讲解）</li></ol><h3 id="nonlocal和global关键字"><a href="#nonlocal和global关键字" class="headerlink" title="nonlocal和global关键字"></a>nonlocal和global关键字</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943345.png" alt="image-20231117190204820"></p><h3 id="LEGB规则"><a href="#LEGB规则" class="headerlink" title="LEGB规则"></a>LEGB规则</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311171943346.png" alt="image-20231117194110266"></p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="面向对象和面向过程的区别-设计者思维-执行者思维"><a href="#面向对象和面向过程的区别-设计者思维-执行者思维" class="headerlink" title="面向对象和面向过程的区别-设计者思维-执行者思维"></a>面向对象和面向过程的区别-设计者思维-执行者思维</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219980.png" alt="image-20231117194403836"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219981.png" alt="image-20231117194445222"></p><blockquote><p><strong>面向过程和面向对象的区别</strong></p><p>面向过程和面向对象都是对软件分析、设计和开发的一种思想，它指导着人们以不同的方式去分析、设计和开发软件。</p><p>==C语言是一种典型的面向过程语言，Java是一种典型的面向对象语言。==</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219982.png" alt="image-20231117194720826"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219983.png" alt="image-20231117194758398"></p><blockquote><p>面向对象可以帮助我们从宏观上把握、从整体上分析整个系统。但是，具体到实现部分的微观操作（就是一个个方法），仍然需要面向过程的思路去处理。</p><p>我们干万不要把面向过程和面向对象对立起来。他们是相辅相成的。==面向对象离不开面向过程！==</p></blockquote><p><strong>面向对象和面向过程总结</strong></p><p>①都是解决问题的思维方式，都是代码组织的方式。</p><p>②==面向过程是一种“执行者思维”==，解决简单问题可以使用面向过程</p><p>③==面向对象是一种“设计者思维”==，解决复杂、需要协作的问题可以使用面向对象</p><blockquote><p>面向对象离不开面向过程：<br>    ·宏观上：通过面向对象进行整体设计<br>    ·微观上：执行和处理数据，仍然是面向过程</p></blockquote><h3 id="对象进化的小故事"><a href="#对象进化的小故事" class="headerlink" title="对象进化的小故事"></a>对象进化的小故事</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219984.png" alt="image-20231117195725002"></p><h3 id="类的定义-类和对象的关系-对象的内存模型"><a href="#类的定义-类和对象的关系-对象的内存模型" class="headerlink" title="类的定义-类和对象的关系-对象的内存模型"></a>类的定义-类和对象的关系-对象的内存模型</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219985.png" alt="image-20231117195854311"></p><blockquote><p>类：我们叫做<code>class</code>。对象：我们叫做<code>object</code>,<code>instance</code>(实例)。以后我们说某个类的对象，某个类的实例。是一样的意思。</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219986.png" alt="image-20231117200128085"></p><blockquote><p>从一个类创建对象时，每个对象会共享这个类的行为（类中定义的方法），但会有自己的属性值（不共享状态）。更具体一点：“方法代码是共享的，属性数据不共享”。</p><p>Python中，”一切皆对象”。类也称为“==类对像==”，类的实例也称为“实例对象”。</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219987.png" alt="image-20231117200451070"></p><p>要点如下：</p><p>①类名必须符合“标识符”的规则；一般规定，==首字母大写，多个单词使用“驼峰原则”==。</p><p>②类体中我们可以定义属性和方法</p><p>③属性用来描述数据，方法（即函数）用来描述这些数据相关的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):  <span class="comment"># self参数是必须有的</span></span><br><span class="line">        self.name = name              <span class="comment"># 实例属性</span></span><br><span class="line">        self.score = score            <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的分数是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.score))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;john&quot;</span>, <span class="number">61</span>)  <span class="comment"># 自动调用__init__()方法</span></span><br><span class="line"><span class="built_in">print</span>(s1.name, s1.score)</span><br><span class="line">s1.say_score()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">john 61</span></span><br><span class="line"><span class="string">john的分数是61</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219988.png" alt="image-20231117201324006"></p><h3 id="构造函数-init和new方法"><a href="#构造函数-init和new方法" class="headerlink" title="构造函数-init和new方法"></a>构造函数-init和new方法</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219989.png" alt="image-20231117201604950"></p><p><code>__init__()</code> <strong>构造函数</strong>的要点如下：</p><ol><li><p>名称固定，必须为：<code>__init__()</code></p></li><li><p>第一个参数固定，必须为：<code>self</code>。<code>self</code>指的就是刚刚创建好的实例对象</p></li><li><p>构造函数通常用来初始化实例对象的实例属性，如下代码就是初始化实例属性：<code>name</code>和<code>score</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):  <span class="comment"># self参数是必须有的</span></span><br><span class="line">       self.name = name           <span class="comment"># 实例属性</span></span><br><span class="line">       self.score = score         <span class="comment"># 实例属性</span></span><br></pre></td></tr></table></figure></li><li><p>通过“类名(参数列表)”来调用构造函数。调用后，将创建好的对象返回给相应的变量。比如：<code>s1=Student(&quot;张三&quot;,80)</code></p></li><li><p><code>__init__()</code>方法：==初始化创建好的对象==，<strong>初始化指的是：“给实例属性赋值”</strong></p></li><li><p><code>__new__()</code>方法：==用于创建对象==，但我们一般无需重定义该方法</p></li><li><p>如果我们不定义<code>__init__</code>方法，系统会提供一个默认的<code>__init__</code>方法。如果我们定义了带参的<code>__init__</code>方法，系统不创建默认的<code>__init__</code>方法</p></li></ol><blockquote><p>Python中的<code>self</code>相当于C++中的<code>self指针</code>，JAVA和C#中的<code>this</code>关键字。Python中<code>self</code>必须为构造函数的第一个参数，名字可以任意修改。但一般惯例，都叫做<code>self</code></p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219990.png" alt="image-20231117204441814"></p><h3 id="实例属性-内存分析"><a href="#实例属性-内存分析" class="headerlink" title="实例属性-内存分析"></a>实例属性-内存分析</h3><p><strong>实例属性</strong></p><p>实例属性是从属于实例对象的属性，也称为“实例变量”。他的使用有如下几个要点：</p><ol><li><p>实例属性一般在<code>__init__()</code>方法中通过如下代码定义：</p><p><code>self.实例属性名 = 初始值</code></p></li><li><p>在本类的其他实例方法中，也是通过<code>self</code>进行访问：</p><p><code>self.实例属性名</code></p></li><li><p>创建实例对象后，通过实例对象访问：</p><p><code>obj01=类名()</code>                               #创建和初始化对象，调用<code>__init__()</code>初始化属性</p><p><code>obj01.实例属性名 = 值</code>          #可以给已有属性赋值，也可以新加属性</p></li></ol><h3 id="实例方法-内存分析方法调用过程-dir-isinstance"><a href="#实例方法-内存分析方法调用过程-dir-isinstance" class="headerlink" title="实例方法-内存分析方法调用过程-dir()-isinstance"></a>实例方法-内存分析方法调用过程-dir()-isinstance</h3><p><strong>实例方法</strong></p><p>实例方法是从属于实例对象的方法。实例方法的定义格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">方法名</span>(<span class="params">self [, 形参列表]</span>):</span><br><span class="line">函数体</span><br></pre></td></tr></table></figure><p>方法的调用格式如下：</p><p>​                        <code>对象.方法名([实参列表])</code></p><p>要点：</p><ol><li><p>定义实例方法时，第一个参数必须为<code>self</code>。和前面一样，<code>self</code>指当前的实例对象。</p></li><li><p>调用实例方法时，不需要也不能给<code>self</code>传参。<code>self</code>由解释器自动传参</p></li></ol><blockquote><p><strong>函数和方法的区别</strong></p><p>①都是用来完成一个功能的语句块，本质一样。</p><p>②方法调用时，通过对象来调用。方法从属于特定实例对象，普通函数没有这个特点<br>③直观上看，方法定义时需要传递<code>self</code>,函数不需要</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219991.png" alt="image-20231117210158863"></p><p><strong>其他操作</strong></p><ol><li><code>dir(obj)</code>可以获得对象的所有属性、方法</li><li><code>obj.__dict__</code>对象的属性字典</li><li><code>pass</code>空语句</li><li><code>isinstance(对象,类型)</code>判断对象”是不是”指定类型”</li></ol><h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><p><strong>类对象</strong></p><p>我们在前面讲的类定义格式中, <code>class 类名：</code>。实际上，当解释器执行<code>class</code>语句时，就会创建一个类对象</p><h3 id="类属性-内存分析（创建类和对象的底层）"><a href="#类属性-内存分析（创建类和对象的底层）" class="headerlink" title="类属性-内存分析（创建类和对象的底层）"></a>类属性-内存分析（创建类和对象的底层）</h3><p>类属性是从属于“类对象”的属性，也称为“类变量”。由于，类属性从属于类对象，可以被所有实例对象共享。</p><p>类属性的定义方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">类名变量 = 初始值</span><br></pre></td></tr></table></figure><p>在==类中或者类的外面==，我们可以通过：<code>类名.类变量名</code> 来读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school = <span class="string">&quot;HNU&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line">    count = <span class="number">0</span>       <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):</span><br><span class="line">        self.name = name    <span class="comment"># 实例属性</span></span><br><span class="line">        self.score = score  <span class="comment"># 实例属性</span></span><br><span class="line">        Student.count = Student.count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):    <span class="comment"># 实例方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的学校是：&quot;</span>, Student.school)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的分数是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.score))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;john&quot;</span>, <span class="number">61</span>)    <span class="comment"># s1是实例对象，自动调用__init__()方法</span></span><br><span class="line">s2 = Student(<span class="string">&quot;jack&quot;</span>, <span class="number">91</span>)</span><br><span class="line">s1.say_score()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一共创建了&#123;0&#125;个Student对象&quot;</span>.<span class="built_in">format</span>(Student.count))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我的学校是： HNU</span></span><br><span class="line"><span class="string">john的分数是61</span></span><br><span class="line"><span class="string">一共创建了2个Student对象</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219992.png" alt="image-20231117212505195"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311172219993.png" alt="image-20231117212336356"></p><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>==类方法是从属于“类对象”的方法。==类方法通过装饰器<code>@classmethod</code>来定义，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">类方法名</span>(<span class="params">cls [, 形参列表]</span>):</span><br><span class="line">方法体</span><br></pre></td></tr></table></figure><p>要点如下：</p><ol><li><code>@classmethod</code>必须位于方法上面一行</li><li>第一个<code>cls</code>必须有；==<code>cls</code>指的就是“类对象”本身==</li><li>调用类方法格式：<code>类名.类方法名(参数列表)</code>。参数列表中，不需要也不能给<code>cls</code>传值</li><li><strong>类方法中访问实例属性和实例方法会导致错误</strong></li><li>子类继承父类方法时，传入cls是子类对象，而非父类对象（讲完继承再说）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school = <span class="string">&quot;HNU&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printSchool</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls.school)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student.printSchool()</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>Python中允许定义与”类对象”无关的方法，称为“静态方法”。</p><p>“静态方法”和在模块中定义普通函数没有区别，只不过“静态方法”放到了“类的名字空间里面”，需要通过“类调用”。</p><p>静态方法通过装饰器<code>@staticmethod</code>来定义，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">静态方法名</span>(<span class="params">[形参列表]</span>):</span><br><span class="line">方法体</span><br></pre></td></tr></table></figure><p>要点如下：</p><ol><li><p><code>@staticmethod</code>必须位于方法上面一行</p></li><li><p>调用静态方法格式：<code>类名.静态方法名(参数列表)</code></p></li><li><p>静态方法中访问实例属性和实例方法会导致错误</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school = <span class="string">&quot;HNU&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):  <span class="comment"># 静态方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(a, b, a + b))</span><br><span class="line">        <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student.add(<span class="number">30</span>, <span class="number">40</span>)</span><br></pre></td></tr></table></figure><h3 id="del析构方法-垃圾回收机制简介"><a href="#del析构方法-垃圾回收机制简介" class="headerlink" title="del析构方法-垃圾回收机制简介"></a>del析构方法-垃圾回收机制简介</h3><p>==Python实现自动的垃圾回收==</p><p><code>__del__()</code>称为“析构方法”，用于实现对象被销毁时所需的操作。比如：释放对象占用的资源，例如：打开的文件资源、网络连接等。</p><p>Python实现自动的垃圾回收，当对象没有被引用时（引用计数为0），由垃圾回收器调用<code>__del__()</code>。</p><p>我们也可以通过<code>del语句</code>删除对象，从而保证调用<code>__del__()</code>。</p><p>系统会自动提供<code>__del__</code>方法，一般不需要自定义析构方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 析构函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;销毁对象：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Person()</span><br><span class="line">p2 = Person()</span><br><span class="line"><span class="keyword">del</span> p2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;程序结束&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">销毁对象：&lt;__main__.Person object at 0x0000021E3FE14FA0&gt;</span></span><br><span class="line"><span class="string">程序结束</span></span><br><span class="line"><span class="string">销毁对象：&lt;__main__.Person object at 0x0000021E3FE14FD0&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="call方法和可调用对象"><a href="#call方法和可调用对象" class="headerlink" title="call方法和可调用对象"></a>call方法和可调用对象</h3><p>Python中，凡是可以将<code>()</code>直接应用到自身并执行，都称为可调用对象。</p><p>可调用对象包括自定义的函数、Python内置函数、以及本节所讲的实例对象。</p><p>定义了<code>__call__()</code>的对象，称为==“可调用对象”，即该对象可以像函数一样被调用==。</p><p>该方法使得实例对象可以像调用普通函数那样，以<code>&quot;对象名()&quot;</code>的形式使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;f1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1()  <span class="comment"># 本质也是调用了__call__()方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;f1&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, age, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;call方法&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;车龄&#123;0&#125;,金额&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(age, money))</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">c = Car()</span><br><span class="line">c(<span class="number">3</span>, <span class="number">20000</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">call方法</span></span><br><span class="line"><span class="string">车龄3,金额20000</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="方法没有重载-方法的动态性"><a href="#方法没有重载-方法的动态性" class="headerlink" title="方法没有重载-方法的动态性"></a>方法没有重载-方法的动态性</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753886.png" alt="image-20231117221944194"></p><p>如果我们在类体中定义了多个重名的方法，只有最后一个方法有效。</p><p>建议：==不要使用重名的方法！Python中方法没有重载。==</p><blockquote><p>在其他一些语言（比如：Java)中，可以定义多个重名的方法，只要保证方法签名唯一即可。方法签名包含3个部分：方法名、参数数量、参数类型。<br>    Python中，方法的的参数没有声明类型（调用时确定参数的类型），参数的数量也可以由可变参数控制。因此，Python中是没有方法的重载的。</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753888.png" alt="image-20231118140905523"></p><h3 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753889.png" alt="image-20231118141259542"></p><p>Pytho对于类的成员没有严格的访问控制限制，这与其他面向对象语言有区别。关于私有属性和私有方法，有如下要点：</p><p>①通常我们约定，<strong>两个下划线开头的属性是私有的(private)</strong>。其他为公 共的(public)。</p><p>②类内部可以访问私有属性（方法）</p><p>③类外部不能直接访问私有属性（方法）</p><p>④类外部可以通过 <code>_类名__私有属性(方法)名</code> 访问私有属性（方法）</p><blockquote><p>【注】==方法本质上也是属性！==只不过是可以通过()执行而已。</p><p>所以，此处讲的私有属性和公有属性，也同时讲解了私有方法和公有方法的用法。</p><p>如下测试中，同时也包含了私有方法和公有方法的例子。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">    __company = <span class="string">&quot;Ailibab&quot;</span>  <span class="comment"># 私有属性，解释器运行时把__company转化成_Employee__company</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age   <span class="comment"># 私有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_company</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的公司名字是：&quot;</span>, Employee.__company)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的年龄是：&quot;</span>, self.__age)</span><br><span class="line">        </span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">__work</span>(<span class="params">self</span>):     <span class="comment"># 私有方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;好好工作&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Employee._Employee__company)</span><br><span class="line">a = Employee(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>)</span><br><span class="line">a.say_company()</span><br><span class="line"><span class="built_in">print</span>(a._Employee__age)  <span class="comment"># 调用私有属性</span></span><br><span class="line">a._Employee__work()      <span class="comment"># 调用私有方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Ailibab</span></span><br><span class="line"><span class="string">我的公司名字是： Ailibab</span></span><br><span class="line"><span class="string">我的年龄是： 20</span></span><br><span class="line"><span class="string">20</span></span><br><span class="line"><span class="string">好好工作</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h3><p><code>@property</code>可以将一个<strong>方法的调用方式变成“属性调用”</strong>。</p><p><code>@property</code>主要用于帮助我们<strong>处理属性的读操作、写操作</strong>。对于某一个属性，我们可以直接通过：</p><p>​                                                        <code>emp1.salary= 30000</code></p><p>如上的操作读操作、写操作。但是，这种做法不安全。比如，我需要限制薪水必须为<code>1-10000</code>的数字。这时候，我们就需要通过使用装饰器<code>@property</code>来处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__salary = salary</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property                      </span><span class="comment"># 只能读 print(emp1.salary) 相当于属性的调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;薪资是：&quot;</span>, self.__salary)</span><br><span class="line">        <span class="keyword">return</span> self.__salary</span><br><span class="line"></span><br><span class="line"><span class="meta">    @salary.setter                 </span><span class="comment"># 修改使用这个函数 emp1.salary = 50000</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">salary</span>(<span class="params">self, salary</span>): </span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; salary &lt; <span class="number">100000</span>:</span><br><span class="line">            self.__salary = salary</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;薪资录入错误！只能在0-100000之间&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">emp1 = Employee(<span class="string">&quot;john&quot;</span>, <span class="number">20000</span>)</span><br><span class="line">emp1.salary = <span class="number">50000</span></span><br><span class="line"><span class="built_in">print</span>(emp1.salary)</span><br><span class="line"></span><br><span class="line">emp1.salary = <span class="number">100000000</span></span><br><span class="line"><span class="built_in">print</span>(emp1.salary)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">薪资是： 50000</span></span><br><span class="line"><span class="string">50000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">薪资录入错误！只能在0-100000之间</span></span><br><span class="line"><span class="string">薪资是： 50000</span></span><br><span class="line"><span class="string">50000</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="属性和类的命名规则总结"><a href="#属性和类的命名规则总结" class="headerlink" title="属性和类的命名规则总结"></a>属性和类的命名规则总结</h3><p><strong>属性和方法命名总结</strong></p><p><code>_xxx</code>：保护成员，不能用<code>from module import *</code> 导入，只有类对象和子类对象能访问这些成员。</p><p><code>__xxx__</code>:系统定义的特殊成员</p><p><code>__xxx</code>:类中的私有成员，只有类对象自己能访问，子类对象也不能访问。(但，在类外部可以通过 <code>对像名._类名__xxx</code> 这种特殊方式访问。Python不存在严格意义的私有成员)</p><blockquote><p>:warning:再次强调，方法和属性都遵循上面的规则。 </p></blockquote><p><strong>类编码风格</strong></p><ol><li><strong>类名首字母大写，多个单词之间采用驼峰原则。</strong></li><li><strong>实例名、模块名采用小写，多个单词之间采用下划线隔开</strong></li><li>每个类，应紧跟“文档字符串”，说明这个类的作用</li><li>可以用空行组织代码，但不能滥用。在类中，使用一个空行隔开方法；模块中，使用两个空行隔开多个类</li></ol><h3 id="None对象的特殊性"><a href="#None对象的特殊性" class="headerlink" title="None对象的特殊性"></a>None对象的特殊性</h3><p><strong>None是什么？</strong></p><ol><li><p>与C和JAVA不同，Pythont中是没有<code>NULL</code>的，取而代之的是<code>None</code>。</p></li><li><p><code>None</code>是一个特殊的常量，表示变量没有指向任何对象。</p></li><li><p>在Python中，<code>None</code>本身实际上<strong>也是对象</strong>，有自己的类型<code>NoneType</code>。</p></li><li><p>你可以将<code>None</code>赋值给任何变量，但我们不能创建<code>NoneType</code>类型的对象</p></li></ol>   <blockquote alt= "warn"><p>None不是False，None不是0，None不是空字符串。None和任何其他的数据类型比较永远返回False。</p></blockquote><p><strong>空列表、空字符串、0之间的比较</strong></p><ol><li>if语句判断时，空列表[]、空字典{}、空元组()、空字符串、0、None等一系列代表空和无的对象会被转换成False</li><li><code>==</code>和<code>is</code>判断时，空列表、空字符串不会自动转成<code>False</code></li></ol><h3 id="面向对象的三大特征说明（封装、继承、多态）"><a href="#面向对象的三大特征说明（封装、继承、多态）" class="headerlink" title="面向对象的三大特征说明（封装、继承、多态）"></a>面向对象的三大特征说明（封装、继承、多态）</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753890.png" alt="image-20231118165047726"></p><p>==Python是面向对象的语言，支持面向对象编程的三大特性：继承、封装（隐藏）、多态。==</p><p><strong>封装（隐藏）</strong></p><blockquote><p>隐藏对象的属性和实现细节，只对外提供必要的方法。相当于将“细节封装起来”，只对外暴露”相关调用方法”。</p><p>通过前面学习的“==私有属性、私有方法”的方式，实现封装==”。Pythoni追求简洁的语法，没有严格的语法级别的“访问控制符”，更多的是依靠程序员自觉实现。</p></blockquote><p><strong>继承</strong></p><blockquote><p>继承可以让子类具有父类的特性，提高了代码的重用性。</p><p>从设计上是一种==增量进化==，原有父类设计不变的情况下，可以增加新的功能，或者改进已有的算法。</p></blockquote><p><strong>多态</strong></p><blockquote><p>多态是指==同一个方法调用由于对象不同会产生不同的行为==。</p><p>生活中这样的例子比比皆是：同样是休息方法，人不同休息方法不同。张三休息是睡觉，李四休息是玩游戏，程序员休息是“敲几行代码”。</p></blockquote><h3 id="继承详解"><a href="#继承详解" class="headerlink" title="继承详解"></a>继承详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753891.png" alt="image-20231118165634687"></p><p>继承是面向对象编程的三大特征之一。继承让我们更加容易实现类的扩展。实现代码的重用，不用再重新发明轮子(don’t reinvent wheels)。</p><p>如果<strong>一个新类继承自一个设计好的类，就直接具备了已有类的特征</strong>，就大大降低了工作难度。已有的类，我们称为“父类或者基类”。新的类，我们称为“子类或者派生类”。</p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753892.png" alt="image-20231118165736909"></p><p><strong>语法格式</strong></p><p>Python支持==多重继承，一个子类可以继承多个父类==。继承的语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">子类类名</span>(父类<span class="number">1</span>[, 父类<span class="number">2</span>, ...]):</span><br><span class="line">类体</span><br></pre></td></tr></table></figure><blockquote><p>如果在类定义中没有指定父类，则默认父类是<code>object类</code>。也就是说，<code>object</code>是所有类的父类，里面定义了一些所有类共有的默认实现，比如：<code>__new__()</code></p></blockquote><p><strong>关于构造函数：</strong></p><ol><li><p>子类不重写<code>__init__</code>,实例化子类时，会自动调用父类定义的<code>__init__</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>)</span><br><span class="line">s1.say_age()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">haha的年龄是20</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>子类重写了<code>__init__</code>时，实例化子类，就不会调用父类已经定义的<code>__init__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        <span class="comment"># 两种调用父类的构造方法</span></span><br><span class="line">        <span class="comment"># 1.</span></span><br><span class="line">        <span class="comment"># Person.__init__(self, name, age)</span></span><br><span class="line">        <span class="comment"># 2.</span></span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的分数：&quot;</span>, self.score)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line">s1.say_score()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">创建Student</span></span><br><span class="line"><span class="string">我的分数： 90</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;, &#x27;say_score&#x27;, &#x27;score&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>如果重写了<code>__init__</code>时，要使用父类的构造方法，可以使用<code>super</code>关键字，也可以使用如下格式调用：</p><p>​                                                            <code>父类名.__init__(self, 参数列表)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        <span class="comment"># 两种调用父类的构造方法</span></span><br><span class="line">        <span class="comment"># 1.</span></span><br><span class="line">        <span class="comment"># Person.__init__(self, name, age)</span></span><br><span class="line">        <span class="comment"># 2.</span></span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">创建Student</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;, &#x27;score&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="类成员继承和方法的重写"><a href="#类成员继承和方法的重写" class="headerlink" title="类成员继承和方法的重写"></a>类成员继承和方法的重写</h3><p><strong>成员继承</strong>：==子类继承了父类除构造方法（<code>__init__()</code>）之外的所有成员。==</p><blockquote><p>:warning:（私有属性、私有方法也被继承）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age       <span class="comment"># 私有属性也会被继承</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.__age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        <span class="comment"># 两种调用父类的构造方法</span></span><br><span class="line">        <span class="comment"># 1.</span></span><br><span class="line">        <span class="comment"># Person.__init__(self, name, age)</span></span><br><span class="line">        <span class="comment"># 2.</span></span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的分数：&quot;</span>, self.score)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line">s1.say_age()</span><br><span class="line">s1.say_score()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">创建Student</span></span><br><span class="line"><span class="string">haha的年龄是20</span></span><br><span class="line"><span class="string">我的分数： 90</span></span><br><span class="line"><span class="string">[&#x27;_Person__age&#x27;, &#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;, &#x27;say_score&#x27;, &#x27;score&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>方法重写</strong>：子类可以重新定义父类中的方法，这样就会覆盖父类的方法，也称为“重写”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的名字是：&quot;</span>, self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        Person.__init__(self, name, age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的分数：&quot;</span>, self.score)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_name</span>(<span class="params">self</span>):    <span class="comment"># 重写父类的方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hello ,my name is &quot;</span>, self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line">s1.say_age()</span><br><span class="line">s1.say_score()</span><br><span class="line">s1.say_name()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">创建Student</span></span><br><span class="line"><span class="string">haha的年龄是20</span></span><br><span class="line"><span class="string">我的分数： 90</span></span><br><span class="line"><span class="string">hello ,my name is  haha</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;, &#x27;say_name&#x27;, &#x27;say_score&#x27;, &#x27;score&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>查看类的继承层次结构</strong></p><p>通过类的方法<code>mro()</code>或者类的属性<code>__mro__</code>可以输出这个类的继承层次结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">B</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(C.mro())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753893.png" alt="image-20231118173835027"></p><h3 id="object根类-查看模块结构-dir"><a href="#object根类-查看模块结构-dir" class="headerlink" title="object根类-查看模块结构-dir()"></a>object根类-查看模块结构-dir()</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753894.png" alt="image-20231118174521095"></p><blockquote><p>==<code>object</code>类是所有类的父类==，因此所有的类都有<code>object</code>类的属性和方法。我们显然有必要深入研究一下<code>object</code>类的结构。对于我们继续深入学习Python很有好处。</p></blockquote><p><strong><code>dir()</code>查看对象属性</strong></p><p>为了深入学习对象，先学习内置函数dir(),他可以让我们方便的看到指定对象所有的属性</p><blockquote><p>:warning:快捷键 Alt+ 7 打开模块结构</p></blockquote><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753895.png" alt="image-20231118175130469"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快捷键 Alt+ 7 打开模块结构</span></span><br><span class="line">obj = <span class="built_in">object</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(obj))</span><br><span class="line"></span><br><span class="line">s2 = Person(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法的本质也是是属性</span></span><br><span class="line"><span class="built_in">print</span>(s2.say_age)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s2.say_age))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建Person</span></span><br><span class="line"><span class="string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;name&#x27;, &#x27;say_age&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;bound method Person.say_age of &lt;__main__.Person object at 0x00000222E819BFD0&gt;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;method&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>从上面我们可以发现这样几个要点：</strong></p><ol><li>Person对象增加了六个属性：<code>__dict__</code> <code>__module__</code> <code>__weakref__</code> <code>age</code> <code>name</code> <code>say_age</code></li><li><code>object</code>的所有属性，<code>Person</code>类作为<code>object</code>的子类，显然包含了所有的属性</li><li>我们打印<code>age</code>、<code>name</code>、<code>say_age</code>，发现<code>say_age</code>虽然是==方法，实际上也是属性==。只不过这个属性的类型是method而已。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age &lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line">name &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">say_age &lt;<span class="keyword">class</span> <span class="string">&#x27;method&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>关于objecti这些属性的详细学习，会后面学习中逐个涉及。在此，没必要展开。</p></blockquote><h3 id="重写-str-方法"><a href="#重写-str-方法" class="headerlink" title="重写__str__()方法"></a>重写<code>__str__()</code>方法</h3><ol><li><code>object</code>有一个<code>__str()__</code>方法，用于返回一个对于”对象的描述”。内置函数<code>str(对象)</code>，调用的就是<code>__str()__</code></li><li><code>__str()__</code>经常用于<code>print()</code>方法，帮助我们查看对象的信息。<code>__str()__</code>可以重写</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将对象转化成一个字符串描述，一般用于print方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;重写str方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;名字是：&#123;0&#125;，年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&quot;haha&quot;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">s = <span class="built_in">str</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">重写str方法</span></span><br><span class="line"><span class="string">名字是：haha，年龄是20</span></span><br><span class="line"><span class="string">重写str方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753896.png" alt="image-20231118181906059"></p><blockquote><p>Pytho支持多重继承，一个子类可以有多个“直接父类”。这样，就具备了“多个父类”的特点。但是由于，这样会被“类的整体层次””搞的异常复杂，==尽量避免使用==。</p></blockquote><h3 id="MRO方法解析顺序"><a href="#MRO方法解析顺序" class="headerlink" title="MRO方法解析顺序"></a>MRO方法解析顺序</h3><p>Pythor支持多继承，如果父类中有相同名字的方法，在子类没有指定父类名时，解释器将<strong>“从左向右”</strong>按顺序搜索。</p><p>MRO(Method Resolution Order):方法解析顺序。我们可以通过<code>mro()</code>方法获得”类的层次结构”，方法解析顺序也是按照这个“类的层次结构”寻找的。</p><h3 id="super-获得父类的定义"><a href="#super-获得父类的定义" class="headerlink" title="super()获得父类的定义"></a>super()获得父类的定义</h3><p>在子类中，如果想要获得父类的方法时，我们可以通过<code>super()</code>来做。</p><p><code>super()</code>代表<strong>父类的定义，不是父类对象</strong>。</p><blockquote><p>想调用父类的构造方法：</p><p><code>super(子类名称, self).__init__(参数列表)</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Person&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age       <span class="comment"># 私有属性也会被继承</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的年龄是&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.name, self.__age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        <span class="comment"># Person.__init__(self)</span></span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, age)  <span class="comment"># 调用父类的构造方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建Student&quot;</span>)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Person.say_age(self)</span></span><br><span class="line">        <span class="built_in">super</span>().say_age()<span class="comment"># 通过super()调用父类的方法</span></span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></table></figure><h3 id="多态详解"><a href="#多态详解" class="headerlink" title="多态详解"></a>多态详解</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753897.png" alt="image-20231119160951739"></p><p><strong>多态(polymorphism)是指同一个方法调用由于对象不同可能会产生不同的行为。</strong></p><p>关于多态要注意以下2点：</p><ol><li><strong>多态是方法的多态，属性没有多态</strong>。</li><li>多态的存在有==2个必要条件：继承、方法重写==</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;动物叫了一声&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小狗叫了一声&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫叫了一声&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">animalShout</span>(<span class="params">a</span>):</span><br><span class="line">    a.shout()  <span class="comment"># 会产生多态，传入对象不同，则调用方法不同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">animalShout(Dog())</span><br><span class="line">animalShout(Cat())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">小狗叫了一声</span></span><br><span class="line"><span class="string">小猫叫了一声</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="特殊方法和运算符重载"><a href="#特殊方法和运算符重载" class="headerlink" title="特殊方法和运算符重载"></a>特殊方法和运算符重载</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753898.png" alt="image-20231119162419296"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753899.png" alt="image-20231119162554609"></p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753900.png" alt="image-20231119162639978"></p><h3 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753901.png" alt="image-20231119162849422"></p><h3 id="浅拷贝和深拷贝对象-内存分析"><a href="#浅拷贝和深拷贝对象-内存分析" class="headerlink" title="浅拷贝和深拷贝对象-内存分析"></a>浅拷贝和深拷贝对象-内存分析</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753902.png" alt="image-20231119163101534"></p><h3 id="继承和组合"><a href="#继承和组合" class="headerlink" title="继承和组合"></a>继承和组合</h3><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753903.png" alt="image-20231119164344071"></p><p>除了继承，“组合”也能实现代码的复用！“<strong>组合”核心是“将父类对象作为子类的属性”</strong>。</p><blockquote><p><code>is-a</code>关系，我们可以使用”<strong>==继承==</strong>”。从而实现子类拥有的父类的方法和属性。<code>is-a</code>关系指的是类似这样的关系：狗是动物，dog is animal。.狗类就应该继承动物类。</p><p><code>has-a</code>关系，我们可以使用”==组合==”，也能实现一个类拥有另一个类的方法和属性。<code>has-a</code>关系指的是这样的关系：手机拥有CPU。MobilePhone has a CPU</p></blockquote><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>设计模式是面向对象语言特有的内容，是我们在面临某一类问题时候固定的做法，设计模式有很多种，比较流行的是：GOF(Goup Of Four)23种设计模式。当然，我们没有必要全部学习，学习几个常用的即可。</p><p>对于初学者，我们学习两个最常用的模式：工厂模式和单例模式。</p><h4 id="工厂模式实现"><a href="#工厂模式实现" class="headerlink" title="工厂模式实现"></a>工厂模式实现</h4><p>工厂模式实现了<strong>创建者和调用者的分离</strong>，使用专门的工厂类将选择实现类、创建对象进行统一的管理和控制。 </p><p><img src="https://gitee.com/huaiyuechusan/picture/raw/master/Typora/202311191753904.png" alt="image-20231119165631900"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工厂模式实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Benz</span>: <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>: <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BYD</span>: <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarFactory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createCar</span>(<span class="params">self, brand</span>):</span><br><span class="line">        <span class="keyword">if</span> brand == <span class="string">&quot;宝马&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> BMW()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">&quot;奔驰&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> Benz()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">&quot;比亚迪&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> BYD()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未知品牌，无法创建&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">factory = CarFactory()</span><br><span class="line">c1 = factory.createCar(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">c2 = factory.createCar(<span class="string">&quot;宝马&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;__main__.Benz object at 0x0000021C16D12FA0&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.BMW object at 0x0000021C16D12F70&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="单例模式实现"><a href="#单例模式实现" class="headerlink" title="单例模式实现"></a>单例模式实现</h4><p>单例模式(Singleton Pattern)的核心作用是确保<strong>一个类只有一个实例</strong>，并且提供<strong>一个访问该实例的全局访问点</strong>。</p><p>单例模式只生成一个实例对象，减少了对系统资源的开销。当一个对象的产生需要比较多的资源，如读取配置文件、产生其他依赖对象时，可以产生一个“单例对象”，然后永久驻留内存中，从而极大的降低开销。</p><blockquote alt="warn"><p>单例模式有多种实现的方式，我们这里推荐重写__new__()的方法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单例模式实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySingleton</span>:</span><br><span class="line">    __obj = <span class="literal">None</span></span><br><span class="line">    __init_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.__obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__obj = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> MySingleton.__init_flag:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;初始化第一个对象...&quot;</span>)</span><br><span class="line">            self.name = name</span><br><span class="line">            MySingleton.__init_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = MySingleton(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = MySingleton(<span class="string">&quot;bb&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">初始化第一个对象...</span></span><br><span class="line"><span class="string">&lt;__main__.MySingleton object at 0x000001E70B8E2FA0&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.MySingleton object at 0x000001E70B8E2FA0&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="工厂和单例模式结合起来"><a href="#工厂和单例模式结合起来" class="headerlink" title="工厂和单例模式结合起来"></a>工厂和单例模式结合起来</h4><p>设计模式称之为“模式”，就是一些固定的套路。我们很容易用到其他场景上，比如前面讲的工厂模式，我们需要将工厂类定义成“单例”，只需要简单的套用即可实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工厂和单例模式结合</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarFactory</span>:</span><br><span class="line">    __obj = <span class="literal">None</span></span><br><span class="line">    __init_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.__obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__obj = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> CarFactory.__init_flag:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;初始化第一个对象...&quot;</span>)</span><br><span class="line">            CarFactory.__init_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createCar</span>(<span class="params">self, brand</span>):</span><br><span class="line">        <span class="keyword">if</span> brand == <span class="string">&quot;宝马&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> BMW()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">&quot;奔驰&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> Benz()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">&quot;比亚迪&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> BYD()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未知品牌，无法创建&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Benz</span>: </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span>: </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BYD</span>: </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">factory = CarFactory()</span><br><span class="line">c1 = factory.createCar(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line">c2 = factory.createCar(<span class="string">&quot;宝马&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line">factory2 = CarFactory()</span><br><span class="line"><span class="built_in">print</span>(factory)</span><br><span class="line"><span class="built_in">print</span>(factory2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">初始化第一个对象...</span></span><br><span class="line"><span class="string">&lt;__main__.Benz object at 0x0000018C683F3F70&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.BMW object at 0x0000018C683F3F10&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.CarFactory object at 0x0000018C683F3FA0&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.CarFactory object at 0x0000018C683F3FA0&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Python开发环境搭建"><a href="#Python开发环境搭建" class="headerlink" title="Python开发环境搭建"></a>Python开发环境搭建</h2><h3 id="PyCharm搭建Python环境-非虚拟环境"><a href="#PyCharm搭建Python环境-非虚拟环境" class="headerlink" title="PyCharm搭建Python环境-非虚拟环境"></a>PyCharm搭建Python环境-非虚拟环境</h3><h3 id="VSCode搭建Python环境-非虚拟环境"><a href="#VSCode搭建Python环境-非虚拟环境" class="headerlink" title="VSCode搭建Python环境-非虚拟环境"></a>VSCode搭建Python环境-非虚拟环境</h3><h3 id="虚拟环境使用"><a href="#虚拟环境使用" class="headerlink" title="虚拟环境使用"></a>虚拟环境使用</h3><h3 id="PyCharm使用虚拟环境"><a href="#PyCharm使用虚拟环境" class="headerlink" title="PyCharm使用虚拟环境"></a>PyCharm使用虚拟环境</h3><h3 id="VSCode使用虚拟环境"><a href="#VSCode使用虚拟环境" class="headerlink" title="VSCode使用虚拟环境"></a>VSCode使用虚拟环境</h3><h3 id="虚拟环境管理工具"><a href="#虚拟环境管理工具" class="headerlink" title="虚拟环境管理工具"></a>虚拟环境管理工具</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据集群软件启动脚本</title>
      <link href="/archives/59cb3162.html"/>
      <url>/archives/59cb3162.html</url>
      
        <content type="html"><![CDATA[<h1 id="大数据集群软件启动脚本"><a href="#大数据集群软件启动脚本" class="headerlink" title="大数据集群软件启动脚本"></a>大数据集群软件启动脚本</h1><p>大家也可以访问我的gitee仓库直接克隆源码<a href="https://gitee.com/huaiyuechusan/big-data-software-startup-script">大数据软件启动脚本: hadoop，zookeeper，kafka，flume，hive，maxwell，dolphinscheduler，superset，集群一键启动，集群文件分发，集群执行命令，集群同步时间脚本</a></p><h2 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hadoop集群启动</span></span><br><span class="line"></span><br><span class="line">if [ $# -eq 0 ]; then</span><br><span class="line">echo &quot;Usage $0 start|stop&quot;</span><br><span class="line">fi</span><br><span class="line">case $1 in</span><br><span class="line"></span><br><span class="line">    &quot;start&quot;)&#123;</span><br><span class="line">        echo &quot; -------- 启动 集群 -------&quot;</span><br><span class="line">        echo &quot; -------- 启动 hadoop集群 -------&quot;</span><br><span class="line">        ssh niit01 &quot;source /etc/profile;start-dfs.sh&quot;</span><br><span class="line">        ssh niit03 &quot;source /etc/profile;start-yarn.sh&quot;</span><br><span class="line">        ssh niit01 &quot;source /etc/profile;mr-jobhistory-daemon.sh start historyserver&quot;</span><br><span class="line">    &#125;;;</span><br><span class="line">    &quot;stop&quot;)&#123;</span><br><span class="line">        echo &quot; -------- 停止 集群 -------&quot;</span><br><span class="line">        echo &quot; -------- 停止 hadoop集群 -------&quot;</span><br><span class="line">        ssh niit01 &quot;source /etc/profile;mr-jobhistory-daemon.sh stop historyserver&quot;</span><br><span class="line">        ssh niit03 &quot;source /etc/profile;stop-yarn.sh&quot;</span><br><span class="line">        ssh niit01 &quot;source /etc/profile;stop-dfs.sh&quot;</span><br><span class="line">    &#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zookeeper集群启动脚本</span></span><br><span class="line"></span><br><span class="line">echo &quot;Usage: $0 start|stop|status (zookeeper)&quot;</span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">        echo ---------- zookeeper $i 启动 ------------</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/zookeeper/bin/zkServer.sh start&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">        echo ---------- zookeeper $i 停止 ------------</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/zookeeper/bin/zkServer.sh stop&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;status&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">        echo ---------- zookeeper $i 状态 ------------</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/zookeeper/bin/zkServer.sh status&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kafka集群启动</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">    echo &quot; --------启动 $i Kafka-------&quot;</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/kafka/bin/kafka-server-start.sh -daemon /opt/onlineedu/kafka/config/server.properties&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line"></span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02 niit03</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------停止 $i Kafka-------&quot;</span><br><span class="line">        ssh $i &quot;/opt/onlineedu/kafka/bin/kafka-server-stop.sh stop&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="flume"><a href="#flume" class="headerlink" title="flume"></a>flume</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">flume采集通道1启动脚本</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------启动 $i 采集flume-------&quot;</span><br><span class="line">        ssh $i &quot;nohup /opt/onlineedu/flume/bin/flume-ng agent --conf-file /opt/onlineedu/flume/job/file-flume-kafka.conf --name a1 -Dflume.root.logger=INFO,LOGFILE &gt;/opt/onlineedu/flume/log1.txt 2&gt;&amp;1  &amp;&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">    for i in niit01 niit02</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------停止 $i 采集flume-------&quot;</span><br><span class="line">        ssh $i &quot;ps -ef | grep file-flume-kafka | grep -v grep |awk  &#x27;&#123;print \$2&#125;&#x27; | xargs -n1 kill -9 &quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">flume采集通道2启动脚本</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">    for i in niit03</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------启动 $i 消费flume-------&quot;</span><br><span class="line">        ssh $i &quot;nohup /opt/onlineedu/flume/bin/flume-ng agent --conf-file /opt/onlineedu/flume/job/kafka-flume-hdfs.conf --name a1 -Dflume.root.logger=INFO,LOGFILE &gt;/opt/onlineedu/flume/log2.txt 2&gt;&amp;1  &amp;&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">    for i in niit03</span><br><span class="line">    do</span><br><span class="line">        echo &quot; --------停止 $i 消费flume-------&quot;</span><br><span class="line">        ssh $i &quot;ps -ef | grep kafka-flume-hdfs | grep -v grep | awk &#x27;&#123;print \$2&#125;&#x27; | xargs -n1 kill -9 &quot;</span><br><span class="line">    done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">flume采集通道3启动脚本</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">        echo &quot; --------启动 niit03 业务数据flume-------&quot;</span><br><span class="line">        ssh niit03 &quot;nohup /opt/onlineedu/flume/bin/flume-ng agent -n a1 -c /opt/onlineedu/flume/conf -f /opt/onlineedu/flume/job/kafka_to_hdfs_db.conf &gt;/opt/onlineedu/flume/log3.txt &gt;/dev/null 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line"></span><br><span class="line">        echo &quot; --------停止 niit03 业务数据flume-------&quot;</span><br><span class="line">        ssh niit03 &quot;ps -ef | grep kafka_to_hdfs_db | grep -v grep |awk &#x27;&#123;print \$2&#125;&#x27; | xargs -n1 kill&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hive"><a href="#hive" class="headerlink" title="hive"></a>hive</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hive启动</span></span><br><span class="line"></span><br><span class="line">HIVE_LOG_DIR=$HIVE_HOME/logs</span><br><span class="line">mkdir -p $HIVE_LOG_DIR</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查进程是否运行正常，参数1为进程名，参数2为进程端口</span></span><br><span class="line"></span><br><span class="line">function check_process()</span><br><span class="line">&#123;</span><br><span class="line">  pid=$(ps -ef 2&gt;/dev/null | grep -v grep | grep -i $1 | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">  ppid=$(netstat -nltp 2&gt;/dev/null | grep $2 | awk &#x27;&#123;print $7&#125;&#x27; | cut -d &#x27;/&#x27; -f 1)</span><br><span class="line">  echo $pid</span><br><span class="line">  [[ &quot;$pid&quot; =~ &quot;$ppid&quot; ]] &amp;&amp; [ &quot;$ppid&quot; ] &amp;&amp; return 0 || return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_start()</span><br><span class="line">&#123;</span><br><span class="line">  metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">  cmd=&quot;nohup hive --service metastore &gt;$HIVE_LOG_DIR/metastore.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">  cmd=$cmd&quot; sleep 4; hdfs dfsadmin -safemode wait &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">  [ -z &quot;$metapid&quot; ] &amp;&amp; eval $cmd || echo &quot;Metastroe服务已启动&quot;</span><br><span class="line">  server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">  cmd=&quot;nohup hive --service hiveserver2 &gt;$HIVE_LOG_DIR/hiveServer2.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">  [ -z &quot;$server2pid&quot; ] &amp;&amp; eval $cmd || echo &quot;HiveServer2服务已启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_stop()</span><br><span class="line">&#123;</span><br><span class="line">  metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">  [ &quot;$metapid&quot; ] &amp;&amp; kill $metapid || echo &quot;Metastore服务未启动&quot;</span><br><span class="line">  server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">  [ &quot;$server2pid&quot; ] &amp;&amp; kill $server2pid || echo &quot;HiveServer2服务未启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  hive_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  hive_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  hive_stop</span><br><span class="line">  sleep 2</span><br><span class="line">  hive_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;status&quot;)</span><br><span class="line">  check_process HiveMetastore 9083 &gt;/dev/null &amp;&amp; echo &quot;Metastore服务运行正常&quot; || echo &quot;Metastore服务运行异常&quot;</span><br><span class="line">  check_process HiveServer2 10000 &gt;/dev/null &amp;&amp; echo &quot;HiveServer2服务运行正常&quot; || echo &quot;HiveServer2服务运行异常&quot;</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  echo Invalid Args!</span><br><span class="line">  echo &#x27;Usage: &#x27;$(basename $0)&#x27; start|stop|restart|status (hiveserver2 &amp; metastore)&#x27;</span><br><span class="line">  ;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="maxwell"><a href="#maxwell" class="headerlink" title="maxwell"></a>maxwell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hive启动</span></span><br><span class="line"></span><br><span class="line">HIVE_LOG_DIR=$HIVE_HOME/logs</span><br><span class="line">mkdir -p $HIVE_LOG_DIR</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查进程是否运行正常，参数1为进程名，参数2为进程端口</span></span><br><span class="line"></span><br><span class="line">function check_process()</span><br><span class="line">&#123;</span><br><span class="line">  pid=$(ps -ef 2&gt;/dev/null | grep -v grep | grep -i $1 | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">  ppid=$(netstat -nltp 2&gt;/dev/null | grep $2 | awk &#x27;&#123;print $7&#125;&#x27; | cut -d &#x27;/&#x27; -f 1)</span><br><span class="line">  echo $pid</span><br><span class="line">  [[ &quot;$pid&quot; =~ &quot;$ppid&quot; ]] &amp;&amp; [ &quot;$ppid&quot; ] &amp;&amp; return 0 || return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_start()</span><br><span class="line">&#123;</span><br><span class="line">  metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">  cmd=&quot;nohup hive --service metastore &gt;$HIVE_LOG_DIR/metastore.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">  cmd=$cmd&quot; sleep 4; hdfs dfsadmin -safemode wait &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">  [ -z &quot;$metapid&quot; ] &amp;&amp; eval $cmd || echo &quot;Metastroe服务已启动&quot;</span><br><span class="line">  server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">  cmd=&quot;nohup hive --service hiveserver2 &gt;$HIVE_LOG_DIR/hiveServer2.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">  [ -z &quot;$server2pid&quot; ] &amp;&amp; eval $cmd || echo &quot;HiveServer2服务已启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_stop()</span><br><span class="line">&#123;</span><br><span class="line">  metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">  [ &quot;$metapid&quot; ] &amp;&amp; kill $metapid || echo &quot;Metastore服务未启动&quot;</span><br><span class="line">  server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">  [ &quot;$server2pid&quot; ] &amp;&amp; kill $server2pid || echo &quot;HiveServer2服务未启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  hive_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  hive_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  hive_stop</span><br><span class="line">  sleep 2</span><br><span class="line">  hive_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;status&quot;)</span><br><span class="line">  check_process HiveMetastore 9083 &gt;/dev/null &amp;&amp; echo &quot;Metastore服务运行正常&quot; || echo &quot;Metastore服务运行异常&quot;</span><br><span class="line">  check_process HiveServer2 10000 &gt;/dev/null &amp;&amp; echo &quot;HiveServer2服务运行正常&quot; || echo &quot;HiveServer2服务运行异常&quot;</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  echo Invalid Args!</span><br><span class="line">  echo &#x27;Usage: &#x27;$(basename $0)&#x27; start|stop|restart|status (hiveserver2 &amp; metastore)&#x27;</span><br><span class="line">  ;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="dolphinscheduler"><a href="#dolphinscheduler" class="headerlink" title="dolphinscheduler"></a>dolphinscheduler</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dolphinscheduler集群启动</span></span><br><span class="line"></span><br><span class="line">function node_start()</span><br><span class="line">&#123;</span><br><span class="line">  /opt/onlineedu/dolphinscheduler/bin/start-all.sh  </span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function node_stop()</span><br><span class="line">&#123;</span><br><span class="line">  /opt/onlineedu/dolphinscheduler/bin/stop-all.sh</span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  sleep 10</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  </span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dolphinscheduler单机版启动</span></span><br><span class="line"></span><br><span class="line">function node_start()</span><br><span class="line">&#123;</span><br><span class="line">  /opt/onlineedu/dolphinscheduler/bin/dolphinscheduler-daemon.sh start standalone-server   </span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function node_stop()</span><br><span class="line">&#123;</span><br><span class="line">  /opt/onlineedu/dolphinscheduler/bin/dolphinscheduler-daemon.sh stop standalone-server</span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  sleep 10</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  </span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="superset"><a href="#superset" class="headerlink" title="superset"></a>superset</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">superset可视化启动</span></span><br><span class="line"></span><br><span class="line">superset_status()&#123;</span><br><span class="line">    result=`ps -ef | awk &#x27;/gunicorn/ &amp;&amp; !/awk/&#123;print $2&#125;&#x27; | wc -l`</span><br><span class="line">    if [[ $result -eq 0 ]]; then</span><br><span class="line">        return 0</span><br><span class="line">    else</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">superset_start()&#123;</span><br><span class="line">        source ~/.bashrc</span><br><span class="line">        superset_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        if [[ $? -eq 0 ]]; then</span><br><span class="line">            conda activate superset ; gunicorn --workers 5 --timeout 120 --bind niit01:8787 --daemon &#x27;superset.app:create_app()&#x27;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;superset正在运行&quot;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">superset_stop()&#123;</span><br><span class="line">    superset_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    if [[ $? -eq 0 ]]; then</span><br><span class="line">        echo &quot;superset未在运行&quot;</span><br><span class="line">    else</span><br><span class="line">        ps -ef | awk &#x27;/gunicorn/ &amp;&amp; !/awk/&#123;print $2&#125;&#x27; | xargs kill -9</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">    start )</span><br><span class="line">        echo &quot;启动Superset&quot;</span><br><span class="line">        superset_start</span><br><span class="line">    ;;</span><br><span class="line">    stop )</span><br><span class="line">        echo &quot;停止Superset&quot;</span><br><span class="line">        superset_stop</span><br><span class="line">    ;;</span><br><span class="line">    restart )</span><br><span class="line">        echo &quot;重启Superset&quot;</span><br><span class="line">        superset_stop</span><br><span class="line">        superset_start</span><br><span class="line">    ;;</span><br><span class="line">    status )</span><br><span class="line">        superset_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        if [[ $? -eq 0 ]]; then</span><br><span class="line">            echo &quot;superset未在运行&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;superset正在运行&quot;</span><br><span class="line">        fi</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="集群一键启动"><a href="#集群一键启动" class="headerlink" title="集群一键启动"></a>集群一键启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有集群所有软件启动脚本</span></span><br><span class="line"></span><br><span class="line">function node_start()</span><br><span class="line">&#123;</span><br><span class="line">  /home/niit/bin/xCluster.sh start</span><br><span class="line">  sleep 15</span><br><span class="line">  /home/niit/bin/zk.sh start</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/kf.sh start</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/hv.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/mxw.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f1.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f2.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f3.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/dolphinscheduler-standalone.sh stop </span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/superset.sh start</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function node_stop()</span><br><span class="line">&#123;</span><br><span class="line">  /home/niit/bin/mxw.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f1.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f2.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/f3.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/kf.sh stop</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/kf.sh stop</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/hv.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/xCluster.sh stop</span><br><span class="line">  sleep 15</span><br><span class="line">  /home/niit/bin/zk.sh stop</span><br><span class="line">  sleep 10</span><br><span class="line">  /home/niit/bin/superset.sh stop</span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/dolphinscheduler-standalone.sh stop </span><br><span class="line">  sleep 5</span><br><span class="line">  /home/niit/bin/xRun.sh jps</span><br><span class="line">&#125;</span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">  node_stop</span><br><span class="line">  sleep 10</span><br><span class="line">  node_start</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  </span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="集群文件分发"><a href="#集群文件分发" class="headerlink" title="集群文件分发"></a>集群文件分发</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群分发文件脚本，普通用户权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 判断参数个数</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">    echo Not Enough Arguement!</span><br><span class="line">    echo Usage: xSync.sh path1 path2..</span><br><span class="line">    exit;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 遍历集群所有机器</span></span><br><span class="line">for host in niit01 niit02 niit03</span><br><span class="line">do</span><br><span class="line">echo ==================== $host ====================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3. 遍历所有目录，挨个发送</span></span><br><span class="line"></span><br><span class="line">    for file in $@</span><br><span class="line">    do</span><br><span class="line">        #4 判断文件是否存在</span><br><span class="line">        if [ -e $file ]</span><br><span class="line">        then</span><br><span class="line">            #5. 获取父目录</span><br><span class="line">            pdir=$(cd -P $(dirname $file); pwd)</span><br><span class="line"></span><br><span class="line">            #6. 获取当前文件的名称</span><br><span class="line">            fname=$(basename $file)</span><br><span class="line">            ssh $host &quot;mkdir -p $pdir&quot;</span><br><span class="line">            rsync -av $pdir/$fname $host:$pdir</span><br><span class="line">        else</span><br><span class="line">            echo $file does not exists!</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群分发文件脚本，root权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 判断参数个数</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">    echo Not Enough Arguement!</span><br><span class="line">    echo Usage: xSync.sh path1 path2 ...</span><br><span class="line">    exit;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 遍历集群所有机器</span></span><br><span class="line">for host in niit01 niit02 niit03</span><br><span class="line">do</span><br><span class="line">echo ==================== $host ====================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3. 遍历所有目录，挨个发送</span></span><br><span class="line"></span><br><span class="line">    for file in $@</span><br><span class="line">    do</span><br><span class="line">        #4 判断文件是否存在</span><br><span class="line">        if [ -e $file ]</span><br><span class="line">        then</span><br><span class="line">            #5. 获取父目录</span><br><span class="line">            pdir=$(cd -P $(dirname $file); pwd)</span><br><span class="line"></span><br><span class="line">            #6. 获取当前文件的名称</span><br><span class="line">            fname=$(basename $file)</span><br><span class="line">            sudo ssh $host &quot;mkdir -p $pdir&quot;</span><br><span class="line">            sudo rsync -av $pdir/$fname $host:$pdir</span><br><span class="line">        else</span><br><span class="line">            echo $file does not exists!</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="集群执行命令"><a href="#集群执行命令" class="headerlink" title="集群执行命令"></a>集群执行命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群执行命令脚本</span></span><br><span class="line"></span><br><span class="line">if (( $# == 0 ));then</span><br><span class="line">    echo &quot;Usage xRun.sh \&quot;&lt;COMMAND&gt;\&quot;&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line">for node in niit01 niit02 niit03</span><br><span class="line">do</span><br><span class="line">    echo &quot;======== $node ========&quot;</span><br><span class="line">    echo &quot;ssh $node $1&quot;</span><br><span class="line">    ssh $node &quot;source /etc/profile;$1&quot;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="集群同步时间"><a href="#集群同步时间" class="headerlink" title="集群同步时间"></a>集群同步时间</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群时间同步脚本，需要安装chrony到集群中</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查参数是否为空</span></span><br><span class="line">if [ -z &quot;$1&quot; ]; then</span><br><span class="line">        echo &quot;Usage:  `basename $0` yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用<span class="built_in">date</span>命令将时间字符串转换为日期和时间</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果转换失败，则说明时间字符串不合法</span></span><br><span class="line">if ! date -d &quot;$*&quot; &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">        echo &quot;Wrong argument for $*&quot;</span><br><span class="line">        echo &quot;Usage:  `basename $0` yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SYNC TIME START &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span><br><span class="line">sum=-1</span><br><span class="line"></span><br><span class="line">while [ $sum -ne 0 ]; do</span><br><span class="line">  echo set time for niit01 to $1 &#x27;&gt;&gt;&gt;&#x27;</span><br><span class="line">  ssh niit01 &quot;(sudo timedatectl set-ntp false &amp;&amp; sudo date -s \&quot;$*\&quot; &amp;&amp; sudo timedatectl set-ntp true)&quot;</span><br><span class="line">  ok1=$?</span><br><span class="line">  echo sync time from niie02 to niit01 &#x27;&gt;&gt;&gt;&#x27;</span><br><span class="line">  ssh niit02 &quot;(sudo timedatectl set-ntp false &amp;&amp; sudo timedatectl set-ntp true)&quot;</span><br><span class="line">  ok2=$?</span><br><span class="line">  echo sync time from niit03 to niit01 &#x27;&gt;&gt;&gt;&#x27;</span><br><span class="line">  ssh niit03 &quot;(sudo timedatectl set-ntp false &amp;&amp; sudo timedatectl set-ntp true)&quot;</span><br><span class="line">  ok3=$?</span><br><span class="line">  sum=`expr $ok1 + $ok2 + $ok3`</span><br><span class="line"></span><br><span class="line">  if [ $sum -eq 0 ]; then</span><br><span class="line">    echo &quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; SYNC TIME END &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span><br><span class="line">    sleep 5</span><br><span class="line">    xRun.sh date</span><br><span class="line">  else</span><br><span class="line">    echo &quot;sync time failed, will try 10 senconds later&quot;</span><br><span class="line">    sleep 10</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云函数调用request请求</title>
      <link href="/archives/6d169344.html"/>
      <url>/archives/6d169344.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="云函数调用request请求"><a href="#云函数调用request请求" class="headerlink" title="云函数调用request请求"></a>云函数调用request请求</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>上一篇<a href="https://huaiyuechusan.github.io/archives/b5700173.html">微信小程序定时订阅消息问题</a>文章里，选择了在本地使用setInterval()方法定时更新天气信息，但是要求用户打开小程序才能定时更新天气。做不到在发送消息之前查询当前的天气情况。所以出于这个问题，我选择了以下解决办法。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在云函数里定义一个定时查询天气的函数，用户的位置信息提前存储在数据库里，查询天气时直接从数据库里查询位置信息（因为每次获取用户位置会要求用户授权，比较影响体验，所有就把上传用户授权位置信息提前存储在数据库）。</p><p>这里使用到了如何在云函数里调用request请求，微信开发官网文档没有找到关于这个的讲解。所以在这里简单记录一下，希望能对大家开发用帮助。下面的代码为在<strong>云函数里调用request请求例子</strong></p><h3 id="GET请求例子"><a href="#GET请求例子" class="headerlink" title="GET请求例子"></a>GET请求例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用云函数的request</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用当前云环境</span></span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;)</span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//调用request</span></span><br><span class="line">    <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,        <span class="comment">//请求地址</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;      <span class="comment">//请求头</span></span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,   <span class="comment">//GET或POST请求</span></span><br><span class="line">      <span class="attr">json</span>: <span class="literal">true</span>,      <span class="comment">//返回的body结果为json格式,默认是false,如果你要解析返回的数据，选择ture</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error, response, body</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;HTTP - GET&quot;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(body)</span><br><span class="line">      <span class="keyword">if</span> (response.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; !error) &#123;</span><br><span class="line">        <span class="comment">//发送请求成功,写你自己的逻辑</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POST请求例子"><a href="#POST请求例子" class="headerlink" title="POST请求例子"></a>POST请求例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用云函数的request</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用当前云环境</span></span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;)</span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//调用request</span></span><br><span class="line">    <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,        <span class="comment">//请求地址</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;      <span class="comment">//请求头</span></span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,   <span class="comment">//GET或POST请求</span></span><br><span class="line">      <span class="attr">json</span>: <span class="literal">true</span>,      <span class="comment">//返回的body结果为json格式</span></span><br><span class="line">      <span class="attr">body</span>: <span class="string">&quot;&quot;</span>,        <span class="comment">//POST请求，要加上请求体</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error, response, body</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;HTTP - POST&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(body)</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; !error) &#123;</span><br><span class="line">            <span class="comment">//发送请求成功,写你自己的逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时查询天气代码"><a href="#定时查询天气代码" class="headerlink" title="定时查询天气代码"></a>定时查询天气代码</h3><p>index.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用云函数的request</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;) <span class="comment">// 使用当前云环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = cloud.<span class="title function_">database</span>()</span><br><span class="line"><span class="keyword">const</span> tableName = <span class="string">&#x27;userInfo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从云开发数据库中查询等待更新天气的用户列表</span></span><br><span class="line">        <span class="keyword">const</span> weather = <span class="keyword">await</span> db</span><br><span class="line">            .<span class="title function_">collection</span>(tableName)</span><br><span class="line">            .<span class="title function_">get</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;location:&quot;</span>, weather.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> msgData <span class="keyword">of</span> weather.<span class="property">data</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> location = msgData.<span class="property">location</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;location:&quot;</span>, location)</span><br><span class="line">                <span class="comment">//调用天气API查询天气</span></span><br><span class="line">                <span class="title function_">request</span>(&#123;</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">&#x27;https://jisutqybmf.market.alicloudapi.com/weather/query&#x27;</span>+ <span class="string">&quot;?location=&quot;</span>+ location,</span><br><span class="line">                    <span class="attr">headers</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;APPCODE 你自己的APPCODE&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">                    <span class="attr">json</span>: <span class="literal">true</span>,  </span><br><span class="line">                &#125;,<span class="keyword">function</span> (<span class="params">error,response,body</span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;HTTP - GET&quot;</span>)</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">info</span>(body)</span><br><span class="line">                        <span class="keyword">if</span> (response.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; !error &amp;&amp; body.<span class="property">status</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">var</span> result = body.<span class="property">result</span>;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">info</span>(result)</span><br><span class="line">                            <span class="keyword">var</span> weatherMessage = <span class="string">&quot;当前天气&quot;</span> + result.<span class="property">weather</span> + <span class="string">&quot;气温&quot;</span> + result.<span class="property">temp</span> + <span class="string">&quot;℃&quot;</span> + <span class="string">&quot;详情点击查看&quot;</span></span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;天气为：&quot;</span>, weatherMessage)</span><br><span class="line">                            <span class="comment">//将天气信息添加数据库</span></span><br><span class="line">                            db.<span class="title function_">collection</span>(tableName)</span><br><span class="line">                                .<span class="title function_">where</span>(&#123;</span><br><span class="line">                                    <span class="attr">openid</span>: msgData.<span class="property">openid</span></span><br><span class="line">                                &#125;)</span><br><span class="line">                                .<span class="title function_">update</span>(&#123;</span><br><span class="line">                                    <span class="attr">data</span>: &#123;</span><br><span class="line">                                        <span class="attr">weatherMessage</span>: weatherMessage,</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;)</span><br><span class="line">                                .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时添加天气信息到数据库成功&quot;</span>, res);</span><br><span class="line">                                    <span class="title function_">resolve</span>(body)</span><br><span class="line">                                &#125;)</span><br><span class="line">                                .<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时添加天气信息到数据库失败&quot;</span>, res);</span><br><span class="line">                                    <span class="title function_">reject</span>()</span><br><span class="line">                                &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>config.json文件里边定义触发器（具体用法参考我的上一篇文章<a href="https://huaiyuechusan.github.io/archives/b5700173.html">微信小程序定时订阅消息问题</a>或<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/triggers.html">官方文档</a>）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;openapi&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;triggers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myTimer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;timer&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0 55 7 * * * *&quot;</span>  <span class="comment">//每天早起7点55执行</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>参考文章</p><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/000cc8398b012864f398db33556413">云开发http请求的两种写法 | 微信开放社区 (qq.com)</a></p><p><a href="https://www.cnblogs.com/Ocean123123/p/12737655.html">request-promise post请求微信小程序云函数调用http - Ocean123123 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习技术 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序定时订阅消息问题</title>
      <link href="/archives/b5700173.html"/>
      <url>/archives/b5700173.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="微信小程序定时订阅消息问题"><a href="#微信小程序定时订阅消息问题" class="headerlink" title="微信小程序定时订阅消息问题"></a>微信小程序定时订阅消息问题</h1><h2 id="订阅消息一次授权多次接收"><a href="#订阅消息一次授权多次接收" class="headerlink" title="订阅消息一次授权多次接收"></a>订阅消息一次授权多次接收</h2><p><strong>个人开发只能订阅一次性消息，一次订阅授权只能发送一次信息，如何解决？</strong></p><h3 id="明确几个概念"><a href="#明确几个概念" class="headerlink" title="明确几个概念"></a>明确几个概念</h3><ol><li>订阅授权次数跟发送消息次数的关系<ul><li>用户授权订阅一次，才能发送一次消息。发送一次消息，消耗掉一次授权允许次数。</li><li>授权次数可以累加。用户勾选总是保持以上选择，下次订阅消息不会再弹窗。</li></ul></li><li>授权操作必须用户点击才能授权。即使点击总保持以上选择，还是需要用户去点击才能授权。所以函数调用授权操作或页面初始化加载授权操作都是不行的，必须由用户点击才能授权。</li></ol><h3 id="思考想法"><a href="#思考想法" class="headerlink" title="思考想法"></a>思考想法</h3><ol><li>每个订阅api一次最多授权3条模板，选取三个相近模板，在授权操作时同时授权三个模板。</li><li>点击率频繁的按钮或者可能点击的地方绑定授权操作，空白地方大面积透明按钮绑定授权操作。（此方案建立在用户第一次授权时点击了总保持以上选择，否则频繁弹窗影响用户体验）</li><li>设置每日签到或者消息订阅提示按钮，在按钮的处绑定授权。</li></ol><h3 id="实际解决"><a href="#实际解决" class="headerlink" title="实际解决"></a>实际解决</h3><p>由于我的项目单纯采用云函数和云数据库开发，没有后端。所以以下解决方案针对云开发。</p><ol><li><p>一号方案确定是相近的模板不容易找到，最多只能订阅三次，所以没有采用。</p></li><li><p>二号方案：点击跳转事件绑定授权（用户第一次授权完选择总保持以上选择后，以后授权用户是无感的）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;view_3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/run/run&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;shouquan&quot;</span>&gt;</span>  <span class="comment">&lt;!--绑定授权事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;item-image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/跑步.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;image-jiantou&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/duo.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>三号方案：进入小程序首页加载订阅消息弹窗，引导用户授权</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onShowModal</span>(<span class="params"></span>) &#123;</span><br><span class="line">       wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">           <span class="attr">title</span>: <span class="string">&#x27;订阅消息确认&#x27;</span>,</span><br><span class="line">           <span class="attr">content</span>: <span class="string">&#x27;避免错过重要信息，点击确认按钮进行订阅消息(务必勾选总保持以上选择)&#x27;</span>,</span><br><span class="line">           <span class="attr">cancelText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">           <span class="attr">cancelColor</span>: <span class="string">&quot;#00f&quot;</span>,</span><br><span class="line">           <span class="attr">confirmText</span>: <span class="string">&quot;确认&quot;</span>,</span><br><span class="line">           <span class="attr">confirmColor</span>: <span class="string">&quot;#f00&quot;</span>,</span><br><span class="line">           <span class="attr">complete</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (res.<span class="property">cancel</span>) &#123;</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="title function_">onShowToast</span>();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test1:&quot;</span>)</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="title function_">shouquan</span>(); <span class="comment">//调用订阅授权</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310292352365.png" alt="image-20231029225841283"></p><p>参考文章：</p><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/000686f1808000a566fcccefb56813">关于一次性订阅消息requestSubscribeMessage的讨论 | 微信开放社区 (qq.com)</a></p><p><a href="https://blog.csdn.net/weixin_45695727/article/details/128132747">小程序 订阅消息 一次授权多次接收_小程序 一次性订阅消息 多次推送-CSDN博客</a></p></li></ol><h2 id="定时发送动态的订阅消息"><a href="#定时发送动态的订阅消息" class="headerlink" title="定时发送动态的订阅消息"></a>定时发送动态的订阅消息</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>想动态的获取天气信息，然后定时发送给用户。但是采用云函数开发，云函数不能调取本地的缓存数据，无法使用本地的setTimeout(延迟多少时间执行一次)和setInterval(每隔一定时间执行一次)方法。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p>首先使用云函数的定时触发器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// triggers 字段是触发器数组，目前仅支持一个触发器，即数组只能填写一个，不可添加多个</span></span><br><span class="line">  <span class="string">&quot;triggers&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// name: 触发器的名字，规则见下方说明</span></span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;myTrigger&quot;</span>,</span><br><span class="line">      <span class="comment">// type: 触发器类型，目前仅支持 timer (即 定时触发器)</span></span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;timer&quot;</span>,</span><br><span class="line">      <span class="comment">// config: 触发器配置，在定时触发器下，config 格式为 cron 表达式，规则见下方说明</span></span><br><span class="line">      <span class="string">&quot;config&quot;</span>: <span class="string">&quot;0 0 2 1 * * *&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310292352367.png" alt="image-20231029232521079"><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310292352368.png" alt="image-20231029232552257"></p><p>更多用法详见官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/triggers.html">开发指引 / 基础能力 / 云函数 / 定时触发器 (qq.com)</a></p></li><li><p>但是云函数需要的天气信息参数是存在本地的（由于查询天气需要经纬度信息，云开发似乎没有类似wx.getLocation的方法，所以只好查询天气方法写在了本地）。解决办法是在本地定时执行查询天气信息的函数然后更新到数据库里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取用户经纬度</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserLocation</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// var that = this;</span></span><br><span class="line">  wx.<span class="title function_">getLocation</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;wgs84&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">      <span class="title function_">queryWeather</span>(res);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询天气信息</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryWeather</span>(<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="comment">// var that = this;</span></span><br><span class="line">  wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://jisuqgtq.market.alicloudapi.com/weather/query&#x27;</span>, <span class="comment">//使用的是阿里提供的天气API接口</span></span><br><span class="line">    <span class="attr">header</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;APPCODE 自己的APPCODE&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;location&#x27;</span>: res.<span class="property">latitude</span> + <span class="string">&quot;,&quot;</span> + res.<span class="property">longitude</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">resRequest</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;HTTP - GET&quot;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(resRequest)</span><br><span class="line">      <span class="keyword">if</span> (resRequest.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; resRequest.<span class="property">data</span>.<span class="property">status</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = resRequest.<span class="property">data</span>.<span class="property">result</span>;</span><br><span class="line">        wx.<span class="title function_">setStorageSync</span>(<span class="string">&quot;weather&quot;</span>, result);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(result)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将天气信息添加入数据库</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addWeather</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//以用户openid为关键词，将查询的数据插入对应的天气信息</span></span><br><span class="line">  wx.<span class="property">cloud</span></span><br><span class="line">    .<span class="title function_">callFunction</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;getopenid&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> openid = res.<span class="property">result</span>.<span class="property">openid</span>;</span><br><span class="line">      <span class="title function_">getUserLocation</span>();</span><br><span class="line">      <span class="keyword">var</span> weather = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;weather&#x27;</span>)</span><br><span class="line">      <span class="comment">//阿里的天气信息API包含的信息很多，这里由于订阅消息的模板有字数限制，thing参数只能在20字符以内</span></span><br><span class="line">      <span class="keyword">let</span> weatherMessage = <span class="string">&quot;天气&quot;</span> + weather.<span class="property">weather</span> + <span class="string">&quot;当前气温&quot;</span> + weather.<span class="property">temp</span> + <span class="string">&quot;℃&quot;</span> + <span class="string">&quot;详情点击查看&quot;</span></span><br><span class="line">      <span class="comment">//将天气信息添加数据库</span></span><br><span class="line">      wx.<span class="property">cloud</span></span><br><span class="line">        .<span class="title function_">database</span>()</span><br><span class="line">        .<span class="title function_">collection</span>(<span class="string">&quot;userInfo&quot;</span>)</span><br><span class="line">        .<span class="title function_">where</span>(&#123;</span><br><span class="line">          <span class="attr">openid</span>: openid</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">update</span>(&#123;</span><br><span class="line">          <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">weatherMessage</span>: weatherMessage,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;添加天气信息成功&quot;</span>, res);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;添加天气信息失败&quot;</span>, res);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取openid失败&quot;</span>, res);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地定时任务用的是setInterval()每隔一段时间执行任务，将查询的天气结果存储在数据库里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">startInter</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">  that.<span class="property">data</span>.<span class="property">inter</span> = <span class="built_in">setInterval</span>(</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// TODO 你需要无限循环执行的任务</span></span><br><span class="line">      <span class="title function_">addWeather</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setInterval 每过一个小时执行一次天气信息添加入数据库任务&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">3600000</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>最后是发送消息的云函数部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换成消息模版所需要的格式，date 年/月/日 时:分:秒</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeStampToTime</span>(<span class="params">date</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">formatNumber</span> = n =&gt; &#123;</span><br><span class="line">      n = n.<span class="title function_">toString</span>()</span><br><span class="line">      <span class="keyword">return</span> n[<span class="number">1</span>] ? n : <span class="string">`0<span class="subst">$&#123;n&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> year = date.<span class="title function_">getFullYear</span>()</span><br><span class="line">    <span class="keyword">const</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span></span><br><span class="line">    <span class="keyword">const</span> day = date.<span class="title function_">getDate</span>()</span><br><span class="line">    <span class="keyword">const</span> hour = date.<span class="title function_">getHours</span>()</span><br><span class="line">    <span class="keyword">const</span> minute = date.<span class="title function_">getMinutes</span>()</span><br><span class="line">    <span class="keyword">const</span> second = date.<span class="title function_">getSeconds</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;[year, month, day].map(formatNumber).join(<span class="string">&#x27;/&#x27;</span>)&#125;</span> <span class="subst">$&#123;[hour, minute, second].map(formatNumber).join(<span class="string">&#x27;:&#x27;</span>)&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;) <span class="comment">// 使用当前云环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = cloud.<span class="title function_">database</span>()</span><br><span class="line"><span class="keyword">const</span> tableName = <span class="string">&#x27;userInfo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从云开发数据库中查询等待发送的消息用户列表</span></span><br><span class="line">        <span class="keyword">const</span> msgArr = <span class="keyword">await</span> db</span><br><span class="line">            .<span class="title function_">collection</span>(tableName)</span><br><span class="line">            .<span class="title function_">get</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;msgArr:&quot;</span>, msgArr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> msgData <span class="keyword">of</span> msgArr.<span class="property">data</span>) &#123;</span><br><span class="line">            <span class="comment">// 发送订阅消息</span></span><br><span class="line">            <span class="keyword">await</span> cloud.<span class="property">openapi</span>.<span class="property">subscribeMessage</span>.<span class="title function_">send</span>(&#123;</span><br><span class="line">                <span class="attr">touser</span>: msgData.<span class="property">openid</span>, <span class="comment">// 要发送用户的openid</span></span><br><span class="line">                <span class="attr">page</span>: <span class="string">&#x27;pages/index/index&#x27;</span>, <span class="comment">// 用户通过消息通知点击进入小程序的页面</span></span><br><span class="line">                <span class="attr">lang</span>: <span class="string">&#x27;zh_CN&#x27;</span>,</span><br><span class="line">                <span class="comment">// 订阅消息模板ID</span></span><br><span class="line">                <span class="attr">templateId</span>: <span class="string">&#x27;你的模板id&#x27;</span>,</span><br><span class="line">                <span class="comment">// 跳转小程序类型：developer为开发版；trial为体验版；formal为正式版；默认为正式版</span></span><br><span class="line">                <span class="comment">// 正式版删除此行</span></span><br><span class="line">                <span class="attr">miniprogramState</span>: <span class="string">&#x27;developer&#x27;</span>,</span><br><span class="line">                <span class="comment">// 要发送的数据，要和模板一致</span></span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">thing1</span>: &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">thing8</span>: &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">date3</span>: &#123; <span class="comment">//注意date参数的格式问题 必须是2023年10月1日，或：2023年10月1日 15:01</span></span><br><span class="line">                        <span class="attr">value</span>: <span class="title function_">timeStampToTime</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">thing2</span>: &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">thing7</span>: &#123;</span><br><span class="line">                        <span class="attr">value</span>: msgData.<span class="property">weatherMessage</span>  <span class="comment">//发送的天气信息</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订阅消息模板参数限制<a href="https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/mp-message-management/subscribe-message/sendMessage.html">官方文档：消息相关 / 订阅消息 / 发送订阅消息 (qq.com)</a></p><p><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310292352369.png" alt="image-20231029234642543"></p><p>参考文章</p><p><a href="https://blog.csdn.net/qq_45092075/article/details/128362426">微信小程序云开发定时推送订阅消息_微信小程序定时提醒功能-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/541427647">微信小程序开发：云函数定时推送消息 - 知乎 (zhihu.com)</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> bug解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研经验贴准备篇</title>
      <link href="/archives/2dbbb10f.html"/>
      <url>/archives/2dbbb10f.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="保研经验贴准备篇"><a href="#保研经验贴准备篇" class="headerlink" title="保研经验贴准备篇"></a>保研经验贴准备篇</h1><h2 id="经验分享"><a href="#经验分享" class="headerlink" title="经验分享"></a>经验分享</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>保研是一场持久战，也是一场信息战。它需要你大一到大三持续的付出才能收获。下面我介绍一下保研需要在大学三年需要准备的工作。</p><h4 id="明确学校的保研政策"><a href="#明确学校的保研政策" class="headerlink" title="明确学校的保研政策"></a>明确学校的保研政策</h4><p>要了解本专业的保研名额比例（大概在6%-7%左右），加分政策（见下图）。这些信息可以跟学长学姐了解，也可以去咨询辅导员，教务老师。关注学院教务，每年8月份左右会发今年最新的研究生推免报名和相关政策。</p><p>​                                <img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310261625220.png" alt="image-20231025173942212">    </p><h4 id="注重绩点，科研，竞赛"><a href="#注重绩点，科研，竞赛" class="headerlink" title="注重绩点，科研，竞赛"></a>注重绩点，科研，竞赛</h4><ol><li><p>注重期末考试，尤其是学分很多的学科，比如高数，专业课等。因为平均绩点是按照学分加权的，学分越多的学科，占的比重越大。所以在期末复习的时候学分多的课要多花一些经历。复习资料主要是老师发的复习总结资料或者往年题库，往年的期末卷子等。也可以去B站上找对应的课程视频。</p></li><li><p>最好大一大二就加入老师实验室，从事一些科研工作，为将来发表论文做准备。加入实验室也可以拓展自己的人际关系，结识一些志同道合的同学，一起参加比赛。保研面试的时候老师还是比较看重你的科研经历，如果能够发表论文更好。</p></li><li><p>多参加竞赛，可以参加的国家级学科竞赛项目以教育部高等教育教学评估中心最新发布的《全国高等学校本科教学基本状态数据库学数据填报指南》所界定的范围为准。一般竞赛获得省三以上才可以加分。国际级比赛赛前经学校批准参加的，其获奖加分在国家级相应等级分值加 0.05。具体政策还是要关注当年的加分政策文件，下图是往届的加分政策。</p><p><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310261625124.png" alt="image-20231025180247267"></p></li><li><p>注重期末项目。如果你的科研竞赛经历不多的话，面试的时候也可以讲讲自己做过哪些项目，在项目负责哪些职责，遇到过什么困难，你是怎样解决的。这些也是你的加分项，让老师对你更感兴趣。</p></li></ol><h4 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a>名词介绍</h4><p>当你在阅读一些保研经验贴的时候往往会出现一些英文缩写，让你摸不着头脑。所以下面介绍一些保研的常用名词。</p><ol><li><p><strong>名词：</strong>rk</p><p><strong>解释：</strong>rank,一般指自己的加权或绩点排名</p></li><li><p><strong>名词：</strong>title</p><p><strong>解释：</strong>指学校的知名度</p></li><li><p><strong>名词：</strong>oq</p><p><strong>解释：</strong>over qualified,指学生报名比自身本科院校或者能力水平低很多的院校</p></li><li><p><strong>名词：</strong>bar</p><p><strong>解释：</strong>门槛</p></li><li><p><strong>名词：</strong>wl</p><p><strong>解释：</strong>waiting list,指夏令营优营或者最后录取的候补名单</p></li><li><p><strong>名词：</strong>强弱com</p><p><strong>解释：</strong>强committee指教务老师/委员会管的管多，导师没有很大话语权；弱committee指导师在夏令营入营录取中有很大话语权</p></li><li><p><strong>名词：</strong>套磁</p><p><strong>解释：</strong>通过邮件（或者电话或者当面）提前与申请院系的导师进行联系，将自己的背景及学习研究计划等向对方做详细介绍和说明，以便提升自己被录取机率。</p></li><li><p><strong>名词：</strong>夏令营</p><p><strong>解释：</strong>保研夏令营是近几年各高校（特别是著名高校）抢夺优质生源的一种方式。利用暑假中一周左右的时间，与学生较长时间的接触，参观实验室，介绍各导师研究方向，学术交流会等形式，通过多种方式（例如笔试、面试、实验测试等）来考核学生，以确定是否发放拟录取通知书。</p></li><li><p><strong>名词：</strong>优营</p><p><strong>解释：</strong>优秀夏令营营员</p></li><li><p><strong>名词：</strong>九推</p><p><strong>解释：</strong>“九推”全称“九月正式推免”，即在每年的九月份，符合条件（即必须拿到本校推免名额）的各位同学可在“国家推免服务系统”（今年开放时间是9月29日-10月20日）进行推免的网络申请。</p></li><li><p><strong>名词：</strong>捡漏</p><p><strong>解释：</strong>意想不到的情况下获得意外的offer，一般指院校开系统后招不够人进行补录，保研人在这个时候获得高价值的off</p></li></ol><h3 id="预推免经历"><a href="#预推免经历" class="headerlink" title="预推免经历"></a>预推免经历</h3><p>因为之前不知道自己是否能获得推免资格，所以没有去参加夏令营。所以下面只有预推免的面试经验分享。在这里重点强调一下，有的学校夏令营和预推免报名即使你不确定能获取推免资格，你也可以参加。很多学校甚至暑假都开始预推免报名工作了，等到学校正式发布推免资格时候，他们的预推免报名都已经结束了。所以一定一定不要等到那时候才去报名，无论你确不确定能获得推免资格，都要提前找你想去的学校官网通知，去尝试参加他们的夏令营和预推免面试。反正试一试也不会吃亏（有的学校夏令营是报销往返路费的），甚至还可以为你将来面试其他学校积累经验。</p><h4 id="如何找院校"><a href="#如何找院校" class="headerlink" title="如何找院校"></a>如何找院校</h4><p>在学校的研究生网站或者对应学院网站找接受预推免信息，找导师信息（一定要越早越好，好的学校开放预推免报名很早，如果你不确定可以被推免也可以参加的。不要等本校的保研结果出来了再去找，要不然有的学校可以已经结束预推免报名）。还可以跟上届学长学姐咨询，一般他们之前保研去的学校都是对你们学校的人比较友好的学校。</p><p>填写学校预推免报名信息时的一些小建议</p><ul><li>填预报名的时候可以先把各种信息准备好，放到一个文件夹或者文档内。一开始不知道都需要准备什么的话就先填一个学校的预推免报名，然后大概就知道需要什么资料了。然后报名的学校账号密码要记住，一些常用的个人信息（比如科研经验，奖惩情况，个人经历，家庭信息）可以保存到一个word文档里，奖项证书成绩单电子版可以放一个文件夹里。每个学校一个文件夹整理别弄混，简历的话根据每个学校想跟的老师对于方向可以稍微修改一下（不要一份简历投所有学校，要根据每个学校的不同老师方向稍作修改），让自己简历更贴合导师的方向。</li></ul><h4 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h4><p>保研边缘、没参加过夏令营，不要怕，要调整好心态，疯狂海投简历（这里建议即使处于保研边缘，暑假的夏令营也要去，要不然预推免一个offer没有会很慌）。</p><p>要调整好心态，保研名额刚出来找学校报名的时候心态很爆炸，前几天填了好几个学校一个都没有回复，后来就想放弃了。但是有一天晚上填的一个南京理工大学，第二天就通知面试了，意外之喜。然后西北工业也打电话让去面试。所以一定要保持好心态，不要放弃，所有能投学校的都投。</p><h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><ul><li>如果推免排名不是很靠前，好学校的学硕比专硕更难进，专硕名额相对来说多一些。如果看重学校的名气也尝试一下选985的专硕或者交叉学科（比如天津大学医学部的计算机，东北大学的医学与生物信息工程学院的电子信息）。</li><li>导师title很多的，很火的实验室也比较难进。这些老师和实验室更看重你的个人排名和科研竞赛经历。</li><li>选导师，选择副教授，讲师，没有title或者title少的的更容易一些。（主要看你的个人情况，如果自身实力很强还是建议找比较好的实验室和老师）</li><li>一定要联系老师，一些弱com的学校老师话语权很大的。</li><li>一些学校需要政审，申请表之类的需要自己学院签字要提前准备好，不要等周六周日下班错过了时间。</li><li>如果线下面试的的话合理安排时间，赶飞机或者高铁提前打出富裕时间，不要错点。有时候学校可能鸽你，也有可能有更好的学校打电话让你面试，然后你不得不改签。酒店的话最好找离学校近的，方便去学校。</li><li>如果想鸽老师，一定要提前打招呼，不要等填报志愿了再说，会让老师对你们学校印象变差。学术圈也不大，万一要鸽的老师还认识你要去的学校的老师，多尴尬。</li></ul><h4 id="推免正式报名"><a href="#推免正式报名" class="headerlink" title="推免正式报名"></a>推免正式报名</h4><ol><li>一定要在系统填志愿信息的时候（通常是凌晨十二点系统开始填写志愿）第一时间填写志愿，不要等到第二天起来再填，有些学校会有填写志愿截止时间。一定要按照已经给offer的学校要求填写志愿。</li><li>一共可以填写三个志愿。网上有的经验贴上说可以先填两个志愿，留一个捡漏。你也可以三个都填上，看个人意愿。</li><li>如果你是预推免的时候发offer的学校，收到复试通知后，一会儿就可以收到预录取的通知。到时候一定要时刻关注研招网，有的院校有确认时间限制，必须在规定的时间内选择接受还是拒绝。</li><li>可以接受多个复试通知，但是预录取通知只能接受一个。</li><li>填志愿之前一定要跟发offer的学校确定是不是铁offer，是不是报了这个学校一定会录取，还是学校会超发offer，先到先得。注意一定要确认好，万一被学校鸽，好提前做准备。</li><li>有的学校可能会因为系统的原因，在研招网上发通知比较慢，可以联系导师或者学校招生办，去确认一下，避免着急。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>行文至此，感慨颇多。从最开始得到成功保研的喜悦，到预报名的学校复试杳无音讯心情萎靡，最后峰回路转成功接受到面试通知，再到面试通过导师确定offer的激动无比。参见线下面试辗转西安天津北京，看见了大城市的灯火斑斓，也见识了不同学校的不同风景。几天之内经历过心态起起落落，很庆幸自己坚持了下来，见到了最后的黎明时刻。所以无论什么时候一定要相信自己，抓住机会，下一个成功的人为什么不能是自己呢。与君同勉，祝大家上岸梦校！</p><p>下面是两个我比较推荐的咱们学校的本科课程学习和保研经验分享的网站，希望对同学们有用。</p><p><a href="https://hainanu-application.github.io/#/">海南大学飞跃手册 (hainanu-application.github.io)</a></p><p><a href="https://www.bj-yan.top/hainanu-course-comments/">海南大学课程攻略 (bj-yan.top)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研经验贴</title>
      <link href="/archives/95c4b274.html"/>
      <url>/archives/95c4b274.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer" /></p><h1 id="保研经验贴"><a href="#保研经验贴" class="headerlink" title="保研经验贴"></a>保研经验贴</h1><h2 id="个人背景"><a href="#个人背景" class="headerlink" title="个人背景"></a>个人背景</h2><p><img src="https://gitee.com/sunmiao123/picture/raw/master/Typora/202310241537478.png" alt="image-20231019174140290"></p><p>本科学校：211</p><p>专业排名：15/192</p><p>竞赛：天梯赛省三</p><p>科研：无论文，只有一段跟导师学习高光谱图像遥感的经历</p><p>项目：一个学校期末项目和一个APP的开发经历</p><p>英语：六级428，四级514</p><p>最终去向：南京理工大学</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文适合人群：保研排名不是很靠前,没有参加过暑期夏令营，竞赛&amp;论文很少或者无的同学进行的经验介绍（个人经验，大佬勿喷）。首先会讲一些保研基础的常识（很了解的同学可以跳过）。最后在文末我会附上当时参考过的一些保研资料。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a>名词介绍</h3><ol><li><p><strong>名词：</strong>rk</p><p><strong>解释：</strong>rank,一般指自己的加权或绩点排名</p></li><li><p><strong>名词：</strong>title</p><p><strong>解释：</strong>指学校的知名度</p></li><li><p><strong>名词：</strong>oq</p><p><strong>解释：</strong>over qualified,指学生报名比自身本科院校或者能力水平低很多的院校</p></li><li><p><strong>名词：</strong>bar</p><p><strong>解释：</strong>门槛</p></li><li><p><strong>名词：</strong>wl</p><p><strong>解释：</strong>waiting list,指夏令营优营或者最后录取的候补名单</p></li><li><p><strong>名词：</strong>强弱com</p><p><strong>解释：</strong>强committee指教务老师/委员会管的管多，导师没有很大话语权；弱committee指导师在夏令营入营录取中有很大话语权</p></li><li><p><strong>名词：</strong>套磁</p><p><strong>解释：</strong>通过邮件（或者电话或者当面）提前与申请院系的导师进行联系，将自己的背景及学习研究计划等向对方做详细介绍和说明，以便提升自己被录取机率。</p></li><li><p><strong>名词：</strong>夏令营</p><p><strong>解释：</strong>保研夏令营是近几年各高校（特别是著名高校）抢夺优质生源的一种方式。利用暑假中一周左右的时间，与学生较长时间的接触，参观实验室，介绍各导师研究方向，学术交流会等形式，通过多种方式（例如笔试、面试、实验测试等）来考核学生，以确定是否发放拟录取通知书。</p></li><li><p><strong>名词：</strong>优营</p><p><strong>解释：</strong>优秀夏令营营员</p></li><li><p><strong>名词：</strong>九推</p><p><strong>解释：</strong>“九推”全称“九月正式推免”，即在每年的九月份，符合条件（即必须拿到本校推免名额）的各位同学可在“国家推免服务系统”（今年开放时间是9月29日-10月20日）进行推免的网络申请。</p></li><li><p><strong>名词：</strong>捡漏</p><p><strong>解释：</strong>意想不到的情况下获得意外的offer，一般指院校开系统后招不够人进行补录，保研人在这个时候获得高价值的offer</p></li></ol><h3 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h3><p>保研边缘、没参加过夏令营，不要怕，调整好心态，疯狂海投简历（这里建议即使处于保研边缘，暑假的夏令营也要去，要不然预推免一个offer没有会很慌，我就保研边缘，当保研出来后，有的学校预推免都已经结束了）。</p><p>要调整好心态，保研名额刚出来找学校报名的时候心态很爆炸，前几天填了好几个学校一个都没有回复，后来就想放弃了。但是有一天晚上填的一个南京理工大学，第二天就通知面试了，意外之喜。然后西北工业也打电话让去面试。所以一定要保持好心态，不要放弃，所有能投学校的都投。</p><h3 id="找院校"><a href="#找院校" class="headerlink" title="找院校"></a>找院校</h3><p>在学校的研究生网站或者对应学院网站找接受预推免信息，找导师信息（一定要越早越好，好的学校开放预推免报名很早，如果你不确定是否可以推免也可以参加的。不要等本校的保研结果出来了再去找，要不然有的学校可以已经结束预推免报名，我就吃了这个亏）。还可以跟上届学长学姐咨询，一般他们之前保研去的学校都是对你们学校的人比较友好的学校。</p><p>填写报名的学校信息是的一些小建议</p><ul><li>填预报名的时候可以先把各种信息准备好，放到一个文件夹或者文档内。一开始不知道都需要准备啥的话就先填一个学校的预推免，然后大概就知道需要什么资料了。然后报名的学校账号密码要记住，一些常用的个人信息（比如科研经验，奖惩情况，个人经历，家庭信息）可以保存一个文件里，奖项证书成绩单电子版可以放一个文件夹里。每个学校一个文件夹整理别弄混，简历的话根据每个学校想跟的老师对于方向可以稍微修改一下（不要一份简历投所有学校，要根据每个学校的不同老师方向稍作修改），让自己简历更贴合导师的方向。</li></ul><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ul><li>如果推免排名不是很靠前，好学校的学硕比专属更难进，专硕名额多。如果看重学校的名气也尝试一下选985的专硕或者交叉学科（比如天津大学医学部的计算机，东北大学的医学与生物信息工程学院的电子信息）。</li><li>导师title很多的，很火的实验室也比较难进，如果你排名很低的话。</li><li>选导师，选择副教授，讲师，没有title或者title少的的更容易一些。（主要看你的个人情况，如果自身实力很强还是建议找比较好的实验室和老师）</li><li>一定要联系老师，一些弱com的学校老师话语权很大的。</li><li>一些学校需要政审，申请表之类的需要自己学院签字要提前准备好，不要等周六周日下班错过了。</li><li>如果线下面试的的话合理安排时间，赶飞机或者高铁提前打出富裕时间，不要错点。有时候学校可能鸽你（比如我报名了河北工业大学，他让报了名的都加复试通知群，然后过几天复试去，结果复试名单出来的没我，买好了票，赶紧改签了）。也有可能有更好的学校打电话让你面试，然后你不得不改签。酒店的话最好找离学校近的，方便去学校。</li><li>如果想鸽老师，一定要提前打招呼，不要等填报志愿了再说，会让老师对你们学校印象变差。学术圈也不大，万一要鸽的老师还认识你要去的学校的老师，多尴尬。</li></ul><h2 id="面试经历"><a href="#面试经历" class="headerlink" title="面试经历"></a>面试经历</h2><ol><li><p>南京理工大学（线上）</p><p>如果本科学校还不错，一般联系导师，老师同意了很好上岸。老师就问了一些基本问题，个人信息，排名，科研竞赛经历之类的。老师面完当时就说虽然你竞赛科研经历很少，但是大体上符合要求，差不多就是稳了的意思。</p></li><li><p>本校（线上）</p><p>本校相对更容易一些。就一个英文自我介绍，然后按PPT讲自己的信息。老师问了我一个然后看待模型融合创新这个方法，问我这种创新算是创新嘛（挺犀利的，现发论文的现状就是各种模型组合到其他模型上就变成了创新点，这种问题仁者见仁智者见智吧）</p></li><li><p>西北工业大学（线下）</p><p>学硕名额少，外校一般都是专硕，如果报的计算机学院，老师计科的名额不够可能推荐你去软件学院。（软件学院招的相对多一些，要求没有计科高）老师主要是针对简历提问，问的专业课比较多，问了我操作系统分页，数据结构最小生成树（幸好复习过408，要不然真寄了），数据挖掘的一些算法，分类和聚类有哪些算法，他们俩的最大区别是什么。会有思政问题，比如关于华为如何看，如何看待日本倾倒核废水。老师还提出我简历上的问题，简历内容过于简单，项目经历和竞赛证书写的过于简略，要详细些在这个项目比赛中做了哪些工作，有什么贡献等。英语面试的话先是让自我介绍然后回答一个问题，为什么选西北工业。</p></li><li><p>华北电力大学北京（线下）</p><p>老师问的项目和科研经历细节比较多，专业课内容也是简历上提到的，比如我的简历上有个卷积神经网络的内容，他就问你一些基本的深度学习内容（都比较基础）。还问了c和c＋＋区别（英文问了一遍，可能当时答的不好，又一个老师中文问了一遍），还有个老师问我还有没有其他的项目经历，我说有个电商分析的，然后老师就问了我项目中使用的kafka是什么（所以简历或者PPT上把能写的自己很了解的项目的要写全，里面的项目细节要都懂）。然后老师还问我一个为什么你的论文里选择用的3D-CNN，而不是其他模型，3D-CNN与其他卷积模型的区别。英语问题是先让我用英语讲一下刚才PPT上研究生计划部分，然后第二个问我c和c＋＋区别（只答上来一点）。</p></li></ol><h2 id="推免正式报名"><a href="#推免正式报名" class="headerlink" title="推免正式报名"></a>推免正式报名</h2><ol><li>一定要在系统填志愿信息的时候第一时间填写志愿，不要等到第二天起来再填，有些学校会有填写志愿截至时间。一定要按照已经给offer的学校要求填写志愿。</li><li>一共可以填写三个志愿。看有的经验贴上说可以先填两个志愿，留一个捡漏。你也可以三个都填上，看个人意愿吧。</li><li>如果你是预推免的时候发offer的学校，收到复试通知后，一会儿就可以收到预录取的通知。到时候一定要时刻关注研招网，有的院校有确认时间限制，必须在规定的时间内选择接受还是拒绝。</li><li>可以接受多个复试通知，但是预录取通知只能接受一个。</li><li>填志愿之前一定要跟发offer的学校确定是不是铁offer，是不是报了这个学校一定会录取，还是学校会超发offer，先到先得。注意一定要确认好，万一被学校鸽，好提前做准备。</li><li>有的学校可能会因为系统的原因，在研招网上发通知比较慢，可以联系导师或者学校招生办，去确认一下，避免着急。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>行文至此，感慨颇多。从最开始得到成功保研的喜悦，到预报名的学校复试杳无音讯心情萎靡，最后峰回路转成功接受到面试通知，再到面试通过导师确定offer的激动无比。参见线下面试辗转西安天津北京，看见了大城市的灯火斑斓，也见识了不同学校的不同风景。几天之内经历过心态起起落落，很庆幸自己坚持了下来，见到了最后的黎明时刻。所以无论什么时候一定要相信自己，抓住机会，下一个成功的人为什么不能是自己呢。与君同勉，祝大家上岸梦校！</p><p>下面我参考过的保研面试资料（联系导师邮件模板可以在小红书上搜索，有很多。这里没有罗列），大家也可以参考一下。如有关于保研问题咨询可以联系我 vx：13102618184</p><p><a href="https://mp.weixin.qq.com/s/KH6gdpeT4ES3SN0K01Yh9A">保研说 </a></p><p><a href="https://github.com/CS-BAOYAN">CS-BAOYAN (github.com)</a></p><p><a href="https://github.com/CS-BAOYAN/CS-BAOYAN-2023/tree/main/导师推荐">CS-BAOYAN-2023/导师推荐 (github.com)</a></p><p><a href="https://github.com/CS-BAOYAN/CSYuTuiMian2023">CS-BAOYAN/CSYuTuiMian2023 (github.com)</a></p><p><a href="https://mubu.com/doc/1OXFbFtfWtX#o-hAUJA9NMDR">准备预推免的问题 - 幕布 (mubu.com)</a></p><p><a href="https://mubu.com/doc/6DWNVmVSqdX">预推免面试问题 - 幕布 (mubu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/583527078">oq、rk、强com……不会这些黑话都不配保研了</a></p><p><a href="https://zhuanlan.zhihu.com/p/137624043">考研复试研究计划写作指南 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/weixin_40562999/article/details/80169128">一位数据挖掘成功人士给数据挖掘在读研究生的建议（转）-CSDN博客</a></p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/105183554">刷完 900 多道算法题的首次总结：LeetCode 应该怎么刷？-CSDN博客</a></p><p><a href="https://blog.csdn.net/lxh248866/article/details/121624655">数据挖掘近年来的研究方向、方法总结_为什么你对数据挖掘这个研究方向感兴趣?你对这个研究方向了解多少?-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
